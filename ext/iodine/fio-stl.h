/* *****************************************************************************
Copyright: Boaz Segev, 2019-2024
License: ISC / MIT (choose your license)

Feel free to copy, use and enjoy according to the license provided.
********************************************************************************

********************************************************************************


            THE fio-stl.h FILE IS AUTO-GENERATED, DO NOT EDIT

                    https://github.com/facil-io/cstl


***************************************************************************** */

/* *****************************************************************************

**Notes**:

- The functions defined using this file default to `static` or `static
  inline`.

  To create an externally visible API, define the `FIO_EXTERN`. Define the
  `FIO_EXTERN_COMPLETE` macro to include the API's implementation as well.

- Documentation can be found at https://github.com/facil-io/cstl where you will
  be able to post PRs or submit issues.

***************************************************************************** */
#ifndef H___FIO_CSTL_COMBINED___H
#define H___FIO_CSTL_COMBINED___H
#endif /* H___FIO_CSTL_COMBINED___H */
#ifndef FIO_INCLUDE_FILE
#define FIO_INCLUDE_FILE "fio-stl.h"
#endif
/* *****************************************************************************




                    Core Header - Stuff required by everything


Note:

The core header can't be well ordered due to cascading dependencies.
Please refer to the core documentation in the Markdown File.
***************************************************************************** */
#ifndef H___FIO_CORE___H
#define H___FIO_CORE___H

/** An empty macro, adding white space. Used to avoid function like macros. */
#define FIO_NOOP

/* *****************************************************************************
Version Macros

The facil.io C STL library follows [semantic versioning](https://semver.org) and
supports macros that will help detect and validate it's version.
***************************************************************************** */

/** MAJOR version: API/ABI breaking changes. */
#define FIO_VERSION_MAJOR 0
/** MINOR version: Deprecation, or significant features added. May break ABI. */
#define FIO_VERSION_MINOR 8
/** PATCH version: Bug fixes, minor features may be added. */
#define FIO_VERSION_PATCH 0
/** Build version: optional build info (string), i.e. "beta.02" */
#define FIO_VERSION_BUILD "alpha.10"

#ifdef FIO_VERSION_BUILD
/** Version as a String literal (MACRO). */
#define FIO_VERSION_STRING                                                     \
  FIO_MACRO2STR(FIO_VERSION_MAJOR)                                             \
  "." FIO_MACRO2STR(FIO_VERSION_MINOR) "." FIO_MACRO2STR(                      \
      FIO_VERSION_PATCH) "-" FIO_VERSION_BUILD
#else
/** Version as a String literal (MACRO). */
#define FIO_VERSION_STRING                                                     \
  FIO_MACRO2STR(FIO_VERSION_MAJOR)                                             \
  "." FIO_MACRO2STR(FIO_VERSION_MINOR) "." FIO_MACRO2STR(FIO_VERSION_PATCH)
#define FIO_VERSION_BUILD ""
#endif

/* *****************************************************************************
Settings - Behavioral defaults
***************************************************************************** */

#ifndef FIO_USE_THREAD_MUTEX
/** Selects between facio.io's spinlocks (false) and OS mutexes (true) */
#define FIO_USE_THREAD_MUTEX 0
#endif

#ifndef FIO_UNALIGNED_ACCESS
/** Allows facil.io to attempt unaligned memory access on *some* CPU systems. */
#define FIO_UNALIGNED_ACCESS 1
#endif

#ifndef FIO_LIMIT_INTRINSIC_BUFFER
/* limits register consumption on some pseudo-intrinsics, using more loops */
#define FIO_LIMIT_INTRINSIC_BUFFER 1
#endif

#ifndef FIO_MEMORY_INITIALIZE_ALLOCATIONS_DEFAULT
/* Memory allocations should be secure by default (facil.io allocators only) */
#define FIO_MEMORY_INITIALIZE_ALLOCATIONS_DEFAULT 1
#endif

#ifndef FIO_MEM_PAGE_SIZE_LOG
#define FIO_MEM_PAGE_SIZE_LOG 12 /* assumes 4096 bytes per page */
#endif

#if defined(FIO_NO_LOG) && defined(FIO_LEAK_COUNTER)
#error FIO_NO_LOG and FIO_LEAK_COUNTER are exclusive, as memory leaks print to log.
#endif

/* *****************************************************************************
C++ extern start
***************************************************************************** */
/* support C++ */
#ifdef __cplusplus
extern "C" {
/* C++ keyword was deprecated */
#ifndef register
#define register
#endif
/* C keyword - unavailable in C++ */
#ifndef restrict
#define restrict
#endif
/* C keyword - unavailable in C++ */
#ifndef _Bool
#define _Bool bool
#endif

#endif

/* *****************************************************************************
Compiler detection, GCC / CLang features and OS dependent included files
***************************************************************************** */
#ifndef _GNU_SOURCE
#define _GNU_SOURCE
#endif

#if !defined(__GNUC__) && !defined(__clang__) && !defined(GNUC_BYPASS)
#ifndef __attribute__
#define __attribute__(...)
#endif
#ifndef __has_include
#define __has_include(...) 0
#endif
#ifndef __has_builtin
#define __has_builtin(...) 0
#endif
#ifndef __has_attribute
#define __has_attribute(...) 0
#endif
#define GNUC_BYPASS 1
#elif !defined(__clang__) && !defined(__has_builtin)
/* E.g: GCC < 6.0 doesn't support __has_builtin */
#define __has_builtin(...) 0
#define GNUC_BYPASS        1
#endif

#ifndef __has_include
#define __has_include(...) 0
#define GNUC_BYPASS        1
#endif

/* *****************************************************************************
Compiler Helpers - Deprecation, Alignment, Inlining, Memory Barriers
***************************************************************************** */

#ifndef DEPRECATED
#if defined(__GNUC__) && (__GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5))
/* GCC < 4.5 doesn't support deprecation reason string */
#define DEPRECATED(reason) __attribute__((deprecated))
#else
#define DEPRECATED(reason) __attribute__((deprecated(reason)))
#endif
#endif

#if defined(__GNUC__) || defined(__clang__)
#define FIO_ALIGN(bytes) __attribute__((aligned(bytes)))
#elif defined(__INTEL_COMPILER) || defined(_MSC_VER)
#define FIO_ALIGN(bytes)
// #define FIO_ALIGN(bytes) __declspec(align(bytes))
#else
#define FIO_ALIGN(bytes)
#endif

#if _MSC_VER

#undef _CRT_SECURE_NO_WARNINGS
/** We define this because Microsoft's naming scheme isn't portable */
#define _CRT_SECURE_NO_WARNINGS 1

#define inline   __inline
#define __thread __declspec(thread)
#elif !defined(__clang__) && !defined(__GNUC__)
#define __thread _Thread_local
#endif

#if defined(__clang__) || defined(__GNUC__)
/** Clobber CPU registers and prevent compiler reordering optimizations. */
#define FIO_COMPILER_GUARD             __asm__ volatile("" ::: "memory")
#define FIO_COMPILER_GUARD_INSTRUCTION __asm__ volatile("" :::)
#elif defined(_MSC_VER)
#include <intrin.h>
/** Clobber CPU registers and prevent compiler reordering optimizations. */
#define FIO_COMPILER_GUARD             _ReadWriteBarrier()
#define FIO_COMPILER_GUARD_INSTRUCTION _WriteBarrier()
#pragma message("Warning: Windows deprecated it's low-level C memory barrier.")
#else
#warning Unknown OS / compiler, some macros are poorly defined and errors might occur.
#define FIO_COMPILER_GUARD             asm volatile("" ::: "memory")
#define FIO_COMPILER_GUARD_INSTRUCTION asm volatile("" :::)
#endif

/* *****************************************************************************
Address Sanitizer Detection
***************************************************************************** */

/* Address Sanitizer Detection */
#if defined(__SANITIZE_ADDRESS__)
#define FIO___ASAN_DETECTED 1
#elif defined(__has_feature)
#if __has_feature(address_sanitizer)
#define FIO___ASAN_DETECTED 1
#endif
#endif /* address_sanitizer */

#ifdef FIO___ASAN_DETECTED
#if defined(_MSC_VER)
#define FIO___ASAN_AVOID __declspec(no_sanitize_address)
#else
#define FIO___ASAN_AVOID                                                       \
  __attribute__((no_sanitize_address)) __attribute__((no_sanitize("address")))
#endif
#else
#define FIO___ASAN_AVOID
#endif

/* *****************************************************************************
Intrinsic Availability Flags
***************************************************************************** */
#if !defined(DEBUG) /* Allow Intrinsic / SIMD / Neon ? */
#if defined(__ARM_FEATURE_CRYPTO) &&                                           \
    (defined(__ARM_NEON) || defined(__ARM_NEON__)) &&                          \
    __has_include("arm_acle.h") && __has_include("arm_neon.h")
#include <arm_acle.h>
#include <arm_neon.h>
#define FIO___HAS_ARM_INTRIN 1
#elif defined(__x86_64) && __has_include("immintrin.h") /* x64 Intrinsics? */
#define FIO___HAS_X86_INTRIN 1
#include <immintrin.h>
#endif

#endif

/* *****************************************************************************
Aligned Memory Access Selectors
***************************************************************************** */

#ifndef FIO_UNALIGNED_MEMORY_ACCESS_ENABLED
#if FIO_UNALIGNED_ACCESS &&                                                    \
    (__amd64 || __amd64__ || __x86_64 || __x86_64__ || __i386 ||               \
     __aarch64__ || _M_IX86 || _M_X64 || _M_ARM64 || __ARM_FEATURE_UNALIGNED)
/** True when unaligned memory is allowed. */
#define FIO_UNALIGNED_MEMORY_ACCESS_ENABLED 1
#else
#define FIO_UNALIGNED_MEMORY_ACCESS_ENABLED 0
#endif
#endif /* FIO_UNALIGNED_MEMORY_ACCESS_ENABLED */

/* *****************************************************************************
OS Specific includes and Macros
***************************************************************************** */

#if defined(__unix__) || defined(__linux__) || defined(__APPLE__)
#define FIO_HAVE_UNIX_TOOLS 1
#define FIO_OS_POSIX        1
#define FIO___KILL_SELF()   kill(0, SIGINT)
#define fio_getpid          getpid

#elif defined(_WIN32) || defined(_WIN64) || defined(WIN32) ||                  \
    defined(__CYGWIN__) || defined(__MINGW32__) || defined(__BORLANDC__)
#define FIO_OS_WIN     1
#define POSIX_C_SOURCE 200809L
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#undef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS 1
#undef _CRT_NONSTDC_NO_WARNINGS
#define _CRT_NONSTDC_NO_WARNINGS 1
#ifndef UNICODE
#define UNICODE 1
#endif
#include <windows.h>
#endif /* WIN32_LEAN_AND_MEAN */

#include <fcntl.h>
#include <io.h>
#include <processthreadsapi.h>
#include <sys/types.h>

#include <sys/stat.h>
#include <sysinfoapi.h>
#include <time.h>
#include <winsock2.h> /* struct timeval is here... why? Microsoft. */

#define fio_getpid _getpid

#define FIO___KILL_SELF() TerminateProcess(GetCurrentProcess(), 1)

#if defined(__MINGW32__)
/* Mingw supports */
#define FIO_HAVE_UNIX_TOOLS    2
#define __USE_MINGW_ANSI_STDIO 1
#define FIO___PRINTF_STYLE(string_index, check_index)                          \
  __attribute__((format(__MINGW_PRINTF_FORMAT, string_index, check_index)))
#elif defined(__CYGWIN__)
/* TODO: cygwin support */
#define FIO_HAVE_UNIX_TOOLS    3
#define __USE_MINGW_ANSI_STDIO 1
#define FIO___PRINTF_STYLE(string_index, check_index)                          \
  __attribute__((format(__MINGW_PRINTF_FORMAT, string_index, check_index)))
#else
#define FIO_HAVE_UNIX_TOOLS 0
typedef SSIZE_T ssize_t;
#endif /* __CYGWIN__ __MINGW32__ */

#if _MSC_VER
#pragma message("Warning: (Windows) some functionality enabled by patchwork.")
#else
#warning some functionality is enabled by patchwork.
#endif

#else
#define FIO_HAVE_UNIX_TOOLS 0
#warning Unknown OS / compiler, some macros are poorly defined and errors might occur.
#endif /* OS / Compiler detection */

#include <ctype.h>
#include <errno.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <time.h>

#ifndef CLOCK_REALTIME
#define CLOCK_REALTIME 0
#endif
#ifndef CLOCK_MONOTONIC
#define CLOCK_MONOTONIC 0
#endif

#if FIO_HAVE_UNIX_TOOLS
#include <sched.h>
#include <sys/param.h>
#include <unistd.h>
#endif

/* assume GCC / Clang style if no specific style provided. */
#ifndef FIO___PRINTF_STYLE
#define FIO___PRINTF_STYLE(string_index, check_index)                          \
  __attribute__((format(printf, string_index, check_index)))
#endif

/* *****************************************************************************
Function Attributes
***************************************************************************** */

#ifndef FIO_SFUNC
/** Marks a function as `static` and possibly unused. */
#define FIO_SFUNC static __attribute__((unused))
#endif

#ifndef FIO_IFUNC
/** Marks a function as `static`, `inline` and possibly unused. */
#define FIO_IFUNC FIO_SFUNC inline
#endif

#ifndef FIO_MIFN
#define FIO_MIFN FIO_IFUNC __attribute__((warn_unused_result))
#endif

#ifndef FIO_WEAK
/** Marks a function as weak */
#define FIO_WEAK __attribute__((weak))
#endif

#ifndef FIO_IFUNC_DEF_GETSET
/** Defines a "get" function for a field within a struct / union. */
#define FIO_IFUNC_DEF_GET(namespace, T_type, F_type, field_name)               \
  /** Returns current value of property within the struct / union. */          \
  FIO_IFUNC F_type FIO_NAME(namespace, field_name)(T_type * o) {               \
    FIO_ASSERT_DEBUG(o, "NULL " FIO_MACRO2STR(namespace) " pointer @ `get`!"); \
    return o->field_name;                                                      \
  }

/** Defines a "set" function for a field within a struct / union. */
#define FIO_IFUNC_DEF_SET(namespace, T_type, F_type, field_name)               \
  /** Sets a new value, returning the old one */                               \
  FIO_IFUNC F_type FIO_NAME(FIO_NAME(namespace, field_name),                   \
                            set)(T_type * o, F_type new_value) {               \
    FIO_ASSERT_DEBUG(o, "NULL " FIO_MACRO2STR(namespace) " pointer @ `set`!"); \
    F_type old_value = o->field_name;                                          \
    o->field_name = new_value;                                                 \
    return old_value;                                                          \
  }

/** Defines get/set functions for a field within a struct / union. */
#define FIO_IFUNC_DEF_GETSET(namespace, T_type, F_type, field_name)            \
  FIO_IFUNC_DEF_GET(namespace, T_type, F_type, field_name)                     \
  FIO_IFUNC_DEF_SET(namespace, T_type, F_type, field_name)

#endif /* FIO_IFUNC_DEF_GETSET */
/* *****************************************************************************
Constructors and Destructors
***************************************************************************** */

#if _MSC_VER

#define FIO___COUNTER_RUNNER()                                                 \
  __COUNTER__ + __COUNTER__ + __COUNTER__ + __COUNTER__ + __COUNTER__ +        \
      __COUNTER__ + __COUNTER__ + __COUNTER__ + __COUNTER__ + __COUNTER__
/* counter is used for ordering, so we need a consistent number of digits */
FIO_SFUNC int fio___msv_run_counter_macro_to_3_digits(void) {
  return FIO___COUNTER_RUNNER() + FIO___COUNTER_RUNNER() +
         FIO___COUNTER_RUNNER() + FIO___COUNTER_RUNNER() +
         FIO___COUNTER_RUNNER() + FIO___COUNTER_RUNNER() +
         FIO___COUNTER_RUNNER() + FIO___COUNTER_RUNNER() +
         FIO___COUNTER_RUNNER() + FIO___COUNTER_RUNNER();
}
#undef FIO___COUNTER_RUNNER

#pragma section(".CRT$XCU", read)
/** Marks a function as a constructor - if supported. */
#if _WIN64 /* MSVC linker uses different name mangling on 32bit systems */
/* clang-format off */
#define FIO_CONSTRUCTOR(fname)                                                 \
  static void fname(void);                                                     \
  __declspec(allocate(".CRT$XCU")) void (*FIO_NAME(fio___constructor, __COUNTER__))(void) = fname; \
  static void fname(void)
#else
#define FIO_CONSTRUCTOR(fname)                                                 \
  static void fname(void);                                                     \
  __declspec(allocate(".CRT$XCU")) void (*FIO_NAME(fio___constructor, __COUNTER__))(void) = fname; \
  static void fname(void)
#endif /* _WIN64 */
#define FIO_DESTRUCTOR(fname)                                                  \
  static void fname(void);                                                     \
  FIO_CONSTRUCTOR(fname##__hook) { atexit(fname); }                            \
  static void fname(void)
/* clang-format on */

#else
/** Marks a function as a constructor - if supported. */
#define FIO_CONSTRUCTOR(fname)                                                 \
  static __attribute__((constructor)) void fname(void)
/** Marks a function as a destructor - if supported. Consider using atexit() */
#define FIO_DESTRUCTOR(fname) static __attribute__((destructor)) void name(void)
#endif

/* *****************************************************************************
Conditional Likelihood
***************************************************************************** */
#if defined(__clang__) || defined(__GNUC__)
#define FIO_LIKELY(cond)   __builtin_expect((cond), 1)
#define FIO_UNLIKELY(cond) __builtin_expect((cond), 0)
#else
#define FIO_LIKELY(cond)   (cond)
#define FIO_UNLIKELY(cond) (cond)
#endif

/* *****************************************************************************
Macro Stringifier
***************************************************************************** */
#ifndef FIO_MACRO2STR
#define FIO_MACRO2STR_STEP2(macro) #macro
/** Converts a macro's content to a string literal. */
#define FIO_MACRO2STR(macro) FIO_MACRO2STR_STEP2(macro)
#endif

/* *****************************************************************************
Naming Macros
***************************************************************************** */
/* Used for naming functions and types */
#define FIO_NAME_FROM_MACRO_STEP2(prefix, postfix, div) prefix##div##postfix
#define FIO_NAME_FROM_MACRO_STEP1(prefix, postfix, div)                        \
  FIO_NAME_FROM_MACRO_STEP2(prefix, postfix, div)

/** Used for naming functions and variables resulting in: prefix_postfix */
#define FIO_NAME(prefix, postfix) FIO_NAME_FROM_MACRO_STEP1(prefix, postfix, _)

/** Sets naming convention for conversion functions, i.e.: foo2bar */
#define FIO_NAME2(prefix, postfix) FIO_NAME_FROM_MACRO_STEP1(prefix, postfix, 2)

/** Sets naming convention for boolean testing functions, i.e.: foo_is_true */
#define FIO_NAME_BL(prefix, postfix)                                           \
  FIO_NAME_FROM_MACRO_STEP1(prefix, postfix, _is_)

/** Used internally to name test functions. */
#define FIO_NAME_TEST(prefix, postfix)                                         \
  FIO_NAME(fio___test, FIO_NAME(prefix, postfix))

/* *****************************************************************************
Pointer Math
***************************************************************************** */

/** Masks a pointer's left-most bits, returning the right bits. */
#define FIO_PTR_MATH_LMASK(T_type, ptr, bits)                                  \
  ((T_type *)(((uintptr_t)(ptr)) & (((uintptr_t)1ULL << (bits)) - 1)))

/** Masks a pointer's right-most bits, returning the left bits. */
#define FIO_PTR_MATH_RMASK(T_type, ptr, bits)                                  \
  ((T_type *)(((uintptr_t)(ptr)) & ((~(uintptr_t)0ULL) << (bits))))

/** Add offset bytes to pointer, updating the pointer's type. */
#define FIO_PTR_MATH_ADD(T_type, ptr, offset)                                  \
  ((T_type *)((uintptr_t)(ptr) + (uintptr_t)(offset)))

/** Subtract X bytes from pointer, updating the pointer's type. */
#define FIO_PTR_MATH_SUB(T_type, ptr, offset)                                  \
  ((T_type *)((uintptr_t)(ptr) - (uintptr_t)(offset)))

/** Find the root object (of a struct) from it's field (with sanitizer fix). */
#define FIO_PTR_FROM_FIELD(T_type, field, ptr)                                 \
  FIO_PTR_MATH_SUB(T_type,                                                     \
                   ptr,                                                        \
                   (uintptr_t)(&((T_type *)0xFF00)->field) - 0xFF00)

/* *****************************************************************************
Sleep / Thread Scheduling Macros
***************************************************************************** */

#ifndef FIO_THREAD_WAIT
#if FIO_OS_WIN
/** Calls NtDelayExecution with the requested nano-second count. */
#define FIO_THREAD_WAIT(nano_sec)                                              \
  do {                                                                         \
    Sleep(((nano_sec) / 1000000) ? ((nano_sec) / 1000000) : 1);                \
  } while (0)
// https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-sleep

#elif FIO_OS_POSIX
/** Calls nanonsleep with the requested nano-second count. */
#define FIO_THREAD_WAIT(nano_sec)                                              \
  do {                                                                         \
    const struct timespec tm = {.tv_sec = (time_t)((nano_sec) / 1000000000),   \
                                .tv_nsec = ((long)(nano_sec) % 1000000000)};   \
    nanosleep(&tm, (struct timespec *)NULL);                                   \
  } while (0)

#endif
#endif

#ifndef FIO_THREAD_RESCHEDULE
#if (defined(__x86_64__) || defined(__i386__)) &&                              \
    (defined(__GNUC__) || defined(__clang__))
/** Yields the thread, hinting to the processor about spinlock loop. */
#define FIO_THREAD_YIELD() __asm__ __volatile__("pause" ::: "memory")
#elif (defined(__aarch64__) || defined(__arm__)) &&                            \
    (defined(__GNUC__) || defined(__clang__))
/** Yields the thread, hinting to the processor about spinlock loop. */
#define FIO_THREAD_YIELD() __asm__ __volatile__("yield" ::: "memory")
#elif defined(_MSC_VER)
#define FIO_THREAD_YIELD() YieldProcessor()
#else /* FIO_OS_POSIX */
/** Yields the thread, hinting to the processor about spinlock loop. */
#define FIO_THREAD_YIELD() sched_yield()
#endif

/**
 * Reschedules the thread by calling nanosleeps for nano-seconds.
 *
 * In practice, the thread will probably sleep for 60ns or more.
 *
 * Seems to be faster then thread_yield, perhaps it prevents de-prioritization
 * of the thread.
 */
#define FIO_THREAD_RESCHEDULE() FIO_THREAD_WAIT(4)

#endif /* FIO_THREAD_RESCHEDULE */

/* *****************************************************************************




                            Atomic Operations



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */

/* C11 Atomics are defined? */
#if defined(__ATOMIC_RELAXED)
/** An atomic load operation, returns value in pointer. */
#define fio_atomic_load(dest, p_obj)                                           \
  do {                                                                         \
    dest = __atomic_load_n((p_obj), __ATOMIC_SEQ_CST);                         \
  } while (0)

// clang-format off

/** An atomic compare and exchange operation, returns true if an exchange occured. `p_expected` MAY be overwritten with the existing value (system specific). */
#define fio_atomic_compare_exchange_p(p_obj, p_expected, p_desired) __atomic_compare_exchange((p_obj), (p_expected), (p_desired), 0, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)
/** An atomic exchange operation, returns previous value */
#define fio_atomic_exchange(p_obj, value) __atomic_exchange_n((p_obj), (value), __ATOMIC_SEQ_CST)
/** An atomic addition operation, returns previous value */
#define fio_atomic_add(p_obj, value) __atomic_fetch_add((p_obj), (value), __ATOMIC_SEQ_CST)
/** An atomic subtraction operation, returns previous value */
#define fio_atomic_sub(p_obj, value) __atomic_fetch_sub((p_obj), (value), __ATOMIC_SEQ_CST)
/** An atomic AND (&) operation, returns previous value */
#define fio_atomic_and(p_obj, value) __atomic_fetch_and((p_obj), (value), __ATOMIC_SEQ_CST)
/** An atomic XOR (^) operation, returns previous value */
#define fio_atomic_xor(p_obj, value) __atomic_fetch_xor((p_obj), (value), __ATOMIC_SEQ_CST)
/** An atomic OR (|) operation, returns previous value */
#define fio_atomic_or(p_obj, value) __atomic_fetch_or((p_obj), (value), __ATOMIC_SEQ_CST)
/** An atomic NOT AND ((~)&) operation, returns previous value */
#define fio_atomic_nand(p_obj, value) __atomic_fetch_nand((p_obj), (value), __ATOMIC_SEQ_CST)
/** An atomic addition operation, returns new value */
#define fio_atomic_add_fetch(p_obj, value) __atomic_add_fetch((p_obj), (value), __ATOMIC_SEQ_CST)
/** An atomic subtraction operation, returns new value */
#define fio_atomic_sub_fetch(p_obj, value) __atomic_sub_fetch((p_obj), (value), __ATOMIC_SEQ_CST)
/** An atomic AND (&) operation, returns new value */
#define fio_atomic_and_fetch(p_obj, value) __atomic_and_fetch((p_obj), (value), __ATOMIC_SEQ_CST)
/** An atomic XOR (^) operation, returns new value */
#define fio_atomic_xor_fetch(p_obj, value) __atomic_xor_fetch((p_obj), (value), __ATOMIC_SEQ_CST)
/** An atomic OR (|) operation, returns new value */
#define fio_atomic_or_fetch(p_obj, value) __atomic_or_fetch((p_obj), (value), __ATOMIC_SEQ_CST)
/** An atomic NOT AND ((~)&) operation, returns new value */
#define fio_atomic_nand_fetch(p_obj, value) __atomic_nand_fetch((p_obj), (value), __ATOMIC_SEQ_CST)
/* note: __ATOMIC_SEQ_CST may be safer and __ATOMIC_ACQ_REL may be faster */

/* Select the correct compiler builtin method. */
#elif __has_builtin(__sync_add_and_fetch) || (__GNUC__ > 3) /* Atomic Implementation Selector */
/** An atomic load operation, returns value in pointer. */
#define fio_atomic_load(dest, p_obj)                                           \
  do {                                                                         \
    dest = *(p_obj);                                                           \
  } while (!__sync_bool_compare_and_swap((p_obj), dest, dest))


/** An atomic compare and exchange operation, returns true if an exchange occured. `p_expected` MAY be overwritten with the existing value (system specific). */
#define fio_atomic_compare_exchange_p(p_obj, p_expected, p_desired) __sync_bool_compare_and_swap((p_obj), (p_expected), *(p_desired))
/** An atomic exchange operation, ruturns previous value */
#define fio_atomic_exchange(p_obj, value) __sync_val_compare_and_swap((p_obj), *(p_obj), (value))
/** An atomic addition operation, returns new value */
#define fio_atomic_add(p_obj, value) __sync_fetch_and_add((p_obj), (value))
/** An atomic subtraction operation, returns new value */
#define fio_atomic_sub(p_obj, value) __sync_fetch_and_sub((p_obj), (value))
/** An atomic AND (&) operation, returns new value */
#define fio_atomic_and(p_obj, value) __sync_fetch_and_and((p_obj), (value))
/** An atomic XOR (^) operation, returns new value */
#define fio_atomic_xor(p_obj, value) __sync_fetch_and_xor((p_obj), (value))
/** An atomic OR (|) operation, returns new value */
#define fio_atomic_or(p_obj, value) __sync_fetch_and_or((p_obj), (value))
/** An atomic NOT AND ((~)&) operation, returns new value */
#define fio_atomic_nand(p_obj, value) __sync_fetch_and_nand((p_obj), (value))
/** An atomic addition operation, returns previous value */
#define fio_atomic_add_fetch(p_obj, value) __sync_add_and_fetch((p_obj), (value))
/** An atomic subtraction operation, returns previous value */
#define fio_atomic_sub_fetch(p_obj, value) __sync_sub_and_fetch((p_obj), (value))
/** An atomic AND (&) operation, returns previous value */
#define fio_atomic_and_fetch(p_obj, value) __sync_and_and_fetch((p_obj), (value))
/** An atomic XOR (^) operation, returns previous value */
#define fio_atomic_xor_fetch(p_obj, value) __sync_xor_and_fetch((p_obj), (value))
/** An atomic OR (|) operation, returns previous value */
#define fio_atomic_or_fetch(p_obj, value) __sync_or_and_fetch((p_obj), (value))
/** An atomic NOT AND ((~)&) operation, returns previous value */
#define fio_atomic_nand_fetch(p_obj, value) __sync_nand_and_fetch((p_obj), (value))


/* Atomic Implementation Selector */
#elif __STDC_VERSION__ >= 201112L && !defined(__STDC_NO_ATOMICS__)
#include <stdatomic.h>
#ifdef _MSC_VER
#pragma message ("Fallback to C11 atomic header, might be missing some features.")
#undef FIO_COMPILER_GUARD
#define FIO_COMPILER_GUARD atomic_thread_fence(memory_order_seq_cst)
#else
#warning Fallback to C11 atomic header, might be missing some features.
#endif /* _MSC_VER */
/** An atomic load operation, returns value in pointer. */
#define fio_atomic_load(dest, p_obj)  (dest = atomic_load(p_obj))

/** An atomic compare and exchange operation, returns true if an exchange occured. `p_expected` MAY be overwritten with the existing value (system specific). */
#define fio_atomic_compare_exchange_p(p_obj, p_expected, p_desired) atomic_compare_exchange_strong((p_obj), (p_expected), (p_desired))
/** An atomic exchange operation, returns previous value */
#define fio_atomic_exchange(p_obj, value) atomic_exchange((p_obj), (value))
/** An atomic addition operation, returns previous value */
#define fio_atomic_add(p_obj, value) atomic_fetch_add((p_obj), (value))
/** An atomic subtraction operation, returns previous value */
#define fio_atomic_sub(p_obj, value) atomic_fetch_sub((p_obj), (value))
/** An atomic AND (&) operation, returns previous value */
#define fio_atomic_and(p_obj, value) atomic_fetch_and((p_obj), (value))
/** An atomic XOR (^) operation, returns previous value */
#define fio_atomic_xor(p_obj, value) atomic_fetch_xor((p_obj), (value))
/** An atomic OR (|) operation, returns previous value */
#define fio_atomic_or(p_obj, value) atomic_fetch_or((p_obj), (value))
/** An atomic NOT AND ((~)&) operation, returns previous value */
#define fio_atomic_nand(p_obj, value) atomic_fetch_nand((p_obj), (value))
/** An atomic addition operation, returns new value */
#define fio_atomic_add_fetch(p_obj, value) (atomic_fetch_add((p_obj), (value)), atomic_load((p_obj)))
/** An atomic subtraction operation, returns new value */
#define fio_atomic_sub_fetch(p_obj, value) (atomic_fetch_sub((p_obj), (value)), atomic_load((p_obj)))
/** An atomic AND (&) operation, returns new value */
#define fio_atomic_and_fetch(p_obj, value) (atomic_fetch_and((p_obj), (value)), atomic_load((p_obj)))
/** An atomic XOR (^) operation, returns new value */
#define fio_atomic_xor_fetch(p_obj, value) (atomic_fetch_xor((p_obj), (value)), atomic_load((p_obj)))
/** An atomic OR (|) operation, returns new value */
#define fio_atomic_or_fetch(p_obj, value) (atomic_fetch_or((p_obj), (value)), atomic_load((p_obj)))

#elif _MSC_VER
#pragma message ("Warning: WinAPI atomics have less features, but this is what this compiler has, so...")
#include <intrin.h>
#define FIO___ATOMICS_FN_ROUTE(fn, ptr, ...)                                   \
  ((sizeof(*ptr) == 1)                                                         \
       ? fn##8((int8_t volatile *)(ptr), __VA_ARGS__)                          \
       : (sizeof(*ptr) == 2)                                                   \
             ? fn##16((int16_t volatile *)(ptr), __VA_ARGS__)                  \
             : (sizeof(*ptr) == 4)                                             \
                   ? fn((int32_t volatile *)(ptr), __VA_ARGS__)                \
                   : fn##64((int64_t volatile *)(ptr), __VA_ARGS__))

#ifndef _WIN64
#error Atomics on Windows require 64bit OS and compiler support.
#endif

/** An atomic load operation, returns value in pointer. */
#define fio_atomic_load(dest, p_obj) (dest = *(p_obj))

/** An atomic compare and exchange operation, returns true if an exchange occured. `p_expected` MAY be overwritten with the existing value (system specific). */
#define fio_atomic_compare_exchange_p(p_obj, p_expected, p_desired) (FIO___ATOMICS_FN_ROUTE(_InterlockedCompareExchange, (p_obj),(*(p_desired)),(*(p_expected))), (*(p_obj) == *(p_desired)))
/** An atomic exchange operation, returns previous value */
#define fio_atomic_exchange(p_obj, value) FIO___ATOMICS_FN_ROUTE(_InterlockedExchange, (p_obj), (value))

/** An atomic addition operation, returns previous value */
#define fio_atomic_add(p_obj, value) FIO___ATOMICS_FN_ROUTE(_InterlockedExchangeAdd, (p_obj), (value))
/** An atomic subtraction operation, returns previous value */
#define fio_atomic_sub(p_obj, value) FIO___ATOMICS_FN_ROUTE(_InterlockedExchangeAdd, (p_obj), (0ULL - (value)))
/** An atomic AND (&) operation, returns previous value */
#define fio_atomic_and(p_obj, value) FIO___ATOMICS_FN_ROUTE(_InterlockedAnd, (p_obj), (value))
/** An atomic XOR (^) operation, returns previous value */
#define fio_atomic_xor(p_obj, value) FIO___ATOMICS_FN_ROUTE(_InterlockedXor, (p_obj), (value))
/** An atomic OR (|) operation, returns previous value */
#define fio_atomic_or(p_obj, value)  FIO___ATOMICS_FN_ROUTE(_InterlockedOr, (p_obj), (value))

/** An atomic addition operation, returns new value */
#define fio_atomic_add_fetch(p_obj, value) (fio_atomic_add((p_obj), (value)), (*(p_obj)))
/** An atomic subtraction operation, returns new value */
#define fio_atomic_sub_fetch(p_obj, value) (fio_atomic_sub((p_obj), (value)), (*(p_obj)))
/** An atomic AND (&) operation, returns new value */
#define fio_atomic_and_fetch(p_obj, value) (fio_atomic_and((p_obj), (value)), (*(p_obj)))
/** An atomic XOR (^) operation, returns new value */
#define fio_atomic_xor_fetch(p_obj, value) (fio_atomic_xor((p_obj), (value)), (*(p_obj)))
/** An atomic OR (|) operation, returns new value */
#define fio_atomic_or_fetch(p_obj, value) (fio_atomic_or((p_obj), (value)), (*(p_obj)))
#else
#error Required atomics not found (__STDC_NO_ATOMICS__) and older __sync_add_and_fetch is also missing.

#endif /* Atomic Implementation Selector */
// clang-format on

/* *****************************************************************************
Spin-Locks
***************************************************************************** */

#define FIO_LOCK_INIT         0
#define FIO_LOCK_SUBLOCK(sub) ((uint8_t)(1U) << ((sub)&7))
typedef volatile unsigned char fio_lock_i;

#ifndef FIO___LOCK_RESCHDULE_EVERY_LOG
#define FIO___LOCK_RESCHDULE_EVERY_LOG 8
#endif
/**
 * Tries to lock a group of sublocks.
 *
 * Combine a number of sublocks using OR (`|`) and the FIO_LOCK_SUBLOCK(i)
 * macro. i.e.:
 *
 *      if(!fio_trylock_group(&lock,
 *                            FIO_LOCK_SUBLOCK(1) | FIO_LOCK_SUBLOCK(2))) {
 *         // act in lock
 *      }
 *
 * Returns 0 on success and non-zero on failure.
 */
FIO_IFUNC uint8_t fio_trylock_group(fio_lock_i *lock, uint8_t group) {
  if (!group)
    group = 1;
  FIO_COMPILER_GUARD;
  uint8_t state = fio_atomic_or(lock, group);
  if (!(state & group))
    return 0;
  /* store the acquired locks in `state`. */
  state = ~((~state) & group);
  /* release the locks we acquired */
  fio_atomic_and(lock, state);
  return 1;
}

/**
 * Busy waits for a group lock to become available - not recommended.
 *
 * See `fio_trylock_group` for details.
 */
FIO_IFUNC void fio_lock_group(fio_lock_i *lock, uint8_t group) {
  size_t i = 0;
  while (fio_trylock_group(lock, group)) {
    if ((i++ & (1U << FIO___LOCK_RESCHDULE_EVERY_LOG))) {
      i = 0;
      FIO_THREAD_RESCHEDULE();
    }
  }
}

/** Unlocks a sublock group, no matter which thread owns which sublock. */
FIO_IFUNC void fio_unlock_group(fio_lock_i *lock, uint8_t group) {
  if (!group)
    group = 1;
  fio_atomic_and(lock, (~group));
}

/** Tries to lock all sublocks. Returns 0 on success and 1 on failure. */
FIO_IFUNC uint8_t fio_trylock_full(fio_lock_i *lock) {
  return fio_trylock_group(lock, (uint8_t)~0);
}

/** Busy waits for all sub lock to become available - not recommended. */
FIO_IFUNC void fio_lock_full(fio_lock_i *lock) {
  fio_lock_group(lock, (uint8_t)~0);
}

/** Unlocks all sub locks, no matter which thread owns the lock. */
FIO_IFUNC void fio_unlock_full(fio_lock_i *lock) { fio_atomic_and(lock, 0); }

/**
 * Tries to acquire the default lock (sublock 0).
 *
 * Returns 0 on success and 1 on failure.
 */
FIO_IFUNC uint8_t fio_trylock(fio_lock_i *lock) {
  return fio_trylock_group(lock, (uint8_t)1);
}

/** Busy waits for the default lock to become available - not recommended. */
FIO_IFUNC void fio_lock(fio_lock_i *lock) { fio_lock_group(lock, (uint8_t)1); }

/** Unlocks the default lock, no matter which thread owns the lock. */
FIO_IFUNC void fio_unlock(fio_lock_i *lock) {
  fio_unlock_group(lock, (uint8_t)1);
}

/** Returns 1 if the lock is locked, 0 otherwise. */
FIO_IFUNC uint8_t FIO_NAME_BL(fio, locked)(fio_lock_i *lock) {
  return *lock & 1;
}

/** Returns 1 if the lock is locked, 0 otherwise. */
FIO_IFUNC uint8_t FIO_NAME_BL(fio, group_locked)(fio_lock_i *lock,
                                                 uint8_t group) {
  return !!((*lock) & group);
}

/* *****************************************************************************
Atomic Bit access / manipulation
***************************************************************************** */

/** Gets the state of a bit in a bitmap. */
FIO_IFUNC uint8_t fio_atomic_bit_get(void *map, size_t bit) {
  return ((((uint8_t *)(map))[(bit) >> 3] >> ((bit)&7)) & 1);
}

/** Sets the a bit in a bitmap (sets to 1). */
FIO_IFUNC void fio_atomic_bit_set(void *map, size_t bit) {
  fio_atomic_or((uint8_t *)(map) + ((bit) >> 3), (1UL << ((bit)&7)));
}

/** Unsets the a bit in a bitmap (sets to 0). */
FIO_IFUNC void fio_atomic_bit_unset(void *map, size_t bit) {
  fio_atomic_and((uint8_t *)(map) + ((bit) >> 3),
                 (uint8_t)(~(1UL << ((bit)&7))));
}

/** Flips the a bit in a bitmap (sets to 0 if 1, sets to 1 if 0). */
FIO_IFUNC void fio_atomic_bit_flip(void *map, size_t bit) {
  fio_atomic_xor((uint8_t *)(map) + ((bit) >> 3), (1UL << ((bit)&7)));
}

/* *****************************************************************************
UNSAFE (good enough) Static Memory Allocation

This is useful when attempting thread-safety controls through a round-robin
buffer that assumes both fast usage and a maximum number of concurrent calls, or
maximum number of threads, of `FIO_STATIC_ALLOC_SAFE_CONCURRENCY_MAX`.

This is supposed to provide both a safe alternative to `alloca` and allows the
memory address to be returned if needed (valid until concurrency max calls).
***************************************************************************** */

#ifndef FIO_STATIC_ALLOC_CONCURRENCY_MAX
/* The multiplier is used to set the maximum number of safe concurrent calls. */
#define FIO_STATIC_ALLOC_CONCURRENCY_MAX 256
#endif

/**
 * Defines a simple (almost naive) static memory allocator named `name`.
 *
 * This defines a memory allocation function named `name` that accepts a
 * single input `count` and returns a `type_T` pointer (`type_T *`) containing
 * `sizeof(type_T) * count * size_per_allocation` in correct memory alignment.
 *
 *          static type_T *name(size_t allocation_count);
 *
 * That memory is statically allocated, allowing it be returned and never
 * needing to be freed.
 *
 * The functions can safely allocate the following number of bytes before
 * the function returns the same memory block to another caller:
 *
 *     FIO_STATIC_ALLOC_SAFE_CONCURRENCY_MAX * allocations_per_thread *
 *         sizeof(type_T) * size_per_allocation
 *
 * Example use:
 *
 * ```c
 * // defined a static allocator for 32 byte long strings
 * FIO_STATIC_ALLOC_DEF(numer2hex_allocator, char, 19, 1);
 * // a function that returns an unsigned number as a 16 digit hex string
 * char * ntos16(uint16_t n) {
 *   char * n = numer2hex_allocator(1);
 *   n[0] = '0'; n[1] = 'x';
 *   fio_ltoa16u(n+2, n, 16);
 *   n[18] = 0;
 *   return n;
 * }
 * ```
 *
 * A similar approach is use by `fiobj_num2cstr` in order to provide temporary
 * conversions of FIOBJ to a C String that doesn't require memory management.
 */
#define FIO_STATIC_ALLOC_DEF(name,                                             \
                             type_T,                                           \
                             size_per_allocation,                              \
                             allocations_per_thread)                           \
  FIO_SFUNC __attribute__((warn_unused_result)) type_T *name(size_t count) {   \
    static type_T name##buffer[sizeof(type_T) *                                \
                               FIO_STATIC_ALLOC_SAFE_CONCURRENCY_MAX *         \
                               size_per_allocation * allocations_per_thread];  \
    static size_t pos;                                                         \
    size_t at = fio_atomic_add(&pos, count * size_per_allocation);             \
    at %= FIO_STATIC_ALLOC_SAFE_CONCURRENCY_MAX * size_per_allocation *        \
          allocations_per_thread;                                              \
    return at + name##buffer;                                                  \
  }

/* *****************************************************************************
Logging Primitives (no-op)
***************************************************************************** */

/* avoid printing a full / nested path when __FILE_NAME__ is available */
#ifdef __FILE_NAME__
#define FIO__FILE__ __FILE_NAME__
#else
#define FIO__FILE__ __FILE__
#endif

/** Logging level of zero (no logging). */
#define FIO_LOG_LEVEL_NONE 0
/** Log fatal errors. */
#define FIO_LOG_LEVEL_FATAL 1
/** Log errors and fatal errors. */
#define FIO_LOG_LEVEL_ERROR 2
/** Log warnings, errors and fatal errors. */
#define FIO_LOG_LEVEL_WARNING 3
/** Log every message (info, warnings, errors and fatal errors). */
#define FIO_LOG_LEVEL_INFO 4
/** Log everything, including debug messages. */
#define FIO_LOG_LEVEL_DEBUG 5

/** Sets the Logging Level */
#define FIO_LOG_LEVEL_SET(new_level) (0)
/** Returns the Logging Level */
#define FIO_LOG_LEVEL_GET() (0)

// clang-format off
#define FIO___LOG_PRINT_LEVEL(level, ...) do { if ((level) <= FIO_LOG_LEVEL_GET()) {FIO_LOG2STDERR(__VA_ARGS__);} } while (0)
#define FIO_LOG_WRITE(...)    FIO_LOG2STDERR("(" FIO__FILE__ ":" FIO_MACRO2STR(__LINE__) "): " __VA_ARGS__)
#define FIO_LOG_FATAL(...)    FIO___LOG_PRINT_LEVEL(FIO_LOG_LEVEL_FATAL, "\x1B[1m\x1B[7mFATAL:\x1B[0m    " __VA_ARGS__)
#define FIO_LOG_ERROR(...)    FIO___LOG_PRINT_LEVEL(FIO_LOG_LEVEL_ERROR, "\x1B[1mERROR:\x1B[0m    " __VA_ARGS__)
#define FIO_LOG_SECURITY(...) FIO___LOG_PRINT_LEVEL(FIO_LOG_LEVEL_ERROR, "\x1B[1mSECURITY:\x1B[0m " __VA_ARGS__)
#define FIO_LOG_WARNING(...)  FIO___LOG_PRINT_LEVEL(FIO_LOG_LEVEL_WARNING, "\x1B[2mWARNING:\x1B[0m  " __VA_ARGS__)
#define FIO_LOG_INFO(...)     FIO___LOG_PRINT_LEVEL(FIO_LOG_LEVEL_INFO, "INFO:     " __VA_ARGS__)
#define FIO_LOG_DEBUG(...)    FIO___LOG_PRINT_LEVEL(FIO_LOG_LEVEL_DEBUG,"DEBUG:    (" FIO__FILE__ ":" FIO_MACRO2STR(__LINE__) ") " __VA_ARGS__)
#define FIO_LOG_DEBUG2(...)   FIO___LOG_PRINT_LEVEL(FIO_LOG_LEVEL_DEBUG, "DEBUG:    " __VA_ARGS__)
// clang-format on

#ifdef DEBUG
#define FIO_LOG_DDEBUG(...)           FIO_LOG_DEBUG(__VA_ARGS__)
#define FIO_LOG_DDEBUG2(...)          FIO_LOG_DEBUG2(__VA_ARGS__)
#define FIO_LOG_DERROR(...)           FIO_LOG_ERROR(__VA_ARGS__)
#define FIO_LOG_DSECURITY(...)        FIO_LOG_SECURITY(__VA_ARGS__)
#define FIO_LOG_DWARNING(...)         FIO_LOG_WARNING(__VA_ARGS__)
#define FIO_LOG_DINFO(...)            FIO_LOG_INFO(__VA_ARGS__)
#define FIO_ASSERT___PERFORM_SIGNAL() FIO___KILL_SELF();
#else
#define FIO_LOG_DDEBUG(...)    ((void)(0))
#define FIO_LOG_DDEBUG2(...)   ((void)(0))
#define FIO_LOG_DERROR(...)    ((void)(0))
#define FIO_LOG_DSECURITY(...) ((void)(0))
#define FIO_LOG_DWARNING(...)  ((void)(0))
#define FIO_LOG_DINFO(...)     ((void)(0))
#define FIO_ASSERT___PERFORM_SIGNAL()
#endif /* DEBUG */

#ifndef FIO_LOG_LENGTH_LIMIT
/** Defines a point at which logging truncates (limits stack memory use) */
#define FIO_LOG_LENGTH_LIMIT 1024
#endif

/** Prints to STDERR, attempting to use only stack allocated memory. */
#define FIO_LOG2STDERR(...)

/* *****************************************************************************
Assertions
***************************************************************************** */

/* Asserts a condition is true, or kills the application using SIGINT. */
#define FIO_ASSERT(cond, ...)                                                  \
  do {                                                                         \
    if (FIO_UNLIKELY(!(cond))) {                                               \
      FIO_LOG_FATAL(__VA_ARGS__);                                              \
      FIO_LOG_FATAL("     errno(%d): %s\n", errno, strerror(errno));           \
      FIO_ASSERT___PERFORM_SIGNAL();                                           \
      abort();                                                                 \
    }                                                                          \
  } while (0)

#ifndef FIO_ASSERT_ALLOC
/** Tests for an allocation failure. The behavior can be overridden. */
#define FIO_ASSERT_ALLOC(ptr) FIO_ASSERT((ptr), "memory allocation failed.")
#endif

#ifdef DEBUG
/** If `DEBUG` is defined, raises SIGINT if assertion fails, otherwise NOOP. */
#define FIO_ASSERT_DEBUG(cond, ...)                                            \
  do {                                                                         \
    if (!(cond)) {                                                             \
      FIO_LOG_FATAL("(" FIO__FILE__                                            \
                    ":" FIO_MACRO2STR(__LINE__) ") " __VA_ARGS__);             \
      FIO_LOG_FATAL("     errno(%d): %s\n", errno, strerror(errno));           \
      FIO_ASSERT___PERFORM_SIGNAL();                                           \
      exit(-1);                                                                \
    }                                                                          \
  } while (0)
#else
#define FIO_ASSERT_DEBUG(...)
#endif

/* *****************************************************************************
Static Assertions
***************************************************************************** */
#if __STDC_VERSION__ >= 201112L
#define FIO_ASSERT_STATIC(cond, msg) _Static_assert((cond), msg)
#else
#define FIO_ASSERT_STATIC(cond, msg)                                           \
  static const char *FIO_NAME(fio_static_assertion_failed,                     \
                              __LINE__)[(((cond) << 1) - 1)] = {(char *)msg}
#endif

typedef struct {
  unsigned char data[2];
} fio___padding_char_struct_test_s;

FIO_ASSERT_STATIC(CHAR_BIT == 8, "facil.io requires an 8bit wide char");
FIO_ASSERT_STATIC(sizeof(uint8_t) == 1,
                  "facil.io requires an 8bit wide uint8_t");
FIO_ASSERT_STATIC(sizeof(uint16_t) == 2,
                  "facil.io requires a 16bit wide uint16_t");
FIO_ASSERT_STATIC(sizeof(uint32_t) == 4,
                  "facil.io requires a 32bit wide uint32_t");
FIO_ASSERT_STATIC(sizeof(uint64_t) == 8,
                  "facil.io requires a 64bit wide uint64_t");
FIO_ASSERT_STATIC(sizeof(fio___padding_char_struct_test_s) == 2,
                  "compiler adds padding to fio___memcpyX, creating memory "
                  "alignment issues.");

/* *****************************************************************************
Static Endian Test
***************************************************************************** */

#if (defined(__LITTLE_ENDIAN__) && __LITTLE_ENDIAN__) ||                       \
    (defined(__BIG_ENDIAN__) && !__BIG_ENDIAN__) ||                            \
    (defined(__BYTE_ORDER__) && (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
#ifndef __BIG_ENDIAN__
#define __BIG_ENDIAN__ 0
#endif
#ifndef __LITTLE_ENDIAN__
#define __LITTLE_ENDIAN__ 1
#endif
#elif (defined(__BIG_ENDIAN__) && __BIG_ENDIAN__) ||                           \
    (defined(__LITTLE_ENDIAN__) && !__LITTLE_ENDIAN__) ||                      \
    (defined(__BYTE_ORDER__) && (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__))
#ifndef __BIG_ENDIAN__
#define __BIG_ENDIAN__ 1
#endif
#ifndef __LITTLE_ENDIAN__
#define __LITTLE_ENDIAN__ 0
#endif
#elif !defined(__BIG_ENDIAN__) && !defined(__BYTE_ORDER__) &&                  \
    !defined(__LITTLE_ENDIAN__)
#define FIO_LITTLE_ENDIAN_TEST 0x31323334UL
#define FIO_BIG_ENDIAN_TEST    0x34333231UL
#define FIO_ENDIAN_ORDER_TEST  ('1234')
#if ENDIAN_ORDER_TEST == LITTLE_ENDIAN_TEST
#define __BIG_ENDIAN__    0
#define __LITTLE_ENDIAN__ 1
#elif ENDIAN_ORDER_TEST == BIG_ENDIAN_TEST
#define __BIG_ENDIAN__    1
#define __LITTLE_ENDIAN__ 0
#else
#error Could not detect byte order on this system.
#endif

#endif /* predefined / test endianess */

/* *****************************************************************************
Dynamic Endian Testing
***************************************************************************** */

FIO_IFUNC unsigned int fio_is_little_endian(void) {
  union {
    unsigned long ul;
    unsigned char u8[sizeof(unsigned long)];
  } u = {.ul = 1};
  return (unsigned int)u.u8[0];
}

FIO_IFUNC unsigned int fio_is_big_endian(void) {
  return !fio_is_little_endian();
}

/* *****************************************************************************
Security Related macros
***************************************************************************** */
#define FIO_MEM_STACK_WIPE(pages)                                              \
  do {                                                                         \
    volatile char stack_mem[(pages) << 12] = {0};                              \
    (void)stack_mem;                                                           \
  } while (0)

/* *****************************************************************************
Settings - Memory Function Selectors
***************************************************************************** */
#ifdef FIO_MEMALT
#ifndef FIO_MEMCPY
#define FIO_MEMCPY fio_memcpy
#endif
#ifndef FIO_MEMMOVE
#define FIO_MEMMOVE fio_memcpy
#endif
#ifndef FIO_MEMCMP
#define FIO_MEMCMP fio_memcmp
#endif
#ifndef FIO_MEMCHR
#define FIO_MEMCHR fio_memchr
#endif
#ifndef FIO_MEMSET
#define FIO_MEMSET fio_memset
#endif
#ifndef FIO_STRLEN
#define FIO_STRLEN fio_strlen
#endif
#endif /* FIO_MEMALT */

/* memcpy selectors / overriding */
#ifndef FIO_MEMCPY
#if __has_builtin(__builtin_memcpy)
/** `memcpy` selector macro */
#define FIO_MEMCPY __builtin_memcpy
#else
/** `memcpy` selector macro */
#define FIO_MEMCPY memcpy
#endif
#endif /* FIO_MEMCPY */

/* memmove selectors / overriding */
#ifndef FIO_MEMMOVE
#if __has_builtin(__builtin_memmove)
/** `memmov` selector macro */
#define FIO_MEMMOVE __builtin_memmove
#else
/** `memmov` selector macro */
#define FIO_MEMMOVE memmove
#endif
#endif /* FIO_MEMMOVE */

/* memset selectors / overriding */
#ifndef FIO_MEMSET
#if __has_builtin(__builtin_memset)
/** `memset` selector macro */
#define FIO_MEMSET __builtin_memset
#else
/** `memset` selector macro */
#define FIO_MEMSET memset
#endif
#endif /* FIO_MEMSET */

/* memchr selectors / overriding */
#ifndef FIO_MEMCHR
#if __has_builtin(__builtin_memchr)
/** `memchr` selector macro */
#define FIO_MEMCHR __builtin_memchr
#else
/** `memchr` selector macro */
#define FIO_MEMCHR memchr
#endif
#endif /* FIO_MEMCHR */

/* strlen selectors / overriding */
#ifndef FIO_STRLEN
#if __has_builtin(__builtin_strlen)
/** `strlen` selector macro */
#define FIO_STRLEN __builtin_strlen
#else
/** `strlen` selector macro */
#define FIO_STRLEN strlen
#endif
#endif /* FIO_STRLEN */

/* memcmp selectors / overriding */
#ifndef FIO_MEMCMP
#if __has_builtin(__builtin_memcmp)
/** `memcmp` selector macro */
#define FIO_MEMCMP __builtin_memcmp
#else
/** `memcmp` selector macro */
#define FIO_MEMCMP memcmp
#endif
#endif /* FIO_MEMCMP */

/* *****************************************************************************
Memory Copying Primitives (the basis for unaligned memory access for numbers)
***************************************************************************** */

/* memcpy selectors / overriding */
#if __has_builtin(__builtin_memcpy)
#define FIO___MAKE_MEMCPY_FIXED(bytes)                                         \
  FIO_SFUNC void *fio_memcpy##bytes(void *restrict d,                          \
                                    const void *restrict s) {                  \
    return __builtin_memcpy(d, s, bytes);                                      \
  }
#else
#define FIO___MAKE_MEMCPY_FIXED(bytes)                                         \
  FIO_SFUNC void *fio_memcpy##bytes(void *restrict d,                          \
                                    const void *restrict s) {                  \
    void *const r = (char *)d + bytes;                                         \
    for (size_t i = 0; i < bytes; ++i) /* compiler, please vectorize */        \
      ((char *)d)[i] = ((const char *)s)[i];                                   \
    return r;                                                                  \
  }
#endif /* __has_builtin(__builtin_memcpy) */

/** No-op (completes the name space). */
FIO_SFUNC void *fio_memcpy0(void *restrict d, const void *restrict s) {
  ((void)s);
  return d;
}
/** Copies 1 byte from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(1)
/** Copies 2 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(2)
/** Copies 3 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(3)
/** Copies 4 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(4)
/** Copies 5 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(5)
/** Copies 6 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(6)
/** Copies 7 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(7)
/** Copies 8 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(8)
/** Copies 16 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(16)
/** Copies 32 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(32)
/** Copies 64 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(64)
/** Copies 128 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(128)
/** Copies 256 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(256)
/** Copies 512 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(512)
/** Copies 1024 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(1024)
/** Copies 2048 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(2048)
/** Copies 4096 bytes from `src` (`s`) to `dest` (`d`). */
FIO___MAKE_MEMCPY_FIXED(4096)
#undef FIO___MAKE_MEMCPY_FIXED

/** an unsafe memcpy (no checks + no overlapping memory regions) up to 63B */
FIO_IFUNC void *fio___memcpy_unsafe_63x(void *restrict d_,
                                        const void *restrict s_,
                                        size_t l) {
  char *restrict d = (char *restrict)d_;
  const char *restrict s = (const char *restrict)s_;
#define FIO___MEMCPY_XX_GROUP(bytes)                                           \
  do {                                                                         \
    fio_memcpy##bytes((void *)d, (void *)s);                                   \
    d += l & (bytes - 1);                                                      \
    s += l & (bytes - 1);                                                      \
    fio_memcpy##bytes((void *)d, (void *)s);                                   \
    return (void *)(d += bytes);                                               \
  } while (0)
  if (l > 31)
    FIO___MEMCPY_XX_GROUP(32);
  if (l > 15)
    FIO___MEMCPY_XX_GROUP(16);
  if (l > 7)
    FIO___MEMCPY_XX_GROUP(8);
#undef FIO___MEMCPY_XX_GROUP
  if ((l & 4)) {
    fio_memcpy4(d, s);
    (d += 4), (s += 4);
  }
  if ((l & 2)) {
    fio_memcpy2(d, s);
    (d += 2), (s += 2);
  }
  if ((l & 1))
    *d++ = *s;
  return (void *)d;
}
/** an unsafe memcpy (no checks + assumes no overlapping memory regions) */
FIO_SFUNC void *fio___memcpy_unsafe_x(void *restrict d_,
                                      const void *restrict s_,
                                      size_t l) {
  char *restrict d = (char *restrict)d_;
  const char *restrict s = (const char *restrict)s_;
  if (l < 64)
    return fio___memcpy_unsafe_63x(d_, s_, l);
#define FIO___MEMCPY_UNSAFE_STEP(bytes)                                        \
  do {                                                                         \
    fio_memcpy##bytes((void *)d, (void *)s);                                   \
    (l -= bytes), (d += bytes), (s += bytes);                                  \
  } while (0)

#if FIO_LIMIT_INTRINSIC_BUFFER
  while (l > 127)
    FIO___MEMCPY_UNSAFE_STEP(128);
#else
  while (l > 255)
    FIO___MEMCPY_UNSAFE_STEP(256);
  if (l & 128)
    FIO___MEMCPY_UNSAFE_STEP(128);
#endif
  if (l & 64)
    FIO___MEMCPY_UNSAFE_STEP(64);
#undef FIO___MEMCPY_UNSAFE_STEP
  d -= 64;
  s -= 64;
  d += l & 63U;
  s += l & 63U;
  fio_memcpy64((void *)d, (void *)s);
  return (void *)(d += 64);
}

#define FIO___MEMCPYX_MAKER(lim, fn)                                           \
  FIO_IFUNC void *fio_memcpy##lim##x(void *restrict d,                         \
                                     const void *restrict s,                   \
                                     size_t l) {                               \
    return fn(d, s, (l & lim));                                                \
  }

/** No-op (completes the name space). */
FIO_SFUNC void *fio_memcpy0x(void *d, const void *s, size_t l) {
  ((void)s), ((void)l);
  return d;
}
/** Copies up to (len & 7) bytes from `src` (`s`) to `dest` (`d`). */
FIO___MEMCPYX_MAKER(7, fio___memcpy_unsafe_63x)
/** Copies up to (len & 15) bytes from `src` (`s`) to `dest` (`d`). */
FIO___MEMCPYX_MAKER(15, fio___memcpy_unsafe_63x)
/** Copies up to (len & 31) bytes from `src` (`s`) to `dest` (`d`). */
FIO___MEMCPYX_MAKER(31, fio___memcpy_unsafe_63x)
/** Copies up to (len & 63) bytes from `src` (`s`) to `dest` (`d`). */
FIO___MEMCPYX_MAKER(63, fio___memcpy_unsafe_63x)
/** Copies up to (len & 127) bytes from `src` (`s`) to `dest` (`d`). */
FIO___MEMCPYX_MAKER(127, fio___memcpy_unsafe_x)
/** Copies up to (len & 255) bytes from `src` (`s`) to `dest` (`d`). */
FIO___MEMCPYX_MAKER(255, fio___memcpy_unsafe_x)
/** Copies up to (len & 511) bytes from `src` (`s`) to `dest` (`d`). */
FIO___MEMCPYX_MAKER(511, fio___memcpy_unsafe_x)
/** Copies up to (len & 1023) bytes from `src` (`s`) to `dest` (`d`). */
FIO___MEMCPYX_MAKER(1023, fio___memcpy_unsafe_x)
/** Copies up to (len & 2047) bytes from `src` (`s`) to `dest` (`d`). */
FIO___MEMCPYX_MAKER(2047, fio___memcpy_unsafe_x)
/** Copies up to (len & 4095) bytes from `src` (`s`) to `dest` (`d`). */
FIO___MEMCPYX_MAKER(4095, fio___memcpy_unsafe_x)
#undef FIO___MEMCPYX_MAKER

/* *****************************************************************************
Swapping byte's order (`bswap` variations)
***************************************************************************** */

/* avoid special cases by defining for all sizes */
#define fio_bswap8(i) (i)

/** Byte swap a 16 bit integer, inlined. */
#if __has_builtin(__builtin_bswap16)
#define fio_bswap16(i) __builtin_bswap16((uint16_t)(i))
#else
FIO_IFUNC uint16_t fio_bswap16(uint16_t i) {
  return ((((i)&0xFFU) << 8) | (((i)&0xFF00U) >> 8));
}
#endif

/** Byte swap a 32 bit integer, inlined. */
#if __has_builtin(__builtin_bswap32)
#define fio_bswap32(i) __builtin_bswap32((uint32_t)(i))
#else
FIO_IFUNC uint32_t fio_bswap32(uint32_t i) {
  return ((((i)&0xFFUL) << 24) | (((i)&0xFF00UL) << 8) |
          (((i)&0xFF0000UL) >> 8) | (((i)&0xFF000000UL) >> 24));
}
#endif

/** Byte swap a 64 bit integer, inlined. */
#if __has_builtin(__builtin_bswap64)
#define fio_bswap64(i) __builtin_bswap64((uint64_t)(i))
#else
FIO_IFUNC uint64_t fio_bswap64(uint64_t i) {
  return ((((i)&0xFFULL) << 56) | (((i)&0xFF00ULL) << 40) |
          (((i)&0xFF0000ULL) << 24) | (((i)&0xFF000000ULL) << 8) |
          (((i)&0xFF00000000ULL) >> 8) | (((i)&0xFF0000000000ULL) >> 24) |
          (((i)&0xFF000000000000ULL) >> 40) |
          (((i)&0xFF00000000000000ULL) >> 56));
}
#endif

#ifdef __SIZEOF_INT128__
#if __has_builtin(__builtin_bswap128)
#define fio_bswap128(i) __builtin_bswap128((__uint128_t)(i))
#else
FIO_IFUNC __uint128_t fio_bswap128(__uint128_t i) {
  return ((__uint128_t)fio_bswap64(i) << 64) | fio_bswap64(i >> 64);
}
#endif
#endif /* __SIZEOF_INT128__ */

/* *****************************************************************************
Switching Endian Ordering
***************************************************************************** */

#define fio_ltole8(i) (i) /* avoid special cases by defining for all sizes */
#define fio_lton8(i)  (i) /* avoid special cases by defining for all sizes */
#define fio_ntol8(i)  (i) /* avoid special cases by defining for all sizes */

#if __BIG_ENDIAN__

/** Local byte order to Network byte order, 16 bit integer */
#define fio_lton16(i) (i)
/** Local byte order to Network byte order, 32 bit integer */
#define fio_lton32(i) (i)
/** Local byte order to Network byte order, 62 bit integer */
#define fio_lton64(i) (i)

/** Local byte order to Little Endian byte order, 16 bit integer */
#define fio_ltole16(i) fio_bswap16((i))
/** Local byte order to Little Endian byte order, 32 bit integer */
#define fio_ltole32(i) fio_bswap32((i))
/** Local byte order to Little Endian byte order, 62 bit integer */
#define fio_ltole64(i) fio_bswap64((i))

/** Network byte order to Local byte order, 16 bit integer */
#define fio_ntol16(i) (i)
/** Network byte order to Local byte order, 32 bit integer */
#define fio_ntol32(i) (i)
/** Network byte order to Local byte order, 62 bit integer */
#define fio_ntol64(i) (i)

#ifdef __SIZEOF_INT128__
/** Network byte order to Local byte order, 128 bit integer */
#define fio_ntol128(i) (i)
/** Local byte order to Little Endian byte order, 128 bit integer */
#define fio_ltole128(i) fio_bswap128((i))

/** An endianess dependent shift operation, moves bytes forwards. */
#define FIO_SHIFT_FORWARDS(i, bits) ((i) >> (bits))
/** An endianess dependent shift operation, moves bytes backwards. */
#define FIO_SHIFT_BACKWARDS(i, bits) ((i) << (bits))

#endif /* __SIZEOF_INT128__ */

#else /* Little Endian */

/** Local byte order to Network byte order, 16 bit integer */
#define fio_lton16(i)  fio_bswap16((i))
/** Local byte order to Network byte order, 32 bit integer */
#define fio_lton32(i)  fio_bswap32((i))
/** Local byte order to Network byte order, 62 bit integer */
#define fio_lton64(i)  fio_bswap64((i))

/** Local byte order to Little Endian byte order, 16 bit integer */
#define fio_ltole16(i) (i)
/** Local byte order to Little Endian byte order, 32 bit integer */
#define fio_ltole32(i) (i)
/** Local byte order to Little Endian byte order, 62 bit integer */
#define fio_ltole64(i) (i)

/** Network byte order to Local byte order, 16 bit integer */
#define fio_ntol16(i)  fio_bswap16((i))
/** Network byte order to Local byte order, 32 bit integer */
#define fio_ntol32(i)  fio_bswap32((i))
/** Network byte order to Local byte order, 62 bit integer */
#define fio_ntol64(i)  fio_bswap64((i))

#ifdef __SIZEOF_INT128__
/** Local byte order to Network byte order, 128 bit integer */
#define fio_lton128(i)  fio_bswap128((i))
/** Network byte order to Local byte order, 128 bit integer */
#define fio_ntol128(i)  fio_bswap128((i))
/** Local byte order to Little Endian byte order, 128 bit integer */
#define fio_ltole128(i) (i)
#endif /* __SIZEOF_INT128__ */

/** An endianess dependent shift operation, moves bytes forwards. */
#define FIO_SHIFT_FORWARDS(i, bits)  ((i) << (bits))
/** An endianess dependent shift operation, moves bytes backwards. */
#define FIO_SHIFT_BACKWARDS(i, bits) ((i) >> (bits))

#endif /* __BIG_ENDIAN__ */

/* *****************************************************************************
Unaligned memory read / write operations
***************************************************************************** */

/** Converts an unaligned byte stream to an 8 bit number. */
FIO_IFUNC uint8_t fio_buf2u8u(const void *c) { return *(const uint8_t *)c; }
/** Writes a local 8 bit number to an unaligned buffer. */
FIO_IFUNC void fio_u2buf8u(void *buf, uint8_t i) { *((uint8_t *)buf) = i; }
/** Converts an unaligned byte stream to an 8 bit number. */
FIO_IFUNC uint8_t fio_buf2u8_le(const void *c) { return *(const uint8_t *)c; }
/** Writes a local 8 bit number to an unaligned buffer. */
FIO_IFUNC void fio_u2buf8_le(void *buf, uint8_t i) { *((uint8_t *)buf) = i; }
/** Converts an unaligned byte stream to an 8 bit number. */
FIO_IFUNC uint8_t fio_buf2u8_be(const void *c) { return *(const uint8_t *)c; }
/** Writes a local 8 bit number to an unaligned buffer. */
FIO_IFUNC void fio_u2buf8_be(void *buf, uint8_t i) { *((uint8_t *)buf) = i; }

#define FIO___U2U_NOOP(i) (i)
#define FIO___MEMBUF_FN(bytes, n_bits, bits, wrapper, postfix)                 \
  /** Converts an unaligned byte stream to a bits bit number. */               \
  FIO_IFUNC uint##bits##_t fio_buf2u##n_bits##postfix(const void *c) {         \
    uint##bits##_t tmp;                                                        \
    fio_memcpy##bytes(&tmp, c);                                                \
    return wrapper(tmp);                                                       \
  }                                                                            \
  /** Writes a bits bit number to an unaligned buffer. */                      \
  FIO_IFUNC void fio_u2buf##n_bits##postfix(void *buf, uint##bits##_t i) {     \
    i = wrapper(i);                                                            \
    fio_memcpy##bytes(buf, &i);                                                \
  }
/* unspecified byte order (native ordering) */
FIO___MEMBUF_FN(2, 16, 16, FIO___U2U_NOOP, u)
FIO___MEMBUF_FN(4, 32, 32, FIO___U2U_NOOP, u)
FIO___MEMBUF_FN(8, 64, 64, FIO___U2U_NOOP, u)
/* little endian byte order (native ordering) */
FIO___MEMBUF_FN(2, 16, 16, fio_ltole16, _le)
FIO___MEMBUF_FN(4, 32, 32, fio_ltole32, _le)
FIO___MEMBUF_FN(8, 64, 64, fio_ltole64, _le)
/* big / network endian byte order (native ordering) */
FIO___MEMBUF_FN(2, 16, 16, fio_lton16, _be)
FIO___MEMBUF_FN(4, 32, 32, fio_lton32, _be)
FIO___MEMBUF_FN(8, 64, 64, fio_lton64, _be)
#undef FIO___MEMBUF_FN

/** Converts an unaligned byte stream to a 24 bit number. */
FIO_IFUNC uint32_t fio_buf2u24u(const void *c) {
  uint32_t tmp = 0;
  fio_memcpy3(&tmp, c);
#if __BIG_ENDIAN__
  c = c >> 8;
#endif
  return tmp;
} /** Writes a 24 bit number to an unaligned buffer. */
FIO_IFUNC void fio_u2buf24u(void *buf, uint32_t i) {
#if __BIG_ENDIAN__
  i = i << 8;
#endif
  fio_memcpy3(buf, &i);
}

/** Converts an unaligned byte stream to a 24 bit number. */
FIO_IFUNC uint32_t fio_buf2u24_le(const void *c) {
  uint32_t tmp = ((uint32_t)((uint8_t *)c)[0]) |
                 ((uint32_t)((uint8_t *)c)[1] << 8) |
                 ((uint32_t)((uint8_t *)c)[2] << 16);
  return tmp;
} /** Writes a 24 bit number to an unaligned buffer. */
FIO_IFUNC void fio_u2buf24_le(void *buf, uint32_t i) {
  ((uint8_t *)buf)[0] = i & 0xFFU;
  ((uint8_t *)buf)[1] = (i >> 8) & 0xFFU;
  ((uint8_t *)buf)[2] = (i >> 16) & 0xFFU;
}
/** Converts an unaligned byte stream to a 24 bit number. */
FIO_IFUNC uint32_t fio_buf2u24_be(const void *c) {
  uint32_t tmp = ((uint32_t)((uint8_t *)c)[0] << 16) |
                 ((uint32_t)((uint8_t *)c)[1] << 8) |
                 ((uint32_t)((uint8_t *)c)[2]);
  return tmp;
} /** Writes a 24 bit number to an unaligned buffer. */
FIO_IFUNC void fio_u2buf24_be(void *buf, uint32_t i) {
  ((uint8_t *)buf)[0] = (i >> 16) & 0xFFU;
  ((uint8_t *)buf)[1] = (i >> 8) & 0xFFU;
  ((uint8_t *)buf)[2] = (i)&0xFFU;
}

/* *****************************************************************************
Vector Math, Shuffle & Reduction on native types, for up to 2048 bits
***************************************************************************** */
#define FIO____SHFL_FN(T, prefx, len)                                          \
  FIO_IFUNC void fio_##prefx##x##len##_reshuffle(T *v, uint8_t indx[len]) {    \
    T tmp[len];                                                                \
    for (size_t i = 0; i < len; ++i) {                                         \
      tmp[i] = v[indx[i] & (len - 1)];                                         \
    }                                                                          \
    for (size_t i = 0; i < len; ++i) {                                         \
      v[i] = tmp[i];                                                           \
    }                                                                          \
  }
#define FIO____REDUCE_FN(T, prefx, len, opnm, op)                              \
  FIO_MIFN T fio_##prefx##x##len##_reduce_##opnm(T *v) {                       \
    T r = v[0];                                                                \
    for (size_t i = 1; i < len; ++i) {                                         \
      r = r op v[i];                                                           \
    }                                                                          \
    return r;                                                                  \
  }                                                                            \
  FIO_IFUNC void fio_##prefx##x##len##_##opnm(T *dest, T *a, T *b) {           \
    for (size_t i = 0; i < len; ++i)                                           \
      dest[i] = a[i] op b[i];                                                  \
  }
#define FIO____REDUCE_MINMAX(T, prefx, len)                                    \
  FIO_MIFN T fio_##prefx##x##len##_reduce_max(T *v) {                          \
    T r = v[0];                                                                \
    for (size_t i = 1; i < len; ++i) {                                         \
      r = r < v[i] ? v[i] : r;                                                 \
    }                                                                          \
    return r;                                                                  \
  }                                                                            \
  FIO_MIFN T fio_##prefx##x##len##_reduce_min(T *v) {                          \
    T r = v[0];                                                                \
    for (size_t i = 1; i < len; ++i) {                                         \
      r = r > v[i] ? v[i] : r;                                                 \
    }                                                                          \
    return r;                                                                  \
  }

#define FIO____SHFL_REDUCE(T, prefx, len)                                      \
  FIO____SHFL_FN(T, prefx, len)                                                \
  FIO____REDUCE_FN(T, prefx, len, add, +)                                      \
  FIO____REDUCE_FN(T, prefx, len, sub, -)                                      \
  FIO____REDUCE_FN(T, prefx, len, mul, *)                                      \
  FIO____REDUCE_FN(T, prefx, len, and, &)                                      \
  FIO____REDUCE_FN(T, prefx, len, or, |)                                       \
  FIO____REDUCE_FN(T, prefx, len, xor, ^)                                      \
  FIO____REDUCE_MINMAX(T, prefx, len)

FIO____SHFL_REDUCE(uint8_t, u8, 4)
FIO____SHFL_REDUCE(uint8_t, u8, 8)
FIO____SHFL_REDUCE(uint8_t, u8, 16)
FIO____SHFL_REDUCE(uint8_t, u8, 32)
FIO____SHFL_REDUCE(uint8_t, u8, 64)
FIO____SHFL_REDUCE(uint8_t, u8, 128)
FIO____SHFL_REDUCE(uint8_t, u8, 256)
FIO____SHFL_REDUCE(uint16_t, u16, 2)
FIO____SHFL_REDUCE(uint16_t, u16, 4)
FIO____SHFL_REDUCE(uint16_t, u16, 8)
FIO____SHFL_REDUCE(uint16_t, u16, 16)
FIO____SHFL_REDUCE(uint16_t, u16, 32)
FIO____SHFL_REDUCE(uint16_t, u16, 64)
FIO____SHFL_REDUCE(uint16_t, u16, 128)
FIO____SHFL_REDUCE(uint32_t, u32, 2)
FIO____SHFL_REDUCE(uint32_t, u32, 4)
FIO____SHFL_REDUCE(uint32_t, u32, 8)
FIO____SHFL_REDUCE(uint32_t, u32, 16)
FIO____SHFL_REDUCE(uint32_t, u32, 32)
FIO____SHFL_REDUCE(uint32_t, u32, 64)
FIO____SHFL_REDUCE(uint64_t, u64, 2)
FIO____SHFL_REDUCE(uint64_t, u64, 4)
FIO____SHFL_REDUCE(uint64_t, u64, 8)
FIO____SHFL_REDUCE(uint64_t, u64, 16)
FIO____SHFL_REDUCE(uint64_t, u64, 32)

#undef FIO____SHFL_REDUCE
#define FIO____SHFL_REDUCE(T, prefx, len)                                      \
  FIO____SHFL_FN(T, prefx, len)                                                \
  FIO____REDUCE_FN(T, prefx, len, add, +)                                      \
  FIO____REDUCE_FN(T, prefx, len, mul, *)                                      \
  FIO____REDUCE_MINMAX(T, prefx, len)

FIO____SHFL_REDUCE(float, float, 2)
FIO____SHFL_REDUCE(float, float, 4)
FIO____SHFL_REDUCE(float, float, 8)
FIO____SHFL_REDUCE(float, float, 16)
FIO____SHFL_REDUCE(float, float, 32)
FIO____SHFL_REDUCE(float, float, 64)
FIO____SHFL_REDUCE(double, dbl, 2)
FIO____SHFL_REDUCE(double, dbl, 4)
FIO____SHFL_REDUCE(double, dbl, 8)
FIO____SHFL_REDUCE(double, dbl, 16)
FIO____SHFL_REDUCE(double, dbl, 32)
#undef FIO____REDUCE_FN
#undef FIO____REDUCE_MINMAX
#undef FIO____SHFL_FN
#undef FIO____SHFL_REDUCE

/* clang-format off */
#define fio_u8x4_reshuffle(v, ...)     fio_u8x4_reshuffle(v,     (uint8_t[4]){__VA_ARGS__})
#define fio_u8x8_reshuffle(v, ...)     fio_u8x8_reshuffle(v,     (uint8_t[8]){__VA_ARGS__})
#define fio_u8x16_reshuffle(v, ...)    fio_u8x16_reshuffle(v,    (uint8_t[16]){__VA_ARGS__})
#define fio_u8x32_reshuffle(v, ...)    fio_u8x32_reshuffle(v,    (uint8_t[32]){__VA_ARGS__})
#define fio_u8x64_reshuffle(v, ...)    fio_u8x64_reshuffle(v,    (uint8_t[64]){__VA_ARGS__})
#define fio_u8x128_reshuffle(v, ...)   fio_u8x128_reshuffle(v,   (uint8_t[128]){__VA_ARGS__})
#define fio_u8x256_reshuffle(v, ...)   fio_u8x256_reshuffle(v,   (uint8_t[256]){__VA_ARGS__})
#define fio_u16x2_reshuffle(v, ...)    fio_u16x2_reshuffle(v,    (uint8_t[2]){__VA_ARGS__})
#define fio_u16x4_reshuffle(v, ...)    fio_u16x4_reshuffle(v,    (uint8_t[4]){__VA_ARGS__})
#define fio_u16x8_reshuffle(v, ...)    fio_u16x8_reshuffle(v,    (uint8_t[8]){__VA_ARGS__})
#define fio_u16x16_reshuffle(v, ...)   fio_u16x16_reshuffle(v,   (uint8_t[16]){__VA_ARGS__})
#define fio_u16x32_reshuffle(v, ...)   fio_u16x32_reshuffle(v,   (uint8_t[32]){__VA_ARGS__})
#define fio_u16x64_reshuffle(v, ...)   fio_u16x64_reshuffle(v,   (uint8_t[64]){__VA_ARGS__})
#define fio_u16x128_reshuffle(v,...)   fio_u16x128_reshuffle(v,  (uint8_t[128]){__VA_ARGS__})
#define fio_u32x2_reshuffle(v, ...)    fio_u32x2_reshuffle(v,    (uint8_t[2]){__VA_ARGS__})
#define fio_u32x4_reshuffle(v, ...)    fio_u32x4_reshuffle(v,    (uint8_t[4]){__VA_ARGS__})
#define fio_u32x8_reshuffle(v, ...)    fio_u32x8_reshuffle(v,    (uint8_t[8]){__VA_ARGS__})
#define fio_u32x16_reshuffle(v, ...)   fio_u32x16_reshuffle(v,   (uint8_t[16]){__VA_ARGS__})
#define fio_u32x32_reshuffle(v, ...)   fio_u32x32_reshuffle(v,   (uint8_t[32]){__VA_ARGS__})
#define fio_u32x64_reshuffle(v, ...)   fio_u32x64_reshuffle(v,   (uint8_t[64]){__VA_ARGS__})
#define fio_u64x2_reshuffle(v, ...)    fio_u64x2_reshuffle(v,    (uint8_t[2]){__VA_ARGS__})
#define fio_u64x4_reshuffle(v, ...)    fio_u64x4_reshuffle(v,    (uint8_t[4]){__VA_ARGS__})
#define fio_u64x8_reshuffle(v, ...)    fio_u64x8_reshuffle(v,    (uint8_t[8]){__VA_ARGS__})
#define fio_u64x16_reshuffle(v, ...)   fio_u64x16_reshuffle(v,   (uint8_t[16]){__VA_ARGS__})
#define fio_u64x32_reshuffle(v, ...)   fio_u64x32_reshuffle(v,   (uint8_t[32]){__VA_ARGS__})
#define fio_floatx2_reshuffle(v, ...)  fio_floatx2_reshuffle(v,  (uint8_t[2]){__VA_ARGS__})
#define fio_floatx4_reshuffle(v, ...)  fio_floatx4_reshuffle(v,  (uint8_t[4]){__VA_ARGS__})
#define fio_floatx8_reshuffle(v, ...)  fio_floatx8_reshuffle(v,  (uint8_t[8]){__VA_ARGS__})
#define fio_floatx16_reshuffle(v, ...) fio_floatx16_reshuffle(v, (uint8_t[16]){__VA_ARGS__})
#define fio_floatx32_reshuffle(v, ...) fio_floatx32_reshuffle(v, (uint8_t[32]){__VA_ARGS__})
#define fio_floatx64_reshuffle(v, ...) fio_floatx64_reshuffle(v, (uint8_t[64]){__VA_ARGS__})
#define fio_dblx2_reshuffle(v, ...)    fio_dblx2_reshuffle(v,    (uint8_t[2]){__VA_ARGS__})
#define fio_dblx4_reshuffle(v, ...)    fio_dblx4_reshuffle(v,    (uint8_t[4]){__VA_ARGS__})
#define fio_dblx8_reshuffle(v, ...)    fio_dblx8_reshuffle(v,    (uint8_t[8]){__VA_ARGS__})
#define fio_dblx16_reshuffle(v, ...)   fio_dblx16_reshuffle(v,   (uint8_t[16]){__VA_ARGS__})
#define fio_dblx32_reshuffle(v, ...)   fio_dblx32_reshuffle(v,   (uint8_t[32]){__VA_ARGS__})
/* clang-format on */

/* *****************************************************************************
Linked Lists Persistent Macros and Types
***************************************************************************** */

/** A linked list arch-type */
typedef struct fio_list_node_s {
  struct fio_list_node_s *next;
  struct fio_list_node_s *prev;
} fio_list_node_s;

/** A linked list node type */
#define FIO_LIST_NODE fio_list_node_s
/** A linked list head type */
#define FIO_LIST_HEAD fio_list_node_s

/** Allows initialization of FIO_LIST_HEAD objects. */
#define FIO_LIST_INIT(obj)                                                     \
  (fio_list_node_s) { .next = &(obj), .prev = &(obj) }

#ifndef FIO_LIST_EACH
/** Loops through every node in the linked list except the head. */
#define FIO_LIST_EACH(type, node_name, head, pos)                              \
  for (type *pos = FIO_PTR_FROM_FIELD(type, node_name, (head)->next),          \
            *next____p_ls_##pos =                                              \
                FIO_PTR_FROM_FIELD(type, node_name, (head)->next->next);       \
       pos != FIO_PTR_FROM_FIELD(type, node_name, (head));                     \
       (pos = next____p_ls_##pos),                                             \
            (next____p_ls_##pos =                                              \
                 FIO_PTR_FROM_FIELD(type,                                      \
                                    node_name,                                 \
                                    next____p_ls_##pos->node_name.next)))
/** Loops through every node in the linked list except the head. */
#define FIO_LIST_EACH_REVERSED(type, node_name, head, pos)                     \
  for (type *pos = FIO_PTR_FROM_FIELD(type, node_name, (head)->prev),          \
            *next____p_ls_##pos =                                              \
                FIO_PTR_FROM_FIELD(type, node_name, (head)->next->prev);       \
       pos != FIO_PTR_FROM_FIELD(type, node_name, (head));                     \
       (pos = next____p_ls_##pos),                                             \
            (next____p_ls_##pos =                                              \
                 FIO_PTR_FROM_FIELD(type,                                      \
                                    node_name,                                 \
                                    next____p_ls_##pos->node_name.prev)))
#endif

/** UNSAFE macro for pushing a node to a list. */
#define FIO_LIST_PUSH(head, n)                                                 \
  do {                                                                         \
    (n)->prev = (head)->prev;                                                  \
    (n)->next = (head);                                                        \
    (head)->prev->next = (n);                                                  \
    (head)->prev = (n);                                                        \
  } while (0)

/** UNSAFE macro for removing a node from a list. */
#define FIO_LIST_REMOVE(n)                                                     \
  do {                                                                         \
    (n)->prev->next = (n)->next;                                               \
    (n)->next->prev = (n)->prev;                                               \
  } while (0)

/** UNSAFE macro for removing a node from a list. Resets node data. */
#define FIO_LIST_REMOVE_RESET(n)                                               \
  do {                                                                         \
    (n)->prev->next = (n)->next;                                               \
    (n)->next->prev = (n)->prev;                                               \
    (n)->next = (n)->prev = (n);                                               \
  } while (0)

/** UNSAFE macro for popping a node to a list. */
#define FIO_LIST_POP(type, node_name, dest_ptr, head)                          \
  do {                                                                         \
    (dest_ptr) = FIO_PTR_FROM_FIELD(type, node_name, ((head)->next));          \
    FIO_LIST_REMOVE(&(dest_ptr)->node_name);                                   \
  } while (0)

/** UNSAFE macro for testing if a list is empty. */
#define FIO_LIST_IS_EMPTY(head)                                                \
  ((!(head)) || ((!(head)->next) | ((head)->next == (head))))

/* *****************************************************************************
Indexed Linked Lists Persistent Macros and Types

Indexed Linked Lists can be used to create a linked list that uses is always
relative to some root pointer (usually the root of an array). This:

1. Allows easy reallocation of the list without requiring pointer updates.

2. Could be used for memory optimization if the array limits are known.

The "head" index is usually validated by reserving the value of `-1` to indicate
an empty list.
***************************************************************************** */
#ifndef FIO_INDEXED_LIST_EACH

/** A 32 bit indexed linked list node type */
typedef struct fio_index32_node_s {
  uint32_t next;
  uint32_t prev;
} fio_index32_node_s;

/** A 16 bit indexed linked list node type */
typedef struct fio_index16_node_s {
  uint16_t next;
  uint16_t prev;
} fio_index16_node_s;

/** An 8 bit indexed linked list node type */
typedef struct fio_index8_node_s {
  uint8_t next;
  uint8_t prev;
} fio_index8_node_s;

/** A 32 bit indexed linked list node type */
#define FIO_INDEXED_LIST32_NODE fio_index32_node_s
#define FIO_INDEXED_LIST32_HEAD uint32_t
/** A 16 bit indexed linked list node type */
#define FIO_INDEXED_LIST16_NODE fio_index16_node_s
#define FIO_INDEXED_LIST16_HEAD uint16_t
/** An 8 bit indexed linked list node type */
#define FIO_INDEXED_LIST8_NODE fio_index8_node_s
#define FIO_INDEXED_LIST8_HEAD uint8_t

/** UNSAFE macro for pushing a node to a list. */
#define FIO_INDEXED_LIST_PUSH(root, node_name, head, i)                        \
  do {                                                                         \
    register const size_t n__ = (i);                                           \
    (root)[n__].node_name.prev = (root)[(head)].node_name.prev;                \
    (root)[n__].node_name.next = (head);                                       \
    (root)[(root)[(head)].node_name.prev].node_name.next = (n__);              \
    (root)[(head)].node_name.prev = (n__);                                     \
  } while (0)

/** UNSAFE macro for adding a node to the begging of the list. */
#define FIO_INDEXED_LIST_UNSHIFT(root, node_name, head, i)                     \
  do {                                                                         \
    register const size_t n__ = (i);                                           \
    (root)[n__].node_name.next = (root)[(head)].node_name.next;                \
    (root)[n__].node_name.prev = (head);                                       \
    (root)[(root)[(head)].node_name.next].node_name.prev = (n__);              \
    (root)[(head)].node_name.next = (n__);                                     \
    (head) = (n__);                                                            \
  } while (0)

/** UNSAFE macro for removing a node from a list. */
#define FIO_INDEXED_LIST_REMOVE(root, node_name, i)                            \
  do {                                                                         \
    register const size_t n__ = (i);                                           \
    (root)[(root)[n__].node_name.prev].node_name.next =                        \
        (root)[n__].node_name.next;                                            \
    (root)[(root)[n__].node_name.next].node_name.prev =                        \
        (root)[n__].node_name.prev;                                            \
  } while (0)

/** UNSAFE macro for removing a node from a list. Resets node data. */
#define FIO_INDEXED_LIST_REMOVE_RESET(root, node_name, i)                      \
  do {                                                                         \
    register const size_t n__ = (i);                                           \
    (root)[(root)[n__].node_name.prev].node_name.next =                        \
        (root)[n__].node_name.next;                                            \
    (root)[(root)[n__].node_name.next].node_name.prev =                        \
        (root)[n__].node_name.prev;                                            \
    (root)[n__].node_name.next = (root)[n__].node_name.prev = (n__);           \
  } while (0)

/** Loops through every index in the indexed list, assuming `head` is valid. */
#define FIO_INDEXED_LIST_EACH(root, node_name, head, pos)                      \
  for (size_t pos = (head),                                                    \
              stooper___hd = (head),                                           \
              stopper___ils___ = 0,                                            \
              pos##___nxt = (root)[(head)].node_name.next;                     \
       !stopper___ils___;                                                      \
       (stopper___ils___ = ((pos = pos##___nxt) == stooper___hd)),             \
              pos##___nxt = (root)[pos].node_name.next)

/** Loops through every index in the indexed list, assuming `head` is valid. */
#define FIO_INDEXED_LIST_EACH_REVERSED(root, node_name, head, pos)             \
  for (size_t pos = ((root)[(head)].node_name.prev),                           \
              pos##___nxt =                                                    \
                  ((root)[((root)[(head)].node_name.prev)].node_name.prev),    \
              stooper___hd = (head),                                           \
              stopper___ils___ = 0;                                            \
       !stopper___ils___;                                                      \
       ((stopper___ils___ = (pos == stooper___hd)),                            \
        (pos = pos##___nxt),                                                   \
        (pos##___nxt = (root)[pos##___nxt].node_name.prev)))
#endif

/* *****************************************************************************
Constant-Time Selectors
***************************************************************************** */

/** Returns 1 if the expression is true (input isn't zero). */
FIO_IFUNC uintmax_t fio_ct_true(uintmax_t cond) {
  // promise that the highest bit is set if any bits are set, than shift.
  return ((cond | (0 - cond)) >> ((sizeof(cond) << 3) - 1));
}

/** Returns 1 if the expression is false (input is zero). */
FIO_IFUNC uintmax_t fio_ct_false(uintmax_t cond) {
  // fio_ct_true returns only one bit, XOR will inverse that bit.
  return fio_ct_true(cond) ^ 1;
}

/** Returns `a` if `cond` is boolean and true, returns b otherwise. */
FIO_IFUNC uintmax_t fio_ct_if_bool(uintmax_t cond, uintmax_t a, uintmax_t b) {
  // b^(a^b) cancels b out. 0-1 => sets all bits.
  return (b ^ (((uintmax_t)0ULL - (cond & 1)) & (a ^ b)));
}

/** Returns `a` if `cond` isn't zero (uses fio_ct_true), returns b otherwise.
 */
FIO_IFUNC uintmax_t fio_ct_if(uintmax_t cond, uintmax_t a, uintmax_t b) {
  // b^(a^b) cancels b out. 0-1 => sets all bits.
  return fio_ct_if_bool(fio_ct_true(cond), a, b);
}

/** Returns `a` if a >= `b`. */
FIO_IFUNC intmax_t fio_ct_max(intmax_t a_, intmax_t b_) {
  // if b - a is negative, a > b, unless both / one are negative.
  const uintmax_t a = a_, b = b_;
  return (
      intmax_t)fio_ct_if_bool(((a - b) >> ((sizeof(a) << 3) - 1)) & 1, b, a);
}

/** Returns `a` if a >= `b`. */
FIO_IFUNC intmax_t fio_ct_min(intmax_t a_, intmax_t b_) {
  // if b - a is negative, a > b, unless both / one are negative.
  const uintmax_t a = a_, b = b_;
  return (
      intmax_t)fio_ct_if_bool(((a - b) >> ((sizeof(a) << 3) - 1)) & 1, a, b);
}

/** Returns absolute value. */
FIO_IFUNC uintmax_t fio_ct_abs(intmax_t i_) {
  // if b - a is negative, a > b, unless both / one are negative.
  const uintmax_t i = i_;
  return (intmax_t)fio_ct_if_bool((i >> ((sizeof(i) << 3) - 1)), 0 - i, i);
}

/* *****************************************************************************
Constant-Time Comparison Test
***************************************************************************** */

/** A timing attack resistant memory comparison function. */
FIO_SFUNC _Bool fio_ct_is_eq(const void *a_, const void *b_, size_t bytes) {
  uint64_t flag = 0;
  const char *a = (const char *)a_;
  const char *b = (const char *)b_;
  const char *e = a + bytes;
  /* any uneven bytes? */
  if (bytes & 63) {
    /* consume uneven byte head */
    uint64_t ua[8] FIO_ALIGN(16) = {0};
    uint64_t ub[8] FIO_ALIGN(16) = {0};
    /* all these if statements can run in parallel */
    if (bytes & 32) {
      fio_memcpy32(ua, a);
      fio_memcpy32(ub, b);
    }
    if (bytes & 16) {
      fio_memcpy16(ua + 4, a + (bytes & 32));
      fio_memcpy16(ub + 4, b + (bytes & 32));
    }
    if (bytes & 8) {
      fio_memcpy8(ua + 6, a + (bytes & 48));
      fio_memcpy8(ub + 6, b + (bytes & 48));
    }
    if (bytes & 4) {
      fio_memcpy4((uint32_t *)ua + 14, a + (bytes & 56));
      fio_memcpy4((uint32_t *)ub + 14, b + (bytes & 56));
    }
    if (bytes & 2) {
      fio_memcpy2((uint16_t *)ua + 30, a + (bytes & 60));
      fio_memcpy2((uint16_t *)ub + 30, b + (bytes & 60));
    }
    if (bytes & 1) {
      ((char *)ua)[62] = *(a + (bytes & 62));
      ((char *)ub)[62] = *(b + (bytes & 62));
    }
    for (size_t i = 0; i < 8; ++i)
      flag |= ua[i] ^ ub[i];
    a += bytes & 63;
    b += bytes & 63;
  }
  while (a < e) {
    uint64_t ua[8] FIO_ALIGN(16);
    uint64_t ub[8] FIO_ALIGN(16);
    fio_memcpy64(ua, a);
    fio_memcpy64(ub, b);
    for (size_t i = 0; i < 8; ++i)
      flag |= ua[i] ^ ub[i];
    a += 64;
    b += 64;
  }
  return !flag;
}

/* *****************************************************************************
Bit rotation
***************************************************************************** */

/** Left rotation for an unknown size element, inlined. */
#define FIO_LROT(i, bits)                                                      \
  (((i) << ((bits) & ((sizeof((i)) << 3) - 1))) |                              \
   ((i) >> ((-(bits)) & ((sizeof((i)) << 3) - 1))))

/** Right rotation for an unknown size element, inlined. */
#define FIO_RROT(i, bits)                                                      \
  (((i) >> ((bits) & ((sizeof((i)) << 3) - 1))) |                              \
   ((i) << ((-(bits)) & ((sizeof((i)) << 3) - 1))))

#if __has_builtin(__builtin_rotateleft8)
/** 8Bit left rotation, inlined. */
#define fio_lrot8(i, bits) __builtin_rotateleft8(i, bits)
#else
/** 8Bit left rotation, inlined. */
FIO_IFUNC uint8_t fio_lrot8(uint8_t i, uint8_t bits) {
  return ((i << (bits & 7UL)) | (i >> ((-(bits)) & 7UL)));
}
#endif

#if __has_builtin(__builtin_rotateleft16)
/** 16Bit left rotation, inlined. */
#define fio_lrot16(i, bits) __builtin_rotateleft16(i, bits)
#else
/** 16Bit left rotation, inlined. */
FIO_IFUNC uint16_t fio_lrot16(uint16_t i, uint8_t bits) {
  return ((i << (bits & 15UL)) | (i >> ((-(bits)) & 15UL)));
}
#endif

#if __has_builtin(__builtin_rotateleft32)
/** 32Bit left rotation, inlined. */
#define fio_lrot32(i, bits) __builtin_rotateleft32(i, bits)
#else
/** 32Bit left rotation, inlined. */
FIO_IFUNC uint32_t fio_lrot32(uint32_t i, uint8_t bits) {
  return ((i << (bits & 31UL)) | (i >> ((-(bits)) & 31UL)));
}
#endif

#if __has_builtin(__builtin_rotateleft64)
/** 64Bit left rotation, inlined. */
#define fio_lrot64(i, bits) __builtin_rotateleft64(i, bits)
#else
/** 64Bit left rotation, inlined. */
FIO_IFUNC uint64_t fio_lrot64(uint64_t i, uint8_t bits) {
  return ((i << ((bits)&63UL)) | (i >> ((-(bits)) & 63UL)));
}
#endif

#if __has_builtin(__builtin_rotatrightt8)
/** 8Bit right rotation, inlined. */
#define fio_rrot8(i, bits) __builtin_rotateright8(i, bits)
#else
/** 8Bit right rotation, inlined. */
FIO_IFUNC uint8_t fio_rrot8(uint8_t i, uint8_t bits) {
  return ((i >> (bits & 7UL)) | (i << ((-(bits)) & 7UL)));
}
#endif

#if __has_builtin(__builtin_rotateright16)
/** 16Bit right rotation, inlined. */
#define fio_rrot16(i, bits) __builtin_rotateright16(i, bits)
#else
/** 16Bit right rotation, inlined. */
FIO_IFUNC uint16_t fio_rrot16(uint16_t i, uint8_t bits) {
  return ((i >> (bits & 15UL)) | (i << ((-(bits)) & 15UL)));
}
#endif

#if __has_builtin(__builtin_rotateright32)
/** 32Bit right rotation, inlined. */
#define fio_rrot32(i, bits) __builtin_rotateright32(i, bits)
#else
/** 32Bit right rotation, inlined. */
FIO_IFUNC uint32_t fio_rrot32(uint32_t i, uint8_t bits) {
  return ((i >> (bits & 31UL)) | (i << ((-(bits)) & 31UL)));
}
#endif

#if __has_builtin(__builtin_rotateright64)
/** 64Bit right rotation, inlined. */
#define fio_rrot64(i, bits) __builtin_rotateright64(i, bits)
#else
/** 64Bit right rotation, inlined. */
FIO_IFUNC uint64_t fio_rrot64(uint64_t i, uint8_t bits) {
  return ((i >> ((bits)&63UL)) | (i << ((-(bits)) & 63UL)));
}
#endif

#ifdef __SIZEOF_INT128__
#if __has_builtin(__builtin_rotateright128) &&                                 \
    __has_builtin(__builtin_rotateleft128)
/** 128Bit left rotation, inlined. */
#define fio_lrot128(i, bits) __builtin_rotateleft128(i, bits)
/** 128Bit right rotation, inlined. */
#define fio_rrot128(i, bits) __builtin_rotateright128(i, bits)
#else
/** 128Bit left rotation, inlined. */
FIO_IFUNC __uint128_t fio_lrot128(__uint128_t i, uint8_t bits) {
  return ((i << ((bits)&127UL)) | (i >> ((-(bits)) & 127UL)));
}
/** 128Bit right rotation, inlined. */
FIO_IFUNC __uint128_t fio_rrot128(__uint128_t i, uint8_t bits) {
  return ((i >> ((bits)&127UL)) | (i << ((-(bits)) & 127UL)));
}
#endif
#endif /* __SIZEOF_INT128__ */

#if __LITTLE_ENDIAN__
/** Rotates the bits Forwards (endian specific). */
#define fio_frot16 fio_rrot16
/** Rotates the bits Forwards (endian specific). */
#define fio_frot32 fio_rrot32
/** Rotates the bits Forwards (endian specific). */
#define fio_frot64 fio_rrot64
#else
/** Rotates the bits Forwards (endian specific). */
#define fio_frot16 fio_lrot16
/** Rotates the bits Forwards (endian specific). */
#define fio_frot32 fio_lrot32
/** Rotates the bits Forwards (endian specific). */
#define fio_frot64 fio_lrot64
#endif

/* *****************************************************************************
Byte masking (XOR)
***************************************************************************** */

/**
 * Masks data using a persistent 64 bit mask.
 *
 * When the buffer's memory is aligned, the function may perform significantly
 * better.
 */
FIO_IFUNC void fio_xmask(char *buf_, size_t len, uint64_t mask) {
  register char *buf = (char *)buf_;
  for (size_t i = 31; i < len; i += 32) {
    for (size_t g = 0; g < 4; ++g) {
      fio_u2buf64u(buf, (fio_buf2u64u(buf) ^ mask));
      buf += 8;
    }
  }
  if (len & 16)
    for (size_t g = 0; g < 2; ++g) {
      fio_u2buf64u(buf, (fio_buf2u64u(buf) ^ mask));
      buf += 8;
    }
  if (len & 8) {
    fio_u2buf64u(buf, (fio_buf2u64u(buf) ^ mask));
    buf += 8;
  }
  {
    uint64_t tmp = 0;
    fio_memcpy7x(&tmp, buf, len);
    tmp ^= mask;
    fio_memcpy7x(buf, &tmp, len);
  }
}

/**
 * Masks data using a persistent 64 bit mask.
 *
 * When the buffer's memory is aligned, the function may perform significantly
 * better.
 */
FIO_IFUNC void fio_xmask_cpy(char *restrict dest,
                             const char *src,
                             size_t len,
                             uint64_t mask) {
  if (dest == src) {
    fio_xmask(dest, len, mask);
    return;
  }
  for (size_t i = 31; i < len; i += 32) {
    for (size_t g = 0; g < 4; ++g) {
      fio_u2buf64u(dest, (fio_buf2u64u(src) ^ mask));
      dest += 8;
      src += 8;
    }
  }
  if (len & 16)
    for (size_t g = 0; g < 2; ++g) {
      fio_u2buf64u(dest, (fio_buf2u64u(src) ^ mask));
      dest += 8;
      src += 8;
    }
  if (len & 8) {
    fio_u2buf64u(dest, (fio_buf2u64u(src) ^ mask));
    dest += 8;
    src += 8;
  }
  if (len & 7) {
    uint64_t tmp;
    fio_memcpy7x(&tmp, src, len);
    tmp ^= mask;
    fio_memcpy7x(dest, &tmp, len);
  }
}

/* *****************************************************************************
Popcount (set bit counting) and Hemming Distance
***************************************************************************** */

#if __has_builtin(__builtin_popcountll)
/** performs a `popcount` operation to count the set bits. */
#define fio_popcount(n) __builtin_popcountll(n)
#else
FIO_IFUNC int fio_popcount(uint64_t n) {
  /* for logic, see Wikipedia: https://en.wikipedia.org/wiki/Hamming_weight */
  n = n - ((n >> 1) & 0x5555555555555555);
  n = (n & 0x3333333333333333) + ((n >> 2) & 0x3333333333333333);
  n = (n + (n >> 4)) & 0x0f0f0f0f0f0f0f0f;
  n = n + (n >> 8);
  n = n + (n >> 16);
  n = n + (n >> 32);
  return n & 0x7f;
}
#endif

#define fio_hemming_dist(n1, n2) fio_popcount(((uint64_t)(n1) ^ (uint64_t)(n2)))

/* *****************************************************************************
Bit Mapping (placed here to avoid dependency between FIO_MEMALT and FIO_MATH)
***************************************************************************** */
#if !defined(__has_builtin) || !__has_builtin(__builtin_ctzll) ||              \
    !__has_builtin(__builtin_clzll)
FIO_SFUNC size_t fio___single_bit_index_unsafe(uint64_t i) {
  switch (i) {
  case UINT64_C(0x1): return 0;
  case UINT64_C(0x2): return 1;
  case UINT64_C(0x4): return 2;
  case UINT64_C(0x8): return 3;
  case UINT64_C(0x10): return 4;
  case UINT64_C(0x20): return 5;
  case UINT64_C(0x40): return 6;
  case UINT64_C(0x80): return 7;
  case UINT64_C(0x100): return 8;
  case UINT64_C(0x200): return 9;
  case UINT64_C(0x400): return 10;
  case UINT64_C(0x800): return 11;
  case UINT64_C(0x1000): return 12;
  case UINT64_C(0x2000): return 13;
  case UINT64_C(0x4000): return 14;
  case UINT64_C(0x8000): return 15;
  case UINT64_C(0x10000): return 16;
  case UINT64_C(0x20000): return 17;
  case UINT64_C(0x40000): return 18;
  case UINT64_C(0x80000): return 19;
  case UINT64_C(0x100000): return 20;
  case UINT64_C(0x200000): return 21;
  case UINT64_C(0x400000): return 22;
  case UINT64_C(0x800000): return 23;
  case UINT64_C(0x1000000): return 24;
  case UINT64_C(0x2000000): return 25;
  case UINT64_C(0x4000000): return 26;
  case UINT64_C(0x8000000): return 27;
  case UINT64_C(0x10000000): return 28;
  case UINT64_C(0x20000000): return 29;
  case UINT64_C(0x40000000): return 30;
  case UINT64_C(0x80000000): return 31;
  case UINT64_C(0x100000000): return 32;
  case UINT64_C(0x200000000): return 33;
  case UINT64_C(0x400000000): return 34;
  case UINT64_C(0x800000000): return 35;
  case UINT64_C(0x1000000000): return 36;
  case UINT64_C(0x2000000000): return 37;
  case UINT64_C(0x4000000000): return 38;
  case UINT64_C(0x8000000000): return 39;
  case UINT64_C(0x10000000000): return 40;
  case UINT64_C(0x20000000000): return 41;
  case UINT64_C(0x40000000000): return 42;
  case UINT64_C(0x80000000000): return 43;
  case UINT64_C(0x100000000000): return 44;
  case UINT64_C(0x200000000000): return 45;
  case UINT64_C(0x400000000000): return 46;
  case UINT64_C(0x800000000000): return 47;
  case UINT64_C(0x1000000000000): return 48;
  case UINT64_C(0x2000000000000): return 49;
  case UINT64_C(0x4000000000000): return 50;
  case UINT64_C(0x8000000000000): return 51;
  case UINT64_C(0x10000000000000): return 52;
  case UINT64_C(0x20000000000000): return 53;
  case UINT64_C(0x40000000000000): return 54;
  case UINT64_C(0x80000000000000): return 55;
  case UINT64_C(0x100000000000000): return 56;
  case UINT64_C(0x200000000000000): return 57;
  case UINT64_C(0x400000000000000): return 58;
  case UINT64_C(0x800000000000000): return 59;
  case UINT64_C(0x1000000000000000): return 60;
  case UINT64_C(0x2000000000000000): return 61;
  case UINT64_C(0x4000000000000000): return 62;
  case UINT64_C(0x8000000000000000): return 63;
  }
  return (0ULL - 1ULL);
}
#endif /* __builtin_ctzll || __builtin_clzll */

/** Returns the index of the least significant (lowest) bit. */
FIO_SFUNC size_t fio_lsb_index_unsafe(uint64_t i) {
#if defined(__has_builtin) && __has_builtin(__builtin_ctzll)
  return __builtin_ctzll(i);
#else
  return fio___single_bit_index_unsafe(i & ((~i) + 1));
#endif /* __builtin vs. map */
}

/** Returns the index of the most significant (highest) bit. */
FIO_SFUNC size_t fio_msb_index_unsafe(uint64_t i) {
#if defined(__has_builtin) && __has_builtin(__builtin_clzll)
  return 63 - __builtin_clzll(i);
#else
  i |= i >> 1;
  i |= i >> 2;
  i |= i >> 4;
  i |= i >> 8;
  i |= i >> 16;
  i |= i >> 32;
  i = ((i + 1) >> 1) | (i & ((uint64_t)1ULL << 63));
  return fio___single_bit_index_unsafe(i);
#endif /* __builtin vs. map */
}

/* *****************************************************************************
Byte Value helpers
***************************************************************************** */

/**
 * Detects a byte where no bits are set (0) within a 4 byte vector.
 *
 * The zero byte will be be set to 0x80, all other bytes will be 0x0.
 */
FIO_IFUNC uint32_t fio_has_zero_byte32(uint32_t row) {
  return (row - UINT32_C(0x01010101)) & (~row & UINT32_C(0x80808080));
}

/**
 * Detects if `byte` exists within a 4 byte vector.
 *
 * The requested byte will be be set to 0x80, all other bytes will be 0x0.
 */
FIO_IFUNC uint32_t fio_has_byte32(uint32_t row, uint8_t byte) {
  return fio_has_zero_byte32((row ^ (UINT32_C(0x01010101) * byte)));
}

/**
 * Detects a byte where all the bits are set (255) within a 4 byte vector.
 *
 * The full byte will be be set to 0x80, all other bytes will be 0x0.
 */
FIO_IFUNC uint32_t fio_has_full_byte32(uint32_t row) {
  return fio_has_zero_byte32(row);
  // return ((row & UINT32_C(0x7F7F7F7F)) + UINT32_C(0x01010101)) &
  //        (row & UINT32_C(0x80808080));
}

/**
 * Detects a byte where no bits are set (0) within an 8 byte vector.
 *
 * The zero byte will be be set to 0x80, all other bytes will be 0x0.
 */
FIO_IFUNC uint64_t fio_has_zero_byte64(uint64_t row) {
#define FIO_HAS_ZERO_BYTE64(row)                                               \
  (((row)-UINT64_C(0x0101010101010101)) &                                      \
   ((~(row)) & UINT64_C(0x8080808080808080)))
  return FIO_HAS_ZERO_BYTE64(row);
}

/**
 * Detects a byte where no bits are set (0) within an 8 byte vector.
 *
 * This variation should NOT be used to build a bitmap, but May be used to
 * detect the first occurrence.
 */
FIO_IFUNC uint64_t fio_has_zero_byte_alt64(uint64_t row) {
#define FIO_HAS_ZERO_BYTE64(row)                                               \
  (((row)-UINT64_C(0x0101010101010101)) &                                      \
   ((~(row)) & UINT64_C(0x8080808080808080)))
  return FIO_HAS_ZERO_BYTE64(row);
}

/**
 * Detects if `byte` exists within an 8 byte vector.
 *
 * The requested byte will be be set to 0x80, all other bytes will be 0x0.
 */
FIO_IFUNC uint64_t fio_has_byte64(uint64_t row, uint8_t byte) {
  return fio_has_zero_byte64((row ^ (UINT64_C(0x0101010101010101) * byte)));
}

/**
 * Detects a byte where all the bits are set (255) within an 8 byte vector.
 *
 * The full byte will be be set to 0x80, all other bytes will be 0x0.
 */
FIO_IFUNC uint64_t fio_has_full_byte64(uint64_t row) {
#define FIO_HAS_FULL_BYTE64(row)                                               \
  ((((row)&UINT64_C(0x7F7F7F7F7F7F7F7F)) + UINT64_C(0x0101010101010101)) &     \
   (row)&UINT64_C(0x8080808080808080))
  return FIO_HAS_FULL_BYTE64(row);
}

/** Converts a `fio_has_byteX` result to a bitmap. */
FIO_IFUNC uint64_t fio_has_byte2bitmap(uint64_t result) {
/** Converts a FIO_HAS_FULL_BYTE64 result to relative position bitmap. */
#define FIO_HAS_BYTE2BITMAP(result, bit_index)                                 \
  do {                                                                         \
    (result) = fio_ltole64((result)); /* map little endian to bitmap */        \
    (result) >>= bit_index;           /* move bit index to 0x01 */             \
    (result) |= (result) >> 7;        /* pack all 0x80 bits into one byte */   \
    (result) |= (result) >> 14;                                                \
    (result) |= (result) >> 28;                                                \
    (result) &= 0xFFU;                                                         \
  } while (0)
  FIO_HAS_BYTE2BITMAP(result, 7);
  return result;
}

/** Isolates the least significant (lowest) bit. */
FIO_IFUNC uint64_t fio_bits_lsb(uint64_t i) { return (i & ((~i) + 1)); }

/** Isolates the most significant (highest) bit. */
FIO_IFUNC uint64_t fio_bits_msb(uint64_t i) {
  i |= i >> 1;
  i |= i >> 2;
  i |= i >> 4;
  i |= i >> 8;
  i |= i >> 16;
  i |= i >> 32;
  i = ((i + 1) >> 1) | (i & ((uint64_t)1ULL << 63));
  return i;
}

/** Returns the index of the most significant (highest) bit. */
FIO_IFUNC size_t fio_bits_msb_index(uint64_t i) {
  if (!i)
    goto zero;
  return fio_msb_index_unsafe(i);
zero:
  return (size_t)-1;
}

/** Returns the index of the least significant (lowest) bit. */
FIO_IFUNC size_t fio_bits_lsb_index(uint64_t i) {
  if (!i)
    goto zero;
  return fio_lsb_index_unsafe(i);
zero:
  return (size_t)-1;
}

/* *****************************************************************************
Bitmap access / manipulation
***************************************************************************** */

/** Gets the state of a bit in a bitmap. */
FIO_IFUNC uint8_t fio_bit_get(void *map, size_t bit) {
  return ((((uint8_t *)(map))[(bit) >> 3] >> ((bit)&7)) & 1);
}

/** Sets the a bit in a bitmap (sets to 1). */
FIO_IFUNC void fio_bit_set(void *map, size_t bit) {
  ((uint8_t *)map)[bit >> 3] |= (uint8_t)(1UL << (bit & 7));
}

/** Unsets the a bit in a bitmap (sets to 0). */
FIO_IFUNC void fio_bit_unset(void *map, size_t bit) {
  ((uint8_t *)map)[bit >> 3] &= (uint8_t)(~(1UL << (bit & 7)));
}

/** Flips the a bit in a bitmap (sets to 0 if 1, sets to 1 if 0). */
FIO_IFUNC void fio_bit_flip(void *map, size_t bit) {
  ((uint8_t *)map)[bit >> 3] ^= (uint8_t)((1UL << (bit & 7)));
}

/* *****************************************************************************
Fun Primes
***************************************************************************** */

/* Primes with with 16 bits, half of them set. */
#define FIO_U16_HASH_PRIME0 0xDA23U
#define FIO_U16_HASH_PRIME1 0xB48BU
#define FIO_U16_HASH_PRIME2 0xC917U
#define FIO_U16_HASH_PRIME3 0xD855U
#define FIO_U16_HASH_PRIME4 0xE0B9U
#define FIO_U16_HASH_PRIME5 0xE471U
#define FIO_U16_HASH_PRIME6 0x85CDU
#define FIO_U16_HASH_PRIME7 0xD433U
#define FIO_U16_HASH_PRIME8 0xE951U
#define FIO_U16_HASH_PRIME9 0xA8E5U

/* Primes with with 32 bits, half of them set. */
#define FIO_U32_HASH_PRIME0 0xC19F5985UL
#define FIO_U32_HASH_PRIME1 0x8D567931UL
#define FIO_U32_HASH_PRIME2 0x9C178B17UL
#define FIO_U32_HASH_PRIME3 0xA4B842DFUL
#define FIO_U32_HASH_PRIME4 0xB0B94EC9UL
#define FIO_U32_HASH_PRIME5 0xFA9E7084UL
#define FIO_U32_HASH_PRIME6 0xCA63037BUL
#define FIO_U32_HASH_PRIME7 0xD728C15DUL
#define FIO_U32_HASH_PRIME8 0xA872A277UL
#define FIO_U32_HASH_PRIME9 0xF5781551UL

/* Primes with with 64 bits, half of them set. */
#define FIO_U64_HASH_PRIME0 0x39664DEECA23D825
#define FIO_U64_HASH_PRIME1 0x48644F7B3959621F
#define FIO_U64_HASH_PRIME2 0x613A19F5CB0D98D5
#define FIO_U64_HASH_PRIME3 0x84B56B93C869EA0F
#define FIO_U64_HASH_PRIME4 0x8EE38D13E0D95A8D
#define FIO_U64_HASH_PRIME5 0x92E99EC981F0E279
#define FIO_U64_HASH_PRIME6 0xDDC3100BEF158BB1
#define FIO_U64_HASH_PRIME7 0x918F4D38049F78BD
#define FIO_U64_HASH_PRIME8 0xB6C9F8032A35E2D9
#define FIO_U64_HASH_PRIME9 0xFA2A5F16D2A128D5

/* *****************************************************************************
64bit addition (ADD) / subtraction (SUB) / multiplication (MUL) with carry.
***************************************************************************** */

/** Add with carry. */
FIO_MIFN uint64_t fio_math_addc64(uint64_t a,
                                  uint64_t b,
                                  uint64_t carry_in,
                                  uint64_t *carry_out) {
  FIO_ASSERT_DEBUG(carry_out, "fio_math_addc64 requires a carry pointer");
#if __has_builtin(__builtin_addcll) && UINT64_MAX == LLONG_MAX
  return __builtin_addcll(a, b, carry_in, (unsigned long long *)carry_out);
#elif defined(__SIZEOF_INT128__) && 0
  /* This is actually slower as it occupies more CPU registers */
  __uint128_t u = (__uint128_t)a + b + carry_in;
  *carry_out = (uint64_t)(u >> 64U);
  return (uint64_t)u;
#else
  uint64_t u = a + (b += carry_in);
  *carry_out = (b < carry_in) + (u < a);
  return u;
#endif
}

/** Multi-precision ADD for `len` 64 bit words a + b. Returns the carry. */
FIO_MIFN bool fio_math_add(uint64_t *dest,
                           const uint64_t *a,
                           const uint64_t *b,
                           const size_t len) {
  uint64_t c = 0;
  for (size_t i = 0; i < len; ++i)
    dest[i] = fio_math_addc64(a[i], b[i], c, &c);
  return (bool)c;
}

#ifdef __SIZEOF_INT128__
/** Multi-precision ADD for `bits` long a + b. Returns the carry. */
FIO_MIFN __uint128_t fio_math_addc128(const __uint128_t a,
                                      const __uint128_t b,
                                      bool carry_in,
                                      bool *carry_out) {
  __uint128_t r = a + b + carry_in;
  *carry_out = (r < a) | ((r == a) & carry_in);
  return r;
}
FIO_MIFN bool fio_math_add2(__uint128_t *dest,
                            const __uint128_t *a,
                            const __uint128_t *b,
                            const size_t len) {
  bool c = 0;
  for (size_t i = 0; i < len; ++i)
    dest[i] = fio_math_addc128(a[i], b[i], c, &c);
  return c;
}
#endif

/** Subtract with borrow. */
FIO_MIFN uint64_t fio_math_subc64(uint64_t a,
                                  uint64_t b,
                                  uint64_t borrow_in,
                                  uint64_t *borrow_out) {
  FIO_ASSERT_DEBUG(borrow_out, "fio_math_subc64 requires a carry pointer");
#if __has_builtin(__builtin_subcll) && UINT64_MAX == LLONG_MAX
  uint64_t u =
      __builtin_subcll(a, b, borrow_in, (unsigned long long *)borrow_out);
#elif defined(__SIZEOF_INT128__)
  __uint128_t u = (__uint128_t)a - b - borrow_in;
  if (borrow_out)
    *borrow_out = (uint64_t)(u >> 127U);
#else
  uint64_t u = a - b;
  a = u > a;
  b = u < borrow_in;
  u -= borrow_in;
  *borrow_out = a + b;
#endif
  return (uint64_t)u;
}

/** Multi-precision SUB for `len` 64 bit words a + b. Returns the borrow. */
FIO_MIFN uint64_t fio_math_sub(uint64_t *dest,
                               const uint64_t *a,
                               const uint64_t *b,
                               const size_t len) {
  uint64_t c = 0;
  for (size_t i = 0; i < len; ++i)
    dest[i] = fio_math_subc64(a[i], b[i], c, &c);
  return c;
}

/** Multiply with carry out. */
FIO_MIFN uint64_t fio_math_mulc64(uint64_t a, uint64_t b, uint64_t *carry_out) {
  FIO_ASSERT_DEBUG(carry_out, "fio_math_mulc64 requires a carry pointer");
#if defined(__SIZEOF_INT128__)
  __uint128_t r = (__uint128_t)a * b;
  *carry_out = (uint64_t)(r >> 64U);
#else /* long multiplication using 32 bits results in up to 64 bit result */
  uint64_t r, midc = 0, lowc = 0;
  const uint64_t al = a & 0xFFFFFFFF;
  const uint64_t ah = a >> 32;
  const uint64_t bl = b & 0xFFFFFFFF;
  const uint64_t bh = b >> 32;
  const uint64_t lo = al * bl;
  const uint64_t hi = ah * bh;
  const uint64_t mid = fio_math_addc64(al * bh, ah * bl, 0, &midc);
  r = fio_math_addc64(lo, (mid << 32), 0, &lowc);
  *carry_out = hi + (mid >> 32) + (midc << 32) + lowc;
#endif
  return (uint64_t)r;
}

/**
 * Multi-precision long multiplication for `len` 64 bit words.
 *
 * `dest` must be `len * 2` long to hold the result.
 *
 * `a` and `b` must be of equal `len`.
 *
 * This uses long multiplication, which may be slower for larger numbers.
 */
FIO_IFUNC void fio___math_mul_long(uint64_t *restrict target,
                                   const uint64_t *a,
                                   const uint64_t *b,
                                   const size_t len) {
  for (size_t i = 0; i < len; ++i)
    target[i] = 0; /* zero out result */
  for (size_t i = 0; i < len; ++i) {
#ifdef __SIZEOF_INT128__
    __uint128_t carry = 0;
    for (size_t j = 0; j < len; j++) {
      size_t k = i + j;
      __uint128_t product = (__uint128_t)a[i] * b[j];
      __uint128_t sum =
          (__uint128_t)target[k] + (product & 0xFFFFFFFFFFFFFFFF) + carry;
      target[k] = (uint64_t)sum;
      carry = (product >> 64) + (sum >> 64);
    }
    target[i + len] += (uint64_t)carry;
#else
    uint64_t ch = 0, cl = 0;
    for (size_t j = 0; j < len; ++j) {
      /* Multiply hi and lo parts, getting a 128-bit result (hi:lo)  */
      uint64_t hi, lo;
      lo = fio_math_mulc64(a[i], b[j], &hi);
      /* add to result, propagate carry */
      target[i + j] = fio_math_addc64(target[i + j], lo, cl, &cl);
      target[i + j + 1] = fio_math_addc64(target[i + j + 1], hi, ch, &ch);
    }
    target[len - 1] += cl;
#endif
  }
}

/**
 * Multi-precision MUL for `len` 64 bit words.
 *
 * `dest` must be `len * 2` long to hold the result.
 *
 * `a` and `b` must be of equal `len`.
 */
FIO_IFUNC void fio_math_mul(uint64_t *restrict dest,
                            const uint64_t *a,
                            const uint64_t *b,
                            const size_t len) {
  if (!len) {
    dest[0] = 0;
  }
  if (len == 1) { /* route to the correct function */
    dest[0] = fio_math_mulc64(a[0], b[0], dest + 1);
  } else { // len < 16
    fio___math_mul_long(dest, a, b, len);
  }
  /* FIXME!!! (len >= 16) ? Karatsuba-ish / FFT math? : long mul */
}

/* *****************************************************************************
Vector Types (SIMD / Math)
***************************************************************************** */
#if FIO___HAS_ARM_INTRIN || __has_attribute(vector_size)
#define FIO_HAS_UX 1
#endif

/** An unsigned 128bit union type. */
typedef union {
  /** unsigned native word size array, length is system dependent */
  size_t uz[16 / sizeof(size_t)];
  /** known bit word arrays */
  uint64_t u64[2];
  uint32_t u32[4];
  uint16_t u16[8];
  uint8_t u8[16];
  /** vector types, if supported */
#if FIO___HAS_ARM_INTRIN
  uint64x2_t x64[1];
  uint32x4_t x32[1];
  uint16x8_t x16[1];
  uint8x16_t x8[1];
#elif __has_attribute(vector_size)
  uint64_t __attribute__((vector_size(16))) x64[1];
  uint32_t __attribute__((vector_size(16))) x32[1];
  uint16_t __attribute__((vector_size(16))) x16[1];
  uint8_t __attribute__((vector_size(16))) x8[1];
#endif
#if defined(__SIZEOF_INT128__)
  __uint128_t alignment_for_u128_[1];
#endif
} fio_u128 FIO_ALIGN(16);

/** An unsigned 256bit union type. */
typedef union {
  size_t uz[32 / sizeof(size_t)];
  uint64_t u64[4];
  uint32_t u32[8];
  uint16_t u16[16];
  uint8_t u8[32];
  fio_u128 u128[2];
#if FIO___HAS_ARM_INTRIN
  uint64x2_t x64[2];
  uint32x4_t x32[2];
  uint16x8_t x16[2];
  uint8x16_t x8[2];
#elif __has_attribute(vector_size)
  uint64_t __attribute__((vector_size(32))) x64[1];
  uint32_t __attribute__((vector_size(32))) x32[1];
  uint16_t __attribute__((vector_size(32))) x16[1];
  uint8_t __attribute__((vector_size(32))) x8[1];
#endif
#if defined(__SIZEOF_INT128__)
  __uint128_t alignment_for_u128_[2];
#endif
#if defined(__SIZEOF_INT256__)
  __uint256_t alignment_for_u256_[1];
#endif
} fio_u256 FIO_ALIGN(16);

/** An unsigned 512bit union type. */
typedef union {
  size_t uz[64 / sizeof(size_t)];
  uint64_t u64[8];
  uint32_t u32[16];
  uint16_t u16[32];
  uint8_t u8[64];
  fio_u128 u128[4];
  fio_u256 u256[2];
#if FIO___HAS_ARM_INTRIN
  uint64x2_t x64[4];
  uint32x4_t x32[4];
  uint16x8_t x16[4];
  uint8x16_t x8[4];
#elif __has_attribute(vector_size)
  uint64_t __attribute__((vector_size(64))) x64[1];
  uint32_t __attribute__((vector_size(64))) x32[1];
  uint16_t __attribute__((vector_size(64))) x16[1];
  uint8_t __attribute__((vector_size(64))) x8[1];
#endif
} fio_u512 FIO_ALIGN(16);

/** An unsigned 1024bit union type. */
typedef union {
  size_t uz[128 / sizeof(size_t)];
  uint64_t u64[16];
  uint32_t u32[32];
  uint16_t u16[64];
  uint8_t u8[128];
  fio_u128 u128[8];
  fio_u256 u256[4];
  fio_u512 u512[2];
#if FIO___HAS_ARM_INTRIN
  uint64x2_t x64[8];
  uint32x4_t x32[8];
  uint16x8_t x16[8];
  uint8x16_t x8[8];
#elif __has_attribute(vector_size)
  uint64_t __attribute__((vector_size(128))) x64[1];
  uint32_t __attribute__((vector_size(128))) x32[1];
  uint16_t __attribute__((vector_size(128))) x16[1];
  uint8_t __attribute__((vector_size(128))) x8[1];
#endif
} fio_u1024 FIO_ALIGN(16);

/** An unsigned 2048bit union type. */
typedef union {
  size_t uz[256 / sizeof(size_t)];
  uint64_t u64[32];
  uint32_t u32[64];
  uint16_t u16[128];
  uint8_t u8[256];
  fio_u128 u128[16];
  fio_u256 u256[8];
  fio_u512 u512[4];
  fio_u1024 u1024[2];
#if FIO___HAS_ARM_INTRIN
  uint64x2_t x64[16];
  uint32x4_t x32[16];
  uint16x8_t x16[16];
  uint8x16_t x8[16];
#elif __has_attribute(vector_size)
  uint64_t __attribute__((vector_size(256))) x64[1];
  uint32_t __attribute__((vector_size(256))) x32[1];
  uint16_t __attribute__((vector_size(256))) x16[1];
  uint8_t __attribute__((vector_size(256))) x8[1];
#endif
} fio_u2048 FIO_ALIGN(16);

/** An unsigned 4096bit union type. */
typedef union {
  size_t uz[512 / sizeof(size_t)];
  uint64_t u64[64];
  uint32_t u32[128];
  uint16_t u16[256];
  uint8_t u8[512];
  fio_u128 u128[32];
  fio_u256 u256[16];
  fio_u512 u512[8];
  fio_u1024 u1024[4];
  fio_u2048 u2048[2];
#if FIO___HAS_ARM_INTRIN
  uint64x2_t x64[32];
  uint32x4_t x32[32];
  uint16x8_t x16[32];
  uint8x16_t x8[32];
#elif __has_attribute(vector_size)
  uint64_t __attribute__((vector_size(512))) x64[1];
  uint32_t __attribute__((vector_size(512))) x32[1];
  uint16_t __attribute__((vector_size(512))) x16[1];
  uint8_t __attribute__((vector_size(512))) x8[1];
#endif
} fio_u4096 FIO_ALIGN(16);

FIO_ASSERT_STATIC(sizeof(fio_u4096) == 512, "Math type size error!");

#define fio_u128_init8(...)  ((fio_u128){.u8 = {__VA_ARGS__}})
#define fio_u128_init16(...) ((fio_u128){.u16 = {__VA_ARGS__}})
#define fio_u128_init32(...) ((fio_u128){.u32 = {__VA_ARGS__}})
#define fio_u128_init64(...) ((fio_u128){.u64 = {__VA_ARGS__}})
#define fio_u256_init8(...)  ((fio_u256){.u8 = {__VA_ARGS__}})
#define fio_u256_init16(...) ((fio_u256){.u16 = {__VA_ARGS__}})
#define fio_u256_init32(...) ((fio_u256){.u32 = {__VA_ARGS__}})
#define fio_u256_init64(...) ((fio_u256){.u64 = {__VA_ARGS__}})
#define fio_u512_init8(...)  ((fio_u512){.u8 = {__VA_ARGS__}})
#define fio_u512_init16(...) ((fio_u512){.u16 = {__VA_ARGS__}})
#define fio_u512_init32(...) ((fio_u512){.u32 = {__VA_ARGS__}})
#define fio_u512_init64(...) ((fio_u512){.u64 = {__VA_ARGS__}})

#define fio_u1024_init8(...)  ((fio_u1024){.u8 = {__VA_ARGS__}})
#define fio_u1024_init16(...) ((fio_u1024){.u16 = {__VA_ARGS__}})
#define fio_u1024_init32(...) ((fio_u1024){.u32 = {__VA_ARGS__}})
#define fio_u1024_init64(...) ((fio_u1024){.u64 = {__VA_ARGS__}})
#define fio_u2048_init8(...)  ((fio_u2048){.u8 = {__VA_ARGS__}})
#define fio_u2048_init16(...) ((fio_u2048){.u16 = {__VA_ARGS__}})
#define fio_u2048_init32(...) ((fio_u2048){.u32 = {__VA_ARGS__}})
#define fio_u2048_init64(...) ((fio_u2048){.u64 = {__VA_ARGS__}})
#define fio_u4096_init8(...)  ((fio_u4096){.u8 = {__VA_ARGS__}})
#define fio_u4096_init16(...) ((fio_u4096){.u16 = {__VA_ARGS__}})
#define fio_u4096_init32(...) ((fio_u4096){.u32 = {__VA_ARGS__}})
#define fio_u4096_init64(...) ((fio_u4096){.u64 = {__VA_ARGS__}})

/* *****************************************************************************
Vector Helpers - memory load operations (implementation starts here)
***************************************************************************** */

#define FIO_MATH_TYPE_LOADER(bits, bytes)                                      \
  /** Loads from memory using local-endian. */                                 \
  FIO_MIFN fio_u##bits fio_u##bits##_load(const void *buf) {                   \
    fio_u##bits r;                                                             \
    fio_memcpy##bytes(&r, buf);                                                \
    return r;                                                                  \
  }                                                                            \
  /** Stores to memory using local-endian. */                                  \
  FIO_IFUNC void fio_u##bits##_store(void *buf, const fio_u##bits a) {         \
    fio_memcpy##bytes(buf, &a);                                                \
  }                                                                            \
  FIO_VECTOR_LOADER_ENDIAN_FUNC(bits, 16)                                      \
  FIO_VECTOR_LOADER_ENDIAN_FUNC(bits, 32)                                      \
  FIO_VECTOR_LOADER_ENDIAN_FUNC(bits, 64)

#define FIO_VECTOR_LOADER_ENDIAN_FUNC(total_bits, bits)                        \
  /** Loads vector from memory, reading from little-endian.  */                \
  FIO_MIFN fio_u##total_bits fio_u##total_bits##_load_le##bits(                \
      const void *buf) {                                                       \
    fio_u##total_bits r = fio_u##total_bits##_load(buf);                       \
    for (size_t i = 0; i < (total_bits / bits); ++i) {                         \
      r.u##bits[i] = fio_ltole##bits(r.u##bits[i]);                            \
    }                                                                          \
    return r;                                                                  \
  }                                                                            \
  /** Loads vector from memory, reading from big-endian.  */                   \
  FIO_MIFN fio_u##total_bits fio_u##total_bits##_load_be##bits(                \
      const void *buf) {                                                       \
    fio_u##total_bits r = fio_u##total_bits##_load(buf);                       \
    for (size_t i = 0; i < (total_bits / bits); ++i) {                         \
      r.u##bits[i] = fio_lton##bits(r.u##bits[i]);                             \
    }                                                                          \
    return r;                                                                  \
  }                                                                            \
  FIO_MIFN fio_u##total_bits fio_u##total_bits##_bswap##bits(                  \
      fio_u##total_bits a) {                                                   \
    fio_u##total_bits r;                                                       \
    for (size_t i = 0; i < (total_bits / bits); ++i)                           \
      r.u##bits[i] = fio_bswap##bits(a.u##bits[i]);                            \
    return r;                                                                  \
  }

FIO_MATH_TYPE_LOADER(128, 16)
FIO_MATH_TYPE_LOADER(256, 32)
FIO_MATH_TYPE_LOADER(512, 64)
FIO_MATH_TYPE_LOADER(1024, 128)
FIO_MATH_TYPE_LOADER(2048, 256)
FIO_MATH_TYPE_LOADER(4096, 512)

#undef FIO_MATH_TYPE_LOADER
#undef FIO_VECTOR_LOADER_ENDIAN_FUNC
#undef FIO_VECTOR_LOADER_ENDIAN

/* *****************************************************************************
Vector Helpers - Vector Math Operations
***************************************************************************** */

#if FIO_HAS_UX && !defined(DEBUG)

/** Performs `a op b` (+,-, *, etc') as a vector of `bit` long words. */
#define FIO_MATH_UXXX_OP(t, a, b, bits, op)                                    \
  do {                                                                         \
    for (size_t i__ = 0; i__ < (sizeof((t).x##bits) / sizeof((t).x##bits[0])); \
         ++i__)                                                                \
      (t).x##bits[i__] = (a).x##bits[i__] op(b).x##bits[i__];                  \
  } while (0)
/** Performs `a op b` (+,-, *, etc'), where `b` is a constant. */
#define FIO_MATH_UXXX_COP(t, a, b, bits, op)                                   \
  do {                                                                         \
    for (size_t i__ = 0; i__ < (sizeof((t).x##bits) / sizeof((t).x##bits[0])); \
         ++i__)                                                                \
      (t).x##bits[i__] = (a).x##bits[i__] op(b);                               \
  } while (0)
/** Performs `t = op (a)`. */
#define FIO_MATH_UXXX_SOP(t, a, bits, op)                                      \
  do {                                                                         \
    for (size_t i__ = 0; i__ < (sizeof((t).x##bits) / sizeof((t).x##bits[0])); \
         ++i__)                                                                \
      (t).x##bits[i__] = op(a).x##bits[i__];                                   \
  } while (0)

#else /* FIO_HAS_UX */

#define FIO_MATH_UXXX_OP(t, a, b, bits, op)                                    \
  do {                                                                         \
    for (size_t i__ = 0; i__ < (sizeof((t).u##bits) / sizeof((t).u##bits[0])); \
         ++i__)                                                                \
      (t).u##bits[i__] = (a).u##bits[i__] op(b).u##bits[i__];                  \
  } while (0)
#define FIO_MATH_UXXX_COP(t, a, b, bits, op)                                   \
  do {                                                                         \
    for (size_t i__ = 0; i__ < (sizeof((t).u##bits) / sizeof((t).u##bits[0])); \
         ++i__)                                                                \
      (t).u##bits[i__] = (a).u##bits[i__] op(b);                               \
  } while (0)
#define FIO_MATH_UXXX_SOP(t, a, bits, op)                                      \
  do {                                                                         \
    for (size_t i__ = 0; i__ < (sizeof((t).u##bits) / sizeof((t).u##bits[0])); \
         ++i__)                                                                \
      (t).u##bits[i__] = op((a).u##bits[i__]);                                 \
  } while (0)
#endif /* FIO_HAS_UX */

/** Performs vector reduction for using `op` (+,-, *, etc'), storing to `t`. */
#define FIO_MATH_UXXX_REDUCE(t, a, bits, op)                                   \
  do {                                                                         \
    t = 0;                                                                     \
    for (size_t i__ = 0; i__ < (sizeof((a).u##bits) / sizeof((a).u##bits[0])); \
         ++i__)                                                                \
      (t) = (t)op(a).u##bits[i__];                                             \
  } while (0)

#define FIO___UXXX_DEF_OP(total_bits, bits, opnm, op)                          \
  FIO_IFUNC void fio_u##total_bits##_##opnm##bits(                             \
      fio_u##total_bits *target,                                               \
      const fio_u##total_bits *a,                                              \
      const fio_u##total_bits *b) {                                            \
    FIO_MATH_UXXX_OP(((target)[0]), ((a)[0]), ((b)[0]), bits, op);             \
  }                                                                            \
  FIO_IFUNC void fio_u##total_bits##_c##opnm##bits(fio_u##total_bits *target,  \
                                                   const fio_u##total_bits *a, \
                                                   uint##bits##_t b) {         \
    FIO_MATH_UXXX_COP(((target)[0]), ((a)[0]), (b), bits, op);                 \
  }                                                                            \
  FIO_MIFN uint##bits##_t fio_u##total_bits##_reduce_##opnm##bits(             \
      fio_u##total_bits *a) {                                                  \
    uint##bits##_t t;                                                          \
    FIO_MATH_UXXX_REDUCE(t, ((a)[0]), bits, op);                               \
    return t;                                                                  \
  }
#define FIO___UXXX_DEF_OP2(total_bits, bits, opnm, op)                         \
  FIO_IFUNC void fio_u##total_bits##_##opnm(fio_u##total_bits *target,         \
                                            const fio_u##total_bits *a,        \
                                            const fio_u##total_bits *b) {      \
    FIO_MATH_UXXX_OP(((target)[0]), ((a)[0]), ((b)[0]), bits, op);             \
  }

#define FIO___UXXX_DEF_OP4T_INNER(total_bits, opnm, op)                        \
  FIO___UXXX_DEF_OP(total_bits, 8, opnm, op)                                   \
  FIO___UXXX_DEF_OP(total_bits, 16, opnm, op)                                  \
  FIO___UXXX_DEF_OP(total_bits, 32, opnm, op)                                  \
  FIO___UXXX_DEF_OP(total_bits, 64, opnm, op)

#define FIO___UXXX_DEF_OP4T(total_bits)                                        \
  FIO___UXXX_DEF_OP4T_INNER(total_bits, add, +)                                \
  FIO___UXXX_DEF_OP4T_INNER(total_bits, sub, -)                                \
  FIO___UXXX_DEF_OP4T_INNER(total_bits, mul, *)                                \
  FIO___UXXX_DEF_OP4T_INNER(total_bits, and, &)                                \
  FIO___UXXX_DEF_OP2(total_bits, 64, and, &)                                   \
  FIO___UXXX_DEF_OP4T_INNER(total_bits, or, |)                                 \
  FIO___UXXX_DEF_OP2(total_bits, 64, or, |)                                    \
  FIO___UXXX_DEF_OP4T_INNER(total_bits, xor, ^)                                \
  FIO___UXXX_DEF_OP2(total_bits, 64, xor, ^)                                   \
  FIO_IFUNC void fio_u##total_bits##_inv(fio_u##total_bits *target,            \
                                         const fio_u##total_bits *a) {         \
    FIO_MATH_UXXX_SOP(((target)[0]), ((a)[0]), 64, ~);                         \
  }

FIO___UXXX_DEF_OP4T(128)
FIO___UXXX_DEF_OP4T(256)
FIO___UXXX_DEF_OP4T(512)
FIO___UXXX_DEF_OP4T(1024)
FIO___UXXX_DEF_OP4T(2048)
FIO___UXXX_DEF_OP4T(4096)

#undef FIO___UXXX_DEF_OP4T
#undef FIO___UXXX_DEF_OP4T_INNER
#undef FIO___UXXX_DEF_OP
#undef FIO___UXXX_DEF_OP2
/* *****************************************************************************
Vector Helpers - Multi-Precision Math
***************************************************************************** */

#undef FIO___VMATH_DEF_LARGE_ADD_SUB
#define FIO___VMATH_DEF_LARGE_ADD_SUB(bits)                                    \
  /** Performs A+B, storing in `result`. Return the carry bit (1 or 0). */     \
  FIO_MIFN uint64_t fio_u##bits##_add(fio_u##bits *result,                     \
                                      const fio_u##bits *a,                    \
                                      const fio_u##bits *b) {                  \
    uint64_t carry = 0;                                                        \
    for (size_t i = 0; i < (bits / 64); ++i) {                                 \
      uint64_t sum = a->u64[i] + b->u64[i] + carry;                            \
      carry = (sum < a->u64[i]) | (carry & (sum == a->u64[i]));                \
      result->u64[i] = sum;                                                    \
    }                                                                          \
    return carry;                                                              \
  }                                                                            \
  /** Performs A-B, storing in `result`. Returns the borrow bit (1 or 0). */   \
  FIO_MIFN uint64_t fio_u##bits##_sub(fio_u##bits *result,                     \
                                      const fio_u##bits *a,                    \
                                      const fio_u##bits *b) {                  \
    uint64_t borrow = 0;                                                       \
    for (size_t i = 0; i < (bits / 64); ++i) {                                 \
      uint64_t diff = a->u64[i] - b->u64[i] - borrow;                          \
      borrow =                                                                 \
          ((a->u64[i] < b->u64[i]) | ((a->u64[i] == b->u64[i]) & borrow));     \
      result->u64[i] = diff;                                                   \
    }                                                                          \
    return borrow;                                                             \
  }                                                                            \
  /** Returns -1, 0, or 1 if a < b, a == b or a > a (respectively). */         \
  FIO_MIFN int fio_u##bits##_cmp(const fio_u##bits *a, const fio_u##bits *b) { \
    unsigned is_eq = 1;                                                        \
    unsigned is_bigger = 0;                                                    \
    for (size_t i = (bits / 64); i--;) {                                       \
      is_bigger |= (is_eq & (a->u64[i] > b->u64[i]));                          \
      is_eq &= (unsigned)(a->u64[i] == b->u64[i]);                             \
    }                                                                          \
    return (is_eq - 1) + (is_bigger << 1);                                     \
  }

#undef FIO___VMATH_DEF_LARGE_MUL
#define FIO___VMATH_DEF_LARGE_MUL(dbl_bits, bits)                              \
  /** Multiplies A and B, storing the result in `result`. */                   \
  FIO_SFUNC void fio_u##bits##_mul(fio_u##dbl_bits *result,                    \
                                   const fio_u##bits *a,                       \
                                   const fio_u##bits *b) {                     \
    fio_math_mul(result->u64, a->u64, b->u64, (bits / 64));                    \
  }                                                                            \
  FIO_SFUNC void fio_u##bits##_montgomery_mul(fio_u##bits *result,             \
                                              const fio_u##bits *a,            \
                                              const fio_u##bits *b,            \
                                              const fio_u##bits *N,            \
                                              const fio_u##bits *N_dash) {     \
    fio_u##dbl_bits u;                                                         \
    fio_u##dbl_bits t, mN;                                                     \
    /* Step 1: t = a * b  */                                                   \
    fio_u##bits##_mul(&t, a, b);                                               \
    /* Step 2: m = ((t Mod R) * N_dash) mod R */                               \
    fio_u##bits##_mul(&mN, t.u##bits, N_dash);                                 \
    /* Step 3: u = (t + m * N) */                                              \
    fio_u##bits##_mul(&mN, mN.u##bits, N);                                     \
    (void)fio_u##dbl_bits##_add(&u, &t, &mN);                                  \
    /* Step 4: Constant Time select, if u >= N, then u = u - N */              \
    bool selector = (bool)fio_u##bits##_sub(u.u##bits, u.u##bits + 1, N);      \
    /* Step 5: Set result */                                                   \
    /* result is u.u##bits[0] if equal or bigger */                            \
    /* result is u.u##bits[1] if smaller */                                    \
    /* TODO: use mask instead of implied `if` selector? memory not hot? */     \
    *result = u.u##bits[selector];                                             \
  }

FIO___VMATH_DEF_LARGE_ADD_SUB(128)
FIO___VMATH_DEF_LARGE_ADD_SUB(256)
FIO___VMATH_DEF_LARGE_ADD_SUB(512)
FIO___VMATH_DEF_LARGE_ADD_SUB(1024)
FIO___VMATH_DEF_LARGE_ADD_SUB(2048)
FIO___VMATH_DEF_LARGE_ADD_SUB(4096)

FIO___VMATH_DEF_LARGE_MUL(256, 128)
FIO___VMATH_DEF_LARGE_MUL(512, 256)
FIO___VMATH_DEF_LARGE_MUL(1024, 512)
FIO___VMATH_DEF_LARGE_MUL(2048, 1024)
FIO___VMATH_DEF_LARGE_MUL(4096, 2048)

#undef FIO___VMATH_DEF_LARGE_ADD_SUB
#undef FIO___VMATH_DEF_LARGE_MUL

/* *****************************************************************************
String and Buffer Information Containers + Helper Macros
***************************************************************************** */

/** An information type for reporting the string's state. */
typedef struct fio_str_info_s {
  /** The string's length, if any. */
  size_t len;
  /** The string's buffer (pointer to first byte) or NULL on error. */
  char *buf;
  /** The buffer's capacity. Zero (0) indicates the buffer is read-only. */
  size_t capa;
} fio_str_info_s;

/** An information type for reporting/storing buffer data (no `capa`). */
typedef struct fio_buf_info_s {
  /** The buffer's length, if any. */
  size_t len;
  /** The buffer's address (may be NULL if no buffer). */
  char *buf;
} fio_buf_info_s;

/** Compares two `fio_str_info_s` objects for content equality. */
#define FIO_STR_INFO_IS_EQ(s1, s2)                                             \
  ((s1).len == (s2).len &&                                                     \
   (!(s1).len || (s1).buf == (s2).buf ||                                       \
    ((s1).buf && (s2).buf && (s1).buf[0] == (s2).buf[0] &&                     \
     !FIO_MEMCMP((s1).buf, (s2).buf, (s1).len))))

/** Compares two `fio_buf_info_s` objects for content equality. */
#define FIO_BUF_INFO_IS_EQ(s1, s2) FIO_STR_INFO_IS_EQ((s1), (s2))

/** A NULL fio_str_info_s. */
#define FIO_STR_INFO0 ((fio_str_info_s){0})

/** Converts a C String into a fio_str_info_s. */
#define FIO_STR_INFO1(str)                                                     \
  ((fio_str_info_s){.len = ((str) ? FIO_STRLEN((str)) : 0), .buf = (str)})

/** Converts a String with a known length into a fio_str_info_s. */
#define FIO_STR_INFO2(str, length)                                             \
  ((fio_str_info_s){.len = (length), .buf = (str)})

/** Converts a String with a known length and capacity into a fio_str_info_s. */
#define FIO_STR_INFO3(str, length, capacity)                                   \
  ((fio_str_info_s){.len = (length), .buf = (str), .capa = (capacity)})

/** A NULL fio_buf_info_s. */
#define FIO_BUF_INFO0 ((fio_buf_info_s){0})

/** Converts a C String into a fio_buf_info_s. */
#define FIO_BUF_INFO1(str)                                                     \
  ((fio_buf_info_s){.len = ((str) ? FIO_STRLEN((str)) : 0), .buf = (str)})

/** Converts a String with a known length into a fio_buf_info_s. */
#define FIO_BUF_INFO2(str, length)                                             \
  ((fio_buf_info_s){.len = (length), .buf = (str)})

/** Converts a fio_buf_info_s into a fio_str_info_s. */
#define FIO_BUF2STR_INFO(buf_info)                                             \
  ((fio_str_info_s){.len = (buf_info).len, .buf = (buf_info).buf})

/** Converts a fio_buf_info_s into a fio_str_info_s. */
#define FIO_STR2BUF_INFO(str_info)                                             \
  ((fio_buf_info_s){.len = (str_info).len, .buf = (str_info).buf})

/** Creates a stack fio_str_info_s variable `name` with `capacity` bytes. */
#define FIO_STR_INFO_TMP_VAR(name, capacity)                                   \
  char fio___stack_mem___##name[(capacity) + 1];                               \
  fio___stack_mem___##name[(capacity)] = 0; /* guard */                        \
  fio_str_info_s name = (fio_str_info_s) {                                     \
    .buf = fio___stack_mem___##name, .capa = (capacity)                        \
  }

/** Tests to see if memory reallocation happened. */
#define FIO_STR_INFO_TMP_IS_REALLOCATED(name)                                  \
  (fio___stack_mem___##name != name.buf)

/* *****************************************************************************
UTF-8 Support (basic)
***************************************************************************** */

#ifndef FIO_UTF8_ALLOW_IF
/* UTF-8 Constant Time? (0 = avoid mis-predictions; 1 = mostly ascii) */
#define FIO_UTF8_ALLOW_IF 1

#endif

/* Returns the number of bytes required to UTF-8 encoded a code point `u` */
FIO_IFUNC unsigned fio_utf8_code_len(uint32_t u) {
  uint32_t len = (1U + ((uint32_t)(u) > 127) + ((uint32_t)(u) > 2047) +
                  ((uint32_t)(u) > 65535));
  len &= (uint32_t)((uint32_t)(u) > ((1U << 21) - 1)) - 1;
  return len;
}

/** Returns 1-4 (UTF-8 char length), 8 (middle of a char) or 0 (invalid). */
FIO_IFUNC unsigned fio_utf8_char_len_unsafe(uint8_t c) {
  /* Ruby script for map:
  map = [];
  32.times { | i |
    map << (((i & 0b10000) == 0b00000) ? 1
        :   ((i & 0b11000) == 0b10000) ? 8
        :   ((i & 0b11100) == 0b11000) ? 2
        :   ((i & 0b11110) == 0b11100) ? 3
        :   ((i & 0b11111) == 0b11110) ? 4
                               : 0)
  }; puts "static const uint8_t map[32] = {#{ map.join(', ')} };"
  */
  static const uint8_t map[32] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                  1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8,
                                  8, 8, 2, 2, 2, 2, 3, 3, 4, 0};
  return map[c >> 3];
}

/** Returns the number of valid UTF-8 bytes used by first char at `str`. */
FIO_IFUNC unsigned fio_utf8_char_len(const void *str_) {
  unsigned r, tst;
  const uint8_t *s = (uint8_t *)str_;
  r = fio_utf8_char_len_unsafe(*s) & 7;
#if FIO_UTF8_ALLOW_IF
  if (r < 2)
    return r;
  tst = 1;
  tst += (fio_utf8_char_len_unsafe(s[tst]) >> 3) & (r > 3);
  tst += (fio_utf8_char_len_unsafe(s[tst]) >> 3) & (r > 2);
  tst += (fio_utf8_char_len_unsafe(s[tst]) >> 3);
  if (r != tst)
    r = 0;
#else
  tst = (r > 0);
  tst += ((fio_utf8_char_len_unsafe(s[tst]) >> 3) & (r > 3));
  tst += ((fio_utf8_char_len_unsafe(s[tst]) >> 3) & (r > 2));
  tst += (fio_utf8_char_len_unsafe(s[tst]) >> 3);
  r &= 0U - (r == tst);
#endif

  return r;
}

/** Writes code point to `dest` using UFT-8. Returns number of bytes written. */
FIO_IFUNC unsigned fio_utf8_write(void *dest_, uint32_t u) {
  const uint8_t len = fio_utf8_code_len(u);
  uint8_t *dest = (uint8_t *)dest_;
#if FIO_UTF8_ALLOW_IF
  if (len < 2) { /* writes, but doesn't report on len == 0 */
    *dest = u;
    return len;
  }
  const uint8_t offset = 0xF0U << (4U - len);
  const uint8_t head = 0x80U << (len < 2);
  const uint8_t mask = 63U;
  *(dest) = offset | ((u) >> (((len - 1) << 3) - ((len - 1) << 1)));
  (dest) += 1;
  *(dest) = head | (((u) >> 12) & mask);
  (dest) += (len > 3);
  *(dest) = head | (((u) >> 6) & mask);
  (dest) += (len > 2);
  *(dest) = head | ((u)&mask);
  return len;
#else
  const uint8_t offset = 0xF0U << (4U - len);
  const uint8_t head = 0x80U << (len < 2);
  const uint8_t mask = 63U;
  *dest = (uint8_t)u;
  dest += (len == 1);
  *dest = offset | ((u) >> (((len - 1) << 3) - ((len - 1) << 1)));
  dest += (len > 1);
  *dest = head | (((u) >> 12) & mask);
  dest += (len > 3);
  *dest = head | (((u) >> 6) & mask);
  dest += (len > 2);
  *dest = head | ((u)&mask);
  return len;
#endif
}

/**
 * Decodes the first UTF-8 char at `str` and returns its code point value.
 *
 * Advances the pointer at `str` by the number of bytes consumed (read).
 */
FIO_IFUNC uint32_t fio_utf8_read(char **str) {
  const uint8_t *s = *(const uint8_t **)str;
  unsigned len = fio_utf8_char_len(s);
  *str += len;
#if FIO_UTF8_ALLOW_IF
  if (!len)
    return 0;
  if (len == 1)
    return *s;
  const uint32_t t2 = (len > 2);
  const uint32_t t3 = 1 + (len > 3);
  const uint32_t t3a = (len > 2) + (len > 3);
  const uint32_t t4 = len - 1;
  return ((uint32_t)(s[0] & (63 >> t4)) << ((t4 << 3) - (t4 << 1))) |
         ((uint32_t)(s[1] & 63) << ((t3a << 3) - (t3a << 1))) |
         ((uint32_t)(s[t3] & 63) << ((t2 << 3) - (t2 << 1))) |
         ((uint32_t)(s[t4] & 63));
#else
  const uint32_t t1 = (len > 1);
  const uint32_t t2 = (len > 2);
  const uint32_t t3 = t2 + (len > 3);
  const uint32_t t3a = (len > 2) + (len > 3);
  const uint32_t t4 = len - t1;
  uint32_t r1 = *s & ((uint32_t)0UL - (len == 1));
  uint32_t r2 = ((uint32_t)(s[0] & (63 >> t4)) << ((t4 << 3) - (t4 << 1))) |
                ((uint32_t)(s[t1] & 63) << ((t3a << 3) - (t3a << 1))) |
                ((uint32_t)(s[t3] & 63) << ((t2 << 3) - (t2 << 1))) |
                ((uint32_t)(s[t4] & 63));
  r2 &= (uint32_t)0UL - t1;
  return (r1 | r2);
#endif
}

/** Decodes the first UTF-8 char at `str` and returns its code point value. */
FIO_IFUNC uint32_t fio_utf8_peek(const char *str) {
  return fio_utf8_read((char **)&str);
}

/* *****************************************************************************
C++ extern end
***************************************************************************** */
/* support C++ */
#ifdef __cplusplus
}
#endif

/* *****************************************************************************
End persistent segment (end include-once guard)
***************************************************************************** */
#endif /* H___FIO_CORE___H */
/* *****************************************************************************



                              Multi-Inclusion Macros



***************************************************************************** */

/* *****************************************************************************
Tests Inclusion (everything + MEMALT)
***************************************************************************** */
#if !defined(FIO___RECURSIVE_INCLUDE) &&                                       \
    (defined(FIO_TEST_ALL) || defined(FIO___TEST_MACRO_SUSPENDED)) &&          \
    !defined(H___FIO_TESTS_INC_FINISHED___H)

/* Inclusion cycle three - facil.io memory allocator for all else. */
#if !defined(H___FIO_EVERYTHING___H) /* include everything first, then test */
#undef FIO_TEST_ALL
#define FIO___TEST_MACRO_SUSPENDED
#undef FIO_LEAK_COUNTER
#define FIO_LEAK_COUNTER 1
#define FIO_EVERYTHING
#else /* define test inclusion */
#define H___FIO_TESTS_INC_FINISHED___H
#undef FIO___TEST_MACRO_SUSPENDED
#define FIO_TEST_ALL
#endif

#endif /* FIO_TEST_ALL */

/* *****************************************************************************
Special `extern` support FIO_BASIC, FIO_EVERYTHING, etc'
***************************************************************************** */
#if !defined(FIO___RECURSIVE_INCLUDE) && defined(FIO_EXTERN) &&                \
    (defined(FIO_TEST_ALL) || defined(FIO_EVERYTHING) || defined(FIO_BASIC))
#if defined(FIO_EXTERN) && ((FIO_EXTERN + 1) < 3)
#undef FIO_EXTERN
#define FIO_EXTERN                     2
#define FIO_EVERYTHING___REMOVE_EXTERN 1
#endif
#if defined(FIO_EXTERN_COMPLETE) && ((FIO_EXTERN_COMPLETE + 1) < 3)
#undef FIO_EXTERN_COMPLETE
#define FIO_EXTERN_COMPLETE                     2
#define FIO_EVERYTHING___REMOVE_EXTERN_COMPLETE 1
#endif
#endif

/* *****************************************************************************
Everything Inclusion
***************************************************************************** */
#if !defined(FIO___RECURSIVE_INCLUDE) && defined(FIO_EVERYTHING) &&            \
    !defined(H___FIO_EVERYTHING___H)

#if !defined(H___FIO_EVERYTHING1___H)
#define H___FIO_EVERYTHING1___H
#undef FIO_FIOBJ
#undef FIO_HTTP
#undef FIO_MALLOC
#undef FIO_MUSTACHE
#undef FIO_PUBSUB
#undef FIO_IO
#undef FIOBJ_MALLOC
#define FIO_CLI
#define FIO_CORE
#define FIO_CRYPT
#define FIO_SIGNAL
#define FIO_SOCK
#define FIO_THREADS

#else
#undef H___FIO_EVERYTHING1___H
#undef FIO_EVERYTHING
#define H___FIO_EVERYTHING___H
#undef FIO_MEMALT
#define FIO_FIOBJ
#define FIO_HTTP
#define FIO_IO
#define FIO_MALLOC
#define FIO_MUSTACHE
#define FIO_PUBSUB
#define FIO_MEMALT

#endif

#define FIO___INCLUDE_AGAIN
#endif /* FIO_EVERYTHING */

/* *****************************************************************************
FIO_BASIC                   Basic Kitchen Sink Inclusion
***************************************************************************** */
#if !defined(FIO___RECURSIVE_INCLUDE) && defined(FIO_BASIC) &&                 \
    !defined(H___FIO_BASIC___H)

#if !defined(H___FIO_BASIC_ROUND1___H)
#define H___FIO_BASIC_ROUND1___H
#undef FIO_CLI
#undef FIO_CORE
#undef FIO_CRYPT
#undef FIO_FIOBJ
#undef FIO_MALLOC
#undef FIO_MUSTACHE
#undef FIO_THREADS
#undef FIOBJ_MALLOC
#define FIO_CLI
#define FIO_CORE
#define FIO_CRYPT
#define FIO_THREADS

#elif !defined(H___FIO_BASIC_ROUND2___H)
#define H___FIO_BASIC_ROUND2___H
#define FIO_FIOBJ
#define FIO_MUSTACHE
#define FIOBJ_MALLOC

#else
#define H___FIO_BASIC___H
#undef H___FIO_BASIC_ROUND1___H
#undef H___FIO_BASIC_ROUND2___H
#undef FIO_BASIC
#define FIO_MALLOC
#endif

#define FIO___INCLUDE_AGAIN
#endif /* FIO_BASIC */
/* *****************************************************************************
FIO_CRYPT             Poor-man's Cryptographic Elements
***************************************************************************** */
#if defined(FIO_CRYPT)
#undef FIO_CHACHA
#undef FIO_ED25519
#undef FIO_SHA1
#undef FIO_SHA2
#define FIO_CHACHA
#define FIO_ED25519
#define FIO_SHA1
#define FIO_SHA2
#undef FIO_CRYPT
#endif /* FIO_CRYPT */

/* *****************************************************************************
FIO_CORE                        Core Inclusion
***************************************************************************** */
#if defined(FIO_CORE)
#undef FIO_ATOL
#undef FIO_FILES
#undef FIO_GLOB_MATCH
#undef FIO_LOG
#undef FIO_MATH
#undef FIO_RAND
#undef FIO_STATE
#undef FIO_TIME
#undef FIO_URL
#undef FIO_CORE
#define FIO_ATOL
#define FIO_FILES
#define FIO_GLOB_MATCH
#define FIO_LOG
#define FIO_MATH
#define FIO_RAND
#define FIO_STATE
#define FIO_TIME
#define FIO_URL
#endif

/* *****************************************************************************



                                  Shortcut Macros



***************************************************************************** */

/* *****************************************************************************
Memory Allocation - FIO_MALLOC as a "global" default memory allocator
***************************************************************************** */
/* FIO_MALLOC defines a "global" default memory allocator */
#if defined(FIO_MALLOC) && !defined(H___FIO_MALLOC___H)
#define H___FIO_MALLOC___H
#ifndef FIO_MEMORY_NAME
#define FIO_MEMORY_NAME fio
#endif
#ifndef FIO_MEMORY_SYS_ALLOCATION_SIZE_LOG
/* for a general allocator, increase system allocation size to 8Mb */
#define FIO_MEMORY_SYS_ALLOCATION_SIZE_LOG 23
#endif

#ifndef FIO_MEMORY_CACHE_SLOTS
/* for a general allocator, increase cache size */
#define FIO_MEMORY_CACHE_SLOTS 8
#endif

#ifndef FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG
/* set fragmentation cost at 0.25Mb blocks */
#define FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG 5
#endif

#ifndef FIO_MEMORY_ENABLE_BIG_ALLOC
/* support big allocations using undivided memory chunks */
#define FIO_MEMORY_ENABLE_BIG_ALLOC 1
#endif

#ifndef FIO_MEMORY_INITIALIZE_ALLOCATIONS
/* should memory be initialized to zero? */
#define FIO_MEMORY_INITIALIZE_ALLOCATIONS 1
#endif
/* *****************************************************************************
Memory Allocation - FIO_MALLOC defines a FIOBJ dedicated memory allocator
***************************************************************************** */
/* FIOBJ_MALLOC defines a FIOBJ dedicated memory allocator */
#elif defined(FIOBJ_MALLOC) && !defined(H___FIOBJ_MALLOC___H)
#define H___FIOBJ_MALLOC___H
#ifndef FIO_MEMORY_NAME
#define FIO_MEMORY_NAME fiobj_mem
#endif
#ifndef FIO_MEMORY_SYS_ALLOCATION_SIZE_LOG
/* 4Mb per system call */
#define FIO_MEMORY_SYS_ALLOCATION_SIZE_LOG 22
#endif
#ifndef FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG
/* fight fragmentation */
#define FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG 4
#endif
#ifndef FIO_MEMORY_CACHE_SLOTS
/* cache up to 64Mb */
#define FIO_MEMORY_CACHE_SLOTS 16
#endif
#endif /* FIOBJ_MALLOC / FIO_MALLOC*/

#undef FIOBJ_MALLOC
#undef FIO_MALLOC
/* *****************************************************************************
FIO_SORT_NAME naming
***************************************************************************** */

#if defined(FIO_SORT_TYPE) && !defined(FIO_SORT_NAME)
#define FIO_SORT_NAME FIO_NAME(FIO_SORT_TYPE, vec)
#endif

/* *****************************************************************************
FIO_MAP Ordering & Naming Shortcut
***************************************************************************** */
#if defined(FIO_UMAP_NAME)
#define FIO_MAP_NAME FIO_UMAP_NAME
#undef FIO_MAP_ORDERED
#define FIO_MAP_ORDERED 0
#elif defined(FIO_OMAP_NAME)
#define FIO_MAP_NAME FIO_OMAP_NAME
#undef FIO_MAP_ORDERED
#define FIO_MAP_ORDERED 1
#endif

/* *****************************************************************************



                  Higher Level Dependencies (i.e. Server module)



***************************************************************************** */

#if defined(FIO_HTTP)
#undef FIO_HTTP_HANDLE
#define FIO_HTTP_HANDLE
#endif

#if defined(FIO_HTTP)
#undef FIO_PUBSUB
#define FIO_PUBSUB
#endif

#if defined(FIO_HTTP) || defined(FIO_PUBSUB)
#undef FIO_IO
#define FIO_IO
#endif

#if defined(FIO_HTTP) || defined(FIO_IO)
#undef FIO_POLL
#define FIO_POLL
#endif

/* *****************************************************************************



                  Mid Level Dependencies (i.e., types / helpers)



***************************************************************************** */

#if defined(FIO_FIOBJ)
#define FIO_MUSTACHE
#define FIO_JSON
#endif

#if defined(FIO_HTTP)
#undef FIO_HTTP1_PARSER
#define FIO_HTTP1_PARSER
#endif

#if defined(FIO_HTTP)
#undef FIO_WEBSOCKET_PARSER
#define FIO_WEBSOCKET_PARSER
#endif

#if defined(FIO_POLL) || defined(FIO_IO) || defined(FIO_PUBSUB)
#undef FIO_SOCK
#define FIO_SOCK
#endif

#if defined(FIO_HTTP_HANDLE) || defined(FIO_QUEUE) || defined(FIO_FIOBJ) ||    \
    defined(FIO_LEAK_COUNTER) || defined(FIO_MEMORY_NAME) || defined(FIO_POLL)
#undef FIO_STATE
#define FIO_STATE
#endif

#if defined(FIO_HTTP_HANDLE) || defined(FIO_STR_NAME) ||                       \
    defined(FIO_STR_SMALL) || defined(FIO_ARRAY_TYPE_STR) ||                   \
    defined(FIO_MAP_KEY_KSTR) || defined(FIO_MAP_KEY_BSTR) ||                  \
    (defined(FIO_MAP_NAME) && !defined(FIO_MAP_KEY)) ||                        \
    defined(FIO_MUSTACHE) || defined(FIO_MAP2_NAME)
#undef FIO_STR
#define FIO_STR
#endif

#if defined(FIO_IO)
#undef FIO_STREAM
#define FIO_STREAM
#endif

#if defined(FIO_IO)
#undef FIO_QUEUE
#define FIO_QUEUE
#endif

#if defined(FIO_HTTP_HANDLE) || defined(FIO_QUEUE)
#undef FIO_TIME
#define FIO_TIME
#endif

/* *****************************************************************************



              Crypto Elements Dependencies (i.e., SHA-1 etc')



***************************************************************************** */
#if defined(FIO_PUBSUB)
#define FIO_CHACHA
#endif

#if defined(FIO_HTTP_HANDLE)
#define FIO_SHA1
#endif

#if defined(FIO_PUBSUB)
#define FIO_SHA2
#endif

#if defined(FIO_CHACHA) || defined(FIO_SHA1) || defined(FIO_SHA2)
#undef FIO_CRYPTO_CORE
#define FIO_CRYPTO_CORE
#endif
/* *****************************************************************************



                  Core Level Dependencies (i.e., atomics, etc')



***************************************************************************** */

#if defined(FIO_STR) || defined(FIO_HTTP) || defined(FIO_STREAM)
#undef FIO_FILES
#define FIO_FILES
#endif

#if defined(FIO_CLI) || defined(FIO_HTTP_HANDLE) ||                            \
    defined(FIO_HTTP1_PARSER) || defined(FIO_JSON) || defined(FIO_STR) ||      \
    defined(FIO_TIME) || defined(FIO_FILES)
#undef FIO_ATOL
#define FIO_ATOL
#endif

#if defined(FIO_PUBSUB)
#undef FIO_GLOB_MATCH
#define FIO_GLOB_MATCH
#endif

#if defined(FIO_CLI) || defined(FIO_MEMORY_NAME) || defined(FIO_POLL) ||       \
    defined(FIO_STATE) || defined(FIO_HTTP_HANDLE)
#undef FIO_IMAP_CORE
#define FIO_IMAP_CORE
#endif

#if defined(FIO_CHACHA) || defined(FIO_SHA2)
#undef FIO_MATH
#define FIO_MATH
#endif

#if defined(FIO_CLI) || defined(FIO_FILES) || defined(FIO_HTTP_HANDLE) ||      \
    defined(FIO_MEMORY_NAME) || defined(FIO_POLL) || defined(FIO_STATE) ||     \
    defined(FIO_STR)
#undef FIO_RAND
#define FIO_RAND
#endif

#if defined(FIO_IO)
#undef FIO_SIGNAL
#define FIO_SIGNAL
#endif

#if defined(FIO_MEMORY_NAME) || defined(FIO_QUEUE) ||                          \
    (defined(DEBUG) && defined(FIO_STATE))
#undef FIO_THREADS
#define FIO_THREADS
#endif

#if defined(FIO_SOCK)
#undef FIO_URL
#define FIO_URL
#endif
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************
C++ extern start
***************************************************************************** */
/* support C++ */
#ifdef __cplusplus
extern "C" {
#endif

/* *****************************************************************************




                          Common internal Macros



These are re-defined for ever `include` cycle
***************************************************************************** */

/* *****************************************************************************
Memory allocation macros
***************************************************************************** */

#if defined(FIO_MEM_RESET) || !defined(FIO_MEM_REALLOC) ||                     \
    !defined(FIO_MEM_FREE)

#undef FIO_MEM_REALLOC
#undef FIO_MEM_FREE
#undef FIO_MEM_REALLOC_IS_SAFE
#undef FIO_MEM_RESET

/* if a global allocator was previously defined route macros to fio_malloc */
#if defined(H___FIO_MALLOC___H)
/** Reallocates memory, copying (at least) `copy_len` if necessary. */
#define FIO_MEM_REALLOC(ptr, old_size, new_size, copy_len)                     \
  fio_realloc2((ptr), (new_size), (copy_len))
/** Frees allocated memory. */
#define FIO_MEM_FREE(ptr, size) fio_free((ptr))
/** Set to true of internall allocator is used (memory returned set to zero). */
#define FIO_MEM_REALLOC_IS_SAFE fio_realloc_is_safe()

#else /* H___FIO_MALLOC___H */
/** Reallocates memory, copying (at least) `copy_len` if necessary. */
#define FIO_MEM_REALLOC(ptr, old_size, new_size, copy_len)                     \
  realloc((ptr), (new_size))
/** Frees allocated memory. */
#define FIO_MEM_FREE(ptr, size) free((ptr))
/** Set to true of internall allocator is used (memory returned set to zero). */
#define FIO_MEM_REALLOC_IS_SAFE 0
#endif /* H___FIO_MALLOC___H */

#endif /* defined(FIO_MEM_REALLOC) */

/** FIO_MEMORY_DISABLE disables all custom memory allocators. */
#if defined(FIO_MEMORY_DISABLE)
#ifndef FIO_MALLOC_TMP_USE_SYSTEM
#define FIO_MALLOC_TMP_USE_SYSTEM 1
#endif
#endif

/* recursive? */
#if !defined(FIO_MEM_REALLOC_) || !defined(FIO_MEM_FREE_)
#undef FIO_MEM_REALLOC_
#undef FIO_MEM_FREE_
#undef FIO_MEM_REALLOC_IS_SAFE_

#ifdef FIO_MALLOC_TMP_USE_SYSTEM /* force malloc */
#define FIO_MEM_REALLOC_(ptr, old_size, new_size, copy_len)                    \
  realloc((ptr), (new_size))
#define FIO_MEM_FREE_(ptr, size) free((ptr))
#define FIO_MEM_REALLOC_IS_SAFE_ 0

#else /* FIO_MALLOC_TMP_USE_SYSTEM */
#define FIO_MEM_REALLOC_         FIO_MEM_REALLOC
#define FIO_MEM_FREE_            FIO_MEM_FREE
#define FIO_MEM_REALLOC_IS_SAFE_ FIO_MEM_REALLOC_IS_SAFE
#endif /* FIO_MALLOC_TMP_USE_SYSTEM */

#endif /* !defined(FIO_MEM_REALLOC_)... */

/* *****************************************************************************
Locking selector
***************************************************************************** */

#ifndef FIO_USE_THREAD_MUTEX_TMP
#define FIO_USE_THREAD_MUTEX_TMP FIO_USE_THREAD_MUTEX
#endif

#if FIO_USE_THREAD_MUTEX_TMP
#define FIO_THREADS
#define FIO___LOCK_NAME          "OS mutex"
#define FIO___LOCK_TYPE          fio_thread_mutex_t
#define FIO___LOCK_INIT          ((FIO___LOCK_TYPE)FIO_THREAD_MUTEX_INIT)
#define FIO___LOCK_DESTROY(lock) fio_thread_mutex_destroy(&(lock))
#define FIO___LOCK_LOCK(lock)                                                  \
  do {                                                                         \
    if (fio_thread_mutex_lock(&(lock)))                                        \
      FIO_LOG_ERROR("Couldn't lock mutex @ %s:%d - error (%d): %s",            \
                    __FILE__,                                                  \
                    __LINE__,                                                  \
                    errno,                                                     \
                    strerror(errno));                                          \
  } while (0)
#define FIO___LOCK_TRYLOCK(lock) fio_thread_mutex_trylock(&(lock))
#define FIO___LOCK_UNLOCK(lock)                                                \
  do {                                                                         \
    if (fio_thread_mutex_unlock(&(lock))) {                                    \
      FIO_LOG_ERROR("Couldn't release mutex @ %s:%d - error (%d): %s",         \
                    __FILE__,                                                  \
                    __LINE__,                                                  \
                    errno,                                                     \
                    strerror(errno));                                          \
    }                                                                          \
  } while (0)

#else
#define FIO___LOCK_NAME          "facil.io spinlocks"
#define FIO___LOCK_TYPE          fio_lock_i
#define FIO___LOCK_INIT          ((FIO___LOCK_TYPE)FIO_LOCK_INIT)
#define FIO___LOCK_DESTROY(lock) ((lock) = FIO___LOCK_INIT)
#define FIO___LOCK_LOCK(lock)    fio_lock(&(lock))
#define FIO___LOCK_TRYLOCK(lock) fio_trylock(&(lock))
#define FIO___LOCK_UNLOCK(lock)  fio_unlock(&(lock))
#endif

/* *****************************************************************************
Recursive inclusion management
***************************************************************************** */
#ifndef SFUNC_ /* if we aren't in a recursive #include statement */

#ifdef FIO_EXTERN
#define SFUNC_
#define IFUNC_

#else /* !FIO_EXTERN */
#undef SFUNC
#undef IFUNC
#define SFUNC_ FIO_SFUNC
#define IFUNC_ FIO_IFUNC
#endif /* FIO_EXTERN */

#undef SFUNC
#undef IFUNC
#define SFUNC SFUNC_
#define IFUNC IFUNC_

#elif !defined(FIO___RECURSIVE_INCLUDE) || (FIO___RECURSIVE_INCLUDE + 1 != 100)
/* SFUNC_ - internal helper types are always `static` */
#undef SFUNC
#undef IFUNC
#define SFUNC static __attribute__((unused))
#define IFUNC static inline __attribute__((unused))
#endif /* SFUNC_ vs FIO___RECURSIVE_INCLUDE*/

/* *****************************************************************************
Leak Counter Helpers
***************************************************************************** */
#undef FIO_LEAK_COUNTER_DEF
#undef FIO_LEAK_COUNTER_ON_ALLOC
#undef FIO_LEAK_COUNTER_ON_FREE

#if (FIO_LEAK_COUNTER + 1) == 1
/* No leak counting defined */
#define FIO_LEAK_COUNTER_DEF(name)
#define FIO_LEAK_COUNTER_ON_ALLOC(name)
#define FIO_LEAK_COUNTER_ON_FREE(name)
#define FIO_LEAK_COUNTER_COUNT(name) ((size_t)0)
#else
#define FIO_LEAK_COUNTER_DEF(name)                                             \
  FIO_IFUNC size_t FIO_NAME(fio___leak_counter, name)(size_t i) {              \
    static volatile size_t counter;                                            \
    size_t tmp = fio_atomic_add_fetch(&counter, i);                            \
    if (FIO_UNLIKELY(tmp == ((size_t)-1)))                                     \
      goto error_double_free;                                                  \
    return tmp;                                                                \
  error_double_free:                                                           \
    FIO_ASSERT(0,                                                              \
               "(%d) " FIO_MACRO2STR(name) " `free` after `free` detected!",   \
               fio_getpid());                                                  \
  }                                                                            \
  static void FIO_NAME(fio___leak_counter_cleanup, name)(void *i) {            \
    size_t counter = FIO_NAME(fio___leak_counter, name)((size_t)(uintptr_t)i); \
    FIO_LOG_DEBUG2("(%d) testing leaks for " FIO_MACRO2STR(name),              \
                   fio_getpid());                                              \
    if (counter)                                                               \
      FIO_LOG_ERROR("(%d) %zu leaks detected for " FIO_MACRO2STR(name),        \
                    fio_getpid(),                                              \
                    counter);                                                  \
  }                                                                            \
  FIO_CONSTRUCTOR(FIO_NAME(fio___leak_counter_const, name)) {                  \
    fio_state_callback_add(FIO_CALL_AT_EXIT,                                   \
                           FIO_NAME(fio___leak_counter_cleanup, name),         \
                           NULL);                                              \
  }
#define FIO_LEAK_COUNTER_COUNT(name)    FIO_NAME(fio___leak_counter, name)(0)
#define FIO_LEAK_COUNTER_ON_ALLOC(name) FIO_NAME(fio___leak_counter, name)(1)
#define FIO_LEAK_COUNTER_ON_FREE(name)                                         \
  FIO_NAME(fio___leak_counter, name)(((size_t)-1))
#endif

/* *****************************************************************************
Pointer Tagging
***************************************************************************** */
#ifndef FIO_PTR_TAG
/**
 * Supports embedded pointer tagging / untagging for the included types.
 *
 * Should resolve to a tagged pointer value. i.e.: ((uintptr_t)(p) | 1)
 */
#define FIO_PTR_TAG(p) (p)
#endif

#ifndef FIO_PTR_UNTAG
/**
 * Supports embedded pointer tagging / untagging for the included types.
 *
 * Should resolve to an untagged pointer value. i.e.: ((uintptr_t)(p) | ~1UL)
 */
#define FIO_PTR_UNTAG(p) (p)
#endif

/**
 * If FIO_PTR_TAG_TYPE is defined, then functions returning a type's pointer
 * will return a pointer of the specified type instead.
 */
#ifndef FIO_PTR_TAG_TYPE
#endif

#ifndef FIO_PTR_TAG_VALIDATE
/**
 * If FIO_PTR_TAG_VALIDATE is defined, tagging will be verified before executing
 * any code.
 *
 * FIO_PTR_TAG_VALIDATE must fail on NULL pointers.
 */
#define FIO_PTR_TAG_VALIDATE(ptr) ((ptr) != NULL)
#endif

#undef FIO_PTR_TAG_VALID_OR_RETURN
#define FIO_PTR_TAG_VALID_OR_RETURN(tagged_ptr, value)                         \
  do {                                                                         \
    if (!(FIO_PTR_TAG_VALIDATE((tagged_ptr)))) {                               \
      FIO_LOG_DEBUG("pointer tag (type) mismatch in function call.");          \
      return (value);                                                          \
    }                                                                          \
  } while (0)
#undef FIO_PTR_TAG_VALID_OR_RETURN_VOID
#define FIO_PTR_TAG_VALID_OR_RETURN_VOID(tagged_ptr)                           \
  do {                                                                         \
    if (!(FIO_PTR_TAG_VALIDATE((tagged_ptr)))) {                               \
      FIO_LOG_DEBUG("pointer tag (type) mismatch in function call.");          \
      return;                                                                  \
    }                                                                          \
  } while (0)
#undef FIO_PTR_TAG_VALID_OR_GOTO
#define FIO_PTR_TAG_VALID_OR_GOTO(tagged_ptr, lable)                           \
  do {                                                                         \
    if (!(FIO_PTR_TAG_VALIDATE((tagged_ptr)))) {                               \
      /* Log error since GOTO indicates cleanup or other side-effects. */      \
      FIO_LOG_ERROR("(" FIO__FILE__ ":" FIO_MACRO2STR(                         \
          __LINE__) ") pointer tag (type) mismatch in function call.");        \
      goto lable;                                                              \
    }                                                                          \
  } while (0)

#define FIO_PTR_TAG_GET_UNTAGGED(untagged_type, tagged_ptr)                    \
  ((untagged_type *)(FIO_PTR_UNTAG((tagged_ptr))))
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_LOG                /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                                  Logging





Use:

```c
FIO_LOG2STDERR("message.") // => message.
FIO_LOG_LEVEL = FIO_LOG_LEVEL_WARNING; // set dynamic logging level
FIO_LOG_INFO("message"); // => [no output, exceeds logging level]
int i = 3;
FIO_LOG_WARNING("number invalid: %d", i); // => WARNING: number invalid: 3
```

Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */

/**
 * Enables logging macros that avoid heap memory allocations
 */
#if !defined(FIO_NO_LOG) && !defined(H___FIO_LOG___H) &&                       \
    (defined(FIO_LOG) || defined(FIO_LEAK_COUNTER))
#define H___FIO_LOG___H

#undef FIO_LOG2STDERR

FIO_SFUNC FIO___PRINTF_STYLE(1, 0) void FIO_LOG2STDERR(const char *format,
                                                       ...) {
#if FIO_LOG_LENGTH_LIMIT > 128
#define FIO_LOG____LENGTH_ON_STACK FIO_LOG_LENGTH_LIMIT
#define FIO_LOG____LENGTH_BORDER   (FIO_LOG_LENGTH_LIMIT - 34)
#else
#define FIO_LOG____LENGTH_ON_STACK (FIO_LOG_LENGTH_LIMIT + 34)
#define FIO_LOG____LENGTH_BORDER   FIO_LOG_LENGTH_LIMIT
#endif
  va_list argv;
  char tmp___log[FIO_LOG____LENGTH_ON_STACK + 32];
  va_start(argv, format);
  int len___log = vsnprintf(tmp___log, FIO_LOG_LENGTH_LIMIT - 2, format, argv);
  va_end(argv);
  if (len___log > 0) {
    if (len___log >= FIO_LOG_LENGTH_LIMIT - 2) {
      fio_memcpy32(tmp___log + FIO_LOG____LENGTH_BORDER,
                   "...\n\t\x1B[2mWARNING:\x1B[0m TRUNCATED!");
      len___log = FIO_LOG____LENGTH_BORDER + 32;
    }
    tmp___log[len___log++] = '\n';
    tmp___log[len___log] = '0';
    fwrite(tmp___log, 1, len___log, stderr);
    return;
  }
  fwrite("\x1B[1mERROR:\x1B[0m log output error (can't write).\n",
         1,
         47,
         stderr);
#undef FIO_LOG____LENGTH_ON_STACK
#undef FIO_LOG____LENGTH_BORDER
}

/** The logging level */
#ifndef FIO_LOG_LEVEL_DEFAULT
#if DEBUG
#define FIO_LOG_LEVEL_DEFAULT FIO_LOG_LEVEL_DEBUG
#else
#define FIO_LOG_LEVEL_DEFAULT FIO_LOG_LEVEL_INFO
#endif
#endif
int FIO_WEAK FIO_LOG_LEVEL = FIO_LOG_LEVEL_DEFAULT;
FIO_IFUNC int fio___log_level_set(int i) { return (FIO_LOG_LEVEL = i); }
FIO_IFUNC int fio___log_level(void) { return FIO_LOG_LEVEL; }

#undef FIO_LOG_LEVEL_GET
#undef FIO_LOG_LEVEL_SET

/** Sets the Logging Level. */
#define FIO_LOG_LEVEL_SET(new_level) fio___log_level_set(new_level)
/** Returns the Logging Level. */
#define FIO_LOG_LEVEL_GET() ((fio___log_level()))

#endif /* FIO_LOG */
#undef FIO_LOG
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                    Alternatives to memcpy, memchr etc'



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_MEMALT) && !defined(H___FIO_MEMALT___H)
#define H___FIO_MEMALT___H 1

/* *****************************************************************************
Memory Helpers - API
***************************************************************************** */

/**
 * A somewhat naive implementation of `memset`.
 *
 * Probably slower than the one included with your compiler's C library.
 */
SFUNC void *fio_memset(void *restrict dest, uint64_t data, size_t bytes);

/**
 * A somewhat naive implementation of `memcpy`.
 *
 * Probably slower than the one included with your compiler's C library.
 */
SFUNC void *fio_memcpy(void *dest_, const void *src_, size_t bytes);

/**
 * A token seeking function. This is a fallback for `memchr`, but `memchr`
 * should be faster.
 */
SFUNC void *fio_memchr(const void *buffer, const char token, size_t len);

/**
 * A comparison function. This is a fallback for `memcmp`, but `memcmp`
 * should be faster.
 */
SFUNC int fio_memcmp(const void *a_, const void *b_, size_t len);

/** An alternative to `strlen` - may raise Address Sanitation errors. */
SFUNC size_t fio_strlen(const char *str);

/* *****************************************************************************
Alternatives - Implementation
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* *****************************************************************************
FIO_MEMCPY / fio_memcpy - memcpy fallback
***************************************************************************** */

/** an unsafe memcpy (no checks + assumes no overlapping memory regions)*/
FIO_SFUNC void *fio___memcpy_buffered_x(void *restrict d_,
                                        const void *restrict s_,
                                        size_t l) {
  char *restrict d = (char *restrict)d_;
  const char *restrict s = (const char *restrict)s_;
  uint64_t t[8] FIO_ALIGN(16);
  while (l > 63) {
    fio_memcpy64(t, s);
    FIO_COMPILER_GUARD_INSTRUCTION;
    fio_memcpy64(d, t);
    l -= 64;
    d += 64;
    s += 64;
  }
#define FIO___MEMCPY_UNSAFE_STEP(bytes)                                        \
  do {                                                                         \
    fio_memcpy##bytes(t, s);                                                   \
    FIO_COMPILER_GUARD_INSTRUCTION;                                            \
    fio_memcpy##bytes(d, t);                                                   \
    (d += bytes), (s += bytes);                                                \
  } while (0)
  if (l & 32)
    FIO___MEMCPY_UNSAFE_STEP(32);
  if ((l & 16))
    FIO___MEMCPY_UNSAFE_STEP(16);
  if ((l & 8))
    FIO___MEMCPY_UNSAFE_STEP(8);
  if ((l & 4))
    FIO___MEMCPY_UNSAFE_STEP(4);
  if ((l & 2))
    FIO___MEMCPY_UNSAFE_STEP(2);
#undef FIO___MEMCPY_UNSAFE_STEP
  if ((l & 1))
    *d++ = *s;

  return (void *)d;
}

/** an unsafe memcpy (no checks + assumes no overlapping memory regions)*/
FIO_SFUNC void *fio___memcpy_buffered_reversed_x(void *d_,
                                                 const void *s_,
                                                 size_t l) {
  char *d = (char *)d_ + l;
  const char *s = (const char *)s_ + l;
  uint64_t t[8] FIO_ALIGN(16);
  while (l > 63) {
    (s -= 64), (d -= 64), (l -= 64);
    fio_memcpy64(t, s);
    FIO_COMPILER_GUARD_INSTRUCTION;
    fio_memcpy64(d, t);
  }
  if ((l & 32)) {
    (d -= 32), (s -= 32);
    fio_memcpy32(t, s);
    FIO_COMPILER_GUARD_INSTRUCTION;
    fio_memcpy32(d, t);
  }
  if ((l & 16)) {
    (d -= 16), (s -= 16);
    fio_memcpy16(t, s);
    FIO_COMPILER_GUARD_INSTRUCTION;
    fio_memcpy16(d, t);
  }
  if ((l & 8)) {
    (d -= 8), (s -= 8);
    fio_memcpy8(t, s);
    FIO_COMPILER_GUARD_INSTRUCTION;
    fio_memcpy8(d, t);
  }
  if ((l & 4)) {
    (d -= 4), (s -= 4);
    fio_memcpy4(t, s);
    fio_memcpy4(d, t);
  }
  if ((l & 2)) {
    (d -= 2), (s -= 2);
    fio_memcpy2(t, s);
    fio_memcpy2(d, t);
  }
  if ((l & 1))
    *--d = *--s;
  return (void *)d;
}

#define FIO___MEMCPY_BLOCKx_NUM 255ULL

/** memcpy / memmove alternative that should work with unaligned memory */
SFUNC void *fio_memcpy(void *dest_, const void *src_, size_t bytes) {
  char *d = (char *)dest_;
  const char *s = (const char *)src_;

  if ((d == s) | !bytes | !d | !s) {
    if (bytes && (d != s))
      FIO_LOG_DEBUG2("fio_memcpy null error - ignored instruction");
    return d;
  }

  if (s + bytes <= d || d + bytes <= s ||
      (uintptr_t)d + FIO___MEMCPY_BLOCKx_NUM < (uintptr_t)s) {
    return fio___memcpy_unsafe_x(d, s, bytes);
  } else if (d < s) { /* memory overlaps at end (copy forward, use buffer) */
    return fio___memcpy_buffered_x(d, s, bytes);
  } else { /* memory overlaps at beginning, walk backwards (memmove) */
    return fio___memcpy_buffered_reversed_x(d, s, bytes);
  }
  return d;
}

#undef FIO___MEMCPY_BLOCKx_NUM

/* *****************************************************************************
FIO_MEMSET / fio_memset - memset fallbacks
***************************************************************************** */

/** an 8 byte value memset implementation. */
SFUNC void *fio_memset(void *restrict dest_, uint64_t data, size_t bytes) {
  char *d = (char *)dest_;
  if (data < 0x100) { /* if a single byte value, match memset */
    data |= (data << 8);
    data |= (data << 16);
    data |= (data << 32);
  }
  if (bytes < 32)
    goto small_memset;

  /* 32 byte groups */
  for (;;) {
    for (size_t i = 0; i < 32; i += 8) {
      fio_memcpy8(d + i, &data);
    }
    bytes -= 32;
    if (bytes < 32)
      break;
    d += 32;
  }
  /* remainder  */
  d += bytes & 31;
  data = fio_frot64(data, ((bytes & 7) << 3));
  for (size_t i = 0; i < 32; i += 8) {
    fio_memcpy8(d + i, &data);
  }
  return dest_;

small_memset:
  if (bytes & 16) {
    fio_memcpy8(d, &data);
    fio_memcpy8(d + 8, &data);
    d += 16;
  }
  if (bytes & 8) {
    fio_memcpy8(d, &data);
    d += 8;
  }
  fio_memcpy7x(d, &data, bytes);
  return dest_;
}

/* *****************************************************************************
FIO_MEMCHR / fio_memchr - memchr fallbacks
***************************************************************************** */

/**
 * A token seeking function. This is a fallback for `memchr`, but `memchr`
 * should be faster.
 */
SFUNC void *fio_memchr(const void *buffer, const char token, size_t len) {
  // return (void *)memchr(buffer, token, len); /* FIXME */
  const char *r = (const char *)buffer;
  const char *e = r + (len - 127);
  uint64_t u[16] FIO_ALIGN(16) = {0};
  uint64_t flag = 0;
  size_t i;
  uint64_t umsk = ((uint64_t)((uint8_t)token));
  umsk |= (umsk << 32); /* make each byte in umsk == token */
  umsk |= (umsk << 16);
  umsk |= (umsk << 8);
  if (len < 8)
    goto small_memchr;
  while (r < e) {
    fio_memcpy128(u, r);
    for (i = 0; i < 16; ++i) {
      u[i] ^= umsk;
      flag |= (u[i] = fio_has_zero_byte64(u[i]));
    }
    if (flag)
      goto found_in_map;
    r += 128;
  }
  e += 120;
  i = 0;
  while (r < e) {
    fio_memcpy8(u, r);
    u[0] ^= umsk;
    flag = fio_has_zero_byte64(u[0]);
    if (flag)
      goto found_in_8;
    r += 8;
  }
small_memchr:
  switch ((len & 7)) { /* clang-format off */
    case 7: if (*r == token) return (void *)r; ++r; /* fall through */
    case 6: if (*r == token) return (void *)r; ++r; /* fall through */
    case 5: if (*r == token) return (void *)r; ++r; /* fall through */
    case 4: if (*r == token) return (void *)r; ++r; /* fall through */
    case 3: if (*r == token) return (void *)r; ++r; /* fall through */
    case 2: if (*r == token) return (void *)r; ++r; /* fall through */
    case 1: if (*r == token) return (void *)r; ++r;
    } /* clang-format on */
  return NULL;
found_in_map:
  flag = 0;
  for (i = 0; !u[i]; ++i)
    ;
  flag = u[i];
  r += i << 3;
found_in_8:
  flag = fio_has_byte2bitmap(flag);
  return (void *)(r + fio_lsb_index_unsafe(flag));
}

/* *****************************************************************************
fio_strlen
***************************************************************************** */

SFUNC FIO___ASAN_AVOID size_t fio_strlen(const char *str) {
  if (!str)
    return 0;
  uintptr_t start = (uintptr_t)str;
  /* we must align memory, to avoid crushing when nearing last page boundary */
  uint64_t flag = 0;
  uint64_t map[8] FIO_ALIGN(16);
  /* align to 8 bytes - most likely skipped */
  switch (start & 7) { // clang-format off
  case 1: if(*str == 0) return (uintptr_t)str - start; ++str; /* fall through */
  case 2: if(*str == 0) return (uintptr_t)str - start; ++str; /* fall through */
  case 3: if(*str == 0) return (uintptr_t)str - start; ++str; /* fall through */
  case 4: if(*str == 0) return (uintptr_t)str - start; ++str; /* fall through */
  case 5: if(*str == 0) return (uintptr_t)str - start; ++str; /* fall through */
  case 6: if(*str == 0) return (uintptr_t)str - start; ++str; /* fall through */
  case 7: if(*str == 0) return (uintptr_t)str - start; ++str;
  } // clang-format on
  /* align to 64 bytes */
  for (size_t i = 0; i < 9; ++i) {
    if ((flag = fio_has_zero_byte64(*(uint64_t *)str)))
      goto found_nul_byte0;
    str += 8;
  }
  str = FIO_PTR_MATH_RMASK(const char, str, 6); /* compiler hint */
  /* loop endlessly */
  for (;;) {
    for (size_t i = 0; i < 8; ++i) {
      flag |= (map[i] = fio_has_zero_byte64(((uint64_t *)str)[i]));
    }
    if (flag)
      goto found_nul_byte8;
    str += 64;
  }

found_nul_byte8:
  flag = 0;
  for (size_t i = 0; i < 8; ++i) {
    map[i] = fio_has_byte2bitmap(map[i]);
    flag |= (map[i] << (i << 3)); /* pack bitmap */
  }
  str += fio_lsb_index_unsafe(flag);
  return (uintptr_t)str - start;

found_nul_byte0:
  str += fio_lsb_index_unsafe(fio_has_byte2bitmap(flag));
  return (uintptr_t)str - start;
}

/* *****************************************************************************
fio_memcmp
***************************************************************************** */

/** Same as `memcmp`. Returns 1 if `a > b`, -1 if `a < b` and 0 if `a == b`. */
SFUNC int fio_memcmp(const void *a_, const void *b_, size_t len) {
  if (a_ == b_ || !len)
    return 0;
  uint64_t ua[8] FIO_ALIGN(16);
  uint64_t ub[8] FIO_ALIGN(16);
  size_t flag = 0;
  char *a = (char *)a_;
  char *b = (char *)b_;
  char *e;
  if (*a != *b)
    return (int)1 - (int)(((unsigned)b[0] > (unsigned)a[0]) << 1);
  if (len < 8)
    goto fio_memcmp_mini;
  if (len < 64)
    goto fio_memcmp_small;

  e = a + len - 63;
  do {
    fio_memcpy64(ua, a);
    fio_memcpy64(ub, b);
    for (size_t i = 0; i < 8; ++i)
      flag |= (ua[i] ^ ub[i]);
    if (flag)
      goto fio_memcmp_found;
    a += 64;
    b += 64;
  } while (a < e);
  a += len & 63;
  b += len & 63;
  a -= 64;
  b -= 64;
  fio_memcpy64(ua, a);
  fio_memcpy64(ub, b);
  for (size_t i = 0; i < 8; ++i)
    flag |= (ua[i] ^ ub[i]);
  if (flag)
    goto fio_memcmp_found;
  return 0;

fio_memcmp_found:
  if (ua[0] == ub[0])
    for (size_t i = 8; --i;)
      if (ua[i] != ub[i]) {
        ua[0] = ua[i];
        ub[0] = ub[i];
      }
  goto fio_memcmp_small_found;

fio_memcmp_small:
  e = a + len - 7;
  do {
    fio_memcpy8(ua, a);
    fio_memcpy8(ub, b);
    if (ua[0] != ub[0])
      goto fio_memcmp_small_found;
    a += 8;
    b += 8;
  } while (a < e);
  a += len & 7;
  b += len & 7;
  a -= 8;
  b -= 8;
  fio_memcpy8(ua, a);
  fio_memcpy8(ub, b);
  if (ua[0] != ub[0])
    goto fio_memcmp_small_found;
  return 0;

fio_memcmp_small_found:
  ua[0] = fio_lton64(ua[0]);
  ub[0] = fio_lton64(ub[0]);
  return (int)1 - (int)((ub[0] > ua[0]) << 1);

fio_memcmp_mini:
  switch ((len & 7)) { /* clang-format off */
    case 7: if (*a != *b) return (int)1 - (int)(((unsigned)b[0] > (unsigned)a[0]) << 1); ++a; ++b; /* fall through */
    case 6: if (*a != *b) return (int)1 - (int)(((unsigned)b[0] > (unsigned)a[0]) << 1); ++a; ++b; /* fall through */
    case 5: if (*a != *b) return (int)1 - (int)(((unsigned)b[0] > (unsigned)a[0]) << 1); ++a; ++b; /* fall through */
    case 4: if (*a != *b) return (int)1 - (int)(((unsigned)b[0] > (unsigned)a[0]) << 1); ++a; ++b; /* fall through */
    case 3: if (*a != *b) return (int)1 - (int)(((unsigned)b[0] > (unsigned)a[0]) << 1); ++a; ++b; /* fall through */
    case 2: if (*a != *b) return (int)1 - (int)(((unsigned)b[0] > (unsigned)a[0]) << 1); ++a; ++b; /* fall through */
    case 1: if (*a != *b) return (int)1 - (int)(((unsigned)b[0] > (unsigned)a[0]) << 1); ++a; ++b;
    } /* clang-format on */
  return 0;
}

/* *****************************************************************************
Alternatives - cleanup
***************************************************************************** */
#endif /* FIO_EXTERN */
#endif /* FIO_MEMALT */
#ifndef H___FIO_OS_PATCHES___H
#define H___FIO_OS_PATCHES___H
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* ************************************************************************* */

/* *****************************************************************************


Patch for OSX version < 10.12 from https://stackoverflow.com/a/9781275/4025095

Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if (defined(__MACH__) && !defined(CLOCK_REALTIME))
#warning fio_time functions defined using gettimeofday patch.
#include <sys/time.h>
#define CLOCK_REALTIME 0
#ifndef CLOCK_MONOTONIC
#define CLOCK_MONOTONIC 0
#endif
#define clock_gettime fio_clock_gettime
// clock_gettime is not implemented on older versions of OS X (< 10.12).
// If implemented, CLOCK_MONOTONIC will have already been defined.
FIO_IFUNC int fio_clock_gettime(int clk_id, struct timespec *t) {
  struct timeval now;
  int rv = gettimeofday(&now, NULL);
  if (rv)
    return rv;
  t->tv_sec = now.tv_sec;
  t->tv_nsec = now.tv_usec * 1000;
  return 0;
  (void)clk_id;
}

#endif
/* *****************************************************************************




Patches for Windows




***************************************************************************** */
#if FIO_OS_WIN

/* *****************************************************************************
Windows initialization
***************************************************************************** */

/* Enable console colors */
FIO_CONSTRUCTOR(fio___windows_startup_housekeeping) {
  HANDLE c = GetStdHandle(STD_OUTPUT_HANDLE);
  if (c) {
    DWORD mode = 0;
    if (GetConsoleMode(c, &mode)) {
      mode |= ENABLE_VIRTUAL_TERMINAL_PROCESSING;
      SetConsoleMode(c, mode);
    }
  }
  c = GetStdHandle(STD_ERROR_HANDLE);
  if (c) {
    DWORD mode = 0;
    if (GetConsoleMode(c, &mode)) {
      mode |= ENABLE_VIRTUAL_TERMINAL_PROCESSING;
      SetConsoleMode(c, mode);
    }
  }
  /* by default, windows read files using _O_TEXT, which affects behavior */
  _set_fmode(_O_BINARY);
}

/* *****************************************************************************
Inlined patched and MACRO statements
***************************************************************************** */

#ifndef __MINGW32__
/** patch for strcasecmp */
FIO_IFUNC int strcasecmp(const char *s1, const char *s2) {
  return _stricmp(s1, s2);
}
/** patch for write */
FIO_IFUNC int write(int fd, const void *b, unsigned int l) {
  return _write(fd, b, l);
}
/** patch for read */
FIO_IFUNC int read(int const fd, void *const b, unsigned const l) {
  return _read(fd, b, l);
}
/** patch for clock_gettime */
FIO_SFUNC int clock_gettime(const uint32_t clk_type, struct timespec *tv);
#endif /* __MINGW32__ */

/** patch for pwrite */
FIO_SFUNC ssize_t pwrite(int fd, const void *buf, size_t count, off_t offset);

#ifndef O_APPEND
#define O_APPEND      _O_APPEND
#define O_BINARY      _O_BINARY
#define O_CREAT       _O_CREAT
#define O_CREAT       _O_CREAT
#define O_SHORT_LIVED _O_SHORT_LIVED
#define O_CREAT       _O_CREAT
#define O_TEMPORARY   _O_TEMPORARY
#define O_CREAT       _O_CREAT
#define O_EXCL        _O_EXCL
#define O_NOINHERIT   _O_NOINHERIT
#define O_RANDOM      _O_RANDOM
#define O_RDONLY      _O_RDONLY
#define O_RDWR        _O_RDWR
#define O_SEQUENTIAL  _O_SEQUENTIAL
#define O_TEXT        _O_TEXT
#define O_TRUNC       _O_TRUNC
#define O_WRONLY      _O_WRONLY
#define O_U16TEXT     _O_U16TEXT
#define O_U8TEXT      _O_U8TEXT
#define O_WTEXT       _O_WTEXT
#endif /* O_APPEND */

#ifndef S_IWUSR
#define S_IREAD  _S_IREAD
#define S_IWRITE _S_IWRITE
#define S_IRUSR  _S_IREAD
#define S_IWUSR  _S_IWRITE
#define S_IRWXO  (_S_IREAD | _S_IWRITE)
#define S_IRWXG  (_S_IREAD | _S_IWRITE)
#define S_IRWXU  (_S_IREAD | _S_IWRITE)
#endif /* S_IWUSR */

#ifndef O_TMPFILE
#define O_TMPFILE O_TEMPORARY
#endif

#if defined(CLOCK_REALTIME) && defined(CLOCK_MONOTONIC) &&                     \
    CLOCK_REALTIME == CLOCK_MONOTONIC
#undef CLOCK_MONOTONIC
#undef CLOCK_REALTIME
#endif

#ifndef CLOCK_REALTIME
#ifdef CLOCK_MONOTONIC
#define CLOCK_REALTIME (CLOCK_MONOTONIC + 1)
#else
#define CLOCK_REALTIME 0
#endif
#endif

#ifndef CLOCK_MONOTONIC
#define CLOCK_MONOTONIC 1
#endif

#ifndef PATH_MAX
#ifdef MAX_PATH
#define PATH_MAX MAX_PATH
#else /* although this value is usually (in practice) 256 + 4, we go big. */
#define PATH_MAX 1024
#endif
#endif

#if !defined(fstat)
#define fstat _fstat
#endif /* fstat */
#if !defined(stat)
#define stat _stat
#endif /* stat */
#if !defined(lseek)
#define lseek _lseeki64
#endif /* lseek */
#if !defined(unlink)
#define unlink _unlink
#endif /* unlink */

#if !FIO_HAVE_UNIX_TOOLS || defined(__MINGW32__)
#define pipe(fds) _pipe(fds, 65536, _O_BINARY)
#endif

/* *****************************************************************************
Patched function Implementation
***************************************************************************** */

#ifndef __MINGW32__
/* based on:
 * https://stackoverflow.com/questions/5404277/porting-clock-gettime-to-windows
 */
/** patch for clock_gettime */
FIO_SFUNC int clock_gettime(const uint32_t clk_type, struct timespec *tv) {
  if (!tv)
    return -1;
  static union {
    uint64_t u;
    LARGE_INTEGER li;
  } freq = {.u = 0};
  static double tick2n = 0;
  union {
    uint64_t u;
    FILETIME ft;
    LARGE_INTEGER li;
  } tu;

  switch (clk_type) {
  case CLOCK_REALTIME:
  realtime_clock:
    GetSystemTimePreciseAsFileTime(&tu.ft);
    tv->tv_sec = tu.u / 10000000;
    tv->tv_nsec = tu.u - (tv->tv_sec * 10000000);
    return 0;

#ifdef CLOCK_PROCESS_CPUTIME_ID
  case CLOCK_PROCESS_CPUTIME_ID:
#endif
#ifdef CLOCK_THREAD_CPUTIME_ID
  case CLOCK_THREAD_CPUTIME_ID:
#endif
  case CLOCK_MONOTONIC:
    if (!QueryPerformanceCounter(&tu.li))
      goto realtime_clock;
    if (!freq.u)
      QueryPerformanceFrequency(&freq.li);
    if (!freq.u) {
      tick2n = 0;
      freq.u = 1;
    } else {
      tick2n = (double)1000000000 / freq.u;
    }
    tv->tv_sec = tu.u / freq.u;
    tv->tv_nsec =
        (uint64_t)(0ULL + ((double)(tu.u - (tv->tv_sec * freq.u)) * tick2n));
    return 0;
  }
  return -1;
}
#endif /* __MINGW32__ */

/** patch for pwrite */
FIO_SFUNC ssize_t pwrite(int fd, const void *buf, size_t count, off_t offset) {
  /* Credit to Jan Biedermann (GitHub: @janbiedermann) */
  ssize_t bytes_written = 0;
  HANDLE handle = (HANDLE)_get_osfhandle(fd);
  if (handle == INVALID_HANDLE_VALUE)
    goto bad_file;
  OVERLAPPED overlapped = {0};
  if (offset > 0)
    overlapped.Offset = offset;
  if (WriteFile(handle, buf, count, (u_long *)&bytes_written, &overlapped))
    return bytes_written;
  errno = EIO;
  return -1;
bad_file:
  errno = EBADF;
  return -1;
}

/* *****************************************************************************



Patches for POSIX



***************************************************************************** */
#elif FIO_OS_POSIX /* POSIX patches */
#endif

/* *****************************************************************************
Done with Patches
***************************************************************************** */
#endif /* H___FIO_OS_PATCHES___H */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_ATOL               /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                            String <=> Number helpers



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_ATOL) && !defined(H___FIO_ATOL___H)
#define H___FIO_ATOL___H
#include <inttypes.h>
#include <math.h>

#ifndef FIO_ATOL_ALLOW_UNDERSCORE_DIVIDER
#define FIO_ATOL_ALLOW_UNDERSCORE_DIVIDER 1
#endif

/* *****************************************************************************
Strings to Signed Numbers - The fio_aton function
***************************************************************************** */

/** Result type for fio_aton */
typedef struct {
  union {
    int64_t i;
    double f;
    uint64_t u;
  };
  int is_float;
  int err;
} fio_aton_s;

/**
 * Converts a String to a number - either an integer or a float (double).
 *
 * Skips white space at the beginning of the string.
 *
 * Auto detects binary and hex formats when prefix is provided (0x / 0b).
 *
 * Auto detects octal when number starts with zero.
 *
 * Auto detects the Strings "inf", "infinity" and "nan" as float values.
 *
 * The number's format and type are returned in the return type.
 *
 * If a numerical overflow or format error occurred, the `.err` flag is set.
 *
 * Note: rounding errors may occur, as this is not an `strtod` exact match.
 */
FIO_SFUNC fio_aton_s fio_aton(char **pstr);

/* *****************************************************************************
Strings to Signed Numbers - API
***************************************************************************** */
/**
 * A helper function that converts between String data to a signed int64_t.
 *
 * Numbers are assumed to be in base 10. Octal (`0###`), Hex (`0x##`/`x##`) and
 * binary (`0b##`/ `b##`) are recognized as well. For binary Most Significant
 * Bit must come first.
 *
 * The most significant difference between this function and `strtol` (aside of
 * API design), is the added support for binary representations.
 */
SFUNC int64_t fio_atol(char **pstr);

/** A helper function that converts between String data to a signed double. */
SFUNC double fio_atof(char **pstr);

/* *****************************************************************************
Signed Numbers to Strings - API
***************************************************************************** */

/**
 * A helper function that writes a signed int64_t to a string.
 *
 * No overflow guard is provided, make sure there's at least 68 bytes available
 * (for base 2).
 *
 * Offers special support for base 2 (binary), base 8 (octal), base 10 and base
 * 16 (hex) where prefixes are automatically added if required (i.e.,`"0x"` for
 * hex and `"0b"` for base 2, and `"0"` for octal).
 *
 * Supports any base up to base 36 (using 0-9,A-Z).
 *
 * An unsupported base will log an error and print zero.
 *
 * Returns the number of bytes actually written (excluding the NUL terminator).
 */
SFUNC size_t fio_ltoa(char *dest, int64_t num, uint8_t base);

/**
 * A helper function that converts between a double to a string.
 *
 * No overflow guard is provided, make sure there's at least 130 bytes
 * available (for base 2).
 *
 * Supports base 2, base 10 and base 16. An unsupported base will silently
 * default to base 10. Prefixes aren't added (i.e., no "0x" or "0b" at the
 * beginning of the string).
 *
 * Returns the number of bytes actually written (excluding the NUL
 * terminator).
 */
SFUNC size_t fio_ftoa(char *dest, double num, uint8_t base);

/* *****************************************************************************
Unsigned Numbers, Building Blocks and Helpers
***************************************************************************** */
/**
 * Maps characters to alphanumerical value, where numbers have their natural
 * values (0-9) and `A-Z` (or `a-z`) are the values 10-35.
 *
 * Out of bound values return 255.
 *
 * This allows parsing of numeral strings for up to base 36.
 */
IFUNC uint8_t fio_c2i(unsigned char c);

/**
 * Maps numeral values to alphanumerical characters, where numbers have their
 * natural values (0-9) and `A-Z` are the values 10-35.
 *
 * Accepts values up to 63. Returns zero for values over 35. Out of bound values
 * produce undefined behavior.
 *
 * This allows printing of numerals for up to base 36.
 */
IFUNC uint8_t fio_i2c(unsigned char i);

/** Returns the number of digits in base 10. */
FIO_IFUNC size_t fio_digits10(int64_t i);
/** Returns the number of digits in base 10 for an unsigned number. */
FIO_SFUNC size_t fio_digits10u(uint64_t i);

/** Returns the number of digits in base 8 for an unsigned number. */
FIO_SFUNC size_t fio_digits8u(uint64_t i);
/** Returns the number of digits in base 16 for an unsigned number. */
FIO_SFUNC size_t fio_digits16u(uint64_t i);
/** Returns the number of digits in base 2 for an unsigned number. */
FIO_SFUNC size_t fio_digits_bin(uint64_t i);
/** Returns the number of digits in any base X<65 for an unsigned number. */
FIO_SFUNC size_t fio_digits_xbase(uint64_t i, size_t base);

/** Writes a signed number to `dest` using `digits` bytes (+ `NUL`) */
FIO_IFUNC void fio_ltoa10(char *dest, int64_t i, size_t digits);
/** Reads a signed base 10 formatted number. */
SFUNC int64_t fio_atol10(char **pstr);

/** Writes unsigned number to `dest` using `digits` bytes (+ `NUL`) */
FIO_IFUNC void fio_ltoa10u(char *dest, uint64_t i, size_t digits);
/** Writes unsigned number to `dest` using `digits` bytes (+ `NUL`) */
FIO_IFUNC void fio_ltoa16u(char *dest, uint64_t i, size_t digits);
/** Writes unsigned number to `dest` using `digits` bytes (+ `NUL`) */
FIO_IFUNC void fio_ltoa_bin(char *dest, uint64_t i, size_t digits);
/** Writes unsigned number to `dest` using `digits` bytes (+ `NUL`) */
FIO_IFUNC void fio_ltoa_xbase(char *dest,
                              uint64_t i,
                              size_t digits,
                              size_t base);

/** Reads a signed base 8 formatted number. */
SFUNC uint64_t fio_atol8u(char **pstr);
/** Reads a signed base 10 formatted number. */
SFUNC uint64_t fio_atol10u(char **pstr);
/** Reads an unsigned hex formatted number (possibly prefixed with "0x"). */
SFUNC uint64_t fio_atol16u(char **pstr);
/** Reads an unsigned binary formatted number (possibly prefixed with "0b"). */
SFUNC uint64_t fio_atol_bin(char **pstr);
/** Read an unsigned number in any base up to base 36. */
SFUNC uint64_t fio_atol_xbase(char **pstr, size_t base);

/** Converts an unsigned `val` to a signed `val`, with overflow protection. */
FIO_IFUNC int64_t fio_u2i_limit(uint64_t val, size_t invert);

/* *****************************************************************************
IEEE 754 Floating Points, Building Blocks and Helpers
***************************************************************************** */

/** Converts a 64 bit integer to an IEEE 754 formatted double. */
FIO_IFUNC double fio_i2d(int64_t mant, int64_t exponent_in_base_2);

/** Converts a 64 bit unsigned integer to an IEEE 754 formatted double. */
FIO_IFUNC double fio_u2d(uint64_t mant, int64_t exponent_in_base_2);

/* *****************************************************************************
Big Numbers
***************************************************************************** */

/** Reads a hex numeral string and initializes the numeral. */
SFUNC fio_u128 fio_u128_hex_read(char **pstr);
/** Reads a hex numeral string and initializes the numeral. */
SFUNC fio_u256 fio_u256_hex_read(char **pstr);
/** Reads a hex numeral string and initializes the numeral. */
SFUNC fio_u512 fio_u512_hex_read(char **pstr);
/** Reads a hex numeral string and initializes the numeral. */
SFUNC fio_u1024 fio_u1024_hex_read(char **pstr);
/** Reads a hex numeral string and initializes the numeral. */
SFUNC fio_u2048 fio_u2048_hex_read(char **pstr);
/** Reads a hex numeral string and initializes the numeral. */
SFUNC fio_u4096 fio_u4096_hex_read(char **pstr);

/** Prints out the underlying 64 bit array (for debugging). */
SFUNC size_t fio_u128_hex_write(char *dest, const fio_u128 *);
/** Prints out the underlying 64 bit array (for debugging). */
SFUNC size_t fio_u256_hex_write(char *dest, const fio_u256 *);
/** Prints out the underlying 64 bit array (for debugging). */
SFUNC size_t fio_u512_hex_write(char *dest, const fio_u512 *);
/** Prints out the underlying 64 bit array (for debugging). */
SFUNC size_t fio_u1024_hex_write(char *dest, const fio_u1024 *);
/** Prints out the underlying 64 bit array (for debugging). */
SFUNC size_t fio_u2048_hex_write(char *dest, const fio_u2048 *);
/** Prints out the underlying 64 bit array (for debugging). */
SFUNC size_t fio_u4096_hex_write(char *dest, const fio_u4096 *);

/* *****************************************************************************


Implementation - inlined


***************************************************************************** */

/** Returns the number of digits in base 10. */
FIO_IFUNC size_t fio_digits10(int64_t i) {
  if (i >= 0)
    return fio_digits10u(i);
  return fio_digits10u((0ULL - (uint64_t)i)) + 1;
}

/** Returns the number of digits in base 2 for an unsigned number. */
FIO_SFUNC size_t fio_digits_bin(uint64_t i) {
  size_t r = 1;
  if (!i)
    return r;
  r = fio_msb_index_unsafe(i) + 1;
  r += (r & 1); /* binary is written 2 zeros at a time */
  return r;
}

/** Returns the number of digits in base 8 for an unsigned number. */
FIO_SFUNC size_t fio_digits8u(uint64_t i) {
  size_t r = 1;
  for (;;) {
    if (i < 8)
      return r;
    if (i < 64)
      return r + 1;
    if (i < 512)
      return r + 2;
    if (i < 4096)
      return r + 3;
    if (i < 32768)
      return r + 4;
    if (i < 262144)
      return r + 5;
    if (i < 2097152)
      return r + 6;
    if (i < 16777216)
      return r + 7;
    r += 8;
    i >>= 24;
  }
}

/** Returns the number of digits in base 10 for an unsigned number. */
FIO_SFUNC size_t fio_digits10u(uint64_t i) {
  size_t r = 1;
  for (;;) {
    if (i < 10ULL)
      return r;
    if (i < 100ULL)
      return r + 1;
    if (i < 1000ULL)
      return r + 2;
    if (i < 10000ULL)
      return r + 3;
    r += 4;
    i /= 10000ULL;
  }
}

/** Returns the number of digits in base 16 for an unsigned number. */
FIO_SFUNC size_t fio_digits16u(uint64_t i) {
  if (i < 0x100ULL)
    return 2;
  if (i < 0x10000ULL)
    return 4;
  if (i < 0x1000000ULL)
    return 6;
  if (i < 0x100000000ULL)
    return 8;
  if (i < 0x10000000000ULL)
    return 10;
  if (i < 0x1000000000000ULL)
    return 12;
  if (i < 0x100000000000000ULL)
    return 14;
  return 16;
}

/** Returns the number of digits in base X<65 for an unsigned number. */
FIO_SFUNC size_t fio_digits_xbase(uint64_t i, size_t base) {
  size_t base2 = base * base;
  size_t base3 = base2 * base;
  size_t base4 = base3 * base;
  size_t r = 1;
  for (;;) {
    if (i < base)
      return r;
    if (i < base2)
      return r + 1;
    if (i < base3)
      return r + 2;
    if (i < base4)
      return r + 3;
    r += 4;
    i /= base4;
  }
}

FIO_IFUNC void fio_ltoa10(char *dest, int64_t i, size_t digits) {
  size_t inv = i < 0;
  dest[0] = '-';
  dest += inv;
  if (inv)
    i = (int64_t)((uint64_t)0 - (uint64_t)i);
  fio_ltoa10u(dest, (uint64_t)i, digits - inv);
}

FIO_IFUNC void fio_ltoa8u(char *dest, uint64_t i, size_t digits) {
  dest += digits;
  *dest-- = 0;
  while (i > 7) {
    *dest-- = '0' + (i & 7);
    i >>= 3;
  }
  *dest = '0' + i;
}

FIO_IFUNC void fio_ltoa10u(char *dest, uint64_t i, size_t digits) {
  dest += digits;
  *dest-- = 0;
  while (i > 9) {
    uint64_t nxt = i / 10;
    *dest-- = '0' + (i - (nxt * 10ULL));
    i = nxt;
  }
  *dest = '0' + (unsigned char)i;
}

FIO_IFUNC void fio_ltoa16u(char *dest, uint64_t i, size_t digits) {
  digits += (digits & 1U); /* force even number of digits */
  dest += digits;
  *dest-- = 0;
  while (digits) {
    digits -= 2;
    *dest-- = fio_i2c(i & 15);
    i >>= 4;
    *dest-- = fio_i2c(i & 15);
    i >>= 4;
  }
}

FIO_IFUNC void fio_ltoa_bin(char *dest, uint64_t i, size_t digits) {
  dest += digits;
  *dest = 0;
  switch (digits & 7) {
  case 7: *--dest = '0' + (i & 1); i >>= 1; /* fall through */
  case 6: *--dest = '0' + (i & 1); i >>= 1; /* fall through */
  case 5: *--dest = '0' + (i & 1); i >>= 1; /* fall through */
  case 4: *--dest = '0' + (i & 1); i >>= 1; /* fall through */
  case 3: *--dest = '0' + (i & 1); i >>= 1; /* fall through */
  case 2: *--dest = '0' + (i & 1); i >>= 1; /* fall through */
  case 1: *--dest = '0' + (i & 1); i >>= 1; /* fall through */
  case 0:;
  }
  digits &= ~(uint64_t)7ULL;
  while (digits > 7) {
    uint64_t tmp = (i & 0xFFULL);
    dest -= 8;
    digits -= 8;
    i >>= 8;
    tmp = ((tmp & 0x7F) * 0x02040810204081ULL) | ((tmp & 0x80) << 49);
    tmp &= 0x0101010101010101ULL;
    tmp += (0x0101010101010101ULL * '0');
    fio_u2buf64_be(dest, tmp);
  }
}

FIO_IFUNC void fio_ltoa_xbase(char *dest,
                              uint64_t i,
                              size_t digits,
                              size_t base) {
  dest += digits;
  *dest-- = 0;
  while (i >= base) {
    uint64_t nxt = i / base;
    *dest-- = fio_i2c(i - (nxt * base));
    i = nxt;
  }
  *dest = fio_i2c(i);
}

/** Converts an unsigned `val` to a signed `val`, with overflow protection. */
FIO_IFUNC int64_t fio_u2i_limit(uint64_t val, size_t to_negative) {
  if (!to_negative) {
    /* overflow? */
    if (!(val & 0x8000000000000000ULL))
      return val;
    errno = E2BIG;
    val = 0x7FFFFFFFFFFFFFFFULL;
    return val;
  }
  if (!(val & 0x8000000000000000ULL)) {
    val = (int64_t)0LL - (int64_t)val;
    return val;
  }
  /* read overflow */
  errno = E2BIG;
  return (int64_t)(val = 0x8000000000000000ULL);
}

/* *****************************************************************************
IEEE 754 Floating Points, Building Blocks and Helpers
***************************************************************************** */

#ifndef FIO_MATH_DBL_MANT_MASK
#define FIO_MATH_DBL_MANT_MASK (((uint64_t)1ULL << 52) - 1)
#define FIO_MATH_DBL_EXPO_MASK ((uint64_t)2047ULL << 52)
#define FIO_MATH_DBL_SIGN_MASK ((uint64_t)1ULL << 63)
#endif

FIO_IFUNC int fio_d2expo(double d) {
  int r;
  union {
    uint64_t u64;
    double d;
  } u = {.d = d};
  u.u64 &= FIO_MATH_DBL_EXPO_MASK;
  r = (int)(u.u64 >> 52);
  r -= 1023;
  r *= -1;
  return r;
}

/** Converts a 64 bit integer to an IEEE 754 formatted double. */
FIO_IFUNC double fio_u2d(uint64_t mant, int64_t exponent) {
#ifndef FIO___ATON_TIE2EVEN
  /* If set, performs a rounding attempt with tie to even */
#define FIO___ATON_TIE2EVEN 0
#endif
  union {
    uint64_t u64;
    double d;
  } u = {0};
  size_t msbi;
  if (!mant)
    return u.d;
  msbi = fio_msb_index_unsafe(mant);
  if (FIO___ATON_TIE2EVEN && FIO_UNLIKELY(msbi > 52)) { /* losing precision */
    bool not53 = (msbi != 53);
    bool far_set = ((mant >> (53 + not53)) != 0);
    mant = mant >> (msbi - (53 + not53));
    mant |= far_set;
    mant |= (mant >> (1U + not53)) & 1; /* set the non-even bit as rounder */
    mant += 1; /* 1 will propagate if rounding is necessary. */
    bool add_to_expo = (mant >> (53U + not53)) & 1;
    mant >>= (1U + not53 + add_to_expo);
    exponent += add_to_expo;
  }
  /* normalize exponent */
  exponent += msbi + 1023;
  if (FIO_UNLIKELY(exponent > 2047))
    goto is_inifinity_or_nan;
  if (FIO_UNLIKELY(exponent <= 0))
    goto is_subnormal;
  exponent = (uint64_t)exponent << 52;
  u.u64 |= exponent;
  /* reposition mant bits so we "hide" the fist set bit in bit[52] */
  if (msbi < 52)
    mant = mant << (52 - msbi);
  else if (!FIO___ATON_TIE2EVEN &&
           FIO_UNLIKELY(msbi > 52)) /* losing precision */
    mant = mant >> (msbi - 52);
  u.u64 |= mant & FIO_MATH_DBL_MANT_MASK; /* remove the 1 set bit */
  return u.d;

is_inifinity_or_nan:
  u.u64 = FIO_MATH_DBL_EXPO_MASK;
  return u.d;

is_subnormal:
  exponent += 51 - msbi;
  if (exponent < 0)
    return u.d;
  u.u64 = mant >> exponent;
  return u.d;
}

/** Converts a 64 bit integer to an IEEE 754 formatted double. */
FIO_IFUNC double fio_i2d(int64_t mant, int64_t exponent) {
  union {
    uint64_t u64;
    int64_t i64;
    double d;
  } u = {.i64 = mant};
  bool sign = (u.i64 < 0);
  if (sign)
    u.i64 = -u.i64;
  u.d = fio_u2d(u.u64, exponent);
  u.u64 |= ((uint64_t)sign) << 63;
  return u.d;
}

/* *****************************************************************************
Implementation - possibly externed
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* *****************************************************************************
Unsigned core and helpers
***************************************************************************** */

/**
 * Maps characters to alphanumerical value, where numbers have their natural
 * values (0-9) and `A-Z` (or `a-z`) are the values 10-35.
 *
 * Out of bound values return 255.
 *
 * This allows parsing of numeral strings for up to base 36.
 */
IFUNC uint8_t fio_c2i(unsigned char c) {
  static const uint8_t fio___alphanumeric_map[256] = {
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   255, 255,
      255, 255, 255, 255, 255, 10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
      20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,
      35,  255, 255, 255, 255, 255, 255, 10,  11,  12,  13,  14,  15,  16,  17,
      18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,
      33,  34,  35,  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255};
  return fio___alphanumeric_map[c];
}

/**
 * Maps numeral values to alphanumerical characters, where numbers have their
 * natural values (0-9) and `A-Z` are the values 10-35.
 *
 * Accepts values up to 63. Returns zero for values over 35. Out of bound values
 * produce undefined behavior.
 *
 * This allows printing of numerals for up to base 36.
 */
IFUNC uint8_t fio_i2c(unsigned char i) {
  static const uint8_t fio___alphanumeric_map[64] = {
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',
      'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
      'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
  return fio___alphanumeric_map[i & 63];
}

/** Reads a signed base 8 formatted number. */
SFUNC uint64_t fio_atol8u(char **pstr) {
  uint64_t r = 0;
  size_t d;
  while ((d = (size_t)fio_c2i((unsigned char)(**pstr))) < 8) {
    r <<= 3;
    r |= d;
    ++*pstr;
    if ((r & UINT64_C(0xE000000000000000)))
      break;
#if FIO_ATOL_ALLOW_UNDERSCORE_DIVIDER
    *pstr += (**pstr == '_'); /* allow '_' as a divider. */
#endif
  }
  if ((fio_c2i(**pstr)) < 8)
    errno = E2BIG;
  return r;
}

/** Reads an unsigned base 10 formatted number. */
SFUNC uint64_t fio_atol10u(char **pstr) {
  uint64_t r = 0, u0 = 0, u1 = 0;
  char *pos = *pstr;
  /* can't use SIMD, as we don't want to overflow. */
  for (size_t i = 0; i < 8; ++i)
    u0 += ((pos[u0] >= '0') & (pos[u0] <= '9'));
  switch ((u0 & 12)) { /* now we are safe to copy all bytes validated */
  case 8:
    r = fio_buf2u64_le(pos);
    *pstr = (pos += 8); /* credit Johnny Lee, not mine... */
    r = ((r & 0x0F0F0F0F0F0F0F0FULL) * 2561ULL) >> 8;
    r = ((r & 0x00FF00FF00FF00FFULL) * 6553601ULL) >> 16;
    r = ((r & 0x0000FFFF0000FFFFULL) * 42949672960001ULL) >> 32;
    u1 = r; /* https://johnnylee-sde.github.io/Fast-numeric-string-to-int/ */
    break;
  case 4:
    r = ((unsigned)(pos[0] - '0') * 1000) + ((unsigned)(pos[1] - '0') * 100) +
        ((unsigned)(pos[2] - '0') * 10) + (unsigned)(pos[3] - '0');
    *pstr = (pos += 4);
    u1 = r;
    break;
  }

  u0 = (uint64_t)(pos[0] - '0');
  if (u0 > 9ULL)
    return r;
  r *= 10;
  for (;;) {
    r += u0;
    if (r < u1)
      goto value_overflow;
    ++pos;
#if FIO_ATOL_ALLOW_UNDERSCORE_DIVIDER
    pos += (*pos == '_'); /* allow '_' as a divider. */
#endif
    u0 = (uint64_t)(pos[0] - '0');
    if (u0 > 9ULL)
      break;
    if (r > ((~(uint64_t)0ULL) / 10))
      goto value_overflow_stepback;
    u1 = r;
    r *= 10;
  }
  *pstr = pos;
  return r;

value_overflow_stepback:
  --pos;
value_overflow:
  r = u1;
  errno = E2BIG;
  *pstr = pos;
  return r;
}

/** Reads a signed base 10 formatted number. */
SFUNC int64_t fio_atol10(char **pstr) {
  // const uint64_t add_limit = (~(uint64_t)0ULL) - 9;
  char *pos = *pstr;
  const size_t inv = (pos[0] == '-');
  pos += inv;
  // uint64_t val = 0;
  // uint64_t r0;
  // while (((r0 = pos[0] - '0') < 10ULL) & (val < add_limit)) {
  //   val *= 10;
  //   val += r0;
  //   ++pos;
  // }
  // if (((size_t)(pos[0] - '0') < 10ULL)) {
  //   errno = E2BIG;
  // }
  *pstr = pos;
  uint64_t val = fio_atol10u(pstr);
  if (((size_t)(**pstr - '0') < 10ULL))
    errno = E2BIG;
  return fio_u2i_limit(val, inv);
}

/** Reads an unsigned hex formatted number (possibly prefixed with "0x"). */
FIO_IFUNC uint64_t fio___atol16u_with_prefix(uint64_t r, char **pstr) {
  size_t d;
  unsigned char *p = (unsigned char *)*pstr;
  p += ((p[0] == '0') & ((p[1] | 32) == 'x')) << 1;
  if ((d = fio_c2i(*p)) > 15)
    goto possible_misread;
  for (;;) {
    r |= d;
    ++p;
    d = (size_t)fio_c2i(*p);
    if (d > 15)
      break;
    if ((r & UINT64_C(0xF000000000000000))) {
      errno = E2BIG;
      break;
    }
    r <<= 4;
#if FIO_ATOL_ALLOW_UNDERSCORE_DIVIDER
    p += (*p == '_'); /* allow '_' as a divider. */
#endif
  }
  *pstr = (char *)p;
  return r;
possible_misread:
  /* if 0x was read, move to X. */
  *pstr += ((pstr[0][0] == '0') & ((pstr[0][1] | 32) == 'x'));
  return r;
}

/** Reads an unsigned hex formatted number (possibly prefixed with "0x"). */
SFUNC uint64_t fio_atol16u(char **pstr) {
  uint64_t r = 0;
  size_t d;
  unsigned char *p = (unsigned char *)*pstr;
  p += ((p[0] == '0') & ((p[1] | 32) == 'x')) << 1;
  if ((d = fio_c2i(*p)) > 15)
    goto possible_misread;
  for (;;) {
    r |= d;
    ++p;
    d = (size_t)fio_c2i(*p);
    if (d > 15)
      break;
    if ((r & UINT64_C(0xF000000000000000))) {
      errno = E2BIG;
      break;
    }
    r <<= 4;
#if FIO_ATOL_ALLOW_UNDERSCORE_DIVIDER
    p += (*p == '_'); /* allow '_' as a divider. */
#endif
  }
  *pstr = (char *)p;
  return r;
possible_misread:
  /* if 0x was read, move to X. */
  *pstr += ((pstr[0][0] == '0') & ((pstr[0][1] | 32) == 'x'));
  return r;
}

/** Reads an unsigned binary formatted number (possibly prefixed with "0b"). */
SFUNC FIO___ASAN_AVOID uint64_t fio_atol_bin(char **pstr) {
  uint64_t r = 0;
  *pstr += (**pstr == '0');
  *pstr += (**pstr | 32) == 'b' && (((size_t)(pstr[0][1]) - (size_t)'0') < 2);
#if FIO___ASAN_DETECTED || 1
  for (;;) { /* Prevent safe overflow of allocated memory region */
    if ((r & UINT64_C(0x8000000000000000)))
      break;
    size_t len = 0;
    union {
      uint64_t u64;
      uint32_t u32;
    } u;
    for (size_t i = 0; i < 8; ++i)
      len += (((size_t)pstr[0][len] - (size_t)'0') < 2);
    if (!len)
      goto done;
    switch (len & 12) {
    case 8:
      if ((r & UINT64_C(0xFF00000000000000)))
        break; /* from switch */
      u.u64 = fio_buf2u64_be(*pstr);
      u.u64 -= 0x0101010101010101ULL * '0';
      u.u64 |= u.u64 >> 7;
      u.u64 |= u.u64 >> 14;
      u.u64 |= u.u64 >> 28;
      u.u64 &= 0xFF;
      r <<= 8;
      r |= u.u64;
      *pstr += 8;
      continue;
    case 4:
      if ((r & UINT64_C(0xF000000000000000)))
        break; /* from switch */
      u.u32 = fio_buf2u32_be(*pstr);
      u.u32 -= (0x01010101UL * '0');
      u.u32 |= u.u32 >> 7;
      u.u32 |= u.u32 >> 14;
      u.u32 &= 0x0F;
      r <<= 4;
      r |= u.u32;
      *pstr += 4;
      continue;
    }
    while ((len = (size_t)((unsigned char)(**pstr)) - (size_t)'0') < 2) {
      r <<= 1;
      r |= len;
      ++*pstr;
      if ((r & UINT64_C(0x8000000000000000)))
        break;
    }
#if FIO_ATOL_ALLOW_UNDERSCORE_DIVIDER
    if ((**pstr == '_') | (**pstr == '.')) { /* allow as a dividers */
      ++*pstr;
      continue;
    }
#endif
    break;
  }
done:
#else
  size_t d;
  for (; (((uintptr_t)*pstr & 4095) < 4089);) { /* respect page boundary */
    uint64_t tmp = fio_buf2u64_be(*pstr);       /* may overflow */
    tmp -= 0x0101010101010101ULL * '0';         /* was it all `0`s and `1`s? */
    if (tmp & (~0x0101010101010101ULL))         /* if note, break. */
      break;
    tmp |= tmp >> 7;
    tmp |= tmp >> 14;
    tmp |= tmp >> 28;
    tmp &= 0xFF;
    r <<= 8;
    r |= tmp;
    *pstr += 8;
    if ((r & UINT64_C(0xFF00000000000000)))
      break;
  }
  while ((d = (size_t)((unsigned char)(**pstr)) - (size_t)'0') < 2) {
    r <<= 1;
    r |= d;
    ++*pstr;
    if ((r & UINT64_C(0x8000000000000000)))
      break;
#if FIO_ATOL_ALLOW_UNDERSCORE_DIVIDER
    *pstr += (**pstr == '_') | (**pstr == '.'); /* allow as a dividers */
#endif
  }
#endif
  if (((size_t)(**pstr) - (size_t)'0') < 2)
    errno = E2BIG;
  return r;
}

/** Attempts to read an unsigned number in any base up to base 36. */
SFUNC uint64_t fio_atol_xbase(char **pstr, size_t base) {
  uint64_t r = 0;
  if (base > 36)
    return r;
  if (base == 10)
    return (r = fio_atol10u(pstr));
  if (base == 16)
    return (r = fio_atol16u(pstr));
  if (base == 2)
    return (r = fio_atol_bin(pstr));
  const uint64_t limit = (~UINT64_C(0)) / base;
  size_t d;
  while ((d = (size_t)fio_c2i((unsigned char)(**pstr))) < base) {
    r *= base;
    r += d;
    ++*pstr;
    if (r > limit)
      break;
  }
  if ((fio_c2i(**pstr)) < base)
    errno = E2BIG;
  return r;
}

/* *****************************************************************************
fio_atol
***************************************************************************** */

SFUNC int64_t FIO___ASAN_AVOID fio_atol(char **pstr) {
  /* note: sanitizer avoided due to possible 8 byte overflow within mem-page */
  static uint64_t (*const fn[])(char **) = {
      fio_atol10u,
      fio_atol8u,
      fio_atol_bin,
      fio_atol16u,
  };
  if (!pstr || !(*pstr))
    return 0;
  union {
    uint64_t u64;
    int64_t i64;
  } u = {0};
  char *p = *pstr;

  uint32_t neg = 0, base = 0;
  neg = (p[0] == '-');
  p += (neg | (p[0] == '+'));

  base += (p[0] == '0');             /* starts with zero? - oct */
  p += base;                         /* consume the possible '0' */
  base += ((p[0] | 32) == 'b');      /* binary */
  base += ((p[0] | 32) == 'x') << 1; /* hex */
  p += (base > 1);                   /* consume 'b' or 'x' */
  char *const s = p;                 /* mark starting point */
  u.u64 = fn[base](&p);              /* convert string to unsigned long long */
  if (p != s || base == 1)           /* false oct base, a single '0'? */
    *pstr = p;
  if ((neg | !base)) /* if base 10 or negative, treat signed bit as overflow */
    return fio_u2i_limit(u.u64, neg);
  return u.i64;
}

/* *****************************************************************************
fio_ltoa
***************************************************************************** */

SFUNC size_t fio_ltoa(char *dest, int64_t num, uint8_t base) {
  size_t len = 0;
  uint64_t n = (uint64_t)num;
  size_t digits;
  char dump[96];
  if (!dest)
    dest = dump;

  switch (base) {
  case 1: /* fall through */
  case 2: /* Base 2 */
    len += (digits = fio_digits_bin(n));
    fio_ltoa_bin(dest, n, digits); /* embedded sign bit */
    return len;
  case 8: /* Base 8 */
    if (num < 0) {
      *(dest++) = '-';
      n = 0 - n;
      ++len;
    }
    len += (digits = fio_digits8u(n));
    fio_ltoa8u(dest, n, digits);
    return len;
  case 16: /* Base 16 */
    len += (digits = fio_digits16u(n));
    fio_ltoa16u(dest, n, digits); /* embedded sign bit */
    return len;
  case 0:  /* fall through */
  case 10: /* Base 10 */
    if (num < 0) {
      *(dest++) = '-';
      n = 0 - n;
      ++len;
    }
    len += (digits = fio_digits10u(n));
    fio_ltoa10u(dest, n, digits);
    return len;
  default: /* any base up to base 36 */
    if (base > 36)
      goto base_error;
    if (num < 0) {
      *(dest++) = '-';
      n = 0 - n;
      ++len;
    }
    len += (digits = fio_digits_xbase(n, base));
    fio_ltoa_xbase(dest, n, digits, base);
    return len;
  }

base_error:
  FIO_LOG_ERROR("fio_ltoa base out of range");
  return len;
}

/* *****************************************************************************
fio_atof
***************************************************************************** */

SFUNC double fio_atof(char **pstr) {
  if (!pstr || !(*pstr))
    return 0;
  if ((*pstr)[0] == 'b' || ((*pstr)[1] == '0' && (*pstr)[1] == 'b'))
    goto binary_raw;
  return strtod(*pstr, pstr);
binary_raw:
  /* binary representation is assumed to spell an exact double */
  (void)0;
  union {
    uint64_t i;
    double d;
  } punned = {.i = (uint64_t)fio_atol_bin(pstr)};
  *pstr += ((**pstr | 32) == 'f'); /* support 0b1111111F */
  return punned.d;
}

/* *****************************************************************************
fio_ftoa
***************************************************************************** */

SFUNC size_t fio_ftoa(char *dest, double num, uint8_t base) {
  if (base == 2 || base == 16) {
    /* handle binary / Hex representation the same as an int64_t */
    /* FIXME: Hex representation should use floating-point hex instead */
    union {
      int64_t i;
      double d;
    } p;
    p.d = num;
    return fio_ltoa(dest, p.i, base);
  }
  size_t written = 0;

  if (isinf(num))
    goto is_inifinity;
  if (isnan(num))
    goto is_nan;

  written = snprintf(dest, 30, "%g", num);
  /* test if we need to add a ".0" to the end of the string */
  for (char *start = dest;;) {
    switch (*start) {
    case ',':
      *start = '.'; // locale issues?
    /* fall through */
    case 'e': /* fall through */
    case '.': /* fall through */ goto finish;
    case 0: goto add_dot_zero;
    }
    ++start;
  }
add_dot_zero:
  dest[written++] = '.';
  dest[written++] = '0';

finish:
  dest[written] = 0;
  return written;

is_inifinity:
  if (num < 0)
    dest[written++] = '-';
  fio_memcpy8(dest + written, "Infinity");
  written += 8;
  dest[written] = 0;
  return written;
is_nan:
  fio_memcpy4(dest, "NaN");
  return 3;
}

/* *****************************************************************************
fio_aton
***************************************************************************** */
/** Returns a power of 10. Supports values up to 1.0e308. */
FIO_IFUNC long double fio___aton_pow10(uint64_t e10) {
  // clang-format off
#define fio___aton_pow10_map_row(i) 1.0e##i##0L, 1.0e##i##1L, 1.0e##i##2L, 1.0e##i##3L, 1.0e##i##4L, 1.0e##i##5L, 1.0e##i##6L, 1.0e##i##7L, 1.0e##i##8L, 1.0e##i##9L
  static const long double pow_map[] = {
      fio___aton_pow10_map_row(0),  fio___aton_pow10_map_row(1),  fio___aton_pow10_map_row(2),  fio___aton_pow10_map_row(3),  fio___aton_pow10_map_row(4),
      fio___aton_pow10_map_row(5),  fio___aton_pow10_map_row(6),  fio___aton_pow10_map_row(7),  fio___aton_pow10_map_row(8),  fio___aton_pow10_map_row(9),
      fio___aton_pow10_map_row(10), fio___aton_pow10_map_row(11), fio___aton_pow10_map_row(12), fio___aton_pow10_map_row(13), fio___aton_pow10_map_row(14),
      fio___aton_pow10_map_row(15), fio___aton_pow10_map_row(16), fio___aton_pow10_map_row(17), fio___aton_pow10_map_row(18), fio___aton_pow10_map_row(19),
      fio___aton_pow10_map_row(20), fio___aton_pow10_map_row(21), fio___aton_pow10_map_row(22), fio___aton_pow10_map_row(23), fio___aton_pow10_map_row(24),
      fio___aton_pow10_map_row(25), fio___aton_pow10_map_row(26), fio___aton_pow10_map_row(27), fio___aton_pow10_map_row(28), fio___aton_pow10_map_row(29),
      1.0e300L, 1.0e301L, 1.0e302L, 1.0e303L, 1.0e304L, 1.0e305L, 1.0e306L, 1.0e307L, 1.0e308L, // clang-format on
  };
#undef fio___aton_pow10_map_row
  if (e10 < sizeof(pow_map) / sizeof(pow_map[0]))
    return pow_map[e10];
  return powl(10, e10); /* return infinity? */
}

/** Returns a power of 10. Supports values up to 1.0e-308. */
FIO_IFUNC long double fio___aton_pow10n(uint64_t e10) {
  // clang-format off
#define fio___aton_pow10_map_row(i) 1.0e-##i##0L, 1.0e-##i##1L, 1.0e-##i##2L, 1.0e-##i##3L, 1.0e-##i##4L, 1.0e-##i##5L, 1.0e-##i##6L, 1.0e-##i##7L, 1.0e-##i##8L, 1.0e-##i##9L
  static const long double pow_map[] = {
      fio___aton_pow10_map_row(0),  fio___aton_pow10_map_row(1),  fio___aton_pow10_map_row(2),  fio___aton_pow10_map_row(3),  fio___aton_pow10_map_row(4),
      fio___aton_pow10_map_row(5),  fio___aton_pow10_map_row(6),  fio___aton_pow10_map_row(7),  fio___aton_pow10_map_row(8),  fio___aton_pow10_map_row(9),
      fio___aton_pow10_map_row(10), fio___aton_pow10_map_row(11), fio___aton_pow10_map_row(12), fio___aton_pow10_map_row(13), fio___aton_pow10_map_row(14),
      fio___aton_pow10_map_row(15), fio___aton_pow10_map_row(16), fio___aton_pow10_map_row(17), fio___aton_pow10_map_row(18), fio___aton_pow10_map_row(19),
      fio___aton_pow10_map_row(20), fio___aton_pow10_map_row(21), fio___aton_pow10_map_row(22), fio___aton_pow10_map_row(23), fio___aton_pow10_map_row(24),
      fio___aton_pow10_map_row(25), fio___aton_pow10_map_row(26), fio___aton_pow10_map_row(27), fio___aton_pow10_map_row(28), fio___aton_pow10_map_row(29),
      1.0e-300L, 1.0e-301L, 1.0e-302L, 1.0e-303L, 1.0e-304L, 1.0e-305L, 1.0e-306L, 1.0e-307L, 1.0e-308L, // clang-format on
  };
#undef fio___aton_pow10_map_row
  if (e10 < sizeof(pow_map) / sizeof(pow_map[0]))
    return pow_map[e10];
  return powl(10, (int64_t)(0 - e10)); /* return zero? */
}

FIO_SFUNC FIO___ASAN_AVOID fio_aton_s fio_aton(char **pstr) {
  /* note: sanitizer avoided due to possible 8 byte overflow within mem-page */
  static uint64_t (*const fn[])(char **) = {
      fio_atol10u,
      fio_atol8u,
      fio_atol_bin,
      fio_atol16u,
  };
  static uint32_t base_limit[] = {10, 8, 1, 16};
  static char exponent_char[] = "eepp";
  fio_aton_s r = {0};
  long double dbl = 0, dbl_dot = 0;
  if (!pstr || !(*pstr))
    return r;
  char *start, *head, *p = *pstr;
  uint64_t before_dot = 0, after_dot = 0, expo = 0;
  size_t head_expo = 0, dot_expo = 0;
  while (*p == ' ' || *p == '\t' || *p == '\n' || *p == '\r')
    ++p;

  uint16_t neg = 0, expo_neg = 0, base = 0, force_float = 0;
  neg = (p[0] == '-');
  p += (neg | (p[0] == '+'));

  if ((p[0] | 32) == 'i')
    goto is_infinity;
  if ((p[0] | 32) == 'n')
    goto is_nan;

  base += (p[0] == '0');             /* oct */
  p += base;                         /* consume '0' */
  base += ((p[0] | 32) == 'b');      /* binary */
  base += ((p[0] | 32) == 'x') << 1; /* hex */
  base -= (base & (p[0] == '.'));    /* 0. isn't oct...  */
  p += (base > 1);                   /* consume 'b' or 'x' */
  start = p;                         /* mark starting point */

  // FIO_LOG_INFO("Start Unsigned: %s", p);
  before_dot = fn[base]((char **)&p);
  if (base == 2)
    goto is_binary;
  head = p;
  while (fio_c2i(p[0]) < base_limit[base])
    ++p;
  head_expo = p - head;
  force_float |= !!(head_expo);
  if (p[0] == '.') {
    ++p;
    force_float = 1;
    head = p;
    after_dot = fn[base]((char **)&p);
    dot_expo = p - head;
    while (fio_c2i(p[0]) < base_limit[base])
      ++p;
  }
  if ((p[0] | 32) == exponent_char[base]) {
    force_float = 1;
    ++p;
    expo_neg = (p[0] == '-');
    p += (expo_neg | (p[0] == '+'));
    expo = fio_atol10u((char **)&p);
    while ((uint8_t)(p[0] - '0') < 10)
      ++p;
  }
  if (p != start || base == 1) /* false oct base, a single '0'? */
    *pstr = p;
  // FIO_LOG_INFO("Start Tail: %s", p);
  if (!force_float && (!(before_dot & ((uint64_t)1ULL << 63)) ||
                       (!neg && base))) { /* is integer */
    r.u = before_dot;
    if (neg)
      r.i = 0 - r.u;
    return r;
  }
  dbl = (long double)before_dot;
  dbl_dot = (long double)after_dot;
  if (!base) {
    dbl *= fio___aton_pow10(head_expo);
    if (after_dot)
      dbl_dot *= fio___aton_pow10n(dot_expo);
  } else if (base == 3) {
    dbl *= fio_u2d(1, (head_expo << 2));
    dbl_dot *= fio_u2d(1, 0 - (dot_expo << 2));
  } else { /* if (base == 1) */
    dbl *= fio_u2d(1, (head_expo * 3));
    dbl_dot *= fio_u2d(1, 0 - (dot_expo * 3));
  }
  dbl += dbl_dot;
  if (expo) {
    if (base < 2) { /* base 10 / Oct */
      dbl *= (expo_neg ? fio___aton_pow10n : fio___aton_pow10)(expo);
    } else {
      dbl *= fio_u2d(1, (int64_t)(expo_neg ? 0 - expo : expo));
    }
  }
  r.is_float = 1;
  r.f = (double)dbl;
  r.u |= (uint64_t)neg << 63;
  return r;

is_infinity:
  if ((p[1] | 32) == 'n' && (p[2] | 32) == 'f') { /* inf */
    r.is_float = 1;
    r.u = ((uint64_t)neg << 63) | ((uint64_t)2047ULL << 52);
    p += 3 + (((p[3] | 32) == 'i' &&
               fio_buf2u64u("infinity") ==
                   (fio_buf2u64u(p) | 0x2020202020202020ULL)) *
              5);
    *pstr = (char *)p;
  } else
    r.err = 1;
  return r;

is_nan:
  if ((p[1] | 32) == 'a' && (p[2] | 32) == 'n') { /* nan */
    r.is_float = 1;
    r.i = ((~(uint64_t)0) >> (!neg));
    p += 3;
    *pstr = (char *)p;
  } else
    r.err = 1;
  return r;

is_binary:
  if (p == start)
    return r;
  r.u = before_dot;
  r.is_float = ((p[0] | 32) == 'f');
  p += r.is_float;
  *pstr = (char *)p;
  return r;
}

/* *****************************************************************************
Big Numbers
***************************************************************************** */

FIO_IFUNC void fio___uXXX_hex_read(uint64_t *t, char **p, size_t l) {
  char *start = *p;
  start += (((unsigned)(start[0] == '0') & (start[1] == 'x')) << 1);
  char *pos = start;
  while (fio_i2c((uint8_t)*pos) < 16)
    ++pos;
  ++pos;
  *p = pos;
  for (size_t i = 0; i < l; ++i) { /* per uint64_t in t */
    uint64_t wrd = 0;
    for (size_t j = 0; j < 16 && pos > start; ++j) {
      --pos;
      wrd |= ((uint64_t)fio_i2c((uint8_t)*pos) << (j << 2));
    }
    *t = wrd;
    ++t;
  }
}

FIO_IFUNC size_t fio___uXXX_hex_write(char *dest, const uint64_t *t, size_t l) {
  while (--l && !t[l])
    ;
  if (!l && !t[0]) {
    dest[0] = '0';
    return 1;
  }
  char *pos = dest;
  size_t digits = fio_digits16u(t[l]);
  ++l;
  while (l--) {
    fio_ltoa16u(pos, t[l], digits);
    pos += digits;
    digits = 16;
  }
  return (size_t)(pos - dest);
}

/** Reads a hex numeral string and initializes the numeral. */
SFUNC fio_u128 fio_u128_hex_read(char **pstr) {
  fio_u128 r;
  fio___uXXX_hex_read(r.u64, pstr, sizeof(r) / sizeof(r.u64[0]));
  return r;
}
/** Reads a hex numeral string and initializes the numeral. */
SFUNC fio_u256 fio_u256_hex_read(char **pstr) {
  fio_u256 r;
  fio___uXXX_hex_read(r.u64, pstr, sizeof(r) / sizeof(r.u64[0]));
  return r;
}
/** Reads a hex numeral string and initializes the numeral. */
SFUNC fio_u512 fio_u512_hex_read(char **pstr) {
  fio_u512 r;
  fio___uXXX_hex_read(r.u64, pstr, sizeof(r) / sizeof(r.u64[0]));
  return r;
}
/** Reads a hex numeral string and initializes the numeral. */
SFUNC fio_u1024 fio_u1024_hex_read(char **pstr) {
  fio_u1024 r;
  fio___uXXX_hex_read(r.u64, pstr, sizeof(r) / sizeof(r.u64[0]));
  return r;
}
/** Reads a hex numeral string and initializes the numeral. */
SFUNC fio_u2048 fio_u2048_hex_read(char **pstr) {
  fio_u2048 r;
  fio___uXXX_hex_read(r.u64, pstr, sizeof(r) / sizeof(r.u64[0]));
  return r;
}
/** Reads a hex numeral string and initializes the numeral. */
SFUNC fio_u4096 fio_u4096_hex_read(char **pstr) {
  fio_u4096 r;
  fio___uXXX_hex_read(r.u64, pstr, sizeof(r) / sizeof(r.u64[0]));
  return r;
}

/** Prints out the underlying 64 bit array (for debugging). */
SFUNC size_t fio_u128_hex_write(char *dest, const fio_u128 *u) {
  return fio___uXXX_hex_write(dest, u->u64, sizeof(u->u64) / sizeof(u->u64[0]));
}
/** Prints out the underlying 64 bit array (for debugging). */
SFUNC size_t fio_u256_hex_write(char *dest, const fio_u256 *u) {
  return fio___uXXX_hex_write(dest, u->u64, sizeof(u->u64) / sizeof(u->u64[0]));
}
/** Prints out the underlying 64 bit array (for debugging). */
SFUNC size_t fio_u512_hex_write(char *dest, const fio_u512 *u) {
  return fio___uXXX_hex_write(dest, u->u64, sizeof(u->u64) / sizeof(u->u64[0]));
}
/** Prints out the underlying 64 bit array (for debugging). */
SFUNC size_t fio_u1024_hex_write(char *dest, const fio_u1024 *u) {
  return fio___uXXX_hex_write(dest, u->u64, sizeof(u->u64) / sizeof(u->u64[0]));
}
/** Prints out the underlying 64 bit array (for debugging). */
SFUNC size_t fio_u2048_hex_write(char *dest, const fio_u2048 *u) {
  return fio___uXXX_hex_write(dest, u->u64, sizeof(u->u64) / sizeof(u->u64[0]));
}
/** Prints out the underlying 64 bit array (for debugging). */
SFUNC size_t fio_u4096_hex_write(char *dest, const fio_u4096 *u) {
  return fio___uXXX_hex_write(dest, u->u64, sizeof(u->u64) / sizeof(u->u64[0]));
}

/* *****************************************************************************
Numbers <=> Strings - Cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */
#endif /* FIO_ATOL */
#undef FIO_ATOL
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_GLOB_MATCH         /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                            Globe Matching



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_GLOB_MATCH) && !defined(H___FIO_GLOB_MATCH___H)
#define H___FIO_GLOB_MATCH___H

/* *****************************************************************************
Globe Matching API
***************************************************************************** */

/** A binary glob matching helper. Returns 1 on match, otherwise returns 0. */
SFUNC uint8_t fio_glob_match(fio_str_info_s pattern, fio_str_info_s string);

/* *****************************************************************************




                          Globe Matching Implementation




***************************************************************************** */

/* *****************************************************************************
Globe Matching Monitoring Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* *****************************************************************************
 * Glob Matching
 **************************************************************************** */

/** A binary glob matching helper. Returns 1 on match, otherwise returns 0. */
SFUNC uint8_t fio_glob_match(fio_str_info_s pat, fio_str_info_s str) {
  /* adapted and rewritten, with thankfulness, from the code at:
   * https://github.com/opnfv/kvmfornfv/blob/master/kernel/lib/glob.c
   *
   * Original version's copyright:
   * Copyright 2015 Open Platform for NFV Project, Inc. and its contributors
   * Under the MIT license.
   */

  /*
   * Backtrack to previous * on mismatch and retry starting one
   * character later in the string.  Because * matches all characters,
   * there's never a need to backtrack multiple levels.
   */
  uint8_t *back_pat = NULL, *back_str = (uint8_t *)str.buf;
  size_t back_pat_len = 0, back_str_len = str.len;

  /*
   * Loop over each token (character or class) in pat, matching
   * it against the remaining unmatched tail of str.  Return false
   * on mismatch, or true after matching the trailing nul bytes.
   */
  while (str.len && pat.len) {
    uint8_t c = *(uint8_t *)str.buf++;
    uint8_t d = *(uint8_t *)pat.buf++;
    str.len--;
    pat.len--;

    switch (d) {
    case '?': /* Wildcard: anything goes */ break;

    case '*':       /* Any-length wildcard */
      if (!pat.len) /* Optimize trailing * case */
        return 1;
      back_pat = (uint8_t *)pat.buf;
      back_pat_len = pat.len;
      back_str = (uint8_t *)--str.buf; /* Allow zero-length match */
      back_str_len = ++str.len;
      break;

    case '[': { /* Character class */
      uint8_t match = 0, inverted = (*(uint8_t *)pat.buf == '^' ||
                                     *(uint8_t *)pat.buf == '!');
      uint8_t *cls = (uint8_t *)pat.buf + inverted;
      uint8_t a = *cls++;

      /*
       * Iterate over each span in the character class.
       * A span is either a single character a, or a
       * range a-b.  The first span may begin with ']'.
       */
      do {
        uint8_t b = a;
        if (a == '\\') { /* when escaped, next character is regular */
          b = a = *(cls++);
        } else if (cls[0] == '-' && cls[1] != ']') {
          b = cls[1];

          cls += 2;
          if (a > b) {
            uint8_t tmp = a;
            a = b;
            b = tmp;
          }
        }
        match |= (a <= c && c <= b);
      } while ((a = *cls++) != ']');

      if (match == inverted)
        goto backtrack;
      pat.len -= cls - (uint8_t *)pat.buf;
      pat.buf = (char *)cls;

    } break;
    case '\\': d = *(uint8_t *)pat.buf++; pat.len--;
    /* fall through */
    default: /* Literal character */
      if (c == d)
        break;
    backtrack:
      if (!back_pat)
        return 0; /* No point continuing */
      /* Try again from last *, one character later in str. */
      pat.buf = (char *)back_pat;
      str.buf = (char *)++back_str;
      str.len = --back_str_len;
      pat.len = back_pat_len;
    }
  }
  /* if the trailing pattern allows for empty data, skip it */
  while (pat.len && pat.buf[0] == '*') {
    ++pat.buf;
    --pat.len;
  }
  return !str.len && !pat.len;
}

/* *****************************************************************************
Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_GLOB_MATCH_MONITOR_MAX
#endif /* FIO_GLOB_MATCH */
#undef FIO_GLOB_MATCH
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_IMAP_CORE          /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




            Index Maps (mapping a partial hash to an Array object)
        Maps a Log 2 sized index map to a position in a Log 2 sized Array



Copyright: Boaz Segev, 2019-2021; License: ISC / MIT (choose your license)
***************************************************************************** */
#if defined(FIO_IMAP_CORE) && !defined(H___FIO_IMAP_CORE___H)
#define H___FIO_IMAP_CORE___H

/* *****************************************************************************
iMap Helper Macros
***************************************************************************** */

/** Helper macro for simple iMap array types. */
#define FIO_IMAP_ALWAYS_VALID(o) (1)
/** Helper macro for simple iMap array types. */
#define FIO_IMAP_ALWAYS_CMP_TRUE(a, b) (1)
/** Helper macro for simple iMap array types. */
#define FIO_IMAP_ALWAYS_CMP_FALSE(a, b) (0)
/** Helper macro for simple iMap array types. */
#define FIO_IMAP_SIMPLE_CMP(a, b) ((a)[0] == (b)[0])
/** Helper macro for simple iMap array types. */
#define FIO_IMAP_EACH(array_name, map_ptr, i)                                  \
  for (size_t i = 0; i < (map_ptr)->w; ++i)                                    \
    if (!FIO_NAME(array_name, is_valid)((map_ptr)->ary + i))                   \
      continue;                                                                \
    else

/* *****************************************************************************
iMap Creation Macro
***************************************************************************** */

/**
 * This MACRO defines the type and functions needed for an indexed array.
 *
 * This is used internally and documentation is poor.
 *
 * An indexed array is simple ordered array who's objects are indexed using an
 * almost-hash map, allowing for easy seeking while also enjoying an array's
 * advantages.
 *
 * The index map uses one `imap_type` (i.e., `uint64_t`) to store both the array
 * index and any leftover hash data (the first half being tested during the
 * random access and the leftover during comparison). The reserved value `0`
 * indicates a free slot. The reserved value `~0` indicates a freed item (a free
 * slot that was previously used).
 *
 * - `array_name_s`        the main array container (.ary is the array itself)
 * - `array_name_seeker_s` is a seeker type that finds objects.
 * - `array_name_seek`     finds an object or its future position.
 *
 * - `array_name_capa`     the imap's theoretical storage capacity.
 * - `array_name_set`      writes or overwrites data to the array.
 * - `array_name_get`      returns a pointer to the object within the array.
 * - `array_name_remove`   removes an object and resets its memory to zero.
 * - `array_name_reserve`  reserves a minimum imap storage capacity.
 * - `array_name_rehash`   re-builds the imap (use after sorting).
 */
#define FIO_TYPEDEF_IMAP_ARRAY(array_name,                                     \
                               array_type,                                     \
                               imap_type,                                      \
                               hash_fn,                                        \
                               cmp_fn,                                         \
                               is_valid_fn)                                    \
  FIO_LEAK_COUNTER_DEF(FIO_NAME(array_name, s))                                \
  typedef struct {                                                             \
    array_type *ary;                                                           \
    imap_type count;                                                           \
    imap_type w;                                                               \
    uint32_t capa_bits;                                                        \
  } FIO_NAME(array_name, s);                                                   \
  typedef struct {                                                             \
    imap_type pos;                                                             \
    imap_type ipos;                                                            \
    imap_type set_val;                                                         \
  } FIO_NAME(array_name, seeker_s);                                            \
  /** Returns the theoretical capacity for the indexed array. */               \
  FIO_IFUNC int FIO_NAME(array_name, is_valid)(array_type * pobj) {            \
    return pobj && (!!is_valid_fn(pobj));                                      \
  }                                                                            \
  /** Returns the theoretical capacity for the indexed array. */               \
  FIO_IFUNC size_t FIO_NAME(array_name, capa)(FIO_NAME(array_name, s) * a) {   \
    if (!a || !a->capa_bits)                                                   \
      return 0;                                                                \
    return ((size_t)1ULL << a->capa_bits);                                     \
  }                                                                            \
  /** Returns a pointer to the index map. */                                   \
  FIO_IFUNC imap_type *FIO_NAME(array_name,                                    \
                                imap)(FIO_NAME(array_name, s) * a) {           \
    return (imap_type *)(a->ary + ((imap_type)1ULL << a->capa_bits));          \
  }                                                                            \
  /** Deallocates dynamic memory. */                                           \
  FIO_IFUNC void FIO_NAME(array_name, destroy)(FIO_NAME(array_name, s) * a) {  \
    size_t capa = FIO_NAME(array_name, capa)(a);                               \
    if (a->ary) {                                                              \
      FIO_LEAK_COUNTER_ON_FREE(FIO_NAME(array_name, s));                       \
      FIO_TYPEDEF_IMAP_FREE(                                                   \
          a->ary,                                                              \
          (capa * (sizeof(*a->ary)) + (capa * (sizeof(imap_type)))));          \
    }                                                                          \
    *a = (FIO_NAME(array_name, s)){0};                                         \
    (void)capa; /* if unused */                                                \
  }                                                                            \
  /** Allocates dynamic memory. */                                             \
  FIO_IFUNC int FIO_NAME(array_name, __alloc)(FIO_NAME(array_name, s) * a,     \
                                              size_t bits) {                   \
    if (!bits || bits > ((sizeof(imap_type) << 3) - 2))                        \
      return -1;                                                               \
    size_t capa = 1ULL << bits;                                                \
    size_t old_capa = FIO_NAME(array_name, capa)(a);                           \
    array_type *tmp = (array_type *)FIO_TYPEDEF_IMAP_REALLOC(                  \
        a->ary,                                                                \
        (a->bits ? (old_capa * (sizeof(array_type)) +                          \
                    (old_capa * (sizeof(imap_type))))                          \
                 : 0),                                                         \
        (capa * (sizeof(array_type)) + (capa * (sizeof(imap_type)))),          \
        (a->w * (sizeof(array_type))));                                        \
    (void)old_capa; /* if unused */                                            \
    if (!tmp)                                                                  \
      return -1;                                                               \
    if (!a->ary)                                                               \
      FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(array_name, s));                      \
    a->capa_bits = (uint32_t)bits;                                             \
    a->ary = tmp;                                                              \
    if (!FIO_TYPEDEF_IMAP_REALLOC_IS_SAFE) {                                   \
      FIO_MEMSET((tmp + a->w), 0, ((capa - a->w) * (sizeof(*tmp))));           \
      FIO_MEMSET((tmp + capa), 0, (capa * (sizeof(imap_type))));               \
    }                                                                          \
    return 0;                                                                  \
  }                                                                            \
  /** Returns the index map position and array position of a value, if any. */ \
  FIO_SFUNC FIO_NAME(array_name, seeker_s)                                     \
      FIO_NAME(array_name, seek)(FIO_NAME(array_name, s) * a,                  \
                                 array_type * pobj) {                          \
    FIO_NAME(array_name, seeker_s)                                             \
    r = {0, ((imap_type) ~(imap_type)0), ((imap_type) ~(imap_type)0)};         \
    if (!a || ((!a->capa_bits) | (!a->ary)))                                   \
      return r;                                                                \
    r.pos = a->w;                                                              \
    imap_type capa = (imap_type)1UL << a->capa_bits;                           \
    imap_type *imap = (imap_type *)(a->ary + capa);                            \
    const imap_type pos_mask = (imap_type)(capa - (imap_type)1);               \
    const imap_type hash_mask = (imap_type)~pos_mask;                          \
    const imap_type hash = (imap_type)hash_fn(pobj);                           \
    imap_type tester = (hash & hash_mask); /* hides lower bits for `tester` */ \
    imap_type pos = hash + (hash >> a->capa_bits); /* use more bits for pos */ \
    tester += (!tester) << a->capa_bits;                                       \
    tester -= (hash_mask == tester) << a->capa_bits;                           \
    size_t attempts = 11;                                                      \
    for (;;) {                                                                 \
      /* tests up to 3 groups of 4 bytes (uint32_t) within a 64 byte group */  \
      for (size_t mini_steps = 0;;) {                                          \
        pos &= pos_mask;                                                       \
        const imap_type pos_hash = imap[pos] & hash_mask;                      \
        const imap_type pos_index = imap[pos] & pos_mask;                      \
        if ((pos_hash == tester) && cmp_fn((a->ary + pos_index), pobj)) {      \
          r.ipos = pos;                                                        \
          r.pos = pos_index;                                                   \
          r.set_val = tester | pos_index;                                      \
          return r;                                                            \
        }                                                                      \
        if (!imap[pos]) {                                                      \
          r.ipos = pos;                                                        \
          r.set_val = tester | r.pos; /* r.pos == a->w */                      \
          return r;                                                            \
        }                                                                      \
        if (imap[pos] == (imap_type)(~(imap_type)0)) {                         \
          r.ipos = pos;                                                        \
          r.set_val = tester | r.pos; /* r.pos == a->w */                      \
        }                                                                      \
        if (!((--attempts)))                                                   \
          return r;                                                            \
        if (mini_steps == 2)                                                   \
          break;                                                               \
        pos += 3 + mini_steps; /* 0, 3, 7 =  max of 56 byte distance */        \
        ++mini_steps;                                                          \
      }                                                                        \
      pos += (imap_type)0xC19F5985UL; /* big step */                           \
    }                                                                          \
  }                                                                            \
  /** fills an empty imap with the info about existing elements. */            \
  FIO_SFUNC int FIO_NAME(array_name,                                           \
                         __fill_imap)(FIO_NAME(array_name, s) * a) {           \
    if (!a->count) {                                                           \
      a->w = 0;                                                                \
      return 0;                                                                \
    }                                                                          \
    imap_type *imap = FIO_NAME(array_name, imap)(a);                           \
    if (a->count != a->w) {                                                    \
      a->count = 0;                                                            \
      for (size_t i = 0; i < a->w; ++i) {                                      \
        if (!is_valid_fn((a->ary + i)))                                        \
          continue;                                                            \
        if (a->count != i)                                                     \
          a->ary[a->count] = a->ary[i];                                        \
        ++a->count;                                                            \
      }                                                                        \
    }                                                                          \
    for (a->w = 0; a->w < a->count; ++(a->w)) {                                \
      FIO_NAME(array_name, seeker_s)                                           \
      s = FIO_NAME(array_name, seek)(a, a->ary + a->w);                        \
      if (s.pos != a->w || s.ipos == (imap_type)(~(imap_type)0)) {             \
        a->w = a->count;                                                       \
        return -1; /* destination not big enough to contain collisions! */     \
      }                                                                        \
      imap[s.ipos] = s.set_val;                                                \
    }                                                                          \
    a->w = a->count;                                                           \
    return 0;                                                                  \
  }                                                                            \
  /** expands the existing array & imap storage capacity. */                   \
  FIO_IFUNC int FIO_NAME(array_name, __expand)(FIO_NAME(array_name, s) * a) {  \
    for (;;) {                                                                 \
      if (FIO_NAME(array_name, __alloc)(a,                                     \
                                        a->capa_bits + 1 + (!a->capa_bits)))   \
        return -1;                                                             \
      if (!FIO_NAME(array_name, __fill_imap)(a))                               \
        return 0;                                                              \
    }                                                                          \
  }                                                                            \
  /** Reserves a minimum imap storage capacity. */                             \
  FIO_IFUNC int FIO_NAME(array_name, reserve)(FIO_NAME(array_name, s) * a,     \
                                              imap_type min) {                 \
    imap_type bits = 2;                                                        \
    if (min > ((imap_type)~0ULL) >> 1)                                         \
      return -1;                                                               \
    while ((1ULL << bits) < min)                                               \
      ++bits;                                                                  \
    if (bits <= a->capa_bits)                                                  \
      return 0;                                                                \
    if (FIO_NAME(array_name, __alloc)(a, bits))                                \
      return -1;                                                               \
    if (!FIO_NAME(array_name, __fill_imap)(a))                                 \
      return 0;                                                                \
    return FIO_NAME(array_name, __expand)(a);                                  \
  }                                                                            \
  /** Rehashes the array and fills the imap (use after sorting). */            \
  FIO_IFUNC int FIO_NAME(array_name, rehash)(FIO_NAME(array_name, s) * a) {    \
    if (!a || !a->ary)                                                         \
      return -1;                                                               \
    size_t bytes = sizeof(imap_type) * ((size_t)1ULL << a->capa_bits);         \
    imap_type *imap = FIO_NAME(array_name, imap)(a);                           \
    FIO_MEMSET(imap, 0, bytes);                                                \
    if (!FIO_NAME(array_name, __fill_imap)(a))                                 \
      return -1;                                                               \
    return 0;                                                                  \
  }                                                                            \
  /** Sets an object in the Array. Optionally overwrites existing data. */     \
  FIO_IFUNC array_type *FIO_NAME(array_name, set)(FIO_NAME(array_name, s) * a, \
                                                  array_type obj,              \
                                                  int overwrite) {             \
    if (!a || !is_valid_fn((&obj)))                                            \
      return NULL;                                                             \
    {                                                                          \
      size_t capa = FIO_NAME(array_name, capa)(a);                             \
      if (a->w == capa)                                                        \
        FIO_NAME(array_name, __expand)(a);                                     \
      else if (a->count != a->w &&                                             \
               (a->w + (a->w >> 1)) > FIO_NAME(array_name, capa)(a)) {         \
        FIO_MEMSET((a->ary + capa), 0, (capa * (sizeof(imap_type))));          \
        FIO_NAME(array_name, __fill_imap)(a);                                  \
      }                                                                        \
    }                                                                          \
    for (;;) {                                                                 \
      FIO_NAME(array_name, seeker_s) s = FIO_NAME(array_name, seek)(a, &obj);  \
      if (s.ipos == (imap_type)(~(imap_type)0)) { /* no room in the imap */    \
        FIO_NAME(array_name, __expand)(a);                                     \
        continue;                                                              \
      }                                                                        \
      if (s.pos == a->w) { /* new object */                                    \
        a->ary[a->w] = obj;                                                    \
        ++a->w;                                                                \
        ++a->count;                                                            \
        FIO_NAME(array_name, imap)(a)[s.ipos] = s.set_val;                     \
        return a->ary + s.pos;                                                 \
      }                                                                        \
      FIO_ASSERT_DEBUG(s.pos < a->w && s.ipos < FIO_NAME(array_name, capa)(a), \
                       "WTF?");                                                \
      if (!overwrite)                                                          \
        return a->ary + s.pos;                                                 \
      a->ary[s.pos] = obj;                                                     \
      return a->ary + s.pos;                                                   \
    }                                                                          \
  }                                                                            \
  /** Finds an object in the Array using the index map. */                     \
  FIO_IFUNC array_type *FIO_NAME(array_name, get)(FIO_NAME(array_name, s) * a, \
                                                  array_type obj) {            \
    if (!a || !is_valid_fn((&obj)))                                            \
      return NULL;                                                             \
    FIO_NAME(array_name, seeker_s) s = FIO_NAME(array_name, seek)(a, &obj);    \
    if (s.pos >= a->w)                                                         \
      return NULL;                                                             \
    return a->ary + s.pos;                                                     \
  }                                                                            \
  /** Removes an object in the Array's index map, zeroing out its memory. */   \
  FIO_IFUNC int FIO_NAME(array_name, remove)(FIO_NAME(array_name, s) * a,      \
                                             array_type obj) {                 \
    if (!a || !is_valid_fn((&obj)))                                            \
      return -1;                                                               \
    FIO_NAME(array_name, seeker_s) s = FIO_NAME(array_name, seek)(a, &obj);    \
    if (s.pos >= a->w)                                                         \
      return -1;                                                               \
    a->ary[s.pos] = (array_type){0};                                           \
    FIO_NAME(array_name, imap)(a)[s.ipos] = (imap_type)(~(imap_type)0);        \
    --a->count;                                                                \
    while (a->w && !is_valid_fn((a->ary + a->w - 1)))                          \
      --a->w;                                                                  \
    return 0;                                                                  \
  }

#ifndef FIO_TYPEDEF_IMAP_REALLOC
#define FIO_TYPEDEF_IMAP_REALLOC FIO_MEM_REALLOC
#endif
#ifndef FIO_TYPEDEF_IMAP_REALLOC_IS_SAFE
#define FIO_TYPEDEF_IMAP_REALLOC_IS_SAFE FIO_MEM_REALLOC_IS_SAFE
#endif

#ifndef FIO_TYPEDEF_IMAP_FREE
#define FIO_TYPEDEF_IMAP_FREE FIO_MEM_FREE
#endif

#define FIO___IMAP_SEEKER_TYPE(bits)                                           \
  typedef struct {                                                             \
    uint##bits##_t pos;                                                        \
    uint##bits##_t ipos;                                                       \
    uint##bits##_t set_val;                                                    \
    bool is_valid;                                                             \
  } fio___imap##bits##_seeker_s;                                               \
  /** Returns the index map position and array position of a value, if any. */ \
  FIO_SFUNC fio___imap##bits##_seeker_s fio___imap##bits##_seek(               \
      void *ary,                                                               \
      uint##bits##_t *imap,                                                    \
      const uint##bits##_t capa_bits,                                          \
      void *pobj,                                                              \
      uint##bits##_t hash,                                                     \
      bool cmp_fn(void *arry, void *obj, uint##bits##_t indx),                 \
      const size_t max_attempts) {                                             \
    fio___imap##bits##_seeker_s r = {(uint##bits##_t)(~(uint##bits##_t)0),     \
                                     (uint##bits##_t)(~(uint##bits##_t)0),     \
                                     (uint##bits##_t)(~(uint##bits##_t)0)};    \
    if (!ary)                                                                  \
      return r;                                                                \
    const uint##bits##_t capa = ((uint##bits##_t)1 << capa_bits);              \
    const uint##bits##_t pos_mask = (uint##bits##_t)(capa - 1);                \
    const uint##bits##_t hash_mask = (uint##bits##_t) ~pos_mask;               \
    uint##bits##_t tester = (hash & hash_mask); /* hide `tester` lower bits */ \
    uint##bits##_t pos = hash;                  /* use more bits */            \
    /* make sure tester isn't a reserved value (0 || ~0) */                    \
    tester += (!tester) << capa_bits;                                          \
    tester -= (hash_mask == tester) << capa_bits;                              \
    r.set_val = tester; /* store tester value */                               \
    size_t attempts = max_attempts;                                            \
    /* tests up to 3 groups of 4 bytes (uint32_t) within a 64 byte group */    \
    for (;;) {                                                                 \
      for (size_t mini_steps = 0;;) {                                          \
        pos &= pos_mask;                                                       \
        const uint##bits##_t pos_hash = imap[pos] & hash_mask;                 \
        const uint##bits##_t pos_index = imap[pos] & pos_mask;                 \
        if ((pos_hash == tester) && cmp_fn(ary, pobj, pos_index)) {            \
          r.ipos = pos;                                                        \
          r.pos = pos_index;                                                   \
          r.set_val = tester | pos_index;                                      \
          r.is_valid = 1;                                                      \
          return r;                                                            \
        }                                                                      \
        if (!imap[pos]) {                                                      \
          r.ipos = pos;                                                        \
          r.set_val = tester; /* mark empty slot */                            \
          return r;                                                            \
        }                                                                      \
        if (imap[pos] == (uint##bits##_t)(~(uint##bits##_t)0)) {               \
          r.ipos = pos;                                                        \
        }                                                                      \
        if (!((--attempts)))                                                   \
          return r;                                                            \
        if (mini_steps == 2)                                                   \
          break;                                                               \
        pos += 3 + mini_steps; /* 0, 3, 7 =>  max of 56 byte distance */       \
        ++mini_steps;                                                          \
      }                                                                        \
      pos += (uint##bits##_t)0xC19F5985UL; /* big step */                      \
    }                                                                          \
  }                                                                            \
  /** utilizes the values returned by the seeker object. */                    \
  FIO_IFUNC void fio___imap##bits##_set(uint##bits##_t *imap,                  \
                                        uint##bits##_t ipos,                   \
                                        uint##bits##_t set_val) {              \
    imap[ipos] = set_val;                                                      \
  }

FIO___IMAP_SEEKER_TYPE(8)
FIO___IMAP_SEEKER_TYPE(16)
FIO___IMAP_SEEKER_TYPE(32)
FIO___IMAP_SEEKER_TYPE(64)

/* *****************************************************************************
iMap Cleanup
***************************************************************************** */
#endif /* FIO_IMAP_CORE */
#undef FIO_IMAP_CORE
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_MATH               /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                    Basic Math Operations and Multi-Precision
                        Constant Time (when possible)



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_MATH) && !defined(H___FIO_MATH___H)
#define H___FIO_MATH___H 1

/* *****************************************************************************
Multi-precision, little endian helpers.

Works with little endian uint64_t arrays or 64 bit numbers.
***************************************************************************** */

/**
 * Multi-precision DIV for `len*64` bit long a, b.
 *
 * This is NOT constant time.
 *
 * The algorithm might be slow, as my math isn't that good and I couldn't
 * understand faster division algorithms (such as Newton–Raphson division)... so
 * this is sort of a factorized variation on long division.
 */
FIO_IFUNC void fio_math_div(uint64_t *dest,
                            uint64_t *reminder,
                            const uint64_t *a,
                            const uint64_t *b,
                            const size_t number_array_length);

/** Multi-precision shift right for `len` word number `n`. */
FIO_IFUNC void fio_math_shr(uint64_t *dest,
                            uint64_t *n,
                            const size_t right_shift_bits,
                            size_t number_array_length);

/** Multi-precision shift left for `len*64` bit number `n`. */
FIO_IFUNC void fio_math_shl(uint64_t *dest,
                            uint64_t *n,
                            const size_t left_shift_bits,
                            const size_t number_array_length);

/** Multi-precision Inverse for `len*64` bit number `n` (turn `1` into `-1`). */
FIO_IFUNC void fio_math_inv(uint64_t *dest, uint64_t *n, size_t len);

/** Multi-precision - returns the index for the most significant bit or -1. */
FIO_MIFN size_t fio_math_msb_index(uint64_t *n, const size_t len);

/** Multi-precision - returns the index for the least significant bit or -1. */
FIO_MIFN size_t fio_math_lsb_index(uint64_t *n, const size_t len);

/* *****************************************************************************
Multi-precision, little endian helpers. Works with full uint64_t arrays.
***************************************************************************** */

/** Multi-precision Inverse for `bits` number `n`. */
FIO_IFUNC void fio_math_inv(uint64_t *dest, uint64_t *n, const size_t len) {
  uint64_t c = 1;
  for (size_t i = 0; i < len; ++i) {
    uint64_t tmp = ~n[i] + c;
    c = (tmp ^ n[i]) >> 63;
    dest[i] = tmp;
  }
}

/** Multi-precision shift right for `bits` number `n`. */
FIO_IFUNC void fio_math_shr(uint64_t *dest,
                            uint64_t *n,
                            size_t bits,
                            size_t len) {
  const size_t offset = len - (bits >> 6);
  bits &= 63;
  // FIO_LOG_DEBUG("Shift Light of %zu bytes and %zu
  // bits", len - offset, bits);
  uint64_t c = 0, trash;
  uint64_t *p_select[] = {dest + offset, &trash};
  if (bits) {
    while (len--) {
      --p_select[0];
      uint64_t ntmp = n[len];
      uint64_t ctmp = (ntmp << (64 - bits));
      dest[len] &= (uint64_t)0ULL - (len < offset);
      p_select[p_select[0] < dest][0] = ((ntmp >> bits) | c);
      c = ctmp;
    }
    return;
  }
  while (len--) {
    --p_select[0];
    uint64_t ntmp = n[len];
    dest[len] &= (uint64_t)0ULL - (len < offset);
    p_select[p_select[0] < dest][0] = ntmp;
  }
}

/** Multi-precision shift left for `bits` number `n`. */
FIO_IFUNC void fio_math_shl(uint64_t *dest,
                            uint64_t *n,
                            size_t bits,
                            const size_t len) {
  if (!len || !bits || !n || !dest)
    return;
  const size_t offset = bits >> 6;
  bits &= 63;
  uint64_t c = 0, trash;
  uint64_t *p_select[] = {dest + offset, &trash};
  if (bits) {
    for (size_t i = 0; i < len; (++i), ++p_select[0]) {
      uint64_t ntmp = n[i];
      uint64_t ctmp = (ntmp >> (64 - bits)) & ((uint64_t)0ULL - (!!bits));
      ;
      dest[i] &= (uint64_t)0ULL - (i >= offset);
      p_select[p_select[0] >= (dest + len)][0] = ((ntmp << bits) | c);
      c = ctmp;
    }
    return;
  }
  for (size_t i = 0; i < len; (++i), ++p_select[0]) {
    uint64_t ntmp = n[i];
    dest[i] &= (uint64_t)0ULL - (i >= offset);
    p_select[p_select[0] >= (dest + len)][0] = ntmp;
  }
}

/** Multi-precision - returns the index for the most
 * significant bit. */
FIO_IFUNC size_t fio_math_msb_index(uint64_t *n, size_t len) {
  size_t r[2] = {0, (size_t)-1};
  uint64_t a = 0;
  while (len--) {
    const uint64_t mask = ((uint64_t)0ULL - (!a));
    a |= (mask & n[len]);
    r[0] += (64 & (~mask));
  }
  r[0] += fio_bits_msb_index(a);
  return r[!a];
}

/** Multi-precision - returns the index for the least
 * significant bit. */
FIO_IFUNC size_t fio_math_lsb_index(uint64_t *n, const size_t len) {
  size_t r[2] = {0, (size_t)-1};
  uint64_t a = 0;
  uint64_t mask = (~(uint64_t)0ULL);
  for (size_t i = 0; i < len; ++i) {
    a |= mask & n[i];
    mask = ((uint64_t)0ULL - (!a));
    r[0] += (64 & mask);
  }
  r[0] += fio_bits_lsb_index(a);
  return r[!a];
}

/** Multi-precision DIV for `len*64` bit long a, b. NOT
 * constant time. */
FIO_IFUNC void fio_math_div(uint64_t *dest,
                            uint64_t *reminder,
                            const uint64_t *a,
                            const uint64_t *b,
                            const size_t len) {
  if (!len)
    return;
#if !defined(_MSC_VER) && (!defined(__cplusplus) || __cplusplus > 201402L)
  uint64_t t[len];
  uint64_t r[len];
  uint64_t q[len];
#else
  uint64_t t[256];
  uint64_t r[256];
  uint64_t q[256];
  FIO_ASSERT(
      len <= 256,
      "Multi Precision DIV (fio_math_div) overflows at 16384 bit numbers");
#endif
  FIO_MEMCPY(r, a, sizeof(uint64_t) * len);
  FIO_MEMSET(q, 0, sizeof(uint64_t) * len);
  size_t rlen;
  uint64_t c, mask, imask;
  const size_t blen = fio_math_msb_index((uint64_t *)b, len) + 1;
  if (!blen)
    goto divide_by_zero; /* divide by zero! */
  while ((rlen = fio_math_msb_index((uint64_t *)r, len)) >= blen) {
    const size_t delta = rlen - blen;
    fio_math_shl(t, (uint64_t *)b, delta, len);
    (void)fio_math_sub(r, (uint64_t *)r, t, len);
    q[delta >> 6] |= (1ULL << (delta & 63)); /* set the bit used */
  }
  mask = (uint64_t)0ULL - fio_math_sub(t, (uint64_t *)r, (uint64_t *)b, len);
  imask = ~mask; /* r was >= b */
  q[0] = fio_math_addc64(q[0], (imask & 1), 0, &c);
  for (size_t i = 1; i < len; ++i) {
    q[i] = fio_math_addc64(q[i], 0, c, &c);
  }
  if (dest) {
    FIO_MEMCPY(dest, q, len * sizeof(uint64_t));
  }
  if (reminder) {
    for (size_t i = 0; i < len; ++i) {
      reminder[i] = (t[i] & imask) | (r[i] & mask);
    }
  }
  return;
divide_by_zero:
  FIO_LOG_ERROR("divide by zero!");
  if (dest)
    FIO_MEMSET(dest, 0xFFFFFFFF, sizeof(*dest) * len);
  if (reminder)
    FIO_MEMSET(reminder, 0xFFFFFFFF, sizeof(*dest) * len);
  return;
}

/* *****************************************************************************
Math - cleanup
***************************************************************************** */
#endif /* FIO_MATH */
#undef FIO_MATH
#undef FIO_MIFN
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_RAND               /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                      Psedo-Random Generator Functions
                    and friends - risky hash / stable hash



Copyright and License: see header file (000 copyright.h) / top of file
***************************************************************************** */
#if defined(FIO_RAND) && !defined(H___FIO_RAND_H)
#define H___FIO_RAND_H

/* *****************************************************************************
Random - API
***************************************************************************** */

/** Returns 64 psedo-random bits. Probably not cryptographically safe. */
SFUNC uint64_t fio_rand64(void);

/** Writes `len` bytes of psedo-random bits to the target buffer. */
SFUNC void fio_rand_bytes(void *target, size_t len);

/** Feeds up to 1023 bytes of entropy to the random state. */
IFUNC void fio_rand_feed2seed(void *buf_, size_t len);

/** Reseeds the random engine using system state (rusage / jitter). */
SFUNC void fio_rand_reseed(void);

/* *****************************************************************************
Risky / Stable Hash - API
***************************************************************************** */

/** Computes a facil.io Risky Hash (Risky v.3). */
SFUNC uint64_t fio_risky_hash(const void *buf, size_t len, uint64_t seed);

/** Adds a bit of entropy to pointer values. Designed to be unsafe. */
FIO_IFUNC uint64_t fio_risky_ptr(void *ptr);

/** Adds a bit of entropy to numeral values. Designed to be unsafe. */
FIO_IFUNC uint64_t fio_risky_num(uint64_t number, uint64_t seed);

/** Computes a facil.io Stable Hash (will not be updated, even if broken). */
SFUNC uint64_t fio_stable_hash(const void *data, size_t len, uint64_t seed);

/** Computes a facil.io Stable Hash (will not be updated, even if broken). */
SFUNC void fio_stable_hash128(void *restrict dest,
                              const void *restrict data,
                              size_t len,
                              uint64_t seed);

#define FIO_USE_STABLE_HASH_WHEN_CALLING_RISKY_HASH 0
/* *****************************************************************************
Risky Hash - Implementation

Note: I don't remember what information I used when designing this, but Risky
Hash is probably NOT cryptographically safe (though I wish it was).

Here's a few resources about hashes that might explain more:
- https://komodoplatform.com/cryptographic-hash-function/
- https://en.wikipedia.org/wiki/Avalanche_effect
- http://ticki.github.io/blog/designing-a-good-non-cryptographic-hash-function/

***************************************************************************** */

/** Adds bit entropy to a pointer values. Designed to be unsafe. */
FIO_IFUNC uint64_t fio_risky_num(uint64_t n, uint64_t seed) {
  seed ^= fio_lrot64(seed, 47);
  seed += FIO_U64_HASH_PRIME0;
  seed = seed | 1;
  uint64_t h = n + seed;
  h += fio_lrot64(seed, 5);
  h += fio_bswap64(seed);
  h += fio_lrot64(h, 27);
  h += fio_lrot64(h, 49);
  return h;
}

/** Adds bit entropy to a pointer values. Designed to be unsafe. */
FIO_IFUNC uint64_t fio_risky_ptr(void *ptr) {
  return fio_risky_num((uint64_t)(uintptr_t)ptr, FIO_U64_HASH_PRIME9);
}

/* *****************************************************************************
Possibly `extern` Implementation
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/*  Computes a facil.io Risky Hash. */
SFUNC uint64_t fio_risky_hash(const void *data_, size_t len, uint64_t seed) {
#if FIO_USE_STABLE_HASH_WHEN_CALLING_RISKY_HASH
  return fio_stable_hash(data_, len, seed);
#endif
#define FIO___RISKY_HASH_ROUND64()                                             \
  do {                                                                         \
    for (size_t i = 0; i < 8; ++i) /* use little endian? */                    \
      w[i] = fio_ltole64(w[i]);                                                \
    for (size_t i = 0; i < 8; ++i) { /* xor vector with input (words) */       \
      v[i] ^= w[i];                                                            \
    }                                                                          \
    for (size_t i = 0; i < 4; ++i) { /* MUL folding, adding high bits */       \
      v[i] += fio_math_mulc64(v[i], v[i + 4], w + i);                          \
      v[i + 4] += w[i];                                                        \
    }                                                                          \
  } while (0)
  /* Approach inspired by komihash, copyrighted: Aleksey Vaneev, MIT license */
  const uint8_t *data = (const uint8_t *)data_;
  uint64_t v[8] FIO_ALIGN(16), w[8] FIO_ALIGN(16) = {0};
  uint64_t const prime[8] FIO_ALIGN(16) = {
      FIO_U64_HASH_PRIME1,
      FIO_U64_HASH_PRIME2,
      FIO_U64_HASH_PRIME3,
      FIO_U64_HASH_PRIME4,
      FIO_U64_HASH_PRIME5,
      FIO_U64_HASH_PRIME6,
      FIO_U64_HASH_PRIME7,
      FIO_U64_HASH_PRIME0,
  };
  /* seed mixing is constant time to avoid leaking seed data */
  seed += len;
  seed ^= fio_lrot64(seed, 47);
  /* initialize vector with mixed secret */
  for (size_t i = 0; i < 8; ++i)
    v[i] = seed + prime[i];
  /* pad uneven head with zeros and consume (if any) */
  if ((len & 63)) {
    for (size_t i = 0; i < 8; ++i)
      w[i] = 0;
    fio_memcpy63x(w, data, len);
    data += (len & 63);
    ((uint8_t *)w)[63] = (uint8_t)(len & 63);
    FIO___RISKY_HASH_ROUND64();
  }
  /* consumes remaining 64 bytes (512 bits) blocks */
  for (size_t j = 63; j < len; j += 64) {
    for (size_t i = 0; i < 4; ++i)
      v[i] += prime[i]; /* mark each round, may double mark if(!(len & 63)) */
    fio_memcpy64(w, data);
    data += 64;
    FIO___RISKY_HASH_ROUND64();
  }

  w[4] = (v[0] ^ v[1]) + (v[1] ^ v[2]) + (v[2] ^ v[3]);
  w[5] = (v[4] + v[5]) ^ (v[5] + v[6]) ^ (v[6] + v[7]);
  w[6] = (w[0] + w[1]) ^ (w[1] + w[2]) ^ (w[2] + w[3]);
  v[0] = w[5] + fio_math_mulc64(w[4], w[6], v + 1);
  v[0] += v[1];
  return v[0];
#undef FIO___RISKY_HASH_ROUND64
}

/* *****************************************************************************
Stable Hash (unlike Risky Hash, this can be used for non-ephemeral hashing)
***************************************************************************** */
#define FIO_STABLE_HASH_ROUND_WORD(i)                                          \
  v[i] += w[i];                                                                \
  v[i] += prime[i];                                                            \
  v[i] *= prime[i];                                                            \
  w[i] = fio_lrot64(w[i], 19);                                                 \
  v[i] += w[i] + seed;

FIO_IFUNC void fio_stable_hash___inner(uint64_t dest[4],
                                       const void *restrict data_,
                                       const size_t len,
                                       uint64_t seed) {
  const uint8_t *data = (const uint8_t *)data_;
  /* seed selection is constant time to avoid leaking seed data */
  seed += len;
  seed ^= fio_lrot64(seed, 47);
  seed = (seed << 1) + 1;
  uint64_t v[4] = {seed, seed, seed, seed};
  uint64_t const prime[4] = {FIO_U32_HASH_PRIME0,
                             FIO_U32_HASH_PRIME1,
                             FIO_U32_HASH_PRIME2,
                             FIO_U32_HASH_PRIME3};

  for (size_t j = 31; j < len; j += 32) {
    /* consumes 32 bytes (256 bits) each loop */
    uint64_t w[4];
    for (size_t i = 0; i < 4; ++i) {
      w[i] = fio_ltole64(fio_buf2u64u(data));
      data += 8;
      FIO_STABLE_HASH_ROUND_WORD(i);
    }
  }
  { /* pad with zeros (even if %32 == 0) and add len to last word */
    uint64_t w[4] = {0};
    fio_memcpy31x(w, data, len); /* copies `len & 31` bytes */
    for (size_t i = 0; i < 4; ++i)
      w[i] = fio_ltole64(w[i]);
    w[3] += len;
    for (size_t i = 0; i < 4; ++i) {
      FIO_STABLE_HASH_ROUND_WORD(i);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    dest[i] = v[i];
  }
}

/* Computes a facil.io Stable Hash. */
SFUNC uint64_t fio_stable_hash(const void *data_, size_t len, uint64_t seed) {
  uint64_t r;
  uint64_t v[4];
  fio_stable_hash___inner(v, data_, len, seed);
  /* summing & avalanche */
  r = v[0] + v[1] + v[2] + v[3];
  for (size_t i = 0; i < 4; ++i)
    v[i] = fio_bswap64(v[i]);
  r ^= fio_lrot64(r, 5);
  r += v[0] ^ v[1];
  r ^= fio_lrot64(r, 27);
  r += v[1] ^ v[2];
  r ^= fio_lrot64(r, 49);
  r += v[2] ^ v[3];
  r ^= (r >> 29) * FIO_U64_HASH_PRIME0;
  r ^= fio_lrot64(r, 29);
  return r;
}

SFUNC void fio_stable_hash128(void *restrict dest,
                              const void *restrict data_,
                              size_t len,
                              uint64_t seed) {

  uint64_t v[4];
  fio_stable_hash___inner(v, data_, len, seed);
  uint64_t r[2];
  uint64_t prime[2] = {FIO_U64_HASH_PRIME0, FIO_U64_HASH_PRIME1};
  r[0] = v[0] + v[1] + v[2] + v[3];
  r[1] = v[0] ^ v[1] ^ v[2] ^ v[3];
  for (size_t i = 0; i < 4; ++i)
    v[i] = fio_bswap64(v[i]);
  for (size_t i = 0; i < 2; ++i) {
    r[i] ^= fio_lrot64(r[i], 5);
    r[i] += v[0] ^ v[1];
    r[i] ^= fio_lrot64(r[i], 27);
    r[i] += v[1] ^ v[2];
    r[i] ^= fio_lrot64(r[i], 49);
    r[i] += v[2] ^ v[3];
    r[i] ^= (r[i] >> 29) * prime[i];
    r[i] ^= fio_lrot64(r[i], 29);
  }
  fio_memcpy16(dest, r);
}

#undef FIO_STABLE_HASH_ROUND_WORD
/* *****************************************************************************
Random - Implementation
***************************************************************************** */

#if FIO_OS_POSIX ||                                                            \
    (__has_include("sys/resource.h") && __has_include("sys/time.h"))
#include <sys/resource.h>
#include <sys/time.h>
#endif

static volatile uint64_t fio___rand_state[4]; /* random state */
static volatile size_t fio___rand_counter;    /* seed counter */
/* feeds random data to the algorithm through this 256 bit feed. */
static volatile uint64_t fio___rand_buffer[4] = {0x9c65875be1fce7b9ULL,
                                                 0x7cc568e838f6a40d,
                                                 0x4bb8d885a0fe47d5,
                                                 0x95561f0927ad7ecd};

IFUNC void fio_rand_feed2seed(void *buf_, size_t len) {
  len &= 1023;
  uint8_t *buf = (uint8_t *)buf_;
  uint8_t offset = (fio___rand_counter & 3);
  uint64_t tmp = 0;
  for (size_t i = 0; i < (len >> 3); ++i) {
    tmp = fio_buf2u64u(buf);
    fio___rand_buffer[(offset++ & 3)] ^= tmp;
    buf += 8;
  }
  if ((len & 7)) {
    tmp = 0;
    fio_memcpy7x(&tmp, buf, len);
    fio___rand_buffer[(offset++ & 3)] ^= tmp;
  }
}

SFUNC void fio_rand_reseed(void) {
  const size_t jitter_samples = 16 | (fio___rand_state[0] & 15);
#if defined(RUSAGE_SELF)
  {
    struct rusage rusage;
    getrusage(RUSAGE_SELF, &rusage);
    fio___rand_state[0] ^=
        fio_risky_hash(&rusage, sizeof(rusage), fio___rand_state[0]);
  }
#endif
  for (size_t i = 0; i < jitter_samples; ++i) {
    struct timespec t;
    clock_gettime(CLOCK_MONOTONIC, &t);
    uint64_t clk =
        (uint64_t)((t.tv_sec << 30) + (int64_t)t.tv_nsec) + fio___rand_counter;
    fio___rand_state[0] ^= fio_risky_num(clk, fio___rand_state[0] + i);
    fio___rand_state[1] ^= fio_risky_num(clk, fio___rand_state[1] + i);
  }
  {
    uint64_t tmp[2];
    tmp[0] = fio_risky_num(fio___rand_buffer[0], fio___rand_state[0]) +
             fio_risky_num(fio___rand_buffer[1], fio___rand_state[1]);
    tmp[1] = fio_risky_num(fio___rand_buffer[2], fio___rand_state[0]) +
             fio_risky_num(fio___rand_buffer[3], fio___rand_state[1]);
    fio___rand_state[2] ^= tmp[0];
    fio___rand_state[3] ^= tmp[1];
  }
  fio___rand_buffer[0] = fio_lrot64(fio___rand_buffer[0], 31);
  fio___rand_buffer[1] = fio_lrot64(fio___rand_buffer[1], 29);
  fio___rand_buffer[2] ^= fio___rand_buffer[0];
  fio___rand_buffer[3] ^= fio___rand_buffer[1];
  fio___rand_counter += jitter_samples;
}

/* tested for randomness using code from: http://xoshiro.di.unimi.it/hwd.php */
SFUNC uint64_t fio_rand64(void) {
  /* modeled after xoroshiro128+, by David Blackman and Sebastiano Vigna */
  uint64_t r = 0;
  if (!((fio___rand_counter++) & (((size_t)1 << 12) - 1))) {
    /* re-seed state every 524,288 requests / 2^19-1 attempts  */
    fio_rand_reseed();
  }
  const uint64_t s0[] = {fio___rand_state[0],
                         fio___rand_state[1],
                         fio___rand_state[2],
                         fio___rand_state[3]}; /* load to registers */
  uint64_t s1[4];
  {
    const uint64_t mulp[] = {0x37701261ED6C16C7ULL,
                             0x764DBBB75F3B3E0DULL,
                             ~(0x37701261ED6C16C7ULL),
                             ~(0x764DBBB75F3B3E0DULL)}; /* load to registers */
    const uint64_t addc[] = {fio___rand_counter, 0, fio___rand_counter, 0};
    for (size_t i = 0; i < 4; ++i) {
      s1[i] = fio_lrot64(s0[i], 33);
      s1[i] += addc[i];
      s1[i] *= mulp[i];
      s1[i] += s0[i];
    }
  }
  for (size_t i = 0; i < 4; ++i) { /* store to memory */
    fio___rand_state[i] = s1[i];
  }
  {
    uint8_t rotc[] = {31, 29, 27, 30};
    for (size_t i = 0; i < 4; ++i) {
      s1[i] = fio_lrot64(s1[i], rotc[i]);
      r += s1[i];
    }
  }
  return r;
}

/* copies 64 bits of randomness (8 bytes) repeatedly. */
SFUNC void fio_rand_bytes(void *data_, size_t len) {
  if (!data_ || !len)
    return;
  uint8_t *data = (uint8_t *)data_;
  for (unsigned i = 31; i < len; i += 32) {
    uint64_t rv[4] = {fio_rand64(), fio_rand64(), fio_rand64(), fio_rand64()};
    fio_memcpy32(data, rv);
    data += 32;
  }
  if (len & 31) {
    uint64_t rv[4] = {fio_rand64(), fio_rand64(), fio_rand64(), fio_rand64()};
    fio_memcpy31x(data, rv, len);
  }
}
/* *****************************************************************************
Random - Cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */
#endif /* FIO_RAND */
#undef FIO_RAND
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_SIGNAL             /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                              Signal Monitoring



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_SIGNAL) && !defined(H___FIO_SIGNAL___H)
#define H___FIO_SIGNAL___H

#ifndef FIO_SIGNAL_MONITOR_MAX
/* The maximum number of signals the implementation will be able to monitor */
#define FIO_SIGNAL_MONITOR_MAX 24
#endif

#if !(FIO_OS_POSIX) && !(FIO_OS_WIN) /* use FIO_HAVE_UNIX_TOOLS instead? */
#error Either POSIX or Windows are required for the fio_signal API.
#endif

#include <signal.h>
/* *****************************************************************************
Signal Monitoring API
***************************************************************************** */

/**
 * Starts to monitor for the specified signal, setting an optional callback.
 */
SFUNC int fio_signal_monitor(int sig,
                             void (*callback)(int sig, void *),
                             void *udata);

/** Reviews all signals, calling any relevant callbacks. */
SFUNC int fio_signal_review(void);

/** Stops monitoring the specified signal. */
SFUNC int fio_signal_forget(int sig);

/* *****************************************************************************




                          Signal Monitoring Implementation




***************************************************************************** */

/* *****************************************************************************
Signal Monitoring Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* *****************************************************************************
POSIX implementation
***************************************************************************** */
#ifdef FIO_OS_POSIX

static struct {
  int32_t sig;
  volatile unsigned flag;
  void (*callback)(int sig, void *);
  void *udata;
  struct sigaction old;
} fio___signal_watchers[FIO_SIGNAL_MONITOR_MAX];

FIO_SFUNC void fio___signal_catcher(int sig) {
  for (size_t i = 0; i < FIO_SIGNAL_MONITOR_MAX; ++i) {
    if (!fio___signal_watchers[i].sig && !fio___signal_watchers[i].udata)
      return; /* initialized list is finishe */
    if (fio___signal_watchers[i].sig != sig)
      continue;
    /* mark flag */
    fio___signal_watchers[i].flag = 1;
    /* pass-through if exists */
    if (fio___signal_watchers[i].old.sa_handler != SIG_IGN &&
        fio___signal_watchers[i].old.sa_handler != SIG_DFL)
      fio___signal_watchers[i].old.sa_handler(sig);
    return;
  }
}

/**
 * Starts to monitor for the specified signal, setting an optional callback.
 */
SFUNC int fio_signal_monitor(int sig,
                             void (*callback)(int sig, void *),
                             void *udata) {
  if (!sig)
    return -1;
  for (size_t i = 0; i < FIO_SIGNAL_MONITOR_MAX; ++i) {
    /* updating an existing monitor */
    if (fio___signal_watchers[i].sig == sig) {
      fio___signal_watchers[i].callback = callback;
      fio___signal_watchers[i].udata = udata;
      return 0;
    }
    /* slot busy */
    if (fio___signal_watchers[i].sig || fio___signal_watchers[i].callback)
      continue;
    /* place monitor in this slot */
    struct sigaction act;
    memset(&act, 0, sizeof(act));
    memset(fio___signal_watchers + i, 0, sizeof(fio___signal_watchers[i]));
    fio___signal_watchers[i].sig = sig;
    fio___signal_watchers[i].callback = callback;
    fio___signal_watchers[i].udata = udata;
    act.sa_handler = fio___signal_catcher;
    sigemptyset(&act.sa_mask);
    act.sa_flags = SA_RESTART | SA_NOCLDSTOP;
    if (sigaction(sig, &act, &fio___signal_watchers[i].old)) {
      FIO_LOG_ERROR("couldn't set signal handler: %s", strerror(errno));
      fio___signal_watchers[i].callback = NULL;
      fio___signal_watchers[i].udata = (void *)1;
      fio___signal_watchers[i].sig = 0;
      return -1;
    }
    return 0;
  }
  return -1;
}

/** Stops monitoring the specified signal. */
SFUNC int fio_signal_forget(int sig) {
  if (!sig)
    return -1;
  for (size_t i = 0; i < FIO_SIGNAL_MONITOR_MAX; ++i) {
    if (!fio___signal_watchers[i].sig && !fio___signal_watchers[i].udata)
      return -1; /* initialized list is finishe */
    if (fio___signal_watchers[i].sig != sig)
      continue;
    fio___signal_watchers[i].callback = NULL;
    fio___signal_watchers[i].udata = (void *)1;
    fio___signal_watchers[i].sig = 0;
    struct sigaction act;
    memset(&act, 0, sizeof(act));
    if (sigaction(sig, &fio___signal_watchers[i].old, &act)) {
      FIO_LOG_ERROR("couldn't unset signal handler: %s", strerror(errno));
      return -1;
    }
    return 0;
  }
  return -1;
}

/* *****************************************************************************
Windows Implementation
***************************************************************************** */
#elif FIO_OS_WIN

static struct {
  int32_t sig;
  volatile unsigned flag;
  void (*callback)(int sig, void *);
  void *udata;
  void (*old)(int sig);
} fio___signal_watchers[FIO_SIGNAL_MONITOR_MAX];

FIO_SFUNC void fio___signal_catcher(int sig) {
  for (size_t i = 0; i < FIO_SIGNAL_MONITOR_MAX; ++i) {
    if (!fio___signal_watchers[i].sig && !fio___signal_watchers[i].udata)
      return; /* initialized list is finished */
    if (fio___signal_watchers[i].sig != sig)
      continue;
    /* mark flag */
    fio___signal_watchers[i].flag = 1;
    /* pass-through if exists */
    if (fio___signal_watchers[i].old &&
        (intptr_t)fio___signal_watchers[i].old != (intptr_t)SIG_IGN &&
        (intptr_t)fio___signal_watchers[i].old != (intptr_t)SIG_DFL) {
      fio___signal_watchers[i].old(sig);
      fio___signal_watchers[i].old = signal(sig, fio___signal_catcher);
    } else {
      fio___signal_watchers[i].old = signal(sig, fio___signal_catcher);
    }
    break;
  }
}

/**
 * Starts to monitor for the specified signal, setting an optional callback.
 */
SFUNC int fio_signal_monitor(int sig,
                             void (*callback)(int sig, void *),
                             void *udata) {
  if (!sig)
    return -1;
  for (size_t i = 0; i < FIO_SIGNAL_MONITOR_MAX; ++i) {
    /* updating an existing monitor */
    if (fio___signal_watchers[i].sig == sig) {
      fio___signal_watchers[i].callback = callback;
      fio___signal_watchers[i].udata = udata;
      return 0;
    }
    /* slot busy */
    if (fio___signal_watchers[i].sig || fio___signal_watchers[i].callback)
      continue;
    /* place monitor in this slot */
    fio___signal_watchers[i].sig = sig;
    fio___signal_watchers[i].callback = callback;
    fio___signal_watchers[i].udata = udata;
    fio___signal_watchers[i].old = signal(sig, fio___signal_catcher);
    if ((intptr_t)SIG_ERR == (intptr_t)fio___signal_watchers[i].old) {
      fio___signal_watchers[i].sig = 0;
      fio___signal_watchers[i].callback = NULL;
      fio___signal_watchers[i].udata = (void *)1;
      fio___signal_watchers[i].old = NULL;
      FIO_LOG_ERROR("couldn't set signal handler: %s", strerror(errno));
      return -1;
    }
    return 0;
  }
  return -1;
}

/** Stops monitoring the specified signal. */
SFUNC int fio_signal_forget(int sig) {
  if (!sig)
    return -1;
  for (size_t i = 0; i < FIO_SIGNAL_MONITOR_MAX; ++i) {
    if (!fio___signal_watchers[i].sig && !fio___signal_watchers[i].udata)
      return -1; /* initialized list is finished */
    if (fio___signal_watchers[i].sig != sig)
      continue;
    fio___signal_watchers[i].callback = NULL;
    fio___signal_watchers[i].udata = (void *)1;
    fio___signal_watchers[i].sig = 0;
    if (fio___signal_watchers[i].old) {
      if ((intptr_t)signal(sig, fio___signal_watchers[i].old) ==
          (intptr_t)SIG_ERR)
        goto sig_error;
    } else {
      if ((intptr_t)signal(sig, SIG_DFL) == (intptr_t)SIG_ERR)
        goto sig_error;
    }
    return 0;
  }
  return -1;
sig_error:
  FIO_LOG_ERROR("couldn't unset signal handler: %s", strerror(errno));
  return -1;
}
#endif /* POSIX vs WINDOWS */

/* *****************************************************************************
Common OS implementation
***************************************************************************** */

/** Reviews all signals, calling any relevant callbacks. */
SFUNC int fio_signal_review(void) {
  int c = 0;
  for (size_t i = 0; i < FIO_SIGNAL_MONITOR_MAX; ++i) {
    if (!fio___signal_watchers[i].sig && !fio___signal_watchers[i].udata)
      return c;
    if (fio___signal_watchers[i].flag) {
      fio___signal_watchers[i].flag = 0;
      ++c;
      if (fio___signal_watchers[i].callback)
        fio___signal_watchers[i].callback(fio___signal_watchers[i].sig,
                                          fio___signal_watchers[i].udata);
    }
  }
  return c;
}

/* *****************************************************************************
Signal Monitoring Testing?
***************************************************************************** */
#ifdef FIO_TEST_ALL
FIO_SFUNC void FIO_NAME_TEST(stl, signal)(void) {

#define FIO___SIGNAL_MEMBER(a)                                                 \
  { (int)a, #a }
  struct {
    int sig;
    const char *name;
  } t[] = {
    FIO___SIGNAL_MEMBER(SIGINT),
    FIO___SIGNAL_MEMBER(SIGILL),
    FIO___SIGNAL_MEMBER(SIGABRT),
    FIO___SIGNAL_MEMBER(SIGSEGV),
    FIO___SIGNAL_MEMBER(SIGTERM),
#if FIO_OS_POSIX
    FIO___SIGNAL_MEMBER(SIGQUIT),
    FIO___SIGNAL_MEMBER(SIGHUP),
    FIO___SIGNAL_MEMBER(SIGTRAP),
    FIO___SIGNAL_MEMBER(SIGBUS),
    FIO___SIGNAL_MEMBER(SIGFPE),
    FIO___SIGNAL_MEMBER(SIGUSR1),
    FIO___SIGNAL_MEMBER(SIGUSR2),
    FIO___SIGNAL_MEMBER(SIGPIPE),
    FIO___SIGNAL_MEMBER(SIGALRM),
    FIO___SIGNAL_MEMBER(SIGCHLD),
    FIO___SIGNAL_MEMBER(SIGCONT),
#endif
  };
#undef FIO___SIGNAL_MEMBER
  size_t e = 0;
  fprintf(stderr, "* testing signal monitoring (setup / cleanup only).\n");
  for (size_t i = 0; i < sizeof(t) / sizeof(t[0]); ++i) {
    if (fio_signal_monitor(t[i].sig, NULL, NULL)) {
      FIO_LOG_ERROR("couldn't set signal monitoring for %s (%d)",
                    t[i].name,
                    t[i].sig);
      e = 1;
    }
  }
  for (size_t i = 0; i < sizeof(t) / sizeof(t[0]); ++i) {
    if (fio_signal_forget(t[i].sig)) {
      FIO_LOG_ERROR("couldn't stop signal monitoring for %s (%d)",
                    t[i].name,
                    t[i].sig);
      e = 1;
    }
  }
  FIO_ASSERT(!e, "signal monitoring error");
}

#endif /* FIO_TEST_ALL */
/* *****************************************************************************
Module Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_SIGNAL_MONITOR_MAX
#endif /* FIO_SIGNAL */
#undef FIO_SIGNAL
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_SORT_NAME num      /* Development inclusion - ignore line */
#define FIO_SORT_TYPE size_t   /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                          A Good Enough Sorting Helper



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#ifdef FIO_SORT_NAME

/* *****************************************************************************
Sort Settings
***************************************************************************** */

#ifndef FIO_SORT_TYPE
#error FIO_SORT_TYPE must contain a valid type name!
#endif

#ifndef FIO_SORT_THRESHOLD
/** The default threshold below which quicksort delegates to insert sort. */
#define FIO_SORT_THRESHOLD 96
#endif

#ifndef FIO_SORT_SWAP
/** Default swap operation assumes an array and swaps array members */
#define FIO_SORT_SWAP(a, b)                                                    \
  do {                                                                         \
    FIO_SORT_TYPE tmp__ = (a);                                                 \
    (a) = (b);                                                                 \
    (b) = tmp__;                                                               \
  } while (0)
#endif

#ifndef FIO_SORT_IS_BIGGER
/** MUST evaluate as 1 if a > b (zero if equal or smaller). */
#define FIO_SORT_IS_BIGGER(a, b) ((a) > (b))
#endif

/* *****************************************************************************
Sort API
***************************************************************************** */

/* Sorts a `FIO_SORT_TYPE` array with `count` members (quicksort). */
FIO_IFUNC void FIO_NAME(FIO_SORT_NAME, sort)(FIO_SORT_TYPE *array,
                                             size_t count);

/* Insert sort, for small arrays of `FIO_SORT_TYPE`. */
SFUNC void FIO_NAME(FIO_SORT_NAME, isort)(FIO_SORT_TYPE *array, size_t count);

/* Quick sort, for larger arrays of `FIO_SORT_TYPE`. */
SFUNC void FIO_NAME(FIO_SORT_NAME, qsort)(FIO_SORT_TYPE *array, size_t count);

/* *****************************************************************************
Sort Implementation - inlined static functions
see ideas from: https://youtu.be/FJJTYQYB1JQ
***************************************************************************** */

/* Sorts a `FIO_SORT_TYPE` array with `count` members (quicksort). */
FIO_IFUNC void FIO_NAME(FIO_SORT_NAME, sort)(FIO_SORT_TYPE *array,
                                             size_t count) {
  FIO_NAME(FIO_SORT_NAME, qsort)(array, count);
}

/* *****************************************************************************
Sort Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* Insert sort, for small arrays of `FIO_SORT_TYPE`. */
SFUNC void FIO_NAME(FIO_SORT_NAME, isort)(FIO_SORT_TYPE *array, size_t count) {
  /* a fast(ish) small sort on small arrays */
  if ((!count | !array))
    return;
  if (count < 3) { /* special case */
    if (FIO_SORT_IS_BIGGER((array[0]), (array[count == 2])))
      FIO_SORT_SWAP((array[0]), (array[1]));
    return;
  }
  /* place smallest item in position array[0] (guard element) */
  for (size_t pos = 1; pos < count; ++pos) {
    if (FIO_SORT_IS_BIGGER((array[0]), (array[pos]))) {
      FIO_SORT_SWAP((array[0]), (array[pos]));
    }
  }
  /* perform insert sort */
  for (size_t i = 2; i < count; ++i) {
    for (size_t a = i - 1; FIO_SORT_IS_BIGGER((array[a]), (array[a + 1]));
         --a) {
      FIO_SORT_SWAP((array[a]), (array[a + 1]));
    }
  }
}

/* Sorts a `FIO_SORT_TYPE` array with `count` members. */
SFUNC void FIO_NAME(FIO_SORT_NAME, qsort)(FIO_SORT_TYPE *array, size_t count) {
  /* With thanks to Douglas C. Schmidt, as I used his code for reference:
   * https://code.woboq.org/userspace/glibc/stdlib/qsort.c.html
   */
  if ((!count | !array))
    return;
  if (count < FIO_SORT_THRESHOLD) {
    FIO_NAME(FIO_SORT_NAME, isort)(array, count);
    return;
  }
  /* no recursion, setup a stack that can hold log2(count). */
  struct {
    FIO_SORT_TYPE *lo;
    FIO_SORT_TYPE *hi;
  } queue[CHAR_BIT * sizeof(count) + 1], *top = queue;
#define fio_sort___queue_push(l, h)                                            \
  top->lo = l;                                                                 \
  top->hi = h;                                                                 \
  ++top;
  /* push all the array as the first queued partition */
  fio_sort___queue_push(array, array + (count - 1));
  for (;;) {
    FIO_SORT_TYPE *lo;
    FIO_SORT_TYPE *hi;
    FIO_SORT_TYPE *mid;
    --top; /* pop stack */
    lo = top->lo;
    hi = top->hi;
    const size_t slice_len = (hi - lo) + 1;

    /* sort small ranges using insert sort */
    if (slice_len < FIO_SORT_THRESHOLD) {
      FIO_NAME(FIO_SORT_NAME, isort)(lo, slice_len);
      if (queue == top)
        return;
      continue;
    }

    /* select a median element (1 of 3, fist, middle, last). */
    /* this also promises ordering between these 3 elements. */
    mid = lo + ((slice_len) >> 1);
    if (FIO_SORT_IS_BIGGER((lo[0]), (hi[0])))
      FIO_SORT_SWAP((lo[0]), (hi[0]));
    if (FIO_SORT_IS_BIGGER((lo[0]), (mid[0])))
      FIO_SORT_SWAP((lo[0]), (mid[0]));
    else if (FIO_SORT_IS_BIGGER((mid[0]), (hi[0])))
      FIO_SORT_SWAP((hi[0]), (mid[0]));

    /* partition: swap elements and pointers so mid is a partition pivot */
    FIO_SORT_TYPE *left = lo + 1;
    FIO_SORT_TYPE *right = hi - 2;
    /* place mid in the lower partition and update pointer, as it's known */
    FIO_SORT_SWAP((right[1]), (mid[0]));
    mid = right + 1;
    for (;;) {
      /* while order is fine, move on. */
      while (FIO_SORT_IS_BIGGER((mid[0]), (left[0])))
        ++left;
      while (FIO_SORT_IS_BIGGER((right[0]), (mid[0])))
        --right;
      /* order issue encountered (relative to pivot / mid)... */
      if (left < right) {
        /* right now, left is bigger than mid *and* right is smaller... swap. */
        FIO_SORT_SWAP(left[0], right[0]);
        ++left;
        --right;
        continue;
      }
      /* we passed the middle point and so, we can finish partitioning */
      if (left > right)
        break;
      /* left == right (odd numbered array) */
      ++left;
      --right;
      break;
    }
    /* push partitions in order of size to the stack (clears smaller first) */
    if ((right - lo) > (hi - left)) {
      fio_sort___queue_push(lo, right);
      fio_sort___queue_push(left, hi);
    } else {
      fio_sort___queue_push(left, hi);
      fio_sort___queue_push(lo, right);
    }
  }
}
#undef fio_sort___queue_push

/* *****************************************************************************
Module Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_SORT_TYPE
#undef FIO_SORT_TEST
#undef FIO_SORT_SWAP
#undef FIO_SORT_IS_BIGGER
#undef FIO_SORT_NAME
#endif /* FIO_SORT_NAME */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_THREADS            /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        Simple Portable Threads



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_THREADS) && !defined(H___FIO_THREADS___H)
#define H___FIO_THREADS___H

/* *****************************************************************************
Module Settings

At this point, define any MACROs and customizable settings available to the
developer.
***************************************************************************** */

#if FIO_OS_POSIX /* POSIX Systems */
#include <pthread.h>
#include <sys/types.h>
#include <sys/wait.h>

#ifndef FIO_THREADS_BYO
typedef pthread_t fio_thread_t;
#endif

#ifndef FIO_THREADS_FORK_BYO
typedef pid_t fio_thread_pid_t;
#endif

#ifndef FIO_THREADS_MUTEX_BYO
typedef pthread_mutex_t fio_thread_mutex_t;
/** Used this macro for static initialization. */
#define FIO_THREAD_MUTEX_INIT PTHREAD_MUTEX_INITIALIZER
#endif

#ifndef FIO_THREADS_COND_BYO
typedef pthread_cond_t fio_thread_cond_t;
#endif

#elif FIO_OS_WIN /* Windows Systems */
#include <synchapi.h>

#ifndef FIO_THREADS_BYO
typedef HANDLE fio_thread_t;
#endif

#ifndef FIO_THREADS_FORK_BYO
typedef DWORD fio_thread_pid_t;
#endif

#ifndef FIO_THREADS_MUTEX_BYO
typedef CRITICAL_SECTION fio_thread_mutex_t;
/** Used this macro for static initialization. */
#define FIO_THREAD_MUTEX_INIT ((fio_thread_mutex_t){0})
#endif

#ifndef FIO_THREADS_COND_BYO
typedef CONDITION_VARIABLE fio_thread_cond_t;
#endif

#else /* No Known System */
#if !defined(FIO_THREADS_BYO) || !defined(FIO_THREADS_FORK_BYO) ||             \
    !defined(FIO_THREADS_MUTEX_BYO) || !defined(FIO_THREADS_COND_BYO)
#error facil.io Simple Portable Threads require a POSIX system or Windows
#endif
#endif /* system detection */

/* *****************************************************************************
API for forking processes
***************************************************************************** */

/** Should behave the same as the POSIX system call `fork`. */
FIO_IFUNC fio_thread_pid_t fio_thread_fork(void);

/** Should behave the same as the POSIX system call `getpid`. */
FIO_IFUNC fio_thread_pid_t fio_thread_getpid(void);

/** Should behave the same as the POSIX system call `kill`. */
FIO_IFUNC int fio_thread_kill(fio_thread_pid_t pid, int sig);

/** Should behave the same as the POSIX system call `waitpid`. */
FIO_IFUNC int fio_thread_waitpid(fio_thread_pid_t pid,
                                 int *stat_loc,
                                 int options);

/* *****************************************************************************
API for spawning threads
***************************************************************************** */

/** Starts a new thread, returns 0 on success and -1 on failure. */
FIO_IFUNC int fio_thread_create(fio_thread_t *t,
                                void *(*fn)(void *),
                                void *arg);

/** Waits for the thread to finish. */
FIO_IFUNC int fio_thread_join(fio_thread_t *t);

/** Detaches the thread, so thread resources are freed automatically. */
FIO_IFUNC int fio_thread_detach(fio_thread_t *t);

/** Ends the current running thread. */
FIO_IFUNC void fio_thread_exit(void);

/* Returns non-zero if both threads refer to the same thread. */
FIO_IFUNC int fio_thread_equal(fio_thread_t *a, fio_thread_t *b);

/** Returns the current thread. */
FIO_IFUNC fio_thread_t fio_thread_current(void);

/** Yields thread execution. */
FIO_IFUNC void fio_thread_yield(void);

/** Possible thread priority values. */
typedef enum {
  FIO_THREAD_PRIORITY_ERROR = -1,
  FIO_THREAD_PRIORITY_LOWEST = 0,
  FIO_THREAD_PRIORITY_LOW,
  FIO_THREAD_PRIORITY_NORMAL,
  FIO_THREAD_PRIORITY_HIGH,
  FIO_THREAD_PRIORITY_HIGHEST,
} fio_thread_priority_e;

/** Returns a thread's priority level. */
FIO_SFUNC fio_thread_priority_e fio_thread_priority(void);

/** Sets a thread's priority level. */
FIO_SFUNC int fio_thread_priority_set(fio_thread_priority_e);

/* *****************************************************************************
API for mutexes
***************************************************************************** */

/**
 * Initializes a simple Mutex.
 *
 * Or use the static initialization value: FIO_THREAD_MUTEX_INIT
 */
FIO_IFUNC int fio_thread_mutex_init(fio_thread_mutex_t *m);

/** Locks a simple Mutex, returning -1 on error. */
FIO_IFUNC int fio_thread_mutex_lock(fio_thread_mutex_t *m);

/** Attempts to lock a simple Mutex, returning zero on success. */
FIO_IFUNC int fio_thread_mutex_trylock(fio_thread_mutex_t *m);

/** Unlocks a simple Mutex, returning zero on success or -1 on error. */
FIO_IFUNC int fio_thread_mutex_unlock(fio_thread_mutex_t *m);

/** Destroys the simple Mutex (cleanup). */
FIO_IFUNC void fio_thread_mutex_destroy(fio_thread_mutex_t *m);

/* *****************************************************************************
API for conditional variables
***************************************************************************** */

/** Initializes a simple conditional variable. */
FIO_IFUNC int fio_thread_cond_init(fio_thread_cond_t *c);

/** Waits on a conditional variable (MUST be previously locked). */
FIO_IFUNC int fio_thread_cond_wait(fio_thread_cond_t *c, fio_thread_mutex_t *m);

/** Waits on a conditional variable (MUST be previously locked). */
FIO_IFUNC int fio_thread_cond_timedwait(fio_thread_cond_t *c,
                                        fio_thread_mutex_t *m,
                                        size_t milliseconds);

/** Signals a simple conditional variable. */
FIO_IFUNC int fio_thread_cond_signal(fio_thread_cond_t *c);

/** Destroys a simple conditional variable. */
FIO_IFUNC void fio_thread_cond_destroy(fio_thread_cond_t *c);

/* *****************************************************************************


POSIX Implementation - inlined static functions


***************************************************************************** */
#if FIO_OS_POSIX

#ifndef FIO_THREADS_FORK_BYO
/** Should behave the same as the POSIX system call `getpid`. */
FIO_IFUNC fio_thread_pid_t fio_thread_getpid(void) {
  return (fio_thread_pid_t)getpid();
}
/** Should behave the same as the POSIX system call `fork`. */
FIO_IFUNC fio_thread_pid_t fio_thread_fork(void) {
  return (fio_thread_pid_t)fork();
}

/** Should behave the same as the POSIX system call `kill`. */
FIO_IFUNC int fio_thread_kill(fio_thread_pid_t i, int s) {
  return kill((pid_t)i, s);
}

/** Should behave the same as the POSIX system call `waitpid`. */
FIO_IFUNC int fio_thread_waitpid(fio_thread_pid_t i, int *s, int o) {
  return waitpid((pid_t)i, s, o);
}
#endif /* FIO_THREADS_FORK_BYO */

#ifndef FIO_THREADS_BYO
// clang-format off

/** Starts a new thread, returns 0 on success and -1 on failure. */
FIO_IFUNC int fio_thread_create(fio_thread_t *t, void *(*fn)(void *), void *arg) { return pthread_create(t, NULL, fn, arg); }

FIO_IFUNC int fio_thread_join(fio_thread_t *t) { return pthread_join(*t, NULL); }

/** Detaches the thread, so thread resources are freed automatically. */
FIO_IFUNC int fio_thread_detach(fio_thread_t *t) { return pthread_detach(*t); }

/** Ends the current running thread. */
FIO_IFUNC void fio_thread_exit(void) { pthread_exit(NULL); }

/* Returns non-zero if both threads refer to the same thread. */
FIO_IFUNC int fio_thread_equal(fio_thread_t *a, fio_thread_t *b) { return pthread_equal(*a, *b); }

/** Returns the current thread. */
FIO_IFUNC fio_thread_t fio_thread_current(void) { return pthread_self(); }

/** Yields thread execution. */
FIO_IFUNC void fio_thread_yield(void) { sched_yield(); }
#endif /* FIO_THREADS_BYO */


#if defined(__APPLE__) &&  __has_include("sys/qos.h") /* MacOS with QoS */
#include "sys/qos.h"

/** Returns a thread's priority level. */
FIO_SFUNC fio_thread_priority_e fio_thread_priority(void) {
  qos_class_t qos;
  int rel;
  if(pthread_get_qos_class_np(pthread_self(), &qos, &rel)) return FIO_THREAD_PRIORITY_ERROR;
  switch(qos) {
  case QOS_CLASS_BACKGROUND:       return FIO_THREAD_PRIORITY_LOWEST;
  case QOS_CLASS_UTILITY:          return FIO_THREAD_PRIORITY_LOW;
  case QOS_CLASS_DEFAULT:          return FIO_THREAD_PRIORITY_NORMAL;
  case QOS_CLASS_UNSPECIFIED:      return FIO_THREAD_PRIORITY_NORMAL;
  case QOS_CLASS_USER_INITIATED:   return FIO_THREAD_PRIORITY_HIGH;
  case QOS_CLASS_USER_INTERACTIVE: return FIO_THREAD_PRIORITY_HIGHEST;
  }
  return FIO_THREAD_PRIORITY_ERROR;
}

/** Sets a thread's priority level. */
FIO_SFUNC int fio_thread_priority_set(fio_thread_priority_e pr) {
  // pthread_get_qos_class_np(pthread_t  _Nonnull __pthread, qos_class_t * _Nullable __qos_class, int * _Nullable __relative_priority)
  qos_class_t qos = QOS_CLASS_DEFAULT;
  int rel = 0;
  switch(pr) {
  case FIO_THREAD_PRIORITY_LOWEST:  qos = QOS_CLASS_BACKGROUND;       rel = -4; break;
  case FIO_THREAD_PRIORITY_LOW:     qos = QOS_CLASS_UTILITY;          rel = -2; break;
  case FIO_THREAD_PRIORITY_NORMAL:  qos = QOS_CLASS_DEFAULT;          rel = 0; break;
  case FIO_THREAD_PRIORITY_HIGH:    qos = QOS_CLASS_USER_INITIATED;   rel = 2; break;
  case FIO_THREAD_PRIORITY_HIGHEST: qos = QOS_CLASS_USER_INTERACTIVE; rel = 4; break;
  case FIO_THREAD_PRIORITY_ERROR:   qos = QOS_CLASS_DEFAULT;          rel = 0; break;
  }
  return pthread_set_qos_class_self_np(qos, rel);
}

#else /* portable POSIX */

/** Returns a thread's priority level. */
FIO_SFUNC fio_thread_priority_e fio_thread_priority(void) {
  int policy;
  struct sched_param schd;
  if(pthread_getschedparam(pthread_self(), &policy, &schd))
    return FIO_THREAD_PRIORITY_ERROR;
  int min = sched_get_priority_min(policy);
  int max = sched_get_priority_max(policy);
  size_t steps = (size_t)(max - min) / 5;
  size_t priority_value = (schd.sched_priority - min);
  if(steps) priority_value /= steps;
  switch(priority_value) {
  case 0: return FIO_THREAD_PRIORITY_LOWEST;
  case 1: return FIO_THREAD_PRIORITY_LOW;  
  case 2: return FIO_THREAD_PRIORITY_NORMAL;  
  case 3: return FIO_THREAD_PRIORITY_HIGH;  
  case 4: return FIO_THREAD_PRIORITY_HIGHEST;  
  }
  return FIO_THREAD_PRIORITY_ERROR;
}

/** Sets a thread's priority level. */
FIO_SFUNC int fio_thread_priority_set(fio_thread_priority_e priority_value) {
  int policy;
  struct sched_param schd;
  if(pthread_getschedparam(pthread_self(), &policy, &schd))
    return -1;
  int min = sched_get_priority_min(policy);
  int max = sched_get_priority_max(policy);
  size_t steps = (size_t)(max - min) / 5;
  switch(priority_value) {
  case FIO_THREAD_PRIORITY_LOWEST:  schd.sched_priority = min + steps; break;
  case FIO_THREAD_PRIORITY_LOW:     schd.sched_priority = min + (steps << 1); break; 
  case FIO_THREAD_PRIORITY_NORMAL:  schd.sched_priority = max - (steps << 1); break; 
  case FIO_THREAD_PRIORITY_HIGH:    schd.sched_priority = max - steps; break; 
  case FIO_THREAD_PRIORITY_HIGHEST: schd.sched_priority = max; break; 
  case FIO_THREAD_PRIORITY_ERROR: return -1;
  }
  return pthread_setschedparam(pthread_self(), policy, &schd);
}

#endif /* MacOS vs. portable POSIX */

#ifndef FIO_THREADS_MUTEX_BYO

/** Initializes a simple Mutex. */
FIO_IFUNC int fio_thread_mutex_init(fio_thread_mutex_t *m) { return pthread_mutex_init(m, NULL); }

/** Locks a simple Mutex, returning -1 on error. */
FIO_IFUNC int fio_thread_mutex_lock(fio_thread_mutex_t *m) { return pthread_mutex_lock(m); }

/** Attempts to lock a simple Mutex, returning zero on success. */
FIO_IFUNC int fio_thread_mutex_trylock(fio_thread_mutex_t *m) { return pthread_mutex_trylock(m); }

/** Unlocks a simple Mutex, returning zero on success or -1 on error. */
FIO_IFUNC int fio_thread_mutex_unlock(fio_thread_mutex_t *m) { return pthread_mutex_unlock(m); }

/** Destroys the simple Mutex (cleanup). */
FIO_IFUNC void fio_thread_mutex_destroy(fio_thread_mutex_t *m) { pthread_mutex_destroy(m); *m = (pthread_mutex_t)PTHREAD_MUTEX_INITIALIZER; }

#endif /* FIO_THREADS_MUTEX_BYO */
// clang-format on

#ifndef FIO_THREADS_COND_BYO
/** Initializes a simple conditional variable. */
FIO_IFUNC int fio_thread_cond_init(fio_thread_cond_t *c) {
  return pthread_cond_init(c, NULL);
}

/** Waits on a conditional variable (MUST be previously locked). */
FIO_IFUNC int fio_thread_cond_wait(fio_thread_cond_t *c,
                                   fio_thread_mutex_t *m) {
  return pthread_cond_wait(c, m);
}

/** Waits on a conditional variable (MUST be previously locked). */
FIO_IFUNC int fio_thread_cond_timedwait(fio_thread_cond_t *c,
                                        fio_thread_mutex_t *m,
                                        size_t milliseconds) {
  struct timespec t;
  clock_gettime(CLOCK_REALTIME, &t);
  milliseconds += t.tv_nsec / 1000000;
  t.tv_sec += (long)(milliseconds / 1000);
  t.tv_nsec = (long)((milliseconds % 1000) * 1000000);
  return pthread_cond_timedwait(c, m, &t);
}

/** Signals a simple conditional variable. */
FIO_IFUNC int fio_thread_cond_signal(fio_thread_cond_t *c) {
  return pthread_cond_signal(c);
}

/** Destroys a simple conditional variable. */
FIO_IFUNC void fio_thread_cond_destroy(fio_thread_cond_t *c) {
  pthread_cond_destroy(c);
}
#endif /* FIO_THREADS_COND_BYO */

/* *****************************************************************************


Windows Implementation - inlined static functions


***************************************************************************** */
#elif FIO_OS_WIN
#include <process.h>
#include <processthreadsapi.h>
#include <tlhelp32.h>

#ifndef FIO_THREADS_FORK_BYO

FIO_IFUNC fio_thread_pid_t fio_thread_getpid(void) {
  return (fio_thread_pid_t)GetCurrentProcessId();
}

#if defined(fork) && defined(WEXITSTATUS) /* unix features pre-patched */
FIO_IFUNC fio_thread_pid_t fio_thread_fork(void) {
  return (fio_thread_pid_t)fork();
}
FIO_IFUNC int fio_thread_kill(fio_thread_pid_t i, int s) {
  return kill((pid_t)i, s);
}
FIO_IFUNC int fio_thread_waitpid(fio_thread_pid_t i, int *s, int o) {
  return waitpid((pid_t)i, s, o);
}

#else /* defined(fork) && defined(WEXITSTATUS) */

FIO_IFUNC fio_thread_pid_t fio_thread_fork(void) {
  FIO_LOG_ERROR("`fork` not implemented, cannot spawn child processes.");
  return (fio_thread_pid_t)-1;
}

FIO_IFUNC int fio_thread_kill(fio_thread_pid_t pid, int sig) {
  /* Credit to Jan Biedermann (GitHub: @janbiedermann) */
  HANDLE handle;
  DWORD status;
  if (sig < 0 || sig >= NSIG) {
    errno = EINVAL;
    return -1;
  }
#ifdef SIGCONT
  if (sig == SIGCONT) {
    errno = ENOSYS;
    return -1;
  }
#endif

  if (pid == -1)
    pid = 0;

  if (!pid)
    handle = GetCurrentProcess();
  else
    handle =
        OpenProcess(PROCESS_TERMINATE | PROCESS_QUERY_INFORMATION, FALSE, pid);
  if (!handle)
    goto something_went_wrong;

  switch (sig) {
#ifdef SIGKILL
  case SIGKILL:
#endif
  case SIGTERM:
  case SIGINT: /* terminate */
    if (!TerminateProcess(handle, 1))
      goto something_went_wrong;
    break;
  case 0: /* check status */
    if (!GetExitCodeProcess(handle, &status))
      goto something_went_wrong;
    if (status != STILL_ACTIVE) {
      errno = ESRCH;
      goto cleanup_after_error;
    }
    break;
  default: /* not supported? */ errno = ENOSYS; goto cleanup_after_error;
  }

  if (pid) {
    CloseHandle(handle);
  }
  return 0;

something_went_wrong:

  switch (GetLastError()) {
  case ERROR_INVALID_PARAMETER: errno = ESRCH; break;
  case ERROR_ACCESS_DENIED:
    errno = EPERM;
    if (handle && GetExitCodeProcess(handle, &status) && status != STILL_ACTIVE)
      errno = ESRCH;
    break;
  default: errno = GetLastError();
  }
cleanup_after_error:
  if (handle && pid)
    CloseHandle(handle);
  return -1;
}

#ifndef WNOHANG
#define WNOHANG 1
#endif /* WNOHANG */

#ifndef WUNTRACED
#define WUNTRACED 2
#endif /* WUNTRACED */

#ifndef WCONTINUED
#define WCONTINUED 8
#endif /* WCONTINUED */

#ifndef WNOWAIT
#define WNOWAIT 0x01000000
#endif /* WNOWAIT */

#ifndef WEXITSTATUS
#define WEXITSTATUS(status) (((status)&0xFF00) >> 8)
#endif /* WEXITSTATUS */

#ifndef WIFEXITED
#define WIFEXITED(status) (WTERMSIG(status) == 0)
#endif /* WIFEXITED */

#ifndef WIFSIGNALED
#define WIFSIGNALED(status) (((signed char)(__WTERMSIG(status) + 1) >> 1) > 0)
#endif /* WIFSIGNALED */

#ifndef WTERMSIG
#define WTERMSIG(status) ((status)&0x7F)
#endif /* WTERMSIG */

#ifndef WIFSTOPPED
#define WIFSTOPPED(status) (((status)&0xFF) == 0x7F)
#endif /* WIFSTOPPED */

#ifndef WSTOPSIG
#define WSTOPSIG(status) WEXITSTATUS(status)
#endif /* WSTOPSIG */

static int fio___thread_waitpid_anychild(PROCESSENTRY32W *pe, DWORD pid) {
  return pe->th32ParentProcessID == GetCurrentProcessId();
}

static int fio___thread_waitpid_pid(PROCESSENTRY32W *pe, DWORD pid) {
  return pe->th32ProcessID == pid;
}

FIO_IFUNC int fio_thread_waitpid(fio_thread_pid_t pid, int *status, int opt) {
  /* adopted from:
   * https://github.com/win32ports/sys_wait_h/blob/master/sys/wait.h Copyright
   * Copyright (c) 2019 win32ports, MIT license
   */
  int saved_status = 0;
  HANDLE hProcess = INVALID_HANDLE_VALUE, hSnapshot = INVALID_HANDLE_VALUE;
  int (*are_these_the_druides_were_looking_for)(PROCESSENTRY32W *, DWORD);
  PROCESSENTRY32W pe;
  DWORD wait_status = 0, exit_code = 0;
  int nohang = WNOHANG == (WNOHANG & opt);
  opt &= ~(WUNTRACED | WNOWAIT | WCONTINUED | WNOHANG);
  if (opt) {
    errno = -EINVAL;
    return -1;
  }

  if (pid > 0 || pid == -1) {
    FIO_LOG_ERROR(
        "fio_thread_waitpid not implemented for pid < -1 || pid ==0.");
    return -1;
  }

  are_these_the_druides_were_looking_for = fio___thread_waitpid_pid;
  if (pid == -1) /* wait for any child */
    are_these_the_druides_were_looking_for = fio___thread_waitpid_anychild;

  hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
  if (INVALID_HANDLE_VALUE == hSnapshot) {
    errno = ECHILD;
    return -1;
  }

  pe.dwSize = sizeof(pe);
  if (!Process32FirstW(hSnapshot, &pe)) {
    CloseHandle(hSnapshot);
    errno = ECHILD;
    return -1;
  }
  do {
    if (are_these_the_druides_were_looking_for(&pe, pid)) {
      hProcess = OpenProcess(SYNCHRONIZE | PROCESS_QUERY_INFORMATION,
                             0,
                             pe.th32ProcessID);
      if (INVALID_HANDLE_VALUE == hProcess) {
        CloseHandle(hSnapshot);
        errno = ECHILD;
        return -1;
      }
      break;
    }
  } while (Process32NextW(hSnapshot, &pe));
  if (INVALID_HANDLE_VALUE == hProcess) {
    CloseHandle(hSnapshot);
    errno = ECHILD;
    return -1;
  }

  wait_status = WaitForSingleObject(hProcess, nohang ? 0 : INFINITE);

  if (WAIT_OBJECT_0 == wait_status) {
    if (GetExitCodeProcess(hProcess, &exit_code))
      saved_status |= (exit_code & 0xFF) << 8;
  } else if (WAIT_TIMEOUT == wait_status && nohang) {
    return 0;
  } else {
    CloseHandle(hProcess);
    CloseHandle(hSnapshot);
    errno = ECHILD;
    return -1;
  }

  CloseHandle(hProcess);
  CloseHandle(hSnapshot);

  if (status)
    *status = saved_status;

  return pe.th32ParentProcessID;
}

#endif /* already patched by some other implementation */
#endif /* FIO_THREADS_FORK_BYO */

#ifndef FIO_THREADS_BYO
/** Starts a new thread, returns 0 on success and -1 on failure. */
FIO_IFUNC int fio_thread_create(fio_thread_t *t,
                                void *(*fn)(void *),
                                void *arg) {
  *t = (HANDLE)_beginthreadex(NULL,
                              0,
                              (_beginthreadex_proc_type)(uintptr_t)fn,
                              arg,
                              0,
                              NULL);
  return (!!t) - 1;
}

FIO_IFUNC int fio_thread_join(fio_thread_t *t) {
  int r = 0;
  if (WaitForSingleObject(*t, INFINITE) == WAIT_FAILED) {
    errno = GetLastError();
    r = -1;
  } else
    CloseHandle(*t);
  return r;
}

// clang-format off
/** Detaches the thread, so thread resources are freed automatically. */
FIO_IFUNC int fio_thread_detach(fio_thread_t *t) { return CloseHandle(*t) - 1; }

/** Ends the current running thread. */
FIO_IFUNC void fio_thread_exit(void) { _endthread(); }

/* Returns non-zero if both threads refer to the same thread. */
FIO_IFUNC int fio_thread_equal(fio_thread_t *a, fio_thread_t *b) { return GetThreadId(*a) == GetThreadId(*b); }

/** Returns the current thread. */
FIO_IFUNC fio_thread_t fio_thread_current(void) { return GetCurrentThread(); }

/** Yields thread execution. */
FIO_IFUNC void fio_thread_yield(void) { Sleep(0); }

#endif /* FIO_THREADS_BYO */

/** Returns a thread's priority level. */
FIO_SFUNC fio_thread_priority_e fio_thread_priority(void) {
  switch(GetThreadPriority(GetCurrentThread())) {
  case THREAD_PRIORITY_LOWEST:       return FIO_THREAD_PRIORITY_LOWEST;
  case THREAD_PRIORITY_BELOW_NORMAL: return FIO_THREAD_PRIORITY_LOW;
  case THREAD_PRIORITY_NORMAL:       return FIO_THREAD_PRIORITY_NORMAL;
  case THREAD_PRIORITY_ABOVE_NORMAL: return FIO_THREAD_PRIORITY_HIGH;
  case THREAD_PRIORITY_HIGHEST:      return FIO_THREAD_PRIORITY_HIGHEST;
  default:                           return FIO_THREAD_PRIORITY_ERROR;
  }
}

/** Sets a thread's priority level. */
FIO_SFUNC int fio_thread_priority_set(fio_thread_priority_e pr) {
  int    priority;
  switch(pr){
  case FIO_THREAD_PRIORITY_ERROR: return -1;
  case FIO_THREAD_PRIORITY_LOWEST:  priority = THREAD_PRIORITY_LOWEST; break;
  case FIO_THREAD_PRIORITY_LOW:     priority = THREAD_PRIORITY_BELOW_NORMAL; break;
  case FIO_THREAD_PRIORITY_NORMAL:  priority = THREAD_PRIORITY_NORMAL; break;
  case FIO_THREAD_PRIORITY_HIGH:    priority = THREAD_PRIORITY_ABOVE_NORMAL; break;
  case FIO_THREAD_PRIORITY_HIGHEST: priority = THREAD_PRIORITY_HIGHEST; break;
  }
  return 0 - !SetThreadPriority(GetCurrentThread(), priority);
}

#ifndef FIO_THREADS_MUTEX_BYO

SFUNC int fio___thread_mutex_lazy_init(fio_thread_mutex_t *m);

FIO_IFUNC int fio_thread_mutex_init(fio_thread_mutex_t *m) { InitializeCriticalSection(m); return 0; }

/** Destroys the simple Mutex (cleanup). */
FIO_IFUNC void fio_thread_mutex_destroy(fio_thread_mutex_t *m) { DeleteCriticalSection(m); memset(m,0,sizeof(*m)); }
// clang-format on
/** Unlocks a simple Mutex, returning zero on success or -1 on error. */
FIO_IFUNC int fio_thread_mutex_unlock(fio_thread_mutex_t *m) {
  if (!m)
    return -1;
  LeaveCriticalSection(m);
  return 0;
}

/** Locks a simple Mutex, returning -1 on error. */
FIO_IFUNC int fio_thread_mutex_lock(fio_thread_mutex_t *m) {
  const fio_thread_mutex_t zero = {0};
  if (!FIO_MEMCMP(m, &zero, sizeof(zero)) && fio___thread_mutex_lazy_init(m))
    return -1;
  EnterCriticalSection(m);
  return 0;
}

/** Attempts to lock a simple Mutex, returning zero on success. */
FIO_IFUNC int fio_thread_mutex_trylock(fio_thread_mutex_t *m) {
  const fio_thread_mutex_t zero = {0};
  if (!FIO_MEMCMP(m, &zero, sizeof(zero)) && fio___thread_mutex_lazy_init(m))
    return -1;
  return TryEnterCriticalSection(m) - 1;
}
#endif /* FIO_THREADS_MUTEX_BYO */

#ifndef FIO_THREADS_COND_BYO
/** Initializes a simple conditional variable. */
FIO_IFUNC int fio_thread_cond_init(fio_thread_cond_t *c) {
  InitializeConditionVariable(c);
  return 0;
}

/** Waits on a conditional variable (MUST be previously locked). */
FIO_IFUNC int fio_thread_cond_wait(fio_thread_cond_t *c,
                                   fio_thread_mutex_t *m) {
  return 0 - !SleepConditionVariableCS(c, m, INFINITE);
}

/** Waits on a conditional variable (MUST be previously locked). */
FIO_IFUNC int fio_thread_cond_timedwait(fio_thread_cond_t *c,
                                        fio_thread_mutex_t *m,
                                        size_t milliseconds) {
  return 0 - !SleepConditionVariableCS(c, m, milliseconds);
}

/** Signals a simple conditional variable. */
FIO_IFUNC int fio_thread_cond_signal(fio_thread_cond_t *c) {
  WakeConditionVariable(c);
  return 0;
}

/** Destroys a simple conditional variable. */
FIO_IFUNC void fio_thread_cond_destroy(fio_thread_cond_t *c) { (void)(c); }
#endif /* FIO_THREADS_COND_BYO */

#endif /* FIO_OS_WIN */

/* *****************************************************************************


Multi-Threaded `memcpy` (naive and slow)


***************************************************************************** */

#ifndef FIO_MEMCPY_THREADS
#define FIO_MEMCPY_THREADS 8
#endif
#undef FIO_MEMCPY_THREADS___MINCPY
#define FIO_MEMCPY_THREADS___MINCPY (1ULL << 23)
typedef struct {
  const char *restrict dest;
  void *restrict src;
  size_t bytes;
} fio___thread_memcpy_s;

FIO_SFUNC void *fio___thread_memcpy_task(void *v_) {
  fio___thread_memcpy_s *v = (fio___thread_memcpy_s *)v_;
  FIO_MEMCPY((void *)(v->dest), (void *)(v->src), v->bytes);
  return NULL;
}

/** Multi-threaded memcpy using up to FIO_MEMCPY_THREADS threads */
FIO_SFUNC size_t fio_thread_memcpy(const void *restrict dest,
                                   void *restrict src,
                                   size_t bytes) {
  size_t i = 0, r;
  const char *restrict d = (const char *restrict)dest;
  char *restrict s = (char *restrict)src;
  fio_thread_t threads[FIO_MEMCPY_THREADS - 1];
  fio___thread_memcpy_s info[FIO_MEMCPY_THREADS - 1];
  size_t bytes_per_thread = bytes / FIO_MEMCPY_THREADS;
  if (bytes < FIO_MEMCPY_THREADS___MINCPY)
    goto finished_creating_thread;

  for (; i < (FIO_MEMCPY_THREADS - 1); ++i) {
    info[i] = (fio___thread_memcpy_s){d, s, bytes_per_thread};
    if (fio_thread_create(threads + i, fio___thread_memcpy_task, info + i))
      goto finished_creating_thread;
    d += bytes_per_thread;
    s += bytes_per_thread;
    bytes -= bytes_per_thread;
  }
finished_creating_thread:
  r = i + 1;
  FIO_MEMCPY((void *)d, (void *)s, bytes); /* memcpy reminder */
  while (i) {
    --i;
    fio_thread_join(threads + i);
  }
  return r;
}

/* *****************************************************************************
Module Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)
#if FIO_OS_WIN
#ifndef FIO_THREADS_MUTEX_BYO
/** Initializes a simple Mutex */
SFUNC int fio___thread_mutex_lazy_init(fio_thread_mutex_t *m) {
  int r = 0;
  static fio_lock_i lock = FIO_LOCK_INIT;
  /* lazy initialization */
  fio_thread_mutex_t zero = {0};
  fio_lock(&lock);
  if (!FIO_MEMCMP(m,
                  &zero,
                  sizeof(zero))) { /* retest, as this may have changed... */
    r = fio_thread_mutex_init(m);
  }
  fio_unlock(&lock);
  return r;
}
#endif /* FIO_THREADS_MUTEX_BYO */
#endif /* FIO_OS_WIN */
/* *****************************************************************************
Module Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#endif /* FIO_THREADS */
#undef FIO_THREADS
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_URL                /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                                  URI Parsing



Copyright: Boaz Segev, 2019-2021; License: ISC / MIT (choose your license)
***************************************************************************** */
#if (defined(FIO_URL) || defined(FIO_URI)) && !defined(H___FIO_URL___H)
#define H___FIO_URL___H
/** the result returned by `fio_url_parse` */
typedef struct {
  fio_buf_info_s scheme;
  fio_buf_info_s user;
  fio_buf_info_s password;
  fio_buf_info_s host;
  fio_buf_info_s port;
  fio_buf_info_s path;
  fio_buf_info_s query;
  fio_buf_info_s target;
} fio_url_s;

/**
 * Parses the URI returning it's components and their lengths (no decoding
 * performed, doesn't accept decoded URIs).
 *
 * The returned string are NOT NUL terminated, they are merely locations within
 * the original string.
 *
 * This function attempts to accept many different formats, including any of the
 * following:
 *
 * * `/complete_path?query#target`
 *
 *   i.e.: /index.html?page=1#list
 *
 * * `host:port/complete_path?query#target`
 *
 *   i.e.:
 *      example.com
 *      example.com:8080
 *      example.com/index.html
 *      example.com:8080/index.html
 *      example.com:8080/index.html?key=val#target
 *
 * * `user:password@host:port/path?query#target`
 *
 *   i.e.: user:1234@example.com:8080/index.html
 *
 * * `username[:password]@host[:port][...]`
 *
 *   i.e.: john:1234@example.com
 *
 * * `schema://user:password@host:port/path?query#target`
 *
 *   i.e.: http://example.com/index.html?page=1#list
 *
 * Invalid formats might produce unexpected results. No error testing performed.
 *
 * NOTE: the `unix`, `file` and `priv` schemas are reserved for file paths.
 */
SFUNC fio_url_s fio_url_parse(const char *url, size_t len);

/** The type used by the `FIO_URL_QUERY_EACH` iterator macro. */
typedef struct {
  fio_buf_info_s name;
  fio_buf_info_s value;
  fio_buf_info_s private___;
} fio_url_query_each_s;

/** A helper function for the `FIO_URL_QUERY_EACH` macro implementation. */
FIO_SFUNC fio_url_query_each_s fio_url_query_each_next(fio_url_query_each_s);

/** Iterates through each of the query elements. */
#define FIO_URL_QUERY_EACH(query_buf, i)                                       \
  for (fio_url_query_each_s i = fio_url_query_each_next(                       \
           (fio_url_query_each_s){.private___ = (query_buf)});                 \
       i.name.buf;                                                             \
       i = fio_url_query_each_next(i))

/* Return type for  `fio_url_is_tls` */
typedef struct {
  fio_buf_info_s key;
  fio_buf_info_s cert;
  fio_buf_info_s pass;
  bool tls;
} fio_url_tls_info_s;

/**
 * Returns TLS data associated with the URL.
 *
 * This function supports implicit TLS by scheme data for the following possible
 * values:
 *
 * - `wss`   - Secure WebSockets.
 * - `sses`  - Secure SSE (Server Sent Events).
 * - `https` - Secure HTTP.
 * - `tcps`  - Secure TCP/IP.
 * - `tls`   - Secure TCP/IP.
 * - `udps`  - Secure UDP.
 *
 * i.e.:
 *     tls://example.com/
 *     tcps://example.com/
 *     udps://example.com/
 *
 *     wss://example.com/
 *     https://example.com/
 *     sses://example.com/
 *
 * This function also supports explicit TLS by query data for the following
 * possible key-pair values:
 *
 * - `tls`                   - self-signed TLS (unless key / cert are provided).
 * - `tls=true`              - self-signed TLS (unless key / cert are provided).
 * - `tls=<file>`            - key and certificate files (same path, different
 *                             file extensions).
 * - `key=<file/env_data>`   - path or env variable name for the private key.
 * - `cert=<file/env_data>`  - path or env variable name for the public
 *                             certificate.
 *
 * - `pass`                  - password for decrypting key / cert data.
 *
 *i.e.:
 *
 *     tcp://example.com/?tls          (anonymous TLS)
 *     udp://example.com/?tls=true
 *
 *     https://example.com/?tls=key_cert_folder_or_prefix&pass=key_password
 *
 *     https://example.com/?key=key_file_or_env_var&cert=cert_file_or_env_var&pass=key_password
 *     wss://example.com/?key=key_file_or_env_var&cert=cert_file_or_env_var&pass=key_password
 *     tcp://example.com/?key=key_file_or_env_var&cert=cert_file_or_env_var&pass=key_password
 */
SFUNC fio_url_tls_info_s fio_url_is_tls(fio_url_s u);
/* *****************************************************************************
FIO_URL - Implementation (static)
***************************************************************************** */

/** A helper function for the `FIO_URL_QUERY_EACH` macro implementation. */
FIO_SFUNC fio_url_query_each_s fio_url_query_each_next(fio_url_query_each_s i) {
  i.name = i.private___;
  if (!i.name.buf)
    return i;
  char *amp = (char *)FIO_MEMCHR(i.name.buf, '&', i.name.len);
  if (amp) {
    i.name.len = amp - i.name.buf;
    i.private___.len -= i.name.len + 1;
    i.private___.buf += i.name.len + 1;
  } else {
    i.private___ = FIO_BUF_INFO0;
  }
  char *equ = (char *)FIO_MEMCHR(i.name.buf, '=', i.name.len);
  if (equ) {
    i.value.buf = equ + 1;
    i.value.len = (i.name.buf + i.name.len) - i.value.buf;
    i.name.len = equ - i.name.buf;
  } else {
    i.value = FIO_BUF_INFO0;
  }
  return i;
}

/* *****************************************************************************
FIO_URL - Implementation
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/**
 * Parses the URI returning it's components and their lengths (no decoding
 * performed, doesn't accept decoded URIs).
 *
 * The returned string are NOT NUL terminated, they are merely locations within
 * the original string.
 *
 * This function expects any of the following formats:
 *
 * * `/complete_path?query#target`
 *
 *   i.e.: /index.html?page=1#list
 *
 * * `host:port/complete_path?query#target`
 *
 *   i.e.:
 *      example.com/index.html
 *      example.com:8080/index.html
 *
 * * `schema://user:password@host:port/path?query#target`
 *
 *   i.e.: http://example.com/index.html?page=1#list
 *
 * Invalid formats might produce unexpected results. No error testing performed.
 */
SFUNC fio_url_s fio_url_parse(const char *url, size_t len) {
  /*
  Intention:
  [schema://][[user][:password]@][host.com][:port][path][?quary][#target]
  */
  const char *end = url + len;
  const char *pos = url;
  fio_url_s r = {.scheme = {.buf = (char *)url}};
  if (len == 0) {
    goto finish;
  }

  if (*pos == '/') /* start at path */
    goto start_path;

  while (pos < end && *pos && *pos != ':' && *pos != '/' && *pos != '@' &&
         *pos != '#' && *pos != '?')
    ++pos;

  if (pos == end) {
    /* was only host (path starts with '/') */
    r.host = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    goto finish;
  }

  switch (*pos) {
  case '@':
    /* username@[host] */
    r.user = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    ++pos;
    goto start_host;
  case '/':
    /* host[/path] */
    r.host = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    goto start_path;
  case '?':
    /* host?[query] */
    r.host = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    ++pos;
    goto start_query;
  case '#':
    /* host#[target] */
    r.host = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    ++pos;
    goto start_target;
  case ':':
    if (pos + 2 <= end && pos[1] == '/' && pos[2] == '/') {
      /* scheme:// */
      r.scheme.len = pos - url;
      pos += 3;
    } else {
      /* username:[password] OR */
      /* host:[port] */
      r.user = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
      ++pos;
      goto start_password;
    }
    break;
  }

  /* start_username: */
  url = pos;
  while (pos < end && *pos && *pos != ':' && *pos != '/' && *pos != '@' &&
         *pos != '#' && *pos != '?')
    ++pos;

  if (pos >= end) { /* scheme://host */
    r.host = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    goto finish;
  }

  switch (*pos) {
  case '/':
    /* scheme://host[/path] */
    r.host = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    goto start_path;
  case '@':
    /* scheme://username@[host]... */
    r.user = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    ++pos;
    goto start_host;
  case '?':
    /* scheme://host[?query] (bad)*/
    r.host = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    ++pos;
    goto start_query;
  case '#':
    /* scheme://host[#target] (bad)*/
    r.host = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    ++pos;
    goto start_query;
  case ':':
    /* scheme://username:[password]@[host]... OR */
    /* scheme://host:[port][/...] */
    r.user = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    ++pos;
    break;
  }

start_password:
  url = pos;
  while (pos < end && *pos && *pos != '/' && *pos != '@' && *pos != '?')
    ++pos;

  if (pos >= end) {
    /* was host:port */
    r.port = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    r.host = r.user;
    r.user.len = 0;
    goto finish;
  }

  switch (*pos) {
  case '?': /* fall through */
  case '/':
    r.port = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    r.host = r.user;
    r.user.len = 0;
    goto start_path;
  case '@':
    r.password = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
    ++pos;
    break;
  }

start_host:
  url = pos;
  while (pos < end && *pos && *pos != '/' && *pos != ':' && *pos != '#' &&
         *pos != '?')
    ++pos;

  r.host = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
  if (pos >= end) {
    goto finish;
  }
  switch (*pos) {
  case '/':
    /* scheme://[...@]host[/path] */
    goto start_path;
  case '?':
    /* scheme://[...@]host?[query] (bad)*/
    ++pos;
    goto start_query;
  case '#':
    /* scheme://[...@]host#[target] (bad)*/
    ++pos;
    goto start_target;
    // case ':':
    /* scheme://[...@]host:[port] */
  }
  ++pos;

  // start_port:
  url = pos;
  while (pos < end && *pos && *pos != '/' && *pos != '#' && *pos != '?')
    ++pos;

  r.port = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));

  if (pos >= end) {
    /* scheme://[...@]host:port */
    goto finish;
  }
  switch (*pos) {
  case '?':
    /* scheme://[...@]host:port?[query] (bad)*/
    ++pos;
    goto start_query;
  case '#':
    /* scheme://[...@]host:port#[target] (bad)*/
    ++pos;
    goto start_target;
    // case '/':
    /* scheme://[...@]host:port[/path] */
  }

start_path:
  url = pos;
  while (pos < end && *pos && *pos != '#' && *pos != '?')
    ++pos;

  r.path = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));

  if (pos >= end) {
    goto finish;
  }
  ++pos;
  if (pos[-1] == '#')
    goto start_target;

start_query:
  url = pos;
  while (pos < end && *pos && *pos != '#')
    ++pos;

  r.query = FIO_BUF_INFO2((char *)url, (size_t)(pos - url));
  ++pos;

  if (pos >= end)
    goto finish;

start_target:
  r.target = FIO_BUF_INFO2((char *)pos, (size_t)(end - pos));

finish:

  if (r.scheme.len == 4 && r.host.buf) { /* recognize file paths */
    uint32_t s, file_str, unix_str, priv_str;
    fio_memcpy4(&file_str, "file");
    fio_memcpy4(&unix_str, "unix");
    fio_memcpy4(&priv_str, "priv");
    fio_memcpy4(&s, r.scheme.buf);
    s |= 0x20202020U; /* downcase */
    if (s == file_str || s == unix_str || s == priv_str) {
      r.path.buf = r.scheme.buf + 7;
      r.path.len = end - (r.scheme.buf + 7);
      if (r.query.len)
        r.path.len = r.query.buf - (r.path.buf + 1);
      else if (r.target.len)
        r.path.len = r.target.buf - (r.path.buf + 1);
      r.user.len = r.password.len = r.port.len = r.host.len = 0;
    }
  } else if (!r.scheme.len && r.host.buf && r.host.buf[0] == '.') {
    r.path.len = end - r.host.buf;
    r.path.buf = r.host.buf;
    r.query.len = r.target.len = r.host.len = 0;
  }

  /* set any empty values to NULL */
  if (!r.scheme.len)
    r.scheme.buf = NULL;
  if (!r.user.len)
    r.user.buf = NULL;
  if (!r.password.len)
    r.password.buf = NULL;
  if (!r.host.len)
    r.host.buf = NULL;
  if (!r.port.len)
    r.port.buf = NULL;
  if (!r.path.len)
    r.path.buf = NULL;
  if (!r.query.len)
    r.query.buf = NULL;
  if (!r.target.len)
    r.target.buf = NULL;

  return r;
}

/* Returns TLS data associated with the URL. */
SFUNC fio_url_tls_info_s fio_url_is_tls(fio_url_s u) {
  fio_url_tls_info_s r = {0};
  switch (u.scheme.len) {
  case 3: /* wss || tls || ssl */
    r.tls =
        ((fio_buf2u32u(u.scheme.buf) | 0x20202020) == fio_buf2u32u("wss:") ||
         (fio_buf2u32u(u.scheme.buf) | 0x20202020) == fio_buf2u32u("tls:") ||
         (fio_buf2u32u(u.scheme.buf) | 0x20202020) == fio_buf2u32u("ssl:"));

    break;
  case 4: /* ssse || sses || tcps || stcp || udps || sudp */
    r.tls =
        ((fio_buf2u32u(u.scheme.buf) | 0x20202020) == fio_buf2u32u("sses") ||
         (fio_buf2u32u(u.scheme.buf) | 0x20202020) == fio_buf2u32u("ssse") ||
         (fio_buf2u32u(u.scheme.buf) | 0x20202020) == fio_buf2u32u("tcps") ||
         (fio_buf2u32u(u.scheme.buf) | 0x20202020) == fio_buf2u32u("stcp") ||
         (fio_buf2u32u(u.scheme.buf) | 0x20202020) == fio_buf2u32u("udps") ||
         (fio_buf2u32u(u.scheme.buf) | 0x20202020) == fio_buf2u32u("sudp"));
    break;
  case 5: /* https */
    r.tls = ((u.scheme.buf[4] | 32) == 's' &&
             (fio_buf2u32u(u.scheme.buf) | 0x20202020) == fio_buf2u32u("http"));
    break;
  }
  if (u.query.len) { /* key=, cert=, pass=, password=*/
    fio_buf_info_s key = {0};
    fio_buf_info_s cert = {0};
    fio_buf_info_s pass = {0};
    uint32_t name;
    const uint32_t wrd_key = fio_buf2u32u("key="); /* keyword's value */
    const uint32_t wrd_tls = fio_buf2u32u("tls=");
    const uint32_t wrd_ssl = fio_buf2u32u("ssl=");
    const uint32_t wrd_cert = fio_buf2u32u("cert");
    const uint32_t wrd_true = fio_buf2u32u("true");
    const uint32_t wrd_pass = fio_buf2u32u("pass");
    const uint64_t wrd_password = fio_buf2u64u("password");
    FIO_URL_QUERY_EACH(u.query, i) { /* iterates each name=value pair */
      switch (i.name.len) {
      case 8:
        if ((fio_buf2u64u(i.name.buf) | 0x2020202020202020ULL) == wrd_password)
          pass = i.value;
        break;
      case 3:
        name = fio_buf2u32u(i.name.buf) | 0x20202020UL; /* '=' stays the same */
        name &= fio_buf2u32u("\xFF\xFF\xFF\x00");
        name |= fio_buf2u32u("\x00\x00\x00="); /* in case there was no = sign */
        if (name == wrd_key) {
          if (i.value.len)
            key = i.value;
        } else if (name == wrd_tls || name == wrd_ssl) {
          r.tls = 1;
          if (i.value.len && !(i.value.len == 1 && i.value.buf[0] == '1') &&
              !(i.value.len == 4 &&
                (fio_buf2u32u(i.value.buf) | 0x20202020UL) == wrd_true))
            cert = key = i.value;
        }
        break;
      case 4:
        name = fio_buf2u32u(i.name.buf) | 0x20202020UL;
        if (name == wrd_cert)
          cert = i.value;
        else if (name == wrd_pass)
          pass = i.value;
        break;
      }
    }
    if (key.len && cert.len) {
      r.key = key;
      r.cert = cert;
      if (pass.len)
        r.pass = pass;
      r.tls = 1;
    }
  }
  FIO_LOG_DDEBUG2(
      "URL TLS detection:\n\t%s\n\tkey: %.*s\n\tcert: %.*s\n\tpass: %.*s",
      (r.tls ? "Secure" : "plaintext"),
      (int)r.key.len,
      r.key.buf,
      (int)r.cert.len,
      r.cert.buf,
      (int)r.pass.len,
      r.pass.buf);
  return r;
}
/* *****************************************************************************
FIO_URL - Cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */
#endif /* FIO_URL || FIO_URI */
#undef FIO_URL
#undef FIO_URI
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_FILES              /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                   Common File Operations (POSIX style)



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_FILES) && !defined(H___FIO_FILES___H)
#define H___FIO_FILES___H

#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>

/* *****************************************************************************
File Helper API
***************************************************************************** */

/**
 * Opens `filename`, returning the same as values as `open` on POSIX systems.
 *
 * If `path` starts with a `"~/"` than it will be relative to the user's home
 * folder (on Windows, testing for `"~\"`).
 */
SFUNC int fio_filename_open(const char *filename, int flags);

/** Returns 1 if `path` does folds backwards (OS separator dependent). */
SFUNC int fio_filename_is_unsafe(const char *path);

/** Returns 1 if `path` does folds backwards (has "/../" or "//"). */
SFUNC int fio_filename_is_unsafe_url(const char *path);

/** Creates a temporary file, returning its file descriptor. */
SFUNC int fio_filename_tmp(void);

/**
 * Overwrites `filename` with the data in the buffer.
 *
 * If `path` starts with a `"~/"` than it will be relative to the user's home
 * folder (on Windows, testing for `"~\"`).
 *
 * Returns -1 on error or 0 on success. On error, the state of the file is
 * undefined (may be doesn't exit / nothing written / partially written).
 */
FIO_IFUNC int fio_filename_overwrite(const char *filename,
                                     const void *buf,
                                     size_t len);

/** Returns the file size (or 0 on both error / empty file). */
FIO_IFUNC size_t fio_filename_size(const char *filename);

/** Returns the file size (or 0 on both error / empty file). */
FIO_IFUNC size_t fio_fd_size(int fd);

/**
 * Returns the file type (or 0 on both error).
 *
 * See: https://www.man7.org/linux/man-pages/man7/inode.7.html
 */
FIO_IFUNC size_t fio_filename_type(const char *filename);

/**
 * Returns the file type (or 0 on both error).
 *
 * See: https://www.man7.org/linux/man-pages/man7/inode.7.html
 */
FIO_IFUNC size_t fio_fd_type(int fd);

/** Tests if `filename` references a folder. Returns -1 on error. */
#define fio_filename_is_folder(filename)                                       \
  (fio_filename_type((filename)) == S_IFDIR)

/**
 * Writes data to a file handle, returning the number of bytes written.
 *
 * Returns -1 on error.
 *
 * Since some systems have a limit on the number of bytes that can be written at
 * a time, this function fragments the system calls into smaller `write` blocks,
 * allowing large data to be written.
 *
 * If the file descriptor is non-blocking, test errno for EAGAIN / EWOULDBLOCK.
 */
FIO_IFUNC ssize_t fio_fd_write(int fd, const void *buf, size_t len);

/**
 * Reads up to `len` bytes from `fd`, returning the number of bytes read.
 *
 * Returns 0 if no bytes were read or on error.
 *
 * Since some systems have a limit on the number of bytes that can be read at
 * a time, this function fragments the system calls into smaller `read` blocks,
 * allowing large data to be read.
 *
 * If the file descriptor is non-blocking, test errno for EAGAIN / EWOULDBLOCK.
 */
FIO_IFUNC size_t fio_fd_read(int fd, void *buf, size_t len, off_t start_at);

/** A result type for the filename parsing helper. */
typedef struct {
  fio_buf_info_s folder;
  fio_buf_info_s basename;
  fio_buf_info_s ext;
} fio_filename_s;

/** Parses a file name to folder, base name and extension (zero-copy). */
SFUNC fio_filename_s fio_filename_parse(const char *filename);

/** Parses a file name to folder, base name and extension (zero-copy). */
SFUNC fio_filename_s fio_filename_parse2(const char *filename, size_t len);
/**
 * Returns offset for the next `token` in `fd`, or -1 if reached  EOF.
 *
 * This will use `FIO_FD_FIND_BLOCK` bytes on the stack to read the file in a
 * loop.
 *
 * Pros: limits memory use and (re)allocations, easier overflow protection.
 *
 * Cons: may be slower, as data will most likely be copied again from the file.
 */
SFUNC size_t fio_fd_find_next(int fd, char token, size_t start_at);
/** End of file value for `fio_fd_find_next` */
#define FIO_FD_FIND_EOF ((size_t)-1)
#ifndef FIO_FD_FIND_BLOCK
/** Size on the stack used by `fio_fd_find_next` for each read cycle. */
#define FIO_FD_FIND_BLOCK 4096
#endif

#if FIO_OS_WIN
#define FIO_FOLDER_SEPARATOR '\\'
/** Duplicates the file handle (int)*/
#define fio_file_dup(fd) _dup(fd)
#else
#define FIO_FOLDER_SEPARATOR '/'
/** Duplicates the file handle (int)*/
#define fio_file_dup(fd)     dup(fd)
#endif /* FIO_OS_WIN */

/* *****************************************************************************
File Helper Inline Implementation
***************************************************************************** */

/**
 * Writes data to a file, returning the number of bytes written.
 *
 * Returns -1 on error.
 *
 * Since some systems have a limit on the number of bytes that can be written at
 * a single time, this function fragments the system calls into smaller `write`
 * blocks, allowing large data to be written.
 *
 * If the file descriptor is non-blocking, test errno for EAGAIN / EWOULDBLOCK.
 */
FIO_IFUNC ssize_t fio_fd_write(int fd, const void *buf_, size_t len) {
  if (fd == -1 || !buf_ || !len)
    return -1;
  ssize_t total = 0;
  const char *buf = (const char *)buf_;
  const size_t write_limit = (1ULL << 17);
  while (len > (write_limit - 1)) {
    ssize_t w = write(fd, buf, write_limit);
    if (w > 0) {
      len -= w;
      buf += w;
      total += w;
      continue;
    }
    if (w == -1 && errno == EINTR)
      continue;
    if (total == 0)
      return -1;
    return total;
  }
  while (len) {
    ssize_t w = write(fd, buf, len);
    if (w > 0) {
      len -= w;
      buf += w;
      total += w;
      continue;
    }
    if (w == -1 && errno == EINTR)
      continue;
    if (total == 0)
      return -1;
    return total;
  }
  return total;
}

/**
 * Overwrites `filename` with the data in the buffer.
 *
 * If `path` starts with a `"~/"` than it will be relative to the user's home
 * folder (on Windows, testing for `"~\"`).
 */
FIO_IFUNC int fio_filename_overwrite(const char *filename,
                                     const void *buf,
                                     size_t len) {
  int fd = fio_filename_open(filename, O_RDWR | O_CREAT | O_TRUNC);
  if (fd == -1)
    return -1;
  ssize_t w = fio_fd_write(fd, buf, len);
  close(fd);
  if ((size_t)w != len)
    return -1;
  return 0;
}

/**
 * Reads up to `len` bytes from `fd`, returning the number of bytes read.
 *
 * Since some systems have a limit on the number of bytes that can be read at
 * a time, this function fragments the system calls into smaller `read` blocks,
 * allowing large data to be read.
 *
 * If the file descriptor is non-blocking, test errno for EAGAIN / EWOULDBLOCK.
 */
FIO_IFUNC size_t fio_fd_read(int fd, void *buf, size_t len, off_t start_at) {
  size_t r = 0;
  if (fd == -1 || !len || !buf) {
    errno = ENOENT;
    return r;
  }
  char *d = (char *)buf;
  for (;;) {
    const size_t to_read = /* use read sizes of up to 27 bits */
        (len & (((size_t)1 << 27) - 1)) | ((!!(len >> 27)) << 27);
    ssize_t act;
#if (_POSIX_C_SOURCE + 1) > 200809L
    if ((act = pread(fd, d + r, to_read, start_at)) > 0) {
      r += act;
      len -= act;
      start_at += act;
      if (!len)
        return r;
      continue;
    }
#else
    if ((off_t)lseek(fd,
                     (start_at + (start_at < 0)),
                     ((start_at < 0) ? SEEK_END : SEEK_SET)) == (off_t)-1) {
      if (errno == EINTR)
        continue;
      return -1;
    }
    if ((act = read(fd, d + r, to_read)) > 0) {
      r += act;
      len -= act;
      start_at += act;
      if (!len)
        return r;
      continue;
    }
#endif
    if (act == -1 && errno == EINTR)
      continue;
    return r;
  }
}

/* *****************************************************************************
File Stat In-lined Helpers
***************************************************************************** */

FIO_IFUNC size_t fio_filename_size(const char *filename) {
  size_t r = 0;
  struct stat stt;
  if (stat(filename, &stt))
    return r;
  return (r = stt.st_size);
}

FIO_IFUNC size_t fio_fd_size(int fd) {
  size_t r = 0;
  struct stat stt;
  if (fd == -1)
    return r;
  if (fstat(fd, &stt))
    return r;
  return (r = stt.st_size);
}

FIO_IFUNC size_t fio_filename_type(const char *filename) {
  size_t r = 0;
  struct stat stt;
  if (stat(filename, &stt))
    return r;
  return (r = (size_t)((stt.st_mode & S_IFMT)));
}

FIO_IFUNC size_t fio_fd_type(int fd) {
  size_t r = 0;
  struct stat stt;
  if (fd == -1)
    return r;
  if (fstat(fd, &stt))
    return r;
  return (r = (size_t)((stt.st_mode & S_IFMT)));
}

/* *****************************************************************************
File Helper Implementation
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/**
 * Opens `filename`, returning the same as values as `open` on POSIX systems.
 *
 * If `path` starts with a `"~/"` than it will be relative to the user's home
 * folder (on Windows, testing for `"~\"`).
 */
SFUNC int fio_filename_open(const char *filename, int flags) {
  int fd = -1;
  /* POSIX implementations. */
  if (filename == NULL)
    return fd;
  char *path = NULL;
  size_t path_len = 0;

  if (filename[0] == '~' &&
      (filename[1] == FIO_FOLDER_SEPARATOR || filename[1] == '/')) {
    char *home = getenv("HOME");
    if (home) {
      size_t filename_len = FIO_STRLEN(filename);
      size_t home_len = FIO_STRLEN(home);
      if ((home_len + filename_len) >= (1 << 16)) {
        /* too long */
        FIO_LOG_ERROR("couldn't open file, as filename is too long %.*s...",
                      (int)16,
                      (filename_len >= 16 ? filename : home));
        return fd;
      }
      if (home[home_len - 1] == FIO_FOLDER_SEPARATOR ||
          home[home_len - 1] == '/')
        --home_len;
      path_len = home_len + filename_len - 1;
      path =
          (char *)FIO_MEM_REALLOC_(NULL, 0, sizeof(*path) * (path_len + 1), 0);
      if (!path)
        return fd;
      FIO_MEMCPY(path, home, home_len);
      FIO_MEMCPY(path + home_len, filename + 1, filename_len);
      path[path_len] = 0;
      filename = path;
    }
  }
  fd = open(filename, flags, (S_IWUSR | S_IRUSR));
  if (path) {
    FIO_MEM_FREE_(path, path_len + 1);
  }
  return fd;
}

/** Returns 1 if `path` does folds backwards (has "/../" or "//"). */
SFUNC int fio_filename_is_unsafe(const char *path) {
#if FIO_OS_WIN
  const char sep = '\\';
#else
  const char sep = '/';
#endif
  for (;;) {
    if (!path)
      return 0;
    if (path[0] == sep && path[1] == sep)
      return 1;
    if (path[0] == sep && path[1] == '.' && path[2] == '.' && path[3] == sep)
      return 1;
    ++path;
    path = strchr(path, sep);
  }
}

/** Returns 1 if `path` does folds backwards (has "/../" or "//"). */
SFUNC int fio_filename_is_unsafe_url(const char *path) {
  const char sep = '/';
  for (;;) {
    if (!path)
      return 0;
    if (path[0] == sep && path[1] == sep)
      return 1;
    if (path[0] == sep && path[1] == '.' && path[2] == '.' && path[3] == sep)
      return 1;
    ++path;
    path = strchr(path, sep);
  }
}

/** Creates a temporary file, returning its file descriptor. */
SFUNC int fio_filename_tmp(void) {
  // create a temporary file to contain the data.
  int fd;
  char name_template[512];
  size_t len = 0;
  const char sep = FIO_FOLDER_SEPARATOR;
  const char *tmp = NULL;

  if (!tmp)
    tmp = getenv("TMPDIR");
  if (!tmp)
    tmp = getenv("TMP");
  if (!tmp)
    tmp = getenv("TEMP");
#if defined(P_tmpdir)
  if (!tmp && sizeof(P_tmpdir) < 464 && sizeof(P_tmpdir) > 0) {
    tmp = P_tmpdir;
  }
#endif
  if (tmp && (len = FIO_STRLEN(tmp)) && len < 464) {
    FIO_MEMCPY(name_template, tmp, len);
    len -= (tmp[len - 1] == sep || tmp[len - 1] == '/');
  } else {
    /* use current folder */
    name_template[len++] = '.';
  }
#ifdef O_TMPFILE
  name_template[len] = 0;
  fd = open(name_template, O_TMPFILE | O_EXCL | O_RDWR, S_IRUSR | S_IWUSR);
  if (fd != -1)
    return fd;
#endif
  name_template[len++] = sep;
  FIO_MEMCPY(name_template + len, "facil_io_tmp_", 13);
  len += 13;
  len += fio_ltoa(name_template + len, fio_rand64(), 32);
  do {
    fio_ltoa(name_template + len, fio_rand64(), 32);
    fd = open(name_template, O_CREAT | O_EXCL | O_RDWR, S_IRUSR | S_IWUSR);
  } while (fd == -1 && errno == EEXIST);
  return fd;
  (void)tmp;
}

/** Parses a file name to folder, base name and extension (zero-copy). */
SFUNC fio_filename_s fio_filename_parse(const char *filename) {
  fio_filename_s r = {{0}};
  if (!filename || !filename[0])
    return r;
  const char *pos = filename;
  r.basename.buf = (char *)filename;
  for (;;) {
    switch (*pos) {
    case 0:
      if (r.ext.buf) {
        r.ext.len = pos - r.ext.buf;
        if (!r.basename.len) {
          r.basename = FIO_BUF_INFO2(--r.ext.buf, ++r.ext.len);
          r.ext.buf = NULL;
          r.ext.len = 0;
        }
      } else {
        r.basename.len = (size_t)(pos - r.basename.buf);
      }
      if (!r.folder.len)
        r.folder.buf = NULL;
      if (!r.basename.len)
        r.basename.buf = NULL;
      if (!r.ext.len)
        r.ext.buf = NULL;
      return r;
#ifdef FIO_OS_WIN
    case '/': /* pass through (on windows test both variants) */
#endif
    case FIO_FOLDER_SEPARATOR:
      r.folder.buf = (char *)filename;
      r.folder.len = (size_t)(pos - filename) + 1;
      r.basename.buf = (char *)pos + 1;
      r.ext.buf = NULL;
      r.basename.len = 0;
      break;
    case '.':
      if (!r.ext.buf) {
        r.ext.buf = (char *)pos + 1;
        r.basename.len = (char *)pos - r.basename.buf;
      }
      break;
    }
    ++pos;
  }
}

/** Parses a file name to folder, base name and extension (zero-copy). */
SFUNC fio_filename_s fio_filename_parse2(const char *filename, size_t len) {
  fio_filename_s r = {{0}};
  if (!filename || !filename[0])
    return r;
  const char *pos = filename;
  const char *end = filename + len;
  r.basename.buf = (char *)filename;
  for (;;) {
    if (pos == end)
      goto done;
    switch (*pos) {
    case 0:
    done:
      if (r.ext.buf) {
        r.ext.len = pos - r.ext.buf;
        if (!r.basename.len) {
          r.basename = FIO_BUF_INFO2(--r.ext.buf, ++r.ext.len);
          r.ext.buf = NULL;
          r.ext.len = 0;
        }
      } else {
        r.basename.len = (size_t)(pos - r.basename.buf);
      }
      if (!r.folder.len)
        r.folder.buf = NULL;
      if (!r.basename.len)
        r.basename.buf = NULL;
      if (!r.ext.len)
        r.ext.buf = NULL;
      return r;
#ifdef FIO_OS_WIN
    case '/': /* pass through (on windows test both variants) */
#endif
    case FIO_FOLDER_SEPARATOR:
      r.folder.buf = (char *)filename;
      r.folder.len = (size_t)(pos - filename) + 1;
      r.basename.buf = (char *)pos + 1;
      r.ext.buf = NULL;
      r.basename.len = 0;
      break;
    case '.':
      if (!r.ext.buf) {
        r.ext.buf = (char *)pos + 1;
        r.basename.len = (char *)pos - r.basename.buf;
      }
      break;
    }
    ++pos;
  }
}
/** Returns index for next `token` in `fd`, or -1 at EOF. */
SFUNC size_t fio_fd_find_next(int fd, char token, size_t start_at) {
  size_t r = FIO_FD_FIND_EOF;
  if (fd == -1 || start_at == FIO_FD_FIND_EOF)
    return r;
  char buf[FIO_FD_FIND_BLOCK];
  for (;;) {
    size_t l = fio_fd_read(fd, buf, (size_t)FIO_FD_FIND_BLOCK, (off_t)start_at);
    if (!l)
      return r;
    char *pos = (char *)FIO_MEMCHR(buf, token, l);
    if (!pos) {
      start_at += l;
      continue;
    }
    r = start_at + (size_t)(pos - buf);
    return r;
  }
}

/* *****************************************************************************
Module Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#endif /* FIO_FILES */
#undef FIO_FILES
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_ATOL               /* Development inclusion - ignore line */
#define FIO_JSON               /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                                JSON Parsing


Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_JSON) && !defined(H___FIO_JSON___H)
#define H___FIO_JSON___H

#ifndef FIO_JSON_MAX_DEPTH
/** Maximum allowed JSON nesting level. Values above 64K might fail. */
#define FIO_JSON_MAX_DEPTH 512
#endif

#ifndef FIO_JSON_USE_FIO_ATON
#define FIO_JSON_USE_FIO_ATON 0
#endif

/** The JSON parser settings. */
typedef struct {
  /** NULL object was detected. Returns new object as `void *`. */
  void *(*on_null)(void);
  /** TRUE object was detected. Returns new object as `void *`. */
  void *(*on_true)(void);
  /** FALSE object was detected. Returns new object as `void *`. */
  void *(*on_false)(void);
  /** Number was detected (long long). Returns new object as `void *`. */
  void *(*on_number)(int64_t i);
  /** Float was detected (double).Returns new object as `void *`.  */
  void *(*on_float)(double f);
  /** (escaped) String was detected. Returns a new String as `void *`. */
  void *(*on_string)(const void *start, size_t len);
  /** (unescaped) String was detected. Returns a new String as `void *`. */
  void *(*on_string_simple)(const void *start, size_t len);
  /** Dictionary was detected. Returns ctx to hash map or NULL on error. */
  void *(*on_map)(void *ctx, void *at);
  /** Array was detected. Returns ctx to array or NULL on error. */
  void *(*on_array)(void *ctx, void *at);
  /** Array was detected. Returns non-zero on error. */
  int (*map_push)(void *ctx, void *key, void *value);
  /** Array was detected. Returns non-zero on error. */
  int (*array_push)(void *ctx, void *value);
  /** Called when an array object (`ctx`) appears done. */
  int (*array_finished)(void *ctx);
  /** Called when a map object (`ctx`) appears done. */
  int (*map_finished)(void *ctx);
  /** Called when context is expected to be an array (i.e., fio_json_update). */
  int (*is_array)(void *ctx);
  /** Called when context is expected to be a map (i.e., fio_json_update). */
  int (*is_map)(void *ctx);
  /** Called for the `key` element in case of error or NULL value. */
  void (*free_unused_object)(void *ctx);
  /** the JSON parsing encountered an error - what to do with ctx? */
  void *(*on_error)(void *ctx);
} fio_json_parser_callbacks_s;

/** The JSON return type. */
typedef struct {
  void *ctx;
  size_t stop_pos;
  int err;
} fio_json_result_s;

/**
 * The facil.io JSON parser is a non-strict parser, with support for trailing
 * commas in collections, new-lines in strings, extended escape characters and
 * octal, hex and binary numbers.
 *
 * The parser allows for streaming data and decouples the parsing process from
 * the resulting data-structure by calling static callbacks for JSON related
 * events.
 *
 * Returns the number of bytes consumed before parsing stopped (due to either
 * error or end of data). Stops as close as possible to the end of the buffer or
 * once an object parsing was completed.
 */
SFUNC fio_json_result_s fio_json_parse(fio_json_parser_callbacks_s *settings,
                                       const char *json_string,
                                       const size_t len);

/* *****************************************************************************
JSON Parsing - Implementation - Helpers and Callbacks


Note: static Callacks must be implemented in the C file that uses the parser

Note: a Helper API is provided for the parsing implementation.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

// typedef struct {
//   struct {
//     uintptr_t start;
//     uintptr_t end;
//   } instructions[16];
//   uint32_t count;
// } fio___json_cb_queue_s;

typedef struct {
  fio_json_parser_callbacks_s cb;
  void *ctx;
  void *key;
  const char *pos;
  const char *end;
  uint32_t depth;
  int32_t error;
} fio___json_state_s;

FIO_SFUNC void *fio___json_consume(fio___json_state_s *s);

#if 0 /* Used for Debugging */
#define FIO_JSON___PRINT_STEP(s, step_name)                                    \
  FIO_LOG_DEBUG2("JSON " step_name " starting at: %.*s",                       \
                 (int)((s->end - s->pos) > 16 ? 16 : (s->end - s->pos)),       \
                 s->pos)
#else
#define FIO_JSON___PRINT_STEP(s, step_name)
#endif

FIO_IFUNC int fio___json_consume_whitespace(fio___json_state_s *s) {
  FIO_JSON___PRINT_STEP(s, "white space");
  while (s->pos < s->end) {
    if (!(((uint8_t)*s->pos == 0x09U) | ((uint8_t)*s->pos == 0x0AU) |
          ((uint8_t)*s->pos == 0x0DU) | ((uint8_t)*s->pos == 0x20U)))
      return 0;
    ++s->pos;
  }
  return (s->error = -1);
}
FIO_IFUNC int fio___json_consume_comma(fio___json_state_s *s) {
  FIO_JSON___PRINT_STEP(s, "comma");
  fio___json_consume_whitespace(s);
  if (*s->pos != ',')
    return -1;
  fio___json_consume_whitespace(s);
  return 0;
}
FIO_IFUNC int fio___json_consume_colon(fio___json_state_s *s) {
  FIO_JSON___PRINT_STEP(s, "colon");
  fio___json_consume_whitespace(s);
  if (*s->pos != ':')
    return -1;
  fio___json_consume_whitespace(s);
  return 0;
}

FIO_SFUNC void *fio___json_consume_infinit(fio___json_state_s *s,
                                           _Bool negative) {
  FIO_JSON___PRINT_STEP(s, "infinity");
  const uint64_t inf64 = fio_buf2u64u("infinity");
  const uint16_t inf16 = fio_buf2u16u("nf");
  uint64_t tst64;
  uint16_t tst16;
  if (s->pos + 3 > s->end)
    goto buffer_error;
  tst16 = (fio_buf2u16u(s->pos + 1) | (uint16_t)0x2020U);
  if (tst16 == inf16) {
    if (s->pos + 7 < s->end) {
      tst64 = (fio_buf2u64u(s->pos) | (uint64_t)0x2020202020202020ULL);
      s->pos += (tst64 == inf64) * 5;
    }
    s->pos += 3;
    return s->cb.on_float(negative ? (INFINITY * -1) : INFINITY);
  }
buffer_error:
  s->error = 1;
  return NULL;
}

FIO_SFUNC void *fio___json_consume_number(fio___json_state_s *s) {
  FIO_JSON___PRINT_STEP(s, "number");
#if FIO_JSON_USE_FIO_ATON
  fio_aton_s aton = fio_aton((char **)&s->pos);
  return aton.is_float ? s->cb.on_float(aton.f) : s->cb.on_number(aton.i);
#else
  const char *tst = s->pos;
  uint64_t i;
  double f;
  _Bool negative = (tst[0] == '-') | (tst[0] == '+');
  _Bool hex = 0;
  _Bool binary = 0;
  long ilimit = 19 + negative;
  tst += negative;
  if (tst + 1 > s->end)
    goto buffer_overflow;
  if ((tst[0] | 0x20) == 'i')
    goto is_inifinity;
  tst += (tst[0] == '0' && tst + 2 < s->end);
  if ((tst[0] | 32) == 'x') {
    hex = 1;
    while ((tst < s->end) & (((tst[0] >= '0') & (tst[0] <= '9')) |
                             (((tst[0] | 32) >= 'a') & ((tst[0] | 32) <= 'f'))))
      ++tst;
  } else if ((tst[0] | 32) == 'b') {
    binary = 1;
    ilimit = 66 + negative;
    while (((tst < s->end) & (tst[0] >= '0') & (tst[0] <= '1')))
      ++tst;
  } else {
    while (((tst < s->end) & (tst[0] >= '0') & (tst[0] <= '9')))
      ++tst;
  }
  if (tst > (s->pos + ilimit) ||
      ((tst < s->end) &&
       (tst[0] == '.' || (tst[0] | 32) == 'e' || (tst[0] | 32) == 'p')))
    goto is_float;
  tst = s->pos;
  s->pos += negative;
  errno = 0;
  i = (hex              ? fio_atol16u((char **)&s->pos)
       : binary         ? fio_atol_bin((char **)&s->pos)
       : *s->pos == '0' ? fio_atol8u((char **)&s->pos)
                        : fio_atol10u((char **)&s->pos));
  if (errno == E2BIG || (((uint64_t)(1 ^ hex ^ binary) << 63) & i))
    goto is_float_from_error;
  // s->error = (errno == E2BIG);
  return s->cb.on_number(fio_u2i_limit(i, negative));
is_float_from_error:
  s->pos = tst;
  errno = 0;

is_float:
  f = fio_atof((char **)&s->pos);
  s->error = (errno == E2BIG);
  return s->cb.on_float(f);

buffer_overflow:
  s->error = 1;
  return NULL;
is_inifinity:
  ++s->pos;
  return fio___json_consume_infinit(s, negative);
#endif /* FIO_JSON_USE_FIO_ATON */
}

FIO_SFUNC void *fio___json_consume_string(fio___json_state_s *s) {
  FIO_JSON___PRINT_STEP(s, "string");
  void *(*cb)(const void *start, size_t len) = s->cb.on_string_simple;
  const char *start = ++s->pos;
  for (; s->pos < s->end; ++s->pos) {
    if (*s->pos == '"')
      return cb(start, (s->pos++) - start);
    if (*s->pos == '\\')
      cb = s->cb.on_string;
    s->pos += (*s->pos == '\\');
  }
  s->error = 1;
  return NULL;
}

FIO_SFUNC void *fio___json_consume_map(fio___json_state_s *s) {
  FIO_JSON___PRINT_STEP(s, "map");
  void *old = s->ctx;
  void *old_key = s->key;
  void *map = s->cb.on_map(s, s->key);
  s->ctx = map;
  s->key = NULL;
  if (++s->depth == FIO_JSON_MAX_DEPTH)
    goto too_deep;
  for (;;) {
    ++s->pos;
    s->key = fio___json_consume(s);
    if (s->error || !s->key)
      break;
    if (*s->pos != ':')
      break;
    ++s->pos;
    if (fio___json_consume_whitespace(s))
      break;
    void *value = fio___json_consume(s);
    s->error |= s->cb.map_push(s->ctx, s->key, value);
    s->key = NULL;
    if (s->error || fio___json_consume_whitespace(s))
      break;
    if (*s->pos != ',')
      break;
  }
  if (s->key) {
    s->error = 1;
    s->cb.free_unused_object(s->key);
  } else if (*s->pos != '}' || s->error) {
    s->error = 1;
  } else {
    ++s->pos;
  }
  --s->depth;
  s->ctx = old;
  s->key = old_key;
  s->error |= s->cb.map_finished(map);
  return map;
too_deep:
  s->ctx = old;
  s->key = old_key;
  s->error = 1;
  --s->depth;
  return map;
}
FIO_SFUNC void *fio___json_consume_array(fio___json_state_s *s) {
  FIO_JSON___PRINT_STEP(s, "array");
  void *old = s->ctx;
  void *array = s->ctx = s->cb.on_array(s, s->key);
  if (++s->depth == FIO_JSON_MAX_DEPTH)
    goto too_deep;
  for (;;) {
    ++s->pos;
    if (fio___json_consume_whitespace(s))
      break;
    if (*s->pos == ']')
      break;
    void *value = fio___json_consume(s);
    if (value)
      s->error |= s->cb.array_push(s->ctx, value);
    if (s->error || fio___json_consume_comma(s))
      break;
    if (*s->pos != ',')
      break;
  }
  if (*s->pos != ']' || s->error) {
    s->error = 1;
  } else {
    ++s->pos;
  }
  s->ctx = old;
  --s->depth;
  s->error |= s->cb.array_finished(array);
  return array;
too_deep:
  s->ctx = old;
  s->error = 1;
  --s->depth;
  return array;
}
FIO_SFUNC void *fio___json_consume_null(fio___json_state_s *s) {
  FIO_JSON___PRINT_STEP(s, "null");
  const uint32_t wrd = fio_buf2u32u("null");
  uint32_t data;
  if (s->end - s->pos < 4)
    goto on_error;
  data = fio_buf2u32u(s->pos) | (uint32_t)0x20202020;
  if (data != wrd)
    goto on_error;
  s->pos += 4;
  return s->cb.on_null();
on_error:
  s->error = 1;
  return NULL;
}
FIO_SFUNC void *fio___json_consume_true(fio___json_state_s *s) {
  FIO_JSON___PRINT_STEP(s, "true");
  const uint32_t wrd = fio_buf2u32u("true");
  uint32_t data;
  if (s->end - s->pos < 4)
    goto on_error;
  data = fio_buf2u32u(s->pos) | (uint32_t)0x20202020;
  if (data != wrd)
    goto on_error;
  s->pos += 4;
  return s->cb.on_true();
on_error:
  s->error = 1;
  return NULL;
}
FIO_SFUNC void *fio___json_consume_false(fio___json_state_s *s) {
  FIO_JSON___PRINT_STEP(s, "false");
  const uint32_t wrd = fio_buf2u32u("alse");
  uint32_t data;
  if (s->end - s->pos < 5)
    goto on_error;
  data = fio_buf2u32u(s->pos + 1) | (uint32_t)0x20202020;
  if (data != wrd)
    goto on_error;
  s->pos += 5;
  return s->cb.on_false();
on_error:
  s->error = 1;
  return NULL;
}
FIO_SFUNC void *fio___json_consume_nan(fio___json_state_s *s) {
  FIO_JSON___PRINT_STEP(s, "nan");
  const uint16_t wrd = fio_buf2u16u("an");
  uint16_t data;
  if (s->end - s->pos < 3)
    goto on_error;
  data = fio_buf2u16u(s->pos + 1) | (uint16_t)0x2020;
  if (data != wrd)
    goto on_error;
  s->pos += 3;
  return s->cb.on_float(NAN);
on_error:
  s->error = 1;
  return NULL;
}
FIO_SFUNC int fio___json_consume_comment(fio___json_state_s *s) {
  FIO_JSON___PRINT_STEP(s, "comment");
  const size_t len = (size_t)(s->end - s->pos);
  if (*s->pos == '#' || (len > 2 && s->pos[0] == '/' && s->pos[1] == '/')) {
    /* EOL style comment, C style or Bash/Ruby style*/
    const char *tmp = (const char *)FIO_MEMCHR(s->pos, '\n', len);
    if (tmp) {
      s->pos = tmp;
      return 0;
    }
    s->error = 1;
    return -1;
  }
  if ((len > 3 && s->pos[0] == '/' && s->pos[1] == '*')) {
    const char *tmp = s->pos;
    while (tmp < s->end &&
           (tmp = (const char *)FIO_MEMCHR(s->pos, '/', s->end - tmp))) {
      s->pos = ++tmp;
      if (tmp[-2] == '*')
        return 0;
    }
    s->error = 1;
    return -1;
  }
  s->error = 1;
  return -1;
}

void *fio___json_consume(fio___json_state_s *s) {
  for (;;) {
    FIO_JSON___PRINT_STEP(s, "consumption type test");
    switch (*s->pos) {
    case 0x09: /* fall through */
    case 0x0A: /* fall through */
    case 0x0D: /* fall through */
    case 0x20:
      ++s->pos;
      if (fio___json_consume_whitespace(s))
        goto set_error;
      continue;
    case '+': /* fall through */
    case '-': /* fall through */
    case '0': /* fall through */
    case '1': /* fall through */
    case '2': /* fall through */
    case '3': /* fall through */
    case '4': /* fall through */
    case '5': /* fall through */
    case '6': /* fall through */
    case '7': /* fall through */
    case '8': /* fall through */
    case '9': /* fall through */
    case 'x': /* fall through */
    case '.': /* fall through */
    case 'e': /* fall through */
    case 'E': return fio___json_consume_number(s);
    case 'i': /* fall through */
    case 'I': return fio___json_consume_infinit(s, 0);
    case '"': return fio___json_consume_string(s);
    case '{': return fio___json_consume_map(s);
    case '}': return NULL; /* don't progress, just stop. */
    case '[': return fio___json_consume_array(s);
    case ']': return NULL; /* don't progress, just stop. */
    case 'T':              /* fall through */
    case 't': return fio___json_consume_true(s);
    case 'F': /* fall through */
    case 'f': return fio___json_consume_false(s);
    case 'N': /* fall through */
    case 'n':
      return (((s->pos[1] | 32) == 'u') ? fio___json_consume_null
                                        : fio___json_consume_nan)(s);
    case '#':
    case '/':
      if (fio___json_consume_comment(s))
        goto set_error;
      continue;
    }
  set_error:
    s->error = 1;
    return NULL;
  }
}

static int fio___json_callback_noop(void *ctx) {
  return 0;
  (void)ctx;
}
static void *fio___json_callback_noop2(void *ctx) { return ctx; }

FIO_SFUNC int fio___json_callbacks_validate(fio_json_parser_callbacks_s *cb) {
  if (!cb)
    goto is_invalid;

  if (!cb->on_string)
    cb->on_string = cb->on_string_simple;
  if (!cb->on_string_simple)
    cb->on_string_simple = cb->on_string;

  if (!cb->on_null)
    goto is_invalid;
  if (!cb->on_true)
    goto is_invalid;
  if (!cb->on_false)
    goto is_invalid;
  if (!cb->on_number)
    goto is_invalid;
  if (!cb->on_float)
    goto is_invalid;
  if (!cb->on_string)
    goto is_invalid;
  if (!cb->on_map)
    goto is_invalid;
  if (!cb->on_array)
    goto is_invalid;
  if (!cb->map_push)
    goto is_invalid;
  if (!cb->array_push)
    goto is_invalid;
  if (!cb->free_unused_object)
    goto is_invalid;
  if (!cb->array_finished)
    cb->array_finished = fio___json_callback_noop;
  if (!cb->map_finished)
    cb->map_finished = fio___json_callback_noop;
  if (!cb->is_array)
    cb->is_array = fio___json_callback_noop;
  if (!cb->is_map)
    cb->is_map = fio___json_callback_noop;
  if (!cb->on_error)
    cb->on_error = fio___json_callback_noop2;
  return 0;
is_invalid:
  return -1;
}
/**
 * Returns the number of bytes consumed. Stops as close as possible to the end
 * of the buffer or once an object parsing was completed.
 */
SFUNC fio_json_result_s fio_json_parse(fio_json_parser_callbacks_s *callbacks,
                                       const char *start,
                                       const size_t len) {
  fio_json_result_s r = {.stop_pos = 0, .err = 0};
  fio___json_state_s state;
  if (fio___json_callbacks_validate(callbacks))
    goto missing_callback;

  state = (fio___json_state_s){
      .cb = callbacks[0],
      .pos = start,
      .end = start + len,
  };

  /* skip BOM, if exists */
  if (len >= 3 && state.pos[0] == (char)0xEF && state.pos[1] == (char)0xBB &&
      state.pos[2] == (char)0xBF) {
    state.pos += 3;
    if (len == 3)
      goto finish;
  }
  r.ctx = fio___json_consume(&state);
  r.err = state.error;
  r.stop_pos = state.pos - start;
  if (state.error)
    goto failed;
finish:
  return r;
failed:
  FIO_LOG_DEBUG(
      "JSON parsing failed after:\n%.*s",
      ((state.end - state.pos > 48) ? 48 : ((int)(state.end - state.pos))),
      state.pos);
  r.ctx = callbacks->on_error(r.ctx);
  return r;

missing_callback:
  FIO_LOG_ERROR("JSON parser missing a critical callback!");
  r.err = 1;
  return r;
}

/** Dictionary was detected. Returns ctx to hash map or NULL on error. */
FIO_SFUNC void *fio___json_parse_update_on_map(void *ctx, void *at) {
  void **ex_data = (void **)ctx;
  fio_json_parser_callbacks_s *cb = (fio_json_parser_callbacks_s *)ex_data[0];
  ctx = ex_data[1];
  fio___json_state_s *s = (fio___json_state_s *)ex_data[2];
  s->cb.on_map = cb->on_map;
  s->cb.on_array = cb->on_array;
  if (ctx && !s->cb.is_map(ctx))
    return NULL;
  else if (!ctx)
    ctx = cb->on_map(ctx, at);
  return ctx;
}
/** Array was detected. Returns ctx to array or NULL on error. */
FIO_SFUNC void *fio___json_parse_update_on_array(void *ctx, void *at) {
  void **ex_data = (void **)ctx;
  fio_json_parser_callbacks_s *cb = (fio_json_parser_callbacks_s *)ex_data[0];
  ctx = ex_data[1];
  fio___json_state_s *s = (fio___json_state_s *)ex_data[2];
  s->cb.on_map = cb->on_map;
  s->cb.on_array = cb->on_array;
  if (ctx && !s->cb.is_array(ctx))
    return NULL;
  else if (!ctx)
    ctx = cb->on_array(ctx, at);

  return ctx;
}

/**
 * Use only when `ctx` is an object and JSON data is wrapped in an object (of
 * the same type).
 *
 * i.e., update an array or hash map.
 */
SFUNC fio_json_result_s fio_json_parse_update(fio_json_parser_callbacks_s *s,
                                              void *ctx,
                                              const char *start,
                                              const size_t len) {
  fio_json_result_s r = {.stop_pos = 0, .err = 0};
  fio_json_parser_callbacks_s callbacks;
  callbacks.on_map = fio___json_parse_update_on_map;
  callbacks.on_array = fio___json_parse_update_on_array;
  fio___json_state_s state;
  void *ex_data[3] = {s, ctx, &state};

  if (!s->is_array)
    goto missing_callback;
  if (!s->is_map)
    goto missing_callback;
  if (fio___json_callbacks_validate(s))
    goto missing_callback;

  callbacks = *s;
  state = (fio___json_state_s){
      .cb = callbacks,
      .pos = start,
      .end = start + len,
  };
  state.ctx = (void *)ex_data;
  /* skip BOM, if exists */
  if (len >= 3 && state.pos[0] == (char)0xEF && state.pos[1] == (char)0xBB &&
      state.pos[2] == (char)0xBF) {
    state.pos += 3;
    if (len == 3)
      goto finish;
  }
  r.ctx = fio___json_consume(&state);
  r.err = state.error;
  r.stop_pos = state.pos - start;
  if (state.error)
    goto failed;
finish:
  return r;
failed:
  FIO_LOG_DEBUG(
      "JSON parsing failed after:\n%.*s",
      ((state.end - state.pos > 48) ? 48 : ((int)(state.end - state.pos))),
      state.pos);
  r.ctx = s->on_error(r.ctx);
  return r;
missing_callback:
  FIO_LOG_ERROR("JSON parser missing a critical callback!");
  r.err = 1;
  return r;
}
#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_JSON
#endif /* FIO_JSON */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_SOCK               /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                            Basic Socket Helpers



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_SOCK) && !defined(H___FIO_SOCK___H)
#define H___FIO_SOCK___H

/* *****************************************************************************
OS specific patches.
***************************************************************************** */
#if FIO_OS_WIN
#if _MSC_VER
#pragma comment(lib, "Ws2_32.lib")
#endif
#include <iphlpapi.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#ifdef AF_UNIX
#include <afunix.h>
#endif
#ifndef FIO_SOCK_FD_ISVALID
#define FIO_SOCK_FD_ISVALID(fd) ((size_t)(fd) <= (size_t)0x7FFFFFFF)
#endif
/** Acts as POSIX write. Use this macro for portability with WinSock2. */
#define fio_sock_write(fd, data, len) send((fd), (data), (len), 0)
/** Acts as POSIX read. Use this macro for portability with WinSock2. */
#define fio_sock_read(fd, buf, len) recv((fd), (buf), (len), 0)
/** Acts as POSIX close. Use this macro for portability with WinSock2. */
#define fio_sock_close(fd) closesocket(fd)
/** Protects against type size overflow on Windows, where FD > MAX_INT. */
FIO_IFUNC int fio_sock_accept(int s, struct sockaddr *addr, int *addrlen) {
  int r = -1;
  SOCKET c = accept(s, addr, addrlen);
  if (c == INVALID_SOCKET)
    return r;
  if (FIO_SOCK_FD_ISVALID(c)) {
    r = (int)c;
    return r;
  }
  closesocket(c);
  errno = ERANGE;
  FIO_LOG_ERROR("Windows SOCKET value overflowed int limits (was: %zu)",
                (size_t)c);
  return r;
}
#define accept fio_sock_accept
#define poll   WSAPoll
/** Acts as POSIX dup. Use this for portability with WinSock2. */
FIO_IFUNC int fio_sock_dup(int original) {
  int fd = -1;
  SOCKET tmpfd = INVALID_SOCKET;
  WSAPROTOCOL_INFO info;
  if (!WSADuplicateSocket(original, GetCurrentProcessId(), &info) &&
      (tmpfd = WSASocket(AF_UNSPEC, SOCK_STREAM, IPPROTO_TCP, &info, 0, 0)) !=
          INVALID_SOCKET) {
    if (FIO_SOCK_FD_ISVALID(tmpfd))
      fd = (int)tmpfd;
    else
      fio_sock_close(tmpfd);
  }
  return fd;
}

#elif FIO_HAVE_UNIX_TOOLS
#include <arpa/inet.h>
#include <fcntl.h>
#include <netdb.h>
#include <poll.h>
#include <sys/resource.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/un.h>
#include <unistd.h>
#ifndef FIO_SOCK_FD_ISVALID
#define FIO_SOCK_FD_ISVALID(fd) ((int)(fd) != (int)-1)
#endif
/** Acts as POSIX write. Use this macro for portability with WinSock2. */
#define fio_sock_write(fd, data, len)      write((fd), (data), (len))
/** Acts as POSIX read. Use this macro for portability with WinSock2. */
#define fio_sock_read(fd, buf, len)        read((fd), (buf), (len))
/** Acts as POSIX dup. Use this macro for portability with WinSock2. */
#define fio_sock_dup(fd)                   dup(fd)
/** Acts as POSIX close. Use this macro for portability with WinSock2. */
#define fio_sock_close(fd)                 close(fd)
/** Acts as POSIX accept. Use this macro for portability with WinSock2. */
#define fio_sock_accept(fd, addr, addrlen) accept(fd, addr, addrlen)
#else
#error FIO_SOCK requires a supported OS (Windows / POSIX).
#endif

/* Set to 1 if in need to debug unexpected IO closures. */
#if defined(DEBUG) && 0
#define close(fd)                                                              \
  do {                                                                         \
    FIO_LOG_DWARNING("(%d) (" FIO__FILE__ ":" FIO_MACRO2STR(                   \
                         __LINE__) ") fio_sock_close called for fd %d",        \
                     fio_getpid(),                                             \
                     (int)fd);                                                 \
    close(fd);                                                                 \
  } while (0)
#endif /* DEBUG */

/* *****************************************************************************
Socket OS abstraction - API
***************************************************************************** */

#ifndef FIO_SOCK_DEFAULT_MAXIMIZE_LIMIT
#define FIO_SOCK_DEFAULT_MAXIMIZE_LIMIT (1ULL << 24)
#endif

/** Socket type flags */
typedef enum {
  FIO_SOCK_SERVER = 0,
  FIO_SOCK_CLIENT = 1,
  FIO_SOCK_NONBLOCK = 2,
  FIO_SOCK_TCP = 4,
  FIO_SOCK_UDP = 8,
#ifdef AF_UNIX
  FIO_SOCK_UNIX = 16,
  FIO_SOCK_UNIX_PRIVATE = (16 | 32),
#else
#define FIO_SOCK_UNIX         0
#define FIO_SOCK_UNIX_PRIVATE 0
#endif
} fio_sock_open_flags_e;

/**
 * Creates a new socket according to the provided flags.
 *
 * The `port` string will be ignored when `FIO_SOCK_UNIX` is set.
 */
FIO_IFUNC int fio_sock_open(const char *restrict address,
                            const char *restrict port,
                            uint16_t flags);

/** Creates a new socket, according to the provided flags. */
SFUNC int fio_sock_open2(const char *url, uint16_t flags);

/**
 * Attempts to resolve an address to a valid IP6 / IP4 address pointer.
 *
 * The `sock_type` element should be a socket type, such as `SOCK_DGRAM` (UDP)
 * or `SOCK_STREAM` (TCP/IP).
 *
 * The address should be freed using `fio_sock_address_free`.
 */
FIO_IFUNC struct addrinfo *fio_sock_address_new(const char *restrict address,
                                                const char *restrict port,
                                                int sock_type);

/** Frees the pointer returned by `fio_sock_address_new`. */
FIO_IFUNC void fio_sock_address_free(struct addrinfo *a);

/**
 * Returns a human readable address representation of the socket's peer address.
 *
 * On error, returns a NULL buffer with zero length.
 *
 * Buffer lengths are limited to 63 bytes.
 *
 * This function is limited in its thread safety to 128 threads / calls.
 */
SFUNC fio_buf_info_s fio_sock_peer_addr(int s);

/** Creates a new network socket and binds it to a local address. */
SFUNC int fio_sock_open_local(struct addrinfo *addr, int nonblock);

/** Creates a new network socket and connects it to a remote address. */
SFUNC int fio_sock_open_remote(struct addrinfo *addr, int nonblock);

/** Creates a new Unix socket and binds it to a local address. */
SFUNC int fio_sock_open_unix(const char *address, uint16_t flags);

/** Sets a file descriptor / socket to non blocking state. */
SFUNC int fio_sock_set_non_block(int fd);

/** Attempts to maximize the allowed open file limits. returns known limit */
SFUNC size_t fio_sock_maximize_limits(size_t maximum_limit);

/**
 * Returns 0 on timeout, -1 on error or the events that are valid.
 *
 * Possible events are POLLIN | POLLOUT
 */
SFUNC short fio_sock_wait_io(int fd, short events, int timeout);

/** A helper macro that waits on a single IO with no callbacks (0 = no event) */
#define FIO_SOCK_WAIT_RW(fd, timeout_)                                         \
  fio_sock_wait_io(fd, POLLIN | POLLOUT, timeout_)

/** A helper macro that waits on a single IO with no callbacks (0 = no event) */
#define FIO_SOCK_WAIT_R(fd, timeout_) fio_sock_wait_io(fd, POLLIN, timeout_)

/** A helper macro that waits on a single IO with no callbacks (0 = no event) */
#define FIO_SOCK_WAIT_W(fd, timeout_) fio_sock_wait_io(fd, POLLOUT, timeout_)

/* *****************************************************************************
IO Poll - Implementation (always static / inlined)
***************************************************************************** */

/**
 * Creates a new socket according to the provided flags.
 *
 * The `port` string will be ignored when `FIO_SOCK_UNIX` is set.
 */
FIO_IFUNC int fio_sock_open(const char *restrict address,
                            const char *restrict port,
                            uint16_t flags) {
  struct addrinfo *addr = NULL;
  int fd;
#ifdef AF_UNIX
  if ((flags & FIO_SOCK_UNIX))
    return fio_sock_open_unix(address, flags);
#endif

  switch ((flags & ((uint16_t)FIO_SOCK_TCP | (uint16_t)FIO_SOCK_UDP))) {
  case 0: /* fall through - default to TCP/IP*/
  case FIO_SOCK_TCP:
    addr = fio_sock_address_new(address, port, SOCK_STREAM);
    if (!addr) {
      FIO_LOG_ERROR("(fio_sock_open) address error: %s", strerror(errno));
      return -1;
    }
    if ((flags & FIO_SOCK_CLIENT)) {
      fd = fio_sock_open_remote(addr, (flags & FIO_SOCK_NONBLOCK));
    } else {
      fd = fio_sock_open_local(addr, (flags & FIO_SOCK_NONBLOCK));
      if (fd != -1 && listen(fd, SOMAXCONN) == -1) {
        FIO_LOG_ERROR("(fio_sock_open) failed on call to listen: %s",
                      strerror(errno));
        fio_sock_close(fd);
        fd = -1;
      }
    }
    fio_sock_address_free(addr);
    return fd;
  case FIO_SOCK_UDP:
    addr = fio_sock_address_new(address, port, SOCK_DGRAM);
    if (!addr) {
      FIO_LOG_ERROR("(fio_sock_open) address error: %s", strerror(errno));
      return -1;
    }
    if ((flags & FIO_SOCK_CLIENT)) {
      fd = fio_sock_open_remote(addr, (flags & FIO_SOCK_NONBLOCK));
    } else {
      fd = fio_sock_open_local(addr, (flags & FIO_SOCK_NONBLOCK));
    }
    fio_sock_address_free(addr);
    return fd;
  }

  FIO_LOG_ERROR(
      "(fio_sock_open) the FIO_SOCK_TCP and FIO_SOCK_UDP flags are exclusive");
  return -1;
}

FIO_IFUNC struct addrinfo *fio_sock_address_new(
    const char *restrict address,
    const char *restrict port,
    int sock_type /*i.e., SOCK_DGRAM */) {
  struct addrinfo addr_hints = (struct addrinfo){0}, *a;
  int e;
  addr_hints.ai_family = AF_UNSPEC; // set to AF_INET to force IPv4
  addr_hints.ai_socktype = sock_type;
  addr_hints.ai_flags = AI_PASSIVE; // use my IP

  size_t port_len = (port ? FIO_STRLEN(port) : 0U);
  switch (port_len) { /* skip system service lookup for common web stuff */
  case 2:
    if ((port[0] | 32) == 'w' && (port[1] | 32) == 's')
      port = "80";
    break;
  case 3:
    if ((port[0] | 32) == 'w' && (port[1] | 32) == 's' && (port[2] | 32) == 's')
      port = "443";
    else if ((port[0] | 32) == 's' && (port[1] | 32) == 's' &&
             (port[2] | 32) == 'e')
      port = "80";
    break;
  case 4:
    if ((port[0] | 32) == 'h' && (port[1] | 32) == 't' &&
        (port[2] | 32) == 't' && (port[3] | 32) == 'p')
      port = "80";
    else if ((port[0] | 32) == 's' && (port[1] | 32) == 's' &&
             (port[2] | 32) == 'e' && (port[3] | 32) == 's')
      port = "443";
    break;
  case 5:
    if ((port[0] | 32) == 'h' && (port[1] | 32) == 't' &&
        (port[2] | 32) == 't' && (port[3] | 32) == 'p' && (port[4] | 32) == 's')
      port = "443";
    break;
  }

#if 1 /* override system resolution for localhost ? */
  size_t address_len = (address ? FIO_STRLEN(address) : 0U);
  if (address && address_len == 9 && (address[0] | 32) == 'l' &&
      (fio_buf2u64u(address + 1) | (uint64_t)0x2020202020202020ULL) ==
          fio_buf2u64u("ocalhost"))
    address = "127.0.0.1";
  else if (sock_type != SOCK_DGRAM && address_len == 7 &&
           (fio_buf2u64u("0.0.0.0") |
            fio_buf2u64u("\x00\x00\x00\x00\x00\x00\x00\xFF")) ==
               (fio_buf2u64u(address) |
                fio_buf2u64u("\x00\x00\x00\x00\x00\x00\x00\xFF")))
    address = NULL; /* bind to everything INADDR_ANY */
#endif
  /* call for OS address resolution */
  if ((e = getaddrinfo(address, (port ? port : "0"), &addr_hints, &a)) != 0) {
    FIO_LOG_ERROR("(fio_sock_address_new(\"%s\", \"%s\")) error: %s",
                  (address ? address : "NULL"),
                  (port ? port : "0"),
                  gai_strerror(e));
    return NULL;
  }
  return a;
}

FIO_IFUNC void fio_sock_address_free(struct addrinfo *a) { freeaddrinfo(a); }

/* *****************************************************************************
FIO_SOCK - Implementation
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/** Creates a new socket, according to the provided flags. */
SFUNC int fio_sock_open2(const char *url, uint16_t flags) {
  char buf[2048];
  char port[64];
  char *addr = buf;
  char *pr = port;

  /* parse URL */
  fio_url_s u = fio_url_parse(url, FIO_STRLEN(url));
#ifdef AF_UNIX
  if (!u.host.buf && !u.port.buf && u.path.buf) {
    /* Unix socket - force flag validation */
    flags &= ~((uint16_t)(FIO_SOCK_UNIX | FIO_SOCK_TCP));
    flags |= (u.scheme.len == 4 &&
              fio_buf2u32u(u.scheme.buf) == fio_buf2u32u("priv"))
                 ? FIO_SOCK_UNIX_PRIVATE
                 : FIO_SOCK_UNIX;
    if (u.path.len > 2047) {
      errno = EINVAL;
      FIO_LOG_ERROR(
          "Couldn't open unix socket to %s - host name too long (%zu).",
          url,
          u.path.len);
      return -1;
    }
    FIO_MEMCPY(buf, u.path.buf, u.path.len);
    buf[u.path.len] = 0;
    pr = NULL;
    return fio_sock_open_unix(buf, flags);
  }
#endif
  if (!u.port.len)
    u.port = u.scheme;
  if (!u.port.len) {
    pr = NULL;
  } else {
    if (u.port.len > 63) {
      errno = EINVAL;
      FIO_LOG_ERROR("Couldn't open socket to %s - port / scheme too long.",
                    url);
      return -1;
    }
    FIO_MEMCPY(port, u.port.buf, u.port.len);
    port[u.port.len] = 0;
    if (!(flags & (FIO_SOCK_TCP | FIO_SOCK_UDP))) {
      if (u.scheme.len == 3 && (u.scheme.buf[0] | 32) == 't' &&
          (u.scheme.buf[1] | 32) == 'c' && (u.scheme.buf[2] | 32) == 'p')
        flags |= FIO_SOCK_TCP;
      else if (u.scheme.len == 3 && (u.scheme.buf[0] | 32) == 'u' &&
               (u.scheme.buf[1] | 32) == 'd' && (u.scheme.buf[2] | 32) == 'p')
        flags |= FIO_SOCK_UDP;
      else if ((u.scheme.len == 4 || u.scheme.len == 5) &&
               (u.scheme.buf[0] | 32) == 'h' && (u.scheme.buf[1] | 32) == 't' &&
               (u.scheme.buf[2] | 32) == 't' && (u.scheme.buf[3] | 32) == 'p' &&
               (u.scheme.len == 4 ||
                (u.scheme.len == 5 && (u.scheme.buf[4] | 32) == 's')))
        flags |= FIO_SOCK_TCP;
    }
  }
  if (u.host.len) {
    if (u.host.len > 2047) {
      errno = EINVAL;
      FIO_LOG_ERROR("Couldn't open socket to %s - host name too long.", url);
      return -1;
    }
    FIO_MEMCPY(buf, u.host.buf, u.host.len);
    buf[u.host.len] = 0;
  } else {
    addr = NULL;
  }
  return fio_sock_open(addr, pr, flags);
}

/** Sets a file descriptor / socket to non blocking state. */
SFUNC int fio_sock_set_non_block(int fd) {
/* If they have O_NONBLOCK, use the Posix way to do it */
#if defined(O_NONBLOCK) && defined(F_GETFL) && defined(F_SETFL)
  /* Fixme: O_NONBLOCK is defined but broken on SunOS 4.1.x and AIX 3.2.5. */
  int flags;
  if (-1 == (flags = fcntl(fd, F_GETFL, 0)))
    flags = 0;
#if defined(O_CLOEXEC)
  return fcntl(fd, F_SETFL, flags | O_NONBLOCK | O_CLOEXEC);
#else
  return fcntl(fd, F_SETFL, flags | O_NONBLOCK);
#endif
#elif defined(FIONBIO)
  /* Otherwise, use the old way of doing it */
#if FIO_OS_WIN
  unsigned long flags = 1;
  if (ioctlsocket(fd, FIONBIO, &flags) == SOCKET_ERROR) {
    switch (WSAGetLastError()) {
    case WSANOTINITIALISED:
      FIO_LOG_DEBUG("Windows non-blocking ioctl failed with WSANOTINITIALISED");
      break;
    case WSAENETDOWN:
      FIO_LOG_DEBUG("Windows non-blocking ioctl failed with WSAENETDOWN");
      break;
    case WSAEINPROGRESS:
      FIO_LOG_DEBUG("Windows non-blocking ioctl failed with WSAEINPROGRESS");
      break;
    case WSAENOTSOCK:
      FIO_LOG_DEBUG("Windows non-blocking ioctl failed with WSAENOTSOCK");
      break;
    case WSAEFAULT:
      FIO_LOG_DEBUG("Windows non-blocking ioctl failed with WSAEFAULT");
      break;
    }
    return -1;
  }
  return 0;
#else
  int flags = 1;
  return ioctl(fd, FIONBIO, &flags);
#endif /* FIO_OS_WIN */
#else
#error No functions / argumnet macros for non-blocking sockets.
#endif
}

/** Creates a new network socket and binds it to a local address. */
SFUNC int fio_sock_open_local(struct addrinfo *addr, int nonblock) {
  int fd = -1;
  for (struct addrinfo *p = addr; p != NULL; p = p->ai_next) {
#if FIO_OS_WIN
    SOCKET fd_tmp;
    if ((fd_tmp = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) ==
        INVALID_SOCKET) {
      FIO_LOG_DEBUG("socket creation error %s", strerror(errno));
      continue;
    }
    if (!FIO_SOCK_FD_ISVALID(fd_tmp)) {
      FIO_LOG_DEBUG("windows socket value out of valid portable range.");
      errno = ERANGE;
    }
    fd = (int)fd_tmp;
#else
    if ((fd = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) == -1) {
      FIO_LOG_DEBUG("socket creation error %s", strerror(errno));
      continue;
    }
#endif
    { // avoid the "address taken"
      int optval = 1;
      setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (void *)&optval, sizeof(optval));
    }
    if (nonblock && fio_sock_set_non_block(fd) == -1) {
      FIO_LOG_DEBUG("Couldn't set socket (%d) to non-blocking mode %s",
                    fd,
                    strerror(errno));
      fio_sock_close(fd);
      fd = -1;
      continue;
    }
    if (bind(fd, p->ai_addr, p->ai_addrlen) == -1) {
      FIO_LOG_DEBUG("Failed attempt to bind socket (%d) to address %s",
                    fd,
                    strerror(errno));
      fio_sock_close(fd);
      fd = -1;
      continue;
    }
    break;
  }
  if (fd == -1) {
    FIO_LOG_DEBUG("socket binding/creation error %s", strerror(errno));
  }
  return fd;
}

/** Creates a new network socket and connects it to a remote address. */
SFUNC int fio_sock_open_remote(struct addrinfo *addr, int nonblock) {
  int fd = -1;
  for (struct addrinfo *p = addr; p != NULL; p = p->ai_next) {
#if FIO_OS_WIN
    SOCKET fd_tmp;
    if ((fd_tmp = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) ==
        INVALID_SOCKET) {
      FIO_LOG_DEBUG("socket creation error %s", strerror(errno));
      continue;
    }
    if (!FIO_SOCK_FD_ISVALID(fd_tmp)) {
      FIO_LOG_DEBUG("windows socket value out of valid portable range.");
      errno = ERANGE;
    }
    fd = (int)fd_tmp;
#else
    if ((fd = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) == -1) {
      FIO_LOG_DEBUG("socket creation error %s", strerror(errno));
      continue;
    }
#endif

    if (nonblock && fio_sock_set_non_block(fd) == -1) {
      FIO_LOG_DEBUG(
          "Failed attempt to set client socket (%d) to non-blocking %s",
          fd,
          strerror(errno));
      fio_sock_close(fd);
      fd = -1;
      continue;
    }
    if (connect(fd, p->ai_addr, p->ai_addrlen) == -1 &&
#if FIO_OS_WIN
        (WSAGetLastError() != WSAEWOULDBLOCK || errno != EINPROGRESS)
#else
        errno != EINPROGRESS
#endif
    ) {
#if FIO_OS_WIN
      FIO_LOG_DEBUG(
          "Couldn't connect client socket (%d) to remote address %s (%d)",
          fd,
          strerror(errno),
          WSAGetLastError());
#else
      FIO_LOG_DEBUG("Couldn't connect client socket (%d) to remote address %s",
                    fd,
                    strerror(errno));
#endif
      fio_sock_close(fd);
      fd = -1;
      continue;
    }
    break;
  }
  if (fd == -1) {
    FIO_LOG_DEBUG("socket connection/creation error %s", strerror(errno));
  }
  return fd;
}

/** Returns 0 on timeout, -1 on error or the events that are valid. */
SFUNC short fio_sock_wait_io(int fd, short events, int timeout) {
  short r = 0;
#ifdef FIO_OS_WIN
  if (fd == -1) {
    FIO_THREAD_WAIT((timeout * 1000000));
    return r;
  }
#endif
  struct pollfd pfd = {.fd = fd, .events = events};
  r = (short)poll(&pfd, 1, timeout);
  if (r == 1)
    r = pfd.revents;
  return r;
}

/** Attempts to maximize the allowed open file limits. returns known limit */
SFUNC size_t fio_sock_maximize_limits(size_t max_limit) {
  ssize_t capa = 0;
  if (!max_limit)
    max_limit = FIO_SOCK_DEFAULT_MAXIMIZE_LIMIT;
#if FIO_OS_POSIX

#ifdef _SC_OPEN_MAX
  capa = sysconf(_SC_OPEN_MAX);
#elif defined(FOPEN_MAX)
  capa = FOPEN_MAX;
#endif
  // try to maximize limits - collect max and set to max
  struct rlimit rlim = {.rlim_max = 0};
  if (getrlimit(RLIMIT_NOFILE, &rlim) == -1) {
    FIO_LOG_WARNING("`getrlimit` failed (%d): %s", errno, strerror(errno));
    return capa;
  }

  FIO_LOG_DEBUG2("existing / maximum open file limit detected: %zd / %zd",
                 (ssize_t)rlim.rlim_cur,
                 (ssize_t)rlim.rlim_max);

  if (rlim.rlim_cur >= max_limit) {
    FIO_LOG_DEBUG2("open file limit can't be maximized any further (%zd / %zu)",
                   (ssize_t)rlim.rlim_cur,
                   max_limit);
    return rlim.rlim_cur;
  }

  rlim_t original = rlim.rlim_cur;
  rlim.rlim_cur = rlim.rlim_max > max_limit ? max_limit : rlim.rlim_max;
  while (setrlimit(RLIMIT_NOFILE, &rlim) == -1 && rlim.rlim_cur > original)
    rlim.rlim_cur >>= 1;

  FIO_LOG_DEBUG2("new open file limit: %zd", (ssize_t)rlim.rlim_cur);

  getrlimit(RLIMIT_NOFILE, &rlim);
  capa = rlim.rlim_cur;
#elif FIO_OS_WIN
  capa = 1ULL << 10;
  while (_setmaxstdio(capa) > 0)
    capa <<= 1;
  capa >>= 1;
  FIO_LOG_DEBUG("new open file limit: %zd", (ssize_t)capa);
#else
  FIO_LOG_ERROR("No OS detected, couldn't maximize open file limit.");
#endif
  return capa;
}

#ifdef AF_UNIX
/** Creates a new Unix socket and binds it to a local address. */
SFUNC int fio_sock_open_unix(const char *address, uint16_t flags) {
  /* Unix socket */
  struct sockaddr_un addr = {0};
  size_t addr_len = strlen(address);
  if (addr_len >= sizeof(addr.sun_path)) {
    FIO_LOG_ERROR(
        "(fio_sock_open_unix) address too long (%zu bytes > %zu bytes).",
        addr_len,
        sizeof(addr.sun_path) - 1);
    errno = ENAMETOOLONG;
    return -1;
  }
  addr.sun_family = AF_UNIX;
  FIO_MEMCPY(addr.sun_path, address, addr_len + 1); /* copy the NUL byte. */
#if defined(__APPLE__)
  addr.sun_len = addr_len;
#endif
  int fd =
      socket(AF_UNIX, (flags & FIO_SOCK_UDP) ? SOCK_DGRAM : SOCK_STREAM, 0);
  if (fd == -1) {
    FIO_LOG_DEBUG("couldn't open unix socket (flags == %d) %s",
                  (int)flags,
                  strerror(errno));
    return -1;
  }
  if ((flags & FIO_SOCK_NONBLOCK) && fio_sock_set_non_block(fd) == -1) {
    FIO_LOG_DEBUG("couldn't set socket to non-blocking mode");
    fio_sock_close(fd);
    unlink(addr.sun_path);
    return -1;
  }
  if ((flags & FIO_SOCK_CLIENT)) {
    if (connect(fd, (struct sockaddr *)&addr, sizeof(addr)) == -1 &&
        errno != EINPROGRESS) {
      FIO_LOG_DEBUG("couldn't connect unix client @ %s : %s",
                    addr.sun_path,
                    strerror(errno));
      fio_sock_close(fd);
      return -1;
    }
  } else {
    unlink(addr.sun_path);
    int btmp; // the bind result
#if !defined(FIO_SOCK_AVOID_UMASK) && !defined(FIO_OS_WIN)
    if ((flags & FIO_SOCK_UNIX_PRIVATE) == FIO_SOCK_UNIX) {
      int umask_org = umask(0x1FF);
      btmp = bind(fd, (struct sockaddr *)&addr, sizeof(addr));
      int old_err = errno;
      umask(umask_org);
      errno = old_err;
      FIO_LOG_DEBUG("umask was used temporarily for Unix Socket (was 0x%04X)",
                    umask_org);
    } else
#endif /* FIO_SOCK_AVOID_UMASK */
      /* else */ btmp = bind(fd, (struct sockaddr *)&addr, sizeof(addr));
    if (btmp == -1) {
      FIO_LOG_DEBUG("couldn't bind unix socket to %s\n\terrno(%d): %s",
                    address,
                    errno,
                    strerror(errno));
      fio_sock_close(fd);
      // unlink(addr.sun_path);
      return -1;
    }
#ifndef FIO_OS_WIN
    if ((flags & FIO_SOCK_UNIX_PRIVATE) == FIO_SOCK_UNIX) {
      chmod(address, S_IRWXO | S_IRWXG | S_IRWXU);
      fchmod(fd, S_IRWXO | S_IRWXG | S_IRWXU);
    }
#endif
    if (!(flags & FIO_SOCK_UDP) && listen(fd, SOMAXCONN) < 0) {
      FIO_LOG_DEBUG("couldn't start listening to unix socket at %s", address);
      fio_sock_close(fd);
      unlink(addr.sun_path);
      return -1;
    }
  }
  return fd;
}
#else
SFUNC int fio_sock_open_unix(const char *address, uint16_t flags) {
  (void)address, (void)flags;
  FIO_ASSERT(0, "this system does not support Unix sockets.");
}
#endif /* AF_UNIX */

/* *****************************************************************************
Peer Address
***************************************************************************** */

/**
 * Returns a human readable address representation of the socket's peer address.
 *
 * On error, returns a NULL buffer with zero length.
 *
 * Buffer lengths are limited to 63 bytes.
 *
 * This function is limited in its thread safety to 128 threads / calls.
 */
SFUNC fio_buf_info_s fio_sock_peer_addr(int s) {
  static char buffer[8129]; /* 64 byte per buffer x 128 threads */
  static unsigned pos = 0;
  fio_buf_info_s r =
      FIO_BUF_INFO2(buffer + (fio_atomic_add(&pos, 63) & 127), 0);
  struct sockaddr addr[8] = {0};
  socklen_t len = sizeof(addr);
  if (!FIO_SOCK_FD_ISVALID(s))
    goto finish;
  if (getpeername(s, addr, &len))
    goto finish;
  if (getnameinfo(addr, len, r.buf, 64, NULL, 0, NI_NUMERICHOST))
    goto finish;
  r.len = FIO_STRLEN(r.buf);
finish:
  if (!r.len)
    r.buf = NULL;
  return r;
}

/* *****************************************************************************
WinSock initialization
***************************************************************************** */
#if FIO_OS_WIN
static WSADATA fio___sock_useless_windows_data;
FIO_CONSTRUCTOR(fio___sock_win_init) {
  static uint8_t flag = 0;
  if (!flag) {
    flag |= 1;
    if (WSAStartup(MAKEWORD(2, 2), &fio___sock_useless_windows_data)) {
      FIO_LOG_FATAL("WinSock2 unavailable.");
      exit(-1);
    }
    atexit((void (*)(void))(WSACleanup));
  }
}
#endif /* FIO_OS_WIN / FIO_OS_POSIX */

/* *****************************************************************************
FIO_SOCK - cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_SOCK
#endif
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_STATE              /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                      State Callback Management API



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_STATE) && !defined(H___FIO_STATE___H) &&                       \
    !defined(FIO___RECURSIVE_INCLUDE)
#define H___FIO_STATE___H
/* *****************************************************************************
State Callback API
***************************************************************************** */

/* *****************************************************************************
Startup / State Callbacks (fork, start up, idle, etc')
***************************************************************************** */

/** a callback type enum */
typedef enum {
  /** Called once during library initialization. */
  FIO_CALL_ON_INITIALIZE,
  /** Called once before starting up the IO reactor. */
  FIO_CALL_PRE_START,
  /** Called before each time the IO reactor forks a new worker. */
  FIO_CALL_BEFORE_FORK,
  /** Called after each fork (both parent and child), before FIO_CALL_IN_XXX */
  FIO_CALL_AFTER_FORK,
  /** Called by a worker process right after forking. */
  FIO_CALL_IN_CHILD,
  /** Called by the master process after spawning a worker (after forking). */
  FIO_CALL_IN_MASTER,
  /** Called by each worker thread in a Server Async queue as it starts. */
  FIO_CALL_ON_WORKER_THREAD_START,
  /** Called every time a *Worker* process starts. */
  FIO_CALL_ON_START,
  /** Reserved for internal use. */
  FIO_CALL_RESERVED1,
  /** Reserved for internal use. */
  FIO_CALL_RESERVED2,
  /** User state event queue (unused, available for the user). */
  FIO_CALL_ON_USER1,
  /** User state event queue (unused, available for the user). */
  FIO_CALL_ON_USER2,
  /** Called when facil.io enters idling mode. */
  FIO_CALL_ON_IDLE,
  /** A reversed user state event queue (unused, available for the user). */
  FIO_CALL_ON_USER1_REVERSE,
  /** A reversed user state event queue (unused, available for the user). */
  FIO_CALL_ON_USER2_REVERSE,
  /** Reserved for internal use. */
  FIO_CALL_RESERVED1_REVERSED,
  /** Reserved for internal use. */
  FIO_CALL_RESERVED2_REVERSED,
  /** Called before starting the shutdown sequence. */
  FIO_CALL_ON_SHUTDOWN,
  /** Called by each worker the moment it detects the master process crashed. */
  FIO_CALL_ON_PARENT_CRUSH,
  /** Called by the parent (master) after a worker process crashed. */
  FIO_CALL_ON_CHILD_CRUSH,
  /** Called by each worker thread in a Server Async queue as it ends. */
  FIO_CALL_ON_WORKER_THREAD_END,
  /** Called when wither a *Worker* or *Master* stopped. */
  FIO_CALL_ON_STOP,
  /** An alternative to the system's at_exit. */
  FIO_CALL_AT_EXIT,
  /** used for testing and array allocation - must be last. */
  FIO_CALL_NEVER
} fio_state_event_type_e;

/** Adds a callback to the list of callbacks to be called for the event. */
SFUNC void fio_state_callback_add(fio_state_event_type_e,
                                  void (*func)(void *),
                                  void *arg);

/** Removes a callback from the list of callbacks to be called for the event. */
SFUNC int fio_state_callback_remove(fio_state_event_type_e,
                                    void (*func)(void *),
                                    void *arg);

/**
 * Forces all the existing callbacks to run, as if the event occurred.
 *
 * Callbacks for all initialization / idling tasks are called in order of
 * creation (where fio_state_event_type_e <= FIO_CALL_ON_IDLE).
 *
 * Callbacks for all cleanup oriented tasks are called in reverse order of
 * creation (where fio_state_event_type_e >= FIO_CALL_ON_SHUTDOWN).
 *
 * During an event, changes to the callback list are ignored (callbacks can't
 * add or remove other callbacks for the same event).
 */
SFUNC void fio_state_callback_force(fio_state_event_type_e);

/* *****************************************************************************
State Callback Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* *****************************************************************************
State Callback Map - I'd use the global mapping types...
(Ordered Hash Map)   but we can't depend on types yet, possible collisions.
***************************************************************************** */

typedef struct {
  void (*func)(void *);
  void *arg;
} fio___state_task_s;

FIO_IFUNC uint64_t fio___state_callback_hash_fn(fio___state_task_s *t) {
  uint64_t hash = fio_risky_ptr((void *)(uintptr_t)(t->func));
  hash ^= hash + fio_risky_ptr(t->arg);
  return hash;
}

#define FIO_STATE_CALLBACK_IS_VALID(pobj) ((pobj)->func)
#define FIO_STATE_CALLBACK_CMP(a, b)                                           \
  ((a)->func == (b)->func && (a)->arg == (b)->arg)
FIO_TYPEDEF_IMAP_ARRAY(fio___state_map,
                       fio___state_task_s,
                       uint32_t,
                       fio___state_callback_hash_fn,
                       FIO_STATE_CALLBACK_CMP,
                       FIO_STATE_CALLBACK_IS_VALID)
#undef FIO_STATE_CALLBACK_CMP
#undef FIO_STATE_CALLBACK_IS_VALID

/* *****************************************************************************
Names.
***************************************************************************** */

static const char *FIO___STATE_TASKS_NAMES[FIO_CALL_NEVER + 1] = {
    [FIO_CALL_ON_INITIALIZE] = "ON_INITIALIZE",
    [FIO_CALL_PRE_START] = "PRE_START",
    [FIO_CALL_BEFORE_FORK] = "BEFORE_FORK",
    [FIO_CALL_AFTER_FORK] = "AFTER_FORK",
    [FIO_CALL_IN_CHILD] = "IN_CHILD",
    [FIO_CALL_IN_MASTER] = "IN_MASTER",
    [FIO_CALL_ON_WORKER_THREAD_START] = "ON_WORKER_THREAD_START",
    [FIO_CALL_ON_START] = "ON_START",
    [FIO_CALL_RESERVED1] = "RESERVED1",
    [FIO_CALL_RESERVED2] = "RESERVED2",
    [FIO_CALL_ON_USER1] = "ON_USER1",
    [FIO_CALL_ON_USER2] = "ON_USER2",
    [FIO_CALL_ON_IDLE] = "ON_IDLE",
    [FIO_CALL_ON_USER1_REVERSE] = "ON_USER1_REVERSE",
    [FIO_CALL_ON_USER2_REVERSE] = "ON_USER2_REVERSE",
    [FIO_CALL_RESERVED1_REVERSED] = "RESERVED1_REVERSED",
    [FIO_CALL_RESERVED2_REVERSED] = "RESERVED2_REVERSED",
    [FIO_CALL_ON_SHUTDOWN] = "ON_SHUTDOWN",
    [FIO_CALL_ON_PARENT_CRUSH] = "ON_PARENT_CRUSH",
    [FIO_CALL_ON_CHILD_CRUSH] = "ON_CHILD_CRUSH",
    [FIO_CALL_ON_WORKER_THREAD_END] = "ON_WORKER_THREAD_END",
    [FIO_CALL_ON_STOP] = "ON_FINISH",
    [FIO_CALL_AT_EXIT] = "AT_EXIT",
    [FIO_CALL_NEVER] = "NEVER",
};

/* *****************************************************************************
State Callback Global State and Locks
***************************************************************************** */
/* use `weak` instead of `static` to make sure state callbacks are global. */
FIO_WEAK fio___state_map_s FIO___STATE_TASKS_ARRAY[FIO_CALL_NEVER + 1];
FIO_WEAK fio_lock_i FIO___STATE_TASKS_ARRAY_LOCK[FIO_CALL_NEVER + 1];

FIO_IFUNC void fio_state_callback_clear_all(void) {
  for (size_t i = 0; i < FIO_CALL_NEVER; ++i) {
    fio___state_map_destroy(FIO___STATE_TASKS_ARRAY + i);
  }
  FIO_LOG_DEBUG2("(%d) fio_state_callback maps have been cleared.",
                 fio_getpid());
}

/** Adds a callback to the list of callbacks to be called for the event. */
SFUNC void fio_state_callback_add(fio_state_event_type_e e,
                                  void (*func)(void *),
                                  void *arg) {
  if ((uintptr_t)e >= FIO_CALL_NEVER)
    return;
  fio___state_task_s t = {.func = func, .arg = arg};
  fio_lock(FIO___STATE_TASKS_ARRAY_LOCK + (uintptr_t)e);
  fio___state_map_set(FIO___STATE_TASKS_ARRAY + (uintptr_t)e, t, 0);
  fio_unlock(FIO___STATE_TASKS_ARRAY_LOCK + (uintptr_t)e);
  if (e == FIO_CALL_ON_INITIALIZE &&
      FIO___STATE_TASKS_ARRAY_LOCK[FIO_CALL_NEVER]) {
    /* initialization tasks already performed, perform this without delay */
    func(arg);
  }
}

/** Removes a callback from the list of callbacks to be called for the event. */
SFUNC int fio_state_callback_remove(fio_state_event_type_e e,
                                    void (*func)(void *),
                                    void *arg) {
  if ((uintptr_t)e >= FIO_CALL_NEVER)
    return -1;
  int ret;
  fio___state_task_s t = {.func = func, .arg = arg};
  fio_lock(FIO___STATE_TASKS_ARRAY_LOCK + (uintptr_t)e);
  ret = fio___state_map_remove(FIO___STATE_TASKS_ARRAY + (uintptr_t)e, t);
  fio_unlock(FIO___STATE_TASKS_ARRAY_LOCK + (uintptr_t)e);
  return ret;
}

/** Clears all the existing callbacks for the event. */
SFUNC void fio_state_callback_clear(fio_state_event_type_e e) {
  if ((uintptr_t)e >= FIO_CALL_NEVER)
    return;
  fio_lock(FIO___STATE_TASKS_ARRAY_LOCK + (uintptr_t)e);
  fio___state_map_destroy(FIO___STATE_TASKS_ARRAY + (uintptr_t)e);
  fio_unlock(FIO___STATE_TASKS_ARRAY_LOCK + (uintptr_t)e);
}

FIO_SFUNC void fio_state_callback_force___task(void *fn_p, void *arg) {
  union {
    void *p;
    void (*fn)(void *);
  } u = {.p = fn_p};
  u.fn(arg);
}
/**
 * Forces all the existing callbacks to run, as if the event occurred.
 *
 * Callbacks are called from last to first (last callback executes first).
 *
 * During an event, changes to the callback list are ignored (callbacks can't
 * remove other callbacks for the same event).
 */
SFUNC void fio_state_callback_force(fio_state_event_type_e e) {
  /** a type-to-string map for callback types */

  if ((uintptr_t)e >= FIO_CALL_NEVER)
    return;
  if (e == FIO_CALL_AFTER_FORK) {
    /* make sure the `after_fork` events re-initializes all locks. */
    for (size_t i = 0; i < FIO_CALL_NEVER; ++i) {
      FIO___STATE_TASKS_ARRAY_LOCK[i] = FIO_LOCK_INIT;
    }
  }
  if (e == FIO_CALL_IN_CHILD)
    fio_rand_reseed(); /* re-seed random state in child processes */
  fio___state_task_s *ary = NULL;
  size_t ary_capa = (sizeof(*ary) * FIO___STATE_TASKS_ARRAY[e].count);
  size_t len = 0;
  if (e == FIO_CALL_ON_INITIALIZE) {
    fio_trylock(FIO___STATE_TASKS_ARRAY_LOCK + FIO_CALL_NEVER);
  }

  FIO_LOG_DDEBUG2("(%d) scheduling %s callbacks (%zu tasks).",
                  (int)(fio_thread_getpid()),
                  FIO___STATE_TASKS_NAMES[e],
                  (size_t)FIO___STATE_TASKS_ARRAY[e].count);
  if (!FIO___STATE_TASKS_ARRAY[e].count)
    return;
  /* copy task queue */
  fio_lock(FIO___STATE_TASKS_ARRAY_LOCK + (uintptr_t)e);
  if (FIO___STATE_TASKS_ARRAY[e].w) {
    ary = (fio___state_task_s *)FIO_MEM_REALLOC(NULL, 0, ary_capa, 0);
    FIO_ASSERT_ALLOC(ary);
    for (size_t i = 0; i < FIO___STATE_TASKS_ARRAY[e].w; ++i) {
      if (!FIO___STATE_TASKS_ARRAY[e].ary[i].func)
        continue;
      ary[len++] = FIO___STATE_TASKS_ARRAY[e].ary[i];
    }
  }
  fio_unlock(FIO___STATE_TASKS_ARRAY_LOCK + (uintptr_t)e);

  if (e <= FIO_CALL_PRE_START) {
    /* perform copied tasks immediately within system thread */
    for (size_t i = 0; i < len; ++i)
      ary[i].func(ary[i].arg);
  } else if (e <= FIO_CALL_ON_IDLE) {
    /* perform tasks in order */
    for (size_t i = 0; i < len; ++i)
      ary[i].func(ary[i].arg);
  } else {
    /* perform tasks in reverse */
    while (len--)
      ary[len].func(ary[len].arg);
  }
  /* cleanup */
  FIO_MEM_FREE(ary, ary_capa);
  (void)FIO___STATE_TASKS_NAMES; /* if unused */
}

/* *****************************************************************************
Debug Helpers
***************************************************************************** */

FIO_IFUNC void fio_state_callback_print_state(void) {
  FIO_LOG2STDERR("DEBUG:    fio_state_callback maps state:");
  for (size_t i = 0; i < FIO_CALL_NEVER; ++i) {
    fprintf(stderr,
            "\t%-32s %-4zu out of %-4zu\n",
            FIO___STATE_TASKS_NAMES[i],
            (size_t)FIO___STATE_TASKS_ARRAY[i].count,
            fio___state_map_capa(FIO___STATE_TASKS_ARRAY + i));
  }
}

/* *****************************************************************************
State constructor / destructor
***************************************************************************** */

FIO_SFUNC void fio___state_cleanup_task_at_exit(void *ignr_) {
  fio_state_callback_clear_all();
  (void)ignr_;
}

FIO_CONSTRUCTOR(fio___state_constructor) {
  FIO_LOG_DEBUG2("fio_state_callback maps are now active.");
  fio_state_callback_force(FIO_CALL_ON_INITIALIZE);
  fio_state_callback_add(FIO_CALL_AT_EXIT,
                         fio___state_cleanup_task_at_exit,
                         NULL);
}

FIO_DESTRUCTOR(fio___state_at_exit_hook) {
  fio_state_callback_force(FIO_CALL_AT_EXIT);
}

/* *****************************************************************************
Module Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_STATE
#endif /* FIO_STATE */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TIME               /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                                  Time Helpers



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TIME) && !defined(H___FIO_TIME___H)
#define H___FIO_TIME___H

/* *****************************************************************************
Collecting Monotonic / Real Time
***************************************************************************** */

/** Returns human (watch) time... this value isn't as safe for measurements. */
FIO_IFUNC struct timespec fio_time_real(void);

/** Returns monotonic time. */
FIO_IFUNC struct timespec fio_time_mono(void);

/** Returns monotonic time in nano-seconds (now in 1 billionth of a second). */
FIO_IFUNC int64_t fio_time_nano(void);

/** Returns monotonic time in micro-seconds (now in 1 millionth of a second). */
FIO_IFUNC int64_t fio_time_micro(void);

/** Returns monotonic time in milliseconds. */
FIO_IFUNC int64_t fio_time_milli(void);

/** Converts a `struct timespec` to milliseconds. */
FIO_IFUNC int64_t fio_time2milli(struct timespec);

/** Converts a `struct timespec` to microseconds. */
FIO_IFUNC int64_t fio_time2micro(struct timespec);

/**
 * A faster (yet less localized) alternative to `gmtime_r`.
 *
 * See the libc `gmtime_r` documentation for details.
 *
 * Falls back to `gmtime_r` for dates before epoch.
 */
SFUNC struct tm fio_time2gm(time_t time);

/** Converts a `struct tm` to time in seconds (assuming UTC). */
SFUNC time_t fio_gm2time(struct tm tm);

/**
 * Writes an RFC 7231 date representation (HTTP date format) to target.
 *
 * Usually requires 29 characters, although this may vary.
 */
SFUNC size_t fio_time2rfc7231(char *target, time_t time);

/**
 * Writes an RFC 2109 date representation to target (HTTP Cookie Format).
 *
 * Usually requires 31 characters, although this may vary.
 */
SFUNC size_t fio_time2rfc2109(char *target, time_t time);

/**
 * Writes an RFC 2822 date representation to target (Internet Message Format).
 *
 * Usually requires 28 to 29 characters, although this may vary.
 */
SFUNC size_t fio_time2rfc2822(char *target, time_t time);

/**
 * Writes a date representation to target in common log format. i.e.,
 *
 *         [DD/MMM/yyyy:hh:mm:ss +0000]
 *
 * Usually requires 29 characters (including square brackets and NUL).
 */
SFUNC size_t fio_time2log(char *target, time_t time);

/**
 * Writes a date representation to target in ISO 8601 format. i.e.,
 *
 *         YYYY-MM-DD HH:MM:SS
 *
 * Usually requires 20 characters (including NUL).
 */
SFUNC size_t fio_time2iso(char *target, time_t time);

/** Adds two `struct timespec` objects. */
FIO_IFUNC struct timespec fio_time_add(struct timespec t, struct timespec t2);

/** Adds milliseconds to a `struct timespec` object. */
FIO_IFUNC struct timespec fio_time_add_milli(struct timespec t, int64_t milli);

/** Compares two `struct timespec` objects. */
FIO_IFUNC int fio_time_cmp(struct timespec t1, struct timespec t2);

/* *****************************************************************************
Time Inline Helpers
***************************************************************************** */

/** Returns human (watch) time... this value isn't as safe for measurements. */
FIO_IFUNC struct timespec fio_time_real(void) {
  struct timespec t;
  clock_gettime(CLOCK_REALTIME, &t);
  return t;
}

/** Returns monotonic time. */
FIO_IFUNC struct timespec fio_time_mono(void) {
  struct timespec t;
  clock_gettime(CLOCK_MONOTONIC, &t);
  return t;
}

/** Returns monotonic time in nano-seconds (now in 1 micro of a second). */
FIO_IFUNC int64_t fio_time_nano(void) {
  struct timespec t = fio_time_mono();
  return ((int64_t)t.tv_sec * 1000000000) + (int64_t)t.tv_nsec;
}

/** Returns monotonic time in micro-seconds (now in 1 millionth of a second). */
FIO_IFUNC int64_t fio_time_micro(void) {
  struct timespec t = fio_time_mono();
  return ((int64_t)t.tv_sec * 1000000) + (int64_t)t.tv_nsec / 1000;
}

/** Returns monotonic time in milliseconds. */
FIO_IFUNC int64_t fio_time_milli(void) {
  return fio_time2milli(fio_time_mono());
}

/** Converts a `struct timespec` to milliseconds. */
FIO_IFUNC int64_t fio_time2milli(struct timespec t) {
  return ((int64_t)t.tv_sec * 1000) + (int64_t)t.tv_nsec / 1000000;
}

/** Converts a `struct timespec` to microseconds. */
FIO_IFUNC int64_t fio_time2micro(struct timespec t) {
  return ((int64_t)t.tv_sec * 1000000) + (int64_t)t.tv_nsec / 1000;
}

/* Normalizes a timespec struct after an `add` or `sub` operation. */
FIO_IFUNC void fio_time___normalize(struct timespec *t) {
  const long ns_norm[2] = {0, 1000000000LL};
  t->tv_nsec += ns_norm[(t->tv_nsec < 0)];
  t->tv_sec += (t->tv_nsec < 0);
  t->tv_nsec -= ns_norm[(1000000000LL < t->tv_nsec)];
  t->tv_sec += (1000000000LL < t->tv_nsec);
}

/** Adds to timespec. */
FIO_IFUNC struct timespec fio_time_add(struct timespec t, struct timespec t2) {
  t.tv_sec += t2.tv_sec;
  t.tv_nsec += t2.tv_nsec;
  fio_time___normalize(&t);
  return t;
}

/** Adds milliseconds to timespec. */
FIO_IFUNC struct timespec fio_time_add_milli(struct timespec t, int64_t milli) {
  t.tv_sec += milli >> 10; /* 1024 is close enough, will be normalized */
  t.tv_nsec += (milli & 1023) * 1000000;
  fio_time___normalize(&t);
  return t;
}

/** Compares two timespecs. */
FIO_IFUNC int fio_time_cmp(struct timespec t1, struct timespec t2) {
  size_t a = (t2.tv_sec < t1.tv_sec) << 1;
  a |= (t2.tv_nsec < t1.tv_nsec);
  size_t b = (t1.tv_sec < t2.tv_sec) << 1;
  b |= (t1.tv_nsec < t2.tv_nsec);
  return (0 - (a < b)) + (b < a);
}

/* *****************************************************************************
Time Implementation
***************************************************************************** */
#if !defined(FIO_EXTERN) || defined(FIO_EXTERN_COMPLETE)

/**
 * A faster (yet less localized) alternative to `gmtime_r`.
 *
 * See the libc `gmtime_r` documentation for details.
 *
 * Falls back to `gmtime_r` for dates before epoch.
 */
SFUNC struct tm fio_time2gm(time_t timer) {
  struct tm tm;
  ssize_t a, b;
#if HAVE_TM_TM_ZONE || defined(BSD)
  tm = (struct tm){
      .tm_isdst = 0,
      .tm_zone = (char *)"UTC",
  };
#else
  tm = (struct tm){
      .tm_isdst = 0,
  };
#endif

  // convert seconds from epoch to days from epoch + extract data
  if (timer >= 0) {
    // for seconds up to weekdays, we reduce the reminder every step.
    a = (ssize_t)timer;
    b = a / 60; // b == time in minutes
    tm.tm_sec = (int)(a - (b * 60));
    a = b / 60; // b == time in hours
    tm.tm_min = (int)(b - (a * 60));
    b = a / 24; // b == time in days since epoch
    tm.tm_hour = (int)(a - (b * 24));
    // b == number of days since epoch
    // day of epoch was a thursday. Add + 4 so sunday == 0...
    tm.tm_wday = (b + 4) % 7;
  } else {
    // for seconds up to weekdays, we reduce the reminder every step.
    a = (ssize_t)timer;
    b = a / 60; // b == time in minutes
    if (b * 60 != a) {
      /* seconds passed */
      tm.tm_sec = (int)((a - (b * 60)) + 60);
      --b;
    } else {
      /* no seconds */
      tm.tm_sec = 0;
    }
    a = b / 60; // b == time in hours
    if (a * 60 != b) {
      /* minutes passed */
      tm.tm_min = (int)((b - (a * 60)) + 60);
      --a;
    } else {
      /* no minutes */
      tm.tm_min = 0;
    }
    b = a / 24; // b == time in days since epoch?
    if (b * 24 != a) {
      /* hours passed */
      tm.tm_hour = (int)((a - (b * 24)) + 24);
      --b;
    } else {
      /* no hours */
      tm.tm_hour = 0;
    }
    // day of epoch was a thursday. Add + 4 so sunday == 0...
    tm.tm_wday = ((b - 3) % 7);
    if (tm.tm_wday)
      tm.tm_wday += 7;
    /* b == days from epoch */
  }

  // at this point we can apply the algorithm described here:
  // http://howardhinnant.github.io/date_algorithms.html#civil_from_days
  // Credit to Howard Hinnant.
  {
    b += 719468L; // adjust to March 1st, 2000 (post leap of 400 year era)
    // 146,097 = days in era (400 years)
    const size_t era = (b >= 0 ? b : b - 146096) / 146097;
    const uint32_t doe = (uint32_t)(b - (era * 146097)); // day of era
    const uint16_t yoe =
        (uint16_t)((doe - doe / 1460 + doe / 36524 - doe / 146096) /
                   365); // year of era
    a = yoe;
    a += era * 400; // a == year number, assuming year starts on March 1st...
    const uint16_t doy = (uint16_t)(doe - (365 * yoe + yoe / 4 - yoe / 100));
    const uint16_t mp = (uint16_t)((5U * doy + 2) / 153);
    const uint16_t d = (uint16_t)(doy - (153U * mp + 2) / 5 + 1);
    const uint8_t m = (uint8_t)(mp + (mp < 10 ? 2 : -10));
    a += (m <= 1);
    tm.tm_year = (int)(a - 1900); // tm_year == years since 1900
    tm.tm_mon = m;
    tm.tm_mday = d;
    const uint8_t is_leap = (a % 4 == 0 && (a % 100 != 0 || a % 400 == 0));
    tm.tm_yday = (doy + (is_leap) + 28 + 31) % (365 + is_leap);
  }

  return tm;
}

/** Converts a `struct tm` to time in seconds (assuming UTC). */
SFUNC time_t fio_gm2time(struct tm tm) {
  int64_t time = 0;
  // we start with the algorithm described here:
  // http://howardhinnant.github.io/date_algorithms.html#days_from_civil
  // Credit to Howard Hinnant.
  {
    const int32_t y = (tm.tm_year + 1900) - (tm.tm_mon < 2);
    const int32_t era = (y >= 0 ? y : y - 399) / 400;
    const uint16_t yoe = (y - era * 400L); // 0-399
    const uint32_t doy =
        (153L * (tm.tm_mon + (tm.tm_mon > 1 ? -2 : 10)) + 2) / 5 + tm.tm_mday -
        1;                                                       // 0-365
    const uint32_t doe = yoe * 365L + yoe / 4 - yoe / 100 + doy; // 0-146096
    time = era * 146097LL + doe - 719468LL; // time == days from epoch
  }

  /* Adjust for hour, minute and second */
  time = time * 24LL + tm.tm_hour;
  time = time * 60LL + tm.tm_min;
  time = time * 60LL + tm.tm_sec;

  if (tm.tm_isdst > 0) {
    time -= 60 * 60;
  }
#if HAVE_TM_TM_ZONE || defined(BSD)
  if (tm.tm_gmtoff) {
    time += tm.tm_gmtoff;
  }
#endif
  return (time_t)time;
}

FIO_SFUNC char *fio_time_write_day(char *dest, const struct tm *tm) {
  static const char *FIO___DAY_NAMES[] =
      {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
  dest[0] = FIO___DAY_NAMES[tm->tm_wday][0];
  dest[1] = FIO___DAY_NAMES[tm->tm_wday][1];
  dest[2] = FIO___DAY_NAMES[tm->tm_wday][2];
  return dest + 3;
}

FIO_SFUNC char *fio_time_write_month(char *dest, const struct tm *tm) {
  // clang-format off
  static const char *FIO___MONTH_NAMES[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
  // clang-format on
  dest[0] = FIO___MONTH_NAMES[tm->tm_mon][0];
  dest[1] = FIO___MONTH_NAMES[tm->tm_mon][1];
  dest[2] = FIO___MONTH_NAMES[tm->tm_mon][2];
  return dest + 3;
}

FIO_SFUNC char *fio_time_write_year(char *dest, const struct tm *tm) {
  int64_t year = tm->tm_year + 1900;
  const size_t digits = fio_digits10(year);
  fio_ltoa10(dest, year, digits);
  return dest + digits;
}

/** Writes an RFC 7231 date representation (HTTP date format) to target. */
SFUNC size_t fio_time2rfc7231(char *target, time_t time) {
  const struct tm tm = fio_time2gm(time);
  /* note: day of month is always 2 digits */
  char *pos = target;
  uint16_t tmp;
  pos = fio_time_write_day(pos, &tm);
  *pos++ = ',';
  *pos++ = ' ';
  tmp = tm.tm_mday / 10;
  *pos++ = '0' + tmp;
  *pos++ = '0' + (tm.tm_mday - (tmp * 10));
  *pos++ = ' ';
  pos = fio_time_write_month(pos, &tm);
  *pos++ = ' ';
  pos = fio_time_write_year(pos, &tm);
  *pos++ = ' ';
  tmp = tm.tm_hour / 10;
  *pos++ = '0' + tmp;
  *pos++ = '0' + (tm.tm_hour - (tmp * 10));
  *pos++ = ':';
  tmp = tm.tm_min / 10;
  *pos++ = '0' + tmp;
  *pos++ = '0' + (tm.tm_min - (tmp * 10));
  *pos++ = ':';
  tmp = tm.tm_sec / 10;
  *pos++ = '0' + tmp;
  *pos++ = '0' + (tm.tm_sec - (tmp * 10));
  *pos++ = ' ';
  *pos++ = 'G';
  *pos++ = 'M';
  *pos++ = 'T';
  *pos = 0;
  return pos - target;
}
/** Writes an RFC 2109 date representation to target. */
SFUNC size_t fio_time2rfc2109(char *target, time_t time) {
  const struct tm tm = fio_time2gm(time);
  /* note: day of month is always 2 digits */
  char *pos = target;
  uint16_t tmp;
  pos = fio_time_write_day(pos, &tm);
  *pos++ = ',';
  *pos++ = ' ';
  tmp = tm.tm_mday / 10;
  *pos++ = '0' + tmp;
  *pos++ = '0' + (tm.tm_mday - (tmp * 10));
  *pos++ = ' ';
  pos = fio_time_write_month(pos, &tm);
  *pos++ = ' ';
  pos = fio_time_write_year(pos, &tm);
  *pos++ = ' ';
  tmp = tm.tm_hour / 10;
  *pos++ = '0' + tmp;
  *pos++ = '0' + (tm.tm_hour - (tmp * 10));
  *pos++ = ':';
  tmp = tm.tm_min / 10;
  *pos++ = '0' + tmp;
  *pos++ = '0' + (tm.tm_min - (tmp * 10));
  *pos++ = ':';
  tmp = tm.tm_sec / 10;
  *pos++ = '0' + tmp;
  *pos++ = '0' + (tm.tm_sec - (tmp * 10));
  *pos++ = ' ';
  *pos++ = '-';
  *pos++ = '0';
  *pos++ = '0';
  *pos++ = '0';
  *pos++ = '0';
  *pos = 0;
  return pos - target;
}

/** Writes an RFC 2822 date representation to target. */
SFUNC size_t fio_time2rfc2822(char *target, time_t time) {
  const struct tm tm = fio_time2gm(time);
  /* note: day of month is either 1 or 2 digits */
  char *pos = target;
  uint16_t tmp;
  pos = fio_time_write_day(pos, &tm);
  *pos++ = ',';
  *pos++ = ' ';
  if (tm.tm_mday < 10) {
    *pos++ = '0' + tm.tm_mday;
  } else {
    tmp = tm.tm_mday / 10;
    *pos++ = '0' + tmp;
    *pos++ = '0' + (tm.tm_mday - (tmp * 10));
  }
  *pos++ = '-';
  pos = fio_time_write_month(pos, &tm);
  *pos++ = '-';
  pos = fio_time_write_year(pos, &tm);
  *pos++ = ' ';
  tmp = tm.tm_hour / 10;
  *pos++ = '0' + tmp;
  *pos++ = '0' + (tm.tm_hour - (tmp * 10));
  *pos++ = ':';
  tmp = tm.tm_min / 10;
  *pos++ = '0' + tmp;
  *pos++ = '0' + (tm.tm_min - (tmp * 10));
  *pos++ = ':';
  tmp = tm.tm_sec / 10;
  *pos++ = '0' + tmp;
  *pos++ = '0' + (tm.tm_sec - (tmp * 10));
  *pos++ = ' ';
  *pos++ = 'G';
  *pos++ = 'M';
  *pos++ = 'T';
  *pos = 0;
  return pos - target;
}

/**
 * Writes a date representation to target in common log format. i.e.,
 *
 *         [DD/MMM/yyyy:hh:mm:ss +0000]
 *
 * Usually requires 29 characters (including square brackets and NUL).
 */
SFUNC size_t fio_time2log(char *target, time_t time) {
  {
    const struct tm tm = fio_time2gm(time);
    /* note: day of month is either 1 or 2 digits */
    char *pos = target;
    uint16_t tmp;
    *pos++ = '[';
    tmp = tm.tm_mday / 10;
    *pos++ = '0' + tmp;
    *pos++ = '0' + (tm.tm_mday - (tmp * 10));
    *pos++ = '/';
    pos = fio_time_write_month(pos, &tm);
    *pos++ = '/';
    pos = fio_time_write_year(pos, &tm);
    *pos++ = ':';
    tmp = tm.tm_hour / 10;
    *pos++ = '0' + tmp;
    *pos++ = '0' + (tm.tm_hour - (tmp * 10));
    *pos++ = ':';
    tmp = tm.tm_min / 10;
    *pos++ = '0' + tmp;
    *pos++ = '0' + (tm.tm_min - (tmp * 10));
    *pos++ = ':';
    tmp = tm.tm_sec / 10;
    *pos++ = '0' + tmp;
    *pos++ = '0' + (tm.tm_sec - (tmp * 10));
    *pos++ = ' ';
    *pos++ = '+';
    *pos++ = '0';
    *pos++ = '0';
    *pos++ = '0';
    *pos++ = '0';
    *pos++ = ']';
    *(pos) = 0;
    return pos - target;
  }
}

/**
 * Writes a date representation to target in ISO 8601 format. i.e.,
 *
 *         YYYY-MM-DD HH:MM:SS
 *
 * Usually requires 20 characters (including NUL).
 */
SFUNC size_t fio_time2iso(char *target, time_t time) {
  {
    const struct tm tm = fio_time2gm(time);
    /* note: day of month is either 1 or 2 digits */
    char *pos = target;
    uint16_t tmp;
    pos = fio_time_write_year(pos, &tm);
    *pos++ = '-';
    pos = fio_time_write_month(pos, &tm);
    *pos++ = '-';
    tmp = tm.tm_mday / 10;
    *pos++ = '0' + tmp;
    *pos++ = '0' + (tm.tm_mday - (tmp * 10));
    *pos++ = ' ';
    tmp = tm.tm_hour / 10;
    *pos++ = '0' + tmp;
    *pos++ = '0' + (tm.tm_hour - (tmp * 10));
    *pos++ = ':';
    tmp = tm.tm_min / 10;
    *pos++ = '0' + tmp;
    *pos++ = '0' + (tm.tm_min - (tmp * 10));
    *pos++ = ':';
    tmp = tm.tm_sec / 10;
    *pos++ = '0' + tmp;
    *pos++ = '0' + (tm.tm_sec - (tmp * 10));
    *(pos) = 0;
    return pos - target;
  }
}
/* *****************************************************************************
Time Cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_TIME
#endif /* FIO_TIME */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_CLI                /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                  CLI helpers - command line interface parsing


Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_CLI) && !defined(H___FIO_CLI___H) &&                           \
    !defined(FIO___RECURSIVE_INCLUDE)
#define H___FIO_CLI___H 1

/* *****************************************************************************
Internal Macro Implementation
***************************************************************************** */

/** Used internally. */
typedef enum {
  /** A String CLI argument */
  FIO_CLI_ARG_STRING,
  /** A Boolean CLI argument */
  FIO_CLI_ARG_BOOL,
  /** An integer CLI argument */
  FIO_CLI_ARG_INT,
  FIO_CLI_ARG_PRINT,
  FIO_CLI_ARG_PRINT_LINE,
  FIO_CLI_ARG_PRINT_HEADER,
} fio_cli_arg_e;

#define FIO_CLI_ARG_NONE FIO_CLI_ARG_PRINT_HEADER

typedef struct {
  fio_cli_arg_e t;
  const char *l;
} fio___cli_line_s;

/** Indicates the CLI argument should be a String (default). */
#define FIO_CLI_STRING(line)                                                   \
  ((fio___cli_line_s){.t = FIO_CLI_ARG_STRING, .l = line})
/** Indicates the CLI argument is a Boolean value. */
#define FIO_CLI_BOOL(line)                                                     \
  ((fio___cli_line_s){.t = FIO_CLI_ARG_BOOL, .l = line})
/** Indicates the CLI argument should be an Integer (numerical). */
#define FIO_CLI_INT(line) ((fio___cli_line_s){.t = FIO_CLI_ARG_INT, .l = line})
/** Indicates the CLI string should be printed as is with proper offset. */
#define FIO_CLI_PRINT(line)                                                    \
  ((fio___cli_line_s){.t = FIO_CLI_ARG_PRINT, .l = line})
/** Indicates the CLI string should be printed as is with no offset. */
#define FIO_CLI_PRINT_LINE(line)                                               \
  ((fio___cli_line_s){.t = FIO_CLI_ARG_PRINT_LINE, .l = line})
/** Indicates the CLI string should be printed as a header. */
#define FIO_CLI_PRINT_HEADER(line)                                             \
  ((fio___cli_line_s){.t = FIO_CLI_ARG_PRINT_HEADER, .l = line})

/* *****************************************************************************
CLI API
***************************************************************************** */

/**
 * This function parses the Command Line Interface (CLI), creating a temporary
 * "dictionary" that allows easy access to the CLI using their names or aliases.
 *
 * Command line arguments may be typed. If an optional type requirement is
 * provided and the provided arument fails to match the required type, execution
 * will end and an error message will be printed along with a short "help".
 *
 * The function / macro accepts the following arguments:
 * - `argc`: command line argument count.
 * - `argv`: command line argument list (array).
 * - `unnamed_min`: the required minimum of un-named arguments.
 * - `unnamed_max`: the maximum limit of un-named arguments.
 * - `description`: a C string containing the program's description.
 * - named arguments list: a list of C strings describing named arguments.
 *
 * The following optional type requirements are:
 *
 * * FIO_CLI_STRING(desc_line)       - (default) string argument.
 * * FIO_CLI_BOOL(desc_line)         - boolean argument (no value).
 * * FIO_CLI_INT(desc_line)          - integer argument.
 * * FIO_CLI_PRINT_HEADER(desc_line) - extra header for output.
 * * FIO_CLI_PRINT(desc_line)        - extra information for output.
 *
 * Argument names MUST start with the '-' character. The first word starting
 * without the '-' character will begin the description for the CLI argument.
 *
 * The arguments "-?", "-h", "-help" and "--help" are automatically handled
 * unless overridden.
 *
 * Un-named arguments shouldn't be listed in the named arguments list.
 *
 * Example use:
 *
 *    fio_cli_start(argc, argv, 0, 0, "The NAME example accepts the following:",
 *                        FIO_CLI_PRINT_HREADER("Concurrency:"),
 *                        FIO_CLI_INT("-t -thread number of threads to run."),
 *                        FIO_CLI_INT("-w -workers number of workers to run."),
 *                        FIO_CLI_PRINT_HREADER("Address Binding:"),
 *                        "-b, -address the address to bind to.",
 *                        FIO_CLI_INT("-p,-port the port to bind to."),
 *                        FIO_CLI_PRINT("\t\tset port to zero (0) for Unix s."),
 *                        FIO_CLI_PRINT_HREADER("Logging:"),
 *                        FIO_CLI_BOOL("-v -log enable logging.")
 *                  );
 *
 *
 * This would allow access to the named arguments:
 *
 *      fio_cli_get("-b") == fio_cli_get("-address");
 *
 *
 * Once all the data was accessed, free the parsed data dictionary using:
 *
 *      fio_cli_end();
 *
 * It should be noted, arguments will be recognized in a number of forms, i.e.:
 *
 *      app -t=1 -p3000 -a localhost
 *
 * This function is NOT thread safe.
 */
#define fio_cli_start(argc, argv, unnamed_min, unnamed_max, description, ...)  \
  fio_cli_start((argc),                                                        \
                (argv),                                                        \
                (unnamed_min),                                                 \
                (unnamed_max),                                                 \
                (description),                                                 \
                (fio___cli_line_s[]){__VA_ARGS__, {0}})
/**
 * Never use the function directly, always use the MACRO, because the macro
 * attaches a NULL marker at the end of the `names` argument collection.
 */
SFUNC void fio_cli_start FIO_NOOP(int argc,
                                  char const *argv[],
                                  int unnamed_min,
                                  int unnamed_max,
                                  char const *description,
                                  fio___cli_line_s *arguments);
/**
 * Clears the memory used by the CLI dictionary, removing all parsed data.
 *
 * This function is NOT thread safe.
 */
SFUNC void fio_cli_end(void);

/** Returns the argument's value as a NUL terminated C String. */
SFUNC char const *fio_cli_get(char const *name);

/** Returns the argument's value as a NUL terminated `fio_buf_info_s`. */
SFUNC fio_buf_info_s fio_cli_get_str(char const *name);

/** Returns the argument's value as an integer. */
SFUNC int64_t fio_cli_get_i(char const *name);

/** This MACRO returns the argument's value as a boolean. */
#define fio_cli_get_bool(name) (fio_cli_get((name)) != NULL)

/** Returns the number of unnamed argument. */
SFUNC unsigned int fio_cli_unnamed_count(void);

/** Returns the unnamed argument using a 0 based `index`. */
SFUNC char const *fio_cli_unnamed(unsigned int index);

/** Returns the unnamed argument using a 0 based `index`. */
SFUNC fio_buf_info_s fio_cli_unnamed_str(unsigned int index);

/**
 * Sets the argument's value as a NUL terminated C String.
 *
 *     fio_cli_set("-p", "hello");
 *
 * This function is NOT thread safe.
 */
SFUNC void fio_cli_set(char const *name, char const *value);

/**
 * Sets the argument's value as a NUL terminated C String.
 *
 *     fio_cli_start(argc, argv,
 *                  "this is example accepts the following options:",
 *                  "-p -port the port to bind to", FIO_CLI_INT;
 *
 *     fio_cli_set("-p", "hello"); // fio_cli_get("-p") == fio_cli_get("-port");
 *
 * This function is NOT thread safe.
 */
SFUNC void fio_cli_set_i(char const *name, int64_t i);

/** Sets / adds an unnamed argument to the 0 based array of unnamed elements. */
SFUNC unsigned int fio_cli_set_unnamed(unsigned int index, const char *);

/** Calls `task` for every argument received. */
SFUNC size_t fio_cli_each(int (*task)(fio_buf_info_s name,
                                      fio_buf_info_s value,
                                      fio_cli_arg_e arg_type,
                                      void *udata),
                          void *udata);

/** Returns the argument's expected content type. */
SFUNC fio_cli_arg_e fio_cli_type(char const *name);

/* *****************************************************************************
CLI Implementation
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* *****************************************************************************
String for CLI
***************************************************************************** */
FIO_LEAK_COUNTER_DEF(fio_cli_str)

typedef struct {
  uint8_t em;     /* embedded? const? how long? */
  uint8_t pad[3]; /* padding - embedded buffer starts here */
  uint32_t len;   /* if not embedded, otherwise see `em` */
  char *str;      /* if not embedded, otherwise see `pad` */
} fio_cli_str_s;

/** CLI String free / destroy by context */
FIO_SFUNC void fio_cli_str_destroy(fio_cli_str_s *s) {
  if (!s || s->em || !s->str)
    return;
  FIO_LEAK_COUNTER_ON_FREE(fio_cli_str);
  FIO_MEM_FREE_(s->str, s->len);
  *s = (fio_cli_str_s){0};
}

/** CLI String info */
FIO_IFUNC fio_buf_info_s fio_cli_str_buf(fio_cli_str_s *s) {
  fio_buf_info_s r = {0};
  if (s && (s->em || s->len))
    r = ((s->em) & 127) ? (FIO_BUF_INFO2((char *)s->pad, (size_t)s->em))
                        : (FIO_BUF_INFO2(s->str, (size_t)s->len));
  return r;
}

/** CLI String copy */
FIO_SFUNC fio_cli_str_s fio_cli_str_new(fio_buf_info_s s) {
  fio_cli_str_s r = {0};
  if (s.len < sizeof(r) - 1) {
    r.em = s.len;
    if (s.len)
      FIO_MEMCPY(r.pad, s.buf, s.len);
    return r;
  }
  r.len = (uint32_t)s.len;
  r.str = (char *)FIO_MEM_REALLOC_(NULL, 0, s.len + 1, 0);
  FIO_ASSERT_ALLOC(r.str);
  FIO_LEAK_COUNTER_ON_ALLOC(fio_cli_str);
  FIO_MEMCPY(r.str, s.buf, s.len);
  r.str[r.len] = 0;
  return r;
}

/** CLI String tmp copy */
FIO_SFUNC fio_cli_str_s fio_cli_str_tmp(fio_buf_info_s s) {
  fio_cli_str_s r = {0};
  if (s.len < sizeof(r) - 1) {
    r.em = s.len;
    FIO_MEMCPY(r.pad, s.buf, s.len);
    return r;
  }
  r.em = 128; /* mark as const, memory shouldn't be freed */
  r.len = (uint32_t)s.len;
  r.str = s.buf;
  return r;
}

/* *****************************************************************************
String array for CLI
***************************************************************************** */
FIO_LEAK_COUNTER_DEF(fio_cli_ary)

typedef struct {
  fio_cli_str_s *ary;
  uint32_t capa;
  uint32_t w;
} fio___cli_ary_s;

FIO_SFUNC void fio___cli_ary_destroy(fio___cli_ary_s *a) {
  if (!a || !a->ary)
    return;
  for (size_t i = 0; i < a->w; ++i)
    fio_cli_str_destroy(a->ary + i);
  FIO_LEAK_COUNTER_ON_FREE(fio_cli_ary);
  FIO_MEM_FREE_(a->ary, sizeof(*a->ary) * a->capa);
  *a = (fio___cli_ary_s){0};
}
FIO_SFUNC uint32_t fio___cli_ary_new_index(fio___cli_ary_s *a) {
  FIO_ASSERT(a, "Internal CLI Error - no CLI array given!");
  if (a->w == a->capa) {
    /* increase capacity */
    if (!a->ary)
      FIO_LEAK_COUNTER_ON_ALLOC(fio_cli_ary);
    size_t new_capa = a->capa + 8;
    FIO_ASSERT(new_capa < 0xFFFFFFFFU, "fio_cli data overflow");
    fio_cli_str_s *tmp =
        (fio_cli_str_s *)FIO_MEM_REALLOC_(a->ary,
                                          sizeof(*a->ary) * a->capa,
                                          sizeof(*a->ary) * new_capa,
                                          a->capa);
    FIO_ASSERT_ALLOC(tmp);
    a->ary = tmp;
    a->capa = (uint32_t)new_capa;
    if (!(FIO_MEM_REALLOC_IS_SAFE_))
      FIO_MEMSET(a->ary + a->w, 0, sizeof(*a->ary) * (new_capa - a->w));
  }
  FIO_ASSERT_DEBUG(a->w < (uint32_t)a->capa, "CLI array index error!");
  return a->w++;
}

FIO_IFUNC fio_buf_info_s fio___cli_ary_get(fio___cli_ary_s *a, uint32_t index) {
  fio_buf_info_s r = {0};
  if (index >= a->w)
    return r;
  return fio_cli_str_buf(a->ary + index);
}
FIO_IFUNC void fio___cli_ary_set(fio___cli_ary_s *a,
                                 uint32_t index,
                                 fio_buf_info_s str) {
  FIO_ASSERT(a, "Internal CLI Error - no CLI array given!");
  if (index >= a->w)
    return;
  fio_cli_str_destroy(a->ary + index);
  a->ary[index] = fio_cli_str_new(str);
}

/* *****************************************************************************
CLI Alias Index Map
***************************************************************************** */

typedef struct {
  fio_cli_str_s name;
  fio_cli_arg_e t;
  uint32_t index;
} fio___cli_aliases_s;

#define FIO___CLI_ALIAS_HASH(o)                                                \
  fio_risky_hash(fio_cli_str_buf(&o->name).buf,                                \
                 fio_cli_str_buf(&o->name).len,                                \
                 (uint64_t)(uintptr_t)fio_cli_str_destroy)
#define FIO___CLI_ALIAS_IS_EQ(a, b)                                            \
  FIO_BUF_INFO_IS_EQ(fio_cli_str_buf(&a->name), fio_cli_str_buf(&b->name))
FIO_TYPEDEF_IMAP_ARRAY(fio___cli_amap,
                       fio___cli_aliases_s,
                       uint32_t,
                       FIO___CLI_ALIAS_HASH,
                       FIO___CLI_ALIAS_IS_EQ,
                       FIO_IMAP_ALWAYS_VALID)
#undef FIO___CLI_ALIAS_HASH
#undef FIO___CLI_ALIAS_IS_EQ

/* *****************************************************************************
CLI Alias and Value Data Store
***************************************************************************** */

static struct fio___cli_data_s {
  /* maps alias names to value indexes (array) */
  fio___cli_amap_s aliases;
  fio___cli_ary_s indexed, unnamed;
  const char *description;
  fio___cli_line_s *args;
  const char *app_name;
} fio___cli_data = {{0}};

FIO_SFUNC void fio___cli_data_destroy(void) {
  fio___cli_ary_destroy(&fio___cli_data.indexed);
  fio___cli_ary_destroy(&fio___cli_data.unnamed);
  FIO_IMAP_EACH(fio___cli_amap, &fio___cli_data.aliases, i) {
    fio_cli_str_destroy(&fio___cli_data.aliases.ary[i].name);
  }
  fio___cli_amap_destroy(&fio___cli_data.aliases);
  fio___cli_data = (struct fio___cli_data_s){{0}};
}

FIO_SFUNC void fio___cli_data_alias(fio_buf_info_s key,
                                    fio_buf_info_s alias,
                                    fio_cli_arg_e t) {
  fio___cli_aliases_s o = {.name = fio_cli_str_tmp(key)};
  fio___cli_aliases_s *a = fio___cli_amap_get(&fio___cli_data.aliases, o);
  if (!a) {
    o.name = fio_cli_str_new(key);
    o.index = fio___cli_ary_new_index(&fio___cli_data.indexed);
    o.t = t;
    fio___cli_amap_set(&fio___cli_data.aliases, o, 1);
  }
  if (!alias.len)
    return;
  o.name = fio_cli_str_tmp(alias);
  fio___cli_aliases_s *old = fio___cli_amap_get(&fio___cli_data.aliases, o);
  if (old) {
    FIO_LOG_WARNING("(fio_cli) CLI alias %s already exists! overwriting...",
                    fio_cli_str_buf(&o.name).buf);
    old->index = a->index;
  } else {
    o.name = fio_cli_str_new(alias);
    o.index = a->index;
    o.t = a->t;
    fio___cli_amap_set(&fio___cli_data.aliases, o, 1);
  }
}

FIO_SFUNC void fio___cli_print_help(void);

FIO_SFUNC void fio___cli_data_set(fio_buf_info_s key, fio_buf_info_s value) {
  fio___cli_aliases_s o = {.name = fio_cli_str_tmp(key)};
  fio___cli_aliases_s *a = fio___cli_amap_get(&fio___cli_data.aliases, o);
  if (!a) {
    fio___cli_data_alias(key, (fio_buf_info_s){0}, FIO_CLI_ARG_STRING);
    a = fio___cli_amap_get(&fio___cli_data.aliases, o);
  }
  FIO_ASSERT(a && a->index < fio___cli_data.indexed.w,
             "(fio_cli) CLI alias initialization error!");
  if (a->t == FIO_CLI_ARG_INT) {
    char *start = value.buf;
    fio_atol(&start);
    if (start != value.buf + value.len) {
      FIO_LOG_FATAL("(CLI) %.*s should be an integer!",
                    (int)value.len,
                    value.buf);
      fio___cli_print_help();
    }
  }
  fio___cli_ary_set(&fio___cli_data.indexed, a->index, value);
}

FIO_SFUNC fio_buf_info_s fio___cli_data_get(fio_buf_info_s key) {
  fio_buf_info_s r = {0};
  fio___cli_aliases_s o = {.name = fio_cli_str_tmp(key)};
  fio___cli_aliases_s *a = fio___cli_amap_get(&fio___cli_data.aliases, o);
  if (a)
    r = fio___cli_ary_get(&fio___cli_data.indexed, a->index);
  if (!r.len)
    r.buf = NULL;
  return r;
}

FIO_SFUNC uint32_t fio___cli_data_get_index(fio_buf_info_s key) {
  uint32_t r = (uint32_t)-1;
  fio___cli_aliases_s o = {.name = fio_cli_str_tmp(key)};
  fio___cli_aliases_s *a = fio___cli_amap_get(&fio___cli_data.aliases, o);
  if (a)
    r = a->index;
  return r;
}

/* *****************************************************************************
CLI Destruction
***************************************************************************** */

SFUNC void __attribute__((destructor)) fio_cli_end(void) {
  fio___cli_data_destroy();
}

/* *****************************************************************************
CLI Public Get/Set API
***************************************************************************** */

/** Returns the argument's expected content type. */
SFUNC fio_cli_arg_e fio_cli_type(char const *name) {
  fio_cli_arg_e r = FIO_CLI_ARG_NONE;
  fio___cli_aliases_s o = {.name =
                               fio_cli_str_tmp(FIO_BUF_INFO1((char *)name))};
  fio___cli_aliases_s *a = fio___cli_amap_get(&fio___cli_data.aliases, o);
  if (a)
    r = a->t;
  return r;
}

/** Returns the argument's value as a NUL terminated C String. */
SFUNC char const *fio_cli_get(char const *name) {
  if (!name)
    return fio_cli_unnamed(0);
  fio_buf_info_s key = FIO_BUF_INFO1((char *)name);
  return fio___cli_data_get(key).buf;
}

/** Returns the argument's value as a NUL terminated C String. */
SFUNC fio_buf_info_s fio_cli_get_str(char const *name) {
  if (!name)
    goto unnamed_zero;
  return fio___cli_data_get(FIO_BUF_INFO1((char *)name));
unnamed_zero:
  if (!fio___cli_data.unnamed.w)
    return FIO_BUF_INFO0;
  return fio___cli_ary_get(&fio___cli_data.unnamed, 0);
}

/** Returns the argument's value as an integer. */
SFUNC int64_t fio_cli_get_i(char const *name) {
  char *val = (char *)fio_cli_get(name);
  if (!val)
    return 0;
  return fio_atol(&val);
}

/** Returns the number of unnamed argument. */
SFUNC unsigned int fio_cli_unnamed_count(void) {
  return fio___cli_data.unnamed.w;
}

/** Returns the unnamed argument using a 0 based `index`. */
SFUNC char const *fio_cli_unnamed(unsigned int index) {
  if (index >= fio___cli_data.unnamed.w)
    return NULL;
  return fio___cli_ary_get(&fio___cli_data.unnamed, (uint32_t)index).buf;
}

/** Returns the unnamed argument using a 0 based `index`. */
SFUNC fio_buf_info_s fio_cli_unnamed_str(unsigned int index) {
  if (index >= fio___cli_data.unnamed.w)
    return FIO_BUF_INFO0;
  return fio___cli_ary_get(&fio___cli_data.unnamed, (uint32_t)index);
}

/**
 * Sets the argument's value as a NUL terminated C String.
 *
 *     fio_cli_set("-p", "hello");
 *
 * This function is NOT thread safe.
 */
SFUNC void fio_cli_set(char const *name, char const *value) {
  fio_buf_info_s key = FIO_BUF_INFO1((char *)name);
  fio_buf_info_s val = FIO_BUF_INFO1((char *)value);
  if (!name) {
    if (!value)
      return;
    uint32_t i = fio___cli_ary_new_index(&fio___cli_data.unnamed);
    fio___cli_ary_set(&fio___cli_data.unnamed, i, val);
    return;
  }
  fio___cli_data_set(key, val);
}

/**
 * Sets the argument's value as a NUL terminated C String.
 *
 *     fio_cli_start(argc, argv,
 *                  "this is example accepts the following options:",
 *                  "-p -port the port to bind to", FIO_CLI_INT;
 *
 *     fio_cli_set("-p", "hello"); // fio_cli_get("-p") == fio_cli_get("-port");
 *
 * This function is NOT thread safe.
 */
SFUNC void fio_cli_set_i(char const *name, int64_t i) {
  char buf[32];
  size_t len = fio_digits10(i);
  fio_ltoa10(buf, i, len);
  buf[len] = 0;
  fio_cli_set(name, buf);
}

/** Sets / adds an unnamed argument to the 0 based array of unnamed elements. */
SFUNC unsigned int fio_cli_set_unnamed(unsigned int index, const char *value) {
  if (!value)
    return (uint32_t)-1;
  fio_buf_info_s val = FIO_BUF_INFO1((char *)value);
  if (!val.len)
    return (uint32_t)-1;
  if (index >= fio___cli_data.unnamed.w)
    index = fio___cli_ary_new_index(&fio___cli_data.unnamed);
  fio___cli_ary_set(&fio___cli_data.unnamed, index, val);
  return index;
}

/** Calls `task` for every argument received. */
SFUNC size_t fio_cli_each(int (*task)(fio_buf_info_s name,
                                      fio_buf_info_s value,
                                      fio_cli_arg_e arg_type,
                                      void *udata),
                          void *udata) {
  size_t r = 0;
  if (!task)
    return r;
  FIO_IMAP_EACH(fio___cli_amap, &(fio___cli_data.aliases), i) {
    fio_buf_info_s value = fio_cli_str_buf(fio___cli_data.indexed.ary +
                                           fio___cli_data.aliases.ary[i].index);
    if (!value.len)
      continue;
    ++r;
    if (task(fio_cli_str_buf(&fio___cli_data.aliases.ary[i].name),
             value,
             fio___cli_data.aliases.ary[i].t,
             udata))
      break;
  }
  for (size_t i = 0; i < fio___cli_data.unnamed.w; ++i) {
    fio_buf_info_s value = fio_cli_str_buf(fio___cli_data.unnamed.ary + i);
    if (!value.len)
      continue;
    ++r;
    if (task(FIO_BUF_INFO2(NULL, 0),
             value,
             fio___cli_data.aliases.ary[i].t,
             udata))
      break;
  }
  return r;
}

/* *****************************************************************************
CLI Name Iterator
***************************************************************************** */

typedef struct {
  fio___cli_line_s *args;
  fio_buf_info_s line;
  fio_buf_info_s desc;
  size_t index;
  fio_cli_arg_e line_type;
} fio___cli_iterator_args_s;

#define FIO___CLI_EACH_ARG(args_, i)                                           \
  for (fio___cli_iterator_args_s i =                                           \
           {                                                                   \
               .args = args_,                                                  \
              .line = FIO_BUF_INFO1((char *)((args_)[0].l)),                   \
              .line_type = (args_)[0].t,                                       \
           };                                                                  \
       i.line.buf;                                                             \
       (++i.index,                                                             \
        i.line = FIO_BUF_INFO1((char *)i.args[i.index].l),                     \
        i.line_type = i.args[i.index].t))

typedef struct {
  fio_buf_info_s line;
  fio_buf_info_s alias;
} fio___cli_iterator_alias_s;

FIO_IFUNC fio_buf_info_s fio___cli_iterator_alias_first(fio___cli_line_s *arg,
                                                        fio_buf_info_s line) {
  fio_buf_info_s a = {0};
  if (arg->t > FIO_CLI_ARG_INT)
    return a;
  if (!line.buf || line.buf[0] != '-')
    return a;
  char *pos = (char *)FIO_MEMCHR(line.buf, ' ', line.len);
  if (!pos)
    pos = line.buf + line.len;
  a = FIO_BUF_INFO2(line.buf, (size_t)(pos - line.buf));
  return a;
}
FIO_IFUNC fio_buf_info_s fio___cli_iterator_alias_next(fio_buf_info_s line,
                                                       fio_buf_info_s prev) {
  fio_buf_info_s a = {0};
  if (!prev.buf[prev.len])
    return a; /* eol */
  prev.buf += prev.len + 1;
  if (prev.buf[0] != '-')
    return a; /* no more aliases */
  char *pos =
      (char *)FIO_MEMCHR(prev.buf, ' ', ((line.buf + line.len) - prev.buf));
  if (!pos)
    pos = line.buf + line.len;
  a = FIO_BUF_INFO2(prev.buf, (size_t)(pos - prev.buf));
  return a;
}

#define FIO___CLI_EACH_ALIAS(i, alias)                                         \
  for (fio_buf_info_s alias =                                                  \
           fio___cli_iterator_alias_first(i.args + i.index, i.line);           \
       alias.buf;                                                              \
       alias = fio___cli_iterator_alias_next(i.line, alias))

FIO_IFUNC fio_buf_info_s
fio___cli_iterator_default_val(fio___cli_iterator_args_s *i) {
  fio_buf_info_s a = {0};
  fio_buf_info_s line = i->line;
  if (!line.buf || line.buf[0] != '-') {
    i->desc = line;
    return a;
  }
  for (;;) {
    char *pos = (char *)FIO_MEMCHR(line.buf, ' ', line.len);
    if (!pos)
      return a;
    ++pos;
    if (pos[0] == '-') {
      line.len = (line.buf + line.len) - pos;
      line.buf = pos;
      continue;
    }
    if (pos[0] != '(') {
      i->desc.len = (line.buf + line.len) - pos;
      i->desc.buf = pos;
      return a;
    }
    if (pos[1] == '"') {
      pos += 2;
      a.buf = pos;
      while (*pos && !(pos[0] == '"' && pos[1] == ')'))
        ++pos;
      if (!pos[0]) {
        /* no default value? */
        i->desc.len = (line.buf + line.len) - a.buf;
        i->desc.buf = a.buf;
        a = (fio_buf_info_s){0};
        return a;
      }
      a.len = pos - a.buf;
      pos += 2;
    } else {
      pos += 1;
      a.buf = pos;
      while (*pos && pos[0] != ')')
        ++pos;
      if (!pos[0]) {
        /* no default value? */
        i->desc.len = (line.buf + line.len) - a.buf;
        i->desc.buf = a.buf;
        a = (fio_buf_info_s){0};
        return a;
      }
      a.len = pos - a.buf;
      ++pos;
    }
    pos += *pos == ' ';
    line = i->line;
    i->desc.len = (line.buf + line.len) - pos;
    i->desc.buf = pos;
    return a;
  }
}

#define FIO___CLI_EACH_DESC(i, desc_)                                          \
  for (fio_buf_info_s desc_ = i.desc;                                          \
       desc_.len || i.args[i.index + 1].t == FIO_CLI_ARG_PRINT;                \
       desc_ = (i.args[i.index + 1].t == FIO_CLI_ARG_PRINT                     \
                    ? (++i.index, FIO_BUF_INFO1((char *)i.args[i.index].l))    \
                    : FIO_BUF_INFO2(0, 0)))

/* *****************************************************************************
CLI Build + Parsing Arguments
***************************************************************************** */

FIO_SFUNC void fio___cli_build_argument_aliases(char const *argv[],
                                                char const *description,
                                                fio___cli_line_s *args) {
  /**   Setup the CLI argument alias indexing   **/
  fio___cli_data.description = description;
  fio___cli_data.args = args;
  fio___cli_data.app_name = argv[0];
  FIO___CLI_EACH_ARG(args, i) {
    fio_buf_info_s first_alias = {0};
    fio_buf_info_s def = fio___cli_iterator_default_val(&i);
    switch (i.line_type) {
    case FIO_CLI_ARG_STRING: /* fall through */
    case FIO_CLI_ARG_BOOL:   /* fall through */
    case FIO_CLI_ARG_INT:    /* fall through */
      FIO_ASSERT(
          i.line.buf[0] == '-',
          "(CLI) argument lines MUST start with an '-argument-name':\n\t%s",
          i.line.buf);
      FIO___CLI_EACH_ALIAS(i, alias) {
        if (first_alias.buf) {
          fio___cli_data_alias(first_alias, alias, i.line_type);
          continue;
        }
        fio___cli_data_alias(alias, first_alias, i.line_type);
        first_alias = alias;
      }
      if (def.len) {
        FIO_ASSERT(
            i.line_type != FIO_CLI_ARG_BOOL,
            "(CLI) boolean CLI arguments cannot have a default value:\n\t%s",
            i.line.buf);
        fio___cli_data_set(first_alias, def);
      }
      continue;
    case FIO_CLI_ARG_PRINT:      /* fall through */
    case FIO_CLI_ARG_PRINT_LINE: /* fall through */
    case FIO_CLI_ARG_PRINT_HEADER: continue;
    }
  }
}

void fio_cli_start___(void); /* sublime text marker */
SFUNC void fio_cli_start FIO_NOOP(int argc,
                                  char const *argv[],
                                  int unnamed_min,
                                  int unnamed_max,
                                  char const *description,
                                  fio___cli_line_s *args) {
  uint32_t help_value32 = fio_buf2u32u("help");

  fio___cli_build_argument_aliases(argv, description, args);
  if (unnamed_min == -1) {
    unnamed_max = -1;
    unnamed_min = 0;
  }

  /**   Consume Arguments   **/
  for (size_t i = 1; i < (size_t)argc; ++i) {
    fio_buf_info_s key = FIO_BUF_INFO1((char *)argv[i]);
    fio_buf_info_s value = {0};
    fio___cli_aliases_s *a = NULL;
    if (!key.buf || !key.len)
      continue;
    if (key.buf[0] != '-')
      goto process_unnamed;
    /* --help / -h / -? */
    if ((key.len == 2 && ((key.buf[1] | 32) == 'h' || key.buf[1] == '?')) ||
        (key.len == 5 &&
         (fio_buf2u32u(key.buf + 1) | 0x20202020UL) == help_value32) ||
        (key.len == 6 && key.buf[1] == '-' &&
         (fio_buf2u32u(key.buf + 2) | 0x20202020UL) == help_value32))
      fio___cli_print_help();
    /* look for longest argument match for argument (find, i.e. -arg=val) */
    for (;;) {
      fio___cli_aliases_s o = {.name = fio_cli_str_tmp(key)};
      a = fio___cli_amap_get(&fio___cli_data.aliases, o);
      if (a)
        break;
      ++value.len;
      --key.len;
      value.buf = key.buf + key.len;
      if (!key.len) {
        key = value;
        goto process_unnamed;
      }
    }
    /* boolean values can be chained, but cannot have an actual value. */
    if (a->t == FIO_CLI_ARG_BOOL) {
      fio_buf_info_s bool_value = FIO_BUF_INFO2((char *)"1", 1);
      char bool_buf[3] = {'-', 0, 0};
      for (;;) {
        fio___cli_ary_set(&fio___cli_data.indexed, a->index, bool_value);
        while (value.len && value.buf[0] == ',')
          (--value.len, ++value.buf);
        if (!value.len)
          break;
        bool_buf[1] = value.buf[0];
        --value.len;
        ++value.buf;
        key = FIO_BUF_INFO2(bool_buf, 2);
        fio___cli_aliases_s o = {.name = fio_cli_str_tmp(key)};
        a = fio___cli_amap_get(&fio___cli_data.aliases, o);
        if (!a || a->t != FIO_CLI_ARG_BOOL) {
          FIO_LOG_FATAL(
              "(CLI) unrecognized boolean value (%s) embedded in argument %s",
              bool_buf,
              argv[i]);
          fio___cli_print_help();
        }
      }
      continue;
    }

    if (value.len) { /* values such as `-arg34` / `-arg=32` */
      value.len -= (value.buf[0] == '=');
      value.buf += (value.buf[0] == '=');
    } else { /* values such as `-arg 32` (using 2 argv elements)*/
      if ((i + 1) == (size_t)argc) {
        FIO_LOG_FATAL("(CLI) argument value missing for (%s)",
                      key.buf,
                      argv[i]);
        fio___cli_print_help();
      }
      ++i;
      value = FIO_BUF_INFO1((char *)argv[i]);
    }
    fio___cli_data_set(key, value); /* use this for type validation */
    continue;
  process_unnamed:

    if (!unnamed_max) {
      FIO_LOG_FATAL("(CLI) unnamed arguments limit reached at argument: %s",
                    key.buf);
      fio___cli_print_help();
    }
    fio___cli_ary_set(&fio___cli_data.unnamed,
                      fio___cli_ary_new_index(&fio___cli_data.unnamed),
                      key);
    --unnamed_max;
    continue;
  }
  if (unnamed_min && fio___cli_data.unnamed.w < (uint32_t)unnamed_min) {
    FIO_LOG_FATAL("(CLI) missing required arguments");
    fio___cli_print_help();
  }
}

/* *****************************************************************************
CLI Help Output
***************************************************************************** */
FIO_LEAK_COUNTER_DEF(fio_cli_help_writer)

FIO_IFUNC fio_str_info_s fio___cli_write2line(fio_str_info_s d,
                                              fio_buf_info_s s,
                                              uint8_t static_memory) {
  if (d.len + s.len + 2 > d.capa) {
    size_t new_capa = (d.len + s.len) << 1;
    char *tmp = (char *)FIO_MEM_REALLOC_(NULL, 0, new_capa, 0);
    FIO_ASSERT_ALLOC(tmp);
    FIO_LEAK_COUNTER_ON_ALLOC(fio_cli_help_writer);
    FIO_MEMCPY(tmp, d.buf, d.len);
    if (!static_memory) {
      FIO_LEAK_COUNTER_ON_FREE(fio_cli_help_writer);
      FIO_MEM_FREE_(d.buf, d.capa);
    }
    d.capa = new_capa;
    d.buf = tmp;
  }
  FIO_MEMCPY(d.buf + d.len, s.buf, s.len);
  d.len += s.len;
  return d;
}

FIO_SFUNC fio_str_info_s fio___cli_write2line_finalize(fio_str_info_s d,
                                                       fio_buf_info_s app_name,
                                                       uint8_t static_memory) {
  /* replace "NAME" with `app_name` */
  size_t additional_bytes = app_name.len > 4 ? app_name.len - 4 : 0;
  char *pos = (char *)FIO_MEMCHR(d.buf, 'N', d.len);
  uint32_t name_val = fio_buf2u32u("NAME");
  while (pos) {
    if (fio_buf2u32u(pos) != name_val) {
      if (pos + 4 > d.buf + d.len)
        break;
      pos = (char *)FIO_MEMCHR(pos + 1, 'N', (d.buf + d.len) - pos);
      continue;
    }
    if (d.len + additional_bytes + 2 > d.capa) { /* not enough room? */
      size_t new_capa = d.len + ((additional_bytes + 2) << 2);
      char *tmp = (char *)FIO_MEM_REALLOC_(NULL, 0, new_capa, 0);
      FIO_ASSERT_ALLOC(tmp);
      FIO_LEAK_COUNTER_ON_ALLOC(fio_cli_help_writer);
      FIO_MEMCPY(tmp, d.buf, d.len);
      if (!static_memory) {
        FIO_LEAK_COUNTER_ON_FREE(fio_cli_help_writer);
        FIO_MEM_FREE_(d.buf, d.capa);
      }
      static_memory = 0;
      pos = tmp + (pos - d.buf);
      d.capa = new_capa;
      d.buf = tmp;
    }
    FIO_MEMMOVE(pos + app_name.len, pos + 4, ((d.buf + d.len) - (pos + 4)));
    FIO_MEMCPY(pos, app_name.buf, app_name.len);
    d.len -= 4;
    d.len += app_name.len;
    pos += app_name.len;
  }
  d.buf[d.len] = 0;
  return d;
}

FIO_SFUNC void fio___cli_print_help(void) {
  char const *description = fio___cli_data.description;
  fio___cli_line_s *args = fio___cli_data.args;

  fio_buf_info_s app_name = FIO_BUF_INFO2(
      (char *)fio___cli_data.app_name,
      (fio___cli_data.app_name ? FIO_STRLEN(fio___cli_data.app_name) : 0));
  FIO_STR_INFO_TMP_VAR(help, 8191);
  fio_str_info_s help_org_state = help;

  help = fio___cli_write2line(help,
                              FIO_BUF_INFO1((char *)"\n"),
                              help_org_state.buf == help.buf);
  help = fio___cli_write2line(help,
                              FIO_BUF_INFO1((char *)description),
                              help_org_state.buf == help.buf);
  help = fio___cli_write2line(help,
                              FIO_BUF_INFO1((char *)"\n"),
                              help_org_state.buf == help.buf);

  FIO___CLI_EACH_ARG(args, i) {
    fio_buf_info_s first_alias = {0};
    fio_buf_info_s def = fio___cli_iterator_default_val(&i);
    fio_buf_info_s argument_type_txt = {0};
    switch (i.line_type) {
    case FIO_CLI_ARG_STRING:
      argument_type_txt = FIO_BUF_INFO1(
          (char *)"\x1B[0m \x1B[2m<string value>"); /* fall through */
    case FIO_CLI_ARG_BOOL:
      FIO_ASSERT(i.line_type != FIO_CLI_ARG_BOOL || !def.len,
                 "(CLI) boolean values cannot have a default value:\n\t%s",
                 i.line.buf);
      if (!argument_type_txt.buf)
        argument_type_txt = FIO_BUF_INFO1(
            (char *)"\x1B[0m \x1B[2m(boolean flag)"); /* fall through */
    case FIO_CLI_ARG_INT:
      if (!argument_type_txt.buf)
        argument_type_txt =
            FIO_BUF_INFO1((char *)"\x1B[0m \x1B[2m<integer value>");
      FIO_ASSERT(
          i.line.buf[0] == '-',
          "(CLI) argument lines MUST start with an '-argument-name':\n\t%s",
          i.line.buf);
      FIO___CLI_EACH_ALIAS(i, al) {
        if (!first_alias.buf)
          help = fio___cli_write2line(help,
                                      FIO_BUF_INFO1((char *)"  \x1B[1m"),
                                      help_org_state.buf == help.buf);
        else
          help = fio___cli_write2line(help,
                                      FIO_BUF_INFO1((char *)"\x1B[0m, \x1B[1m"),
                                      help_org_state.buf == help.buf);
        first_alias = al;
        help = fio___cli_write2line(help,
                                    FIO_STR2BUF_INFO(al),
                                    help_org_state.buf == help.buf);
      }
      help = fio___cli_write2line(help,
                                  argument_type_txt,
                                  help_org_state.buf == help.buf);
      if (def.len) {
        help = fio___cli_write2line(help,
                                    FIO_BUF_INFO1((char *)", defaults to: "),
                                    help_org_state.buf == help.buf);
        help = fio___cli_write2line(help,
                                    FIO_STR2BUF_INFO(def),
                                    help_org_state.buf == help.buf);
      }
      help = fio___cli_write2line(help,
                                  FIO_BUF_INFO1((char *)"\x1B[0m\n"),
                                  help_org_state.buf == help.buf);
      FIO___CLI_EACH_DESC(i, desc) {
        help = fio___cli_write2line(help,
                                    FIO_BUF_INFO1((char *)"\t"),
                                    help_org_state.buf == help.buf);
        help = fio___cli_write2line(help,
                                    FIO_STR2BUF_INFO(desc),
                                    help_org_state.buf == help.buf);
        help = fio___cli_write2line(help,
                                    FIO_BUF_INFO1((char *)"\n"),
                                    help_org_state.buf == help.buf);
      }
      continue;
    case FIO_CLI_ARG_PRINT:
      help = fio___cli_write2line(help,
                                  FIO_BUF_INFO1((char *)"\t"),
                                  help_org_state.buf ==
                                      help.buf); /* fall through */
    case FIO_CLI_ARG_PRINT_LINE:
      help = fio___cli_write2line(help,
                                  FIO_STR2BUF_INFO(i.line),
                                  help_org_state.buf == help.buf);
      help = fio___cli_write2line(help,
                                  FIO_BUF_INFO1((char *)"\n"),
                                  help_org_state.buf == help.buf);
      continue;
    case FIO_CLI_ARG_PRINT_HEADER:
      help = fio___cli_write2line(help,
                                  FIO_BUF_INFO1((char *)"\n\x1B[4m"),
                                  help_org_state.buf == help.buf);
      help = fio___cli_write2line(help,
                                  FIO_STR2BUF_INFO(i.line),
                                  help_org_state.buf == help.buf);
      help = fio___cli_write2line(help,
                                  FIO_BUF_INFO1((char *)"\x1B[0m\n"),
                                  help_org_state.buf == help.buf);
      continue;
    }
  }
  help = fio___cli_write2line(
      help,
      FIO_BUF_INFO1((char *)"\nUse any of the following input formats:\n"
                            "\t-arg <value>\t-arg=<value>\t-arg<value>\n"
                            "\n"
                            "Use \x1B[1m-h\x1B[0m , \x1B[1m-help\x1B[0m or "
                            "\x1B[1m-?\x1B[0m "
                            "to get this information again.\n"
                            "\n"),
      help_org_state.buf == help.buf);
  help = fio___cli_write2line_finalize(help,
                                       app_name,
                                       help_org_state.buf == help.buf);
  fwrite(help.buf, 1, help.len, stdout);
  if (help_org_state.buf != help.buf) {
    FIO_LEAK_COUNTER_ON_FREE(fio_cli_help_writer);
    FIO_MEM_FREE_(help.buf, help.capa);
  }
  fio_cli_end();
  exit(0);
}
/* *****************************************************************************
CLI - cleanup
***************************************************************************** */
#undef FIO___CLI_ON_ALLOC
#undef FIO___CLI_ON_FREE
#endif /* FIO_EXTERN_COMPLETE*/
#endif /* FIO_CLI */
#undef FIO_CLI
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_MEMORY_NAME fio    /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                      Custom Memory Allocator / Pooling



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */

/* *****************************************************************************
Memory Allocation - Setup Alignment Info
***************************************************************************** */
#if defined(FIO_MEMORY_NAME) && !defined(FIO___RECURSIVE_INCLUDE)

#undef FIO_MEM_ALIGN
#undef FIO_MEM_ALIGN_NEW

#ifndef FIO_MEMORY_ALIGN_LOG
/** Allocation alignment, MUST be >= 3 and <= 10*/
#define FIO_MEMORY_ALIGN_LOG 4

#elif FIO_MEMORY_ALIGN_LOG < 3
#undef FIO_MEMORY_ALIGN_LOG
#define FIO_MEMORY_ALIGN_LOG 3
#elif FIO_MEMORY_ALIGN_LOG > 10
#undef FIO_MEMORY_ALIGN_LOG
#define FIO_MEMORY_ALIGN_LOG 10
#endif

/* Helper macro, don't change this */
#undef FIO_MEMORY_ALIGN_SIZE
/** The minimal allocation size & alignment. */
#define FIO_MEMORY_ALIGN_SIZE (1UL << FIO_MEMORY_ALIGN_LOG)

/* inform the compiler that the returned value is aligned on 16 byte marker */
#if __clang__ || __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8)
#define FIO_MEM_ALIGN __attribute__((assume_aligned(FIO_MEMORY_ALIGN_SIZE)))
#define FIO_MEM_ALIGN_NEW                                                      \
  __attribute__((malloc, assume_aligned(FIO_MEMORY_ALIGN_SIZE)))
#else
#define FIO_MEM_ALIGN
#define FIO_MEM_ALIGN_NEW
#endif /* (__clang__ || __GNUC__)... */

/* *****************************************************************************
Memory Allocation - API
***************************************************************************** */

/**
 * Allocates memory using a per-CPU core block memory pool.
 * Memory is zeroed out.
 *
 * Allocations above FIO_MEMORY_BLOCK_ALLOC_LIMIT will be redirected to `mmap`,
 * as if `mempool_mmap` was called.
 *
 * `mempool_malloc` promises a best attempt at providing locality between
 * consecutive calls, but locality can't be guaranteed.
 */
SFUNC void *FIO_MEM_ALIGN_NEW FIO_NAME(FIO_MEMORY_NAME, malloc)(size_t size);

/**
 * same as calling `fio_malloc(size_per_unit * unit_count)`;
 *
 * Allocations above FIO_MEMORY_BLOCK_ALLOC_LIMIT will be redirected to `mmap`,
 * as if `mempool_mmap` was called.
 */
SFUNC void *FIO_MEM_ALIGN_NEW FIO_NAME(FIO_MEMORY_NAME,
                                       calloc)(size_t size_per_unit,
                                               size_t unit_count);

/** Frees memory that was allocated using this library. */
SFUNC void FIO_NAME(FIO_MEMORY_NAME, free)(void *ptr);

/**
 * Re-allocates memory. An attempt to avoid copying the data is made only for
 * big memory allocations (larger than FIO_MEMORY_BLOCK_ALLOC_LIMIT).
 */
SFUNC void *FIO_MEM_ALIGN FIO_NAME(FIO_MEMORY_NAME, realloc)(void *ptr,
                                                             size_t new_size);

/**
 * Re-allocates memory. An attempt to avoid copying the data is made only for
 * big memory allocations (larger than FIO_MEMORY_BLOCK_ALLOC_LIMIT).
 *
 * This variation can perform better, as it might copy less data.
 */
SFUNC void *FIO_MEM_ALIGN FIO_NAME(FIO_MEMORY_NAME, realloc2)(void *ptr,
                                                              size_t new_size,
                                                              size_t copy_len);

/**
 * Allocates memory directly using `mmap`, this is preferred for objects that
 * both require almost a page of memory (or more) and expect a long lifetime.
 *
 * However, since this allocation will invoke the system call (`mmap`), it will
 * be inherently slower.
 *
 * `mempoll_free` can be used for deallocating the memory.
 */
SFUNC void *FIO_MEM_ALIGN_NEW FIO_NAME(FIO_MEMORY_NAME, mmap)(size_t size);

/**
 * When forking is called manually, call this function to reset the facil.io
 * memory allocator's locks.
 */
SFUNC void FIO_NAME(FIO_MEMORY_NAME, malloc_after_fork)(void);

/* *****************************************************************************
Memory Allocation - configuration macros

NOTE: most configuration values should be a power of 2 or a logarithmic value.
***************************************************************************** */

/* Make sure the system's allocator is marked as unsafe. */
#if FIO_MALLOC_TMP_USE_SYSTEM
#undef FIO_MEMORY_INITIALIZE_ALLOCATIONS
#define FIO_MEMORY_INITIALIZE_ALLOCATIONS 0
#endif

#ifndef FIO_MEMORY_SYS_ALLOCATION_SIZE_LOG
/**
 * The logarithmic size of a single allocation "chunk" (16 blocks).
 *
 * Limited to >=17 and <=24.
 *
 * By default 22, which is a ~2Mb allocation per system call, resulting in a
 * maximum allocation size of 131Kb.
 */
#define FIO_MEMORY_SYS_ALLOCATION_SIZE_LOG 21
#endif

#ifndef FIO_MEMORY_CACHE_SLOTS
/**
 * The number of system allocation "chunks" to cache even if they are not in
 * use.
 */
#define FIO_MEMORY_CACHE_SLOTS 4
#endif

#ifndef FIO_MEMORY_INITIALIZE_ALLOCATIONS
/**
 * Forces the allocator to zero out memory early and often, so allocations
 * return initialized memory (bytes are all zeros).
 *
 * This will make the realloc2 safe for use (all data not copied is zero).
 */
#define FIO_MEMORY_INITIALIZE_ALLOCATIONS                                      \
  FIO_MEMORY_INITIALIZE_ALLOCATIONS_DEFAULT
#elif FIO_MEMORY_INITIALIZE_ALLOCATIONS
#undef FIO_MEMORY_INITIALIZE_ALLOCATIONS
#define FIO_MEMORY_INITIALIZE_ALLOCATIONS 1
#else
#define FIO_MEMORY_INITIALIZE_ALLOCATIONS 0
#endif

#ifndef FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG
/**
 * The number of blocks per system allocation.
 *
 * More blocks protect against fragmentation, but lower the maximum number that
 * can be allocated without reverting to mmap.
 *
 * Range: 0-4
 * Recommended: depends on object allocation sizes, usually 1 or 2.
 */
#define FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG 2
#endif

#ifndef FIO_MEMORY_ENABLE_BIG_ALLOC
/**
 * Uses a whole system allocation to support bigger allocations.
 *
 * Could increase fragmentation costs.
 */
#define FIO_MEMORY_ENABLE_BIG_ALLOC 1
#endif

#ifndef FIO_MEMORY_ARENA_COUNT
/**
 * Memory arenas mitigate thread contention while using more memory.
 *
 * Note that at some point arenas are statistically irrelevant... except when
 * benchmarking contention in multi-core machines.
 *
 * Negative values will result in dynamic selection based on CPU core count.
 */
#define FIO_MEMORY_ARENA_COUNT -1
#endif

#ifndef FIO_MEMORY_ARENA_COUNT_FALLBACK
/*
 * Used when dynamic arena count calculations fail.
 *
 * NOTE: if FIO_MEMORY_ARENA_COUNT is negative, dynamic arena calculation is
 * performed using CPU core calculation.
 */
#define FIO_MEMORY_ARENA_COUNT_FALLBACK 24
#endif

#ifndef FIO_MEMORY_ARENA_COUNT_MAX
/*
 * Used when dynamic arena count calculations fail.
 *
 * NOTE: if FIO_MEMORY_ARENA_COUNT is negative, dynamic arena calculation is
 * performed using CPU core calculation.
 */
#define FIO_MEMORY_ARENA_COUNT_MAX 64
#endif

#ifndef FIO_MEMORY_WARMUP
#define FIO_MEMORY_WARMUP 0
#endif

#ifndef FIO_MEMORY_USE_THREAD_MUTEX
#if FIO_USE_THREAD_MUTEX_TMP
#define FIO_MEMORY_USE_THREAD_MUTEX FIO_USE_THREAD_MUTEX
#else
#if FIO_MEMORY_ARENA_COUNT > 0
/**
 * If arena count isn't linked to the CPU count, threads might busy-spin.
 * It is better to slow wait than fast busy spin when the work in the lock is
 * longer... and system allocations are performed inside arena locks.
 */
#define FIO_MEMORY_USE_THREAD_MUTEX 1
#else
/* defaults to use a spinlock when no contention is expected. */
#define FIO_MEMORY_USE_THREAD_MUTEX 0
#endif
#endif
#endif

#if !defined(FIO_MEM_SYS_ALLOC) || !defined(FIO_MEM_SYS_REALLOC) ||            \
    !defined(FIO_MEM_SYS_FREE)
/**
 * The following MACROS, when all of them are defined, allow the memory
 * allocator to collect memory from the system using an alternative method.
 *
 * - FIO_MEM_SYS_ALLOC(pages, alignment_log)
 *
 * - FIO_MEM_SYS_REALLOC(ptr, old_pages, new_pages, alignment_log)
 *
 * - FIO_MEM_SYS_FREE(ptr, pages) FIO_MEM_SYS_FREE_def_func((ptr), (pages))
 *
 * Note that the alignment property for the allocated memory is essential and
 * may me quite large.
 */
#undef FIO_MEM_SYS_ALLOC
#undef FIO_MEM_SYS_REALLOC
#undef FIO_MEM_SYS_FREE
#endif /* undefined FIO_MEM_SYS_ALLOC... */

/* *****************************************************************************
Memory Allocation - configuration value - results and constants
***************************************************************************** */

/* Helper macros, don't change their values */
#undef FIO_MEMORY_BLOCKS_PER_ALLOCATION
#undef FIO_MEMORY_SYS_ALLOCATION_SIZE
#undef FIO_MEMORY_BLOCK_ALLOC_LIMIT

#if FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG < 0 ||                                \
    FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG > 5
#undef FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG
#define FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG 3
#endif

/** the number of allocation blocks per system allocation. */
#define FIO_MEMORY_BLOCKS_PER_ALLOCATION                                       \
  (1UL << FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG)

/** the total number of bytes consumed per system allocation. */
#define FIO_MEMORY_SYS_ALLOCATION_SIZE                                         \
  (1UL << FIO_MEMORY_SYS_ALLOCATION_SIZE_LOG)

/**
 * The maximum allocation size, after which a big/system allocation is used.
 */
#define FIO_MEMORY_BLOCK_ALLOC_LIMIT                                           \
  (FIO_MEMORY_SYS_ALLOCATION_SIZE >> (FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG + 2))

#if FIO_MEMORY_ENABLE_BIG_ALLOC
/** the limit of a big allocation, if enabled */
#define FIO_MEMORY_BIG_ALLOC_LIMIT                                             \
  (FIO_MEMORY_SYS_ALLOCATION_SIZE >>                                           \
   (FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG > 3                                   \
        ? 3                                                                    \
        : FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG))
#define FIO_MEMORY_ALLOC_LIMIT FIO_MEMORY_BIG_ALLOC_LIMIT
#else
#define FIO_MEMORY_ALLOC_LIMIT FIO_MEMORY_BLOCK_ALLOC_LIMIT
#endif

/* *****************************************************************************
Memory Allocation - configuration access - UNSTABLE API!!!
***************************************************************************** */

FIO_IFUNC size_t FIO_NAME(FIO_MEMORY_NAME, malloc_sys_alloc_size)(void) {
  return FIO_MEMORY_SYS_ALLOCATION_SIZE;
}

FIO_IFUNC size_t FIO_NAME(FIO_MEMORY_NAME, malloc_cache_slots)(void) {
  return FIO_MEMORY_CACHE_SLOTS;
}
FIO_IFUNC size_t FIO_NAME(FIO_MEMORY_NAME, malloc_alignment)(void) {
  return FIO_MEMORY_ALIGN_SIZE;
}
FIO_IFUNC size_t FIO_NAME(FIO_MEMORY_NAME, malloc_alignment_log)(void) {
  return FIO_MEMORY_ALIGN_LOG;
}

FIO_IFUNC size_t FIO_NAME(FIO_MEMORY_NAME, malloc_alloc_limit)(void) {
  return (FIO_MEMORY_BLOCK_ALLOC_LIMIT > FIO_MEMORY_ALLOC_LIMIT)
             ? FIO_MEMORY_BLOCK_ALLOC_LIMIT
             : FIO_MEMORY_ALLOC_LIMIT;
}

FIO_IFUNC size_t FIO_NAME(FIO_MEMORY_NAME, malloc_arena_alloc_limit)(void) {
  return FIO_MEMORY_BLOCK_ALLOC_LIMIT;
}

/* will realloc2 return junk data? */
FIO_IFUNC size_t FIO_NAME(FIO_MEMORY_NAME, realloc_is_safe)(void) {
  return FIO_MEMORY_INITIALIZE_ALLOCATIONS;
}

/* Returns the calculated block size. */
SFUNC size_t FIO_NAME(FIO_MEMORY_NAME, malloc_block_size)(void);

/** Prints the allocator's data structure. May be used for debugging. */
SFUNC void FIO_NAME(FIO_MEMORY_NAME, malloc_print_state)(void);

/** Prints the allocator's free block list. May be used for debugging. */
SFUNC void FIO_NAME(FIO_MEMORY_NAME, malloc_print_free_block_list)(void);

/** Prints the settings used to define the allocator. */
SFUNC void FIO_NAME(FIO_MEMORY_NAME, malloc_print_settings)(void);

/* *****************************************************************************
Set global macros to use this allocator if FIO_MALLOC
***************************************************************************** */
#ifdef FIO_MALLOC
/* prevent double declaration of FIO_MALLOC */
#define H___FIO_MALLOC___H
#undef FIO_MEM_REALLOC
#define FIO_MEM_REALLOC(ptr, old_size, new_size, copy_len)                     \
  fio_realloc2((ptr), (new_size), (copy_len))
#undef FIO_MEM_FREE
#define FIO_MEM_FREE(ptr, size) fio_free((ptr))
#undef FIO_MEM_REALLOC_IS_SAFE
#define FIO_MEM_REALLOC_IS_SAFE fio_realloc_is_safe()
#undef FIO_MALLOC
#endif /* FIO_MALLOC */

/* *****************************************************************************
Temporarily (at least) set memory allocation macros to use this allocator
***************************************************************************** */
#ifndef FIO_MALLOC_TMP_USE_SYSTEM

#undef FIO_MEM_REALLOC_
#undef FIO_MEM_FREE_
#undef FIO_MEM_REALLOC_IS_SAFE_

#define FIO_MEM_REALLOC_(ptr, old_size, new_size, copy_len)                    \
  FIO_NAME(FIO_MEMORY_NAME, realloc2)((ptr), (new_size), (copy_len))
#define FIO_MEM_FREE_(ptr, size) FIO_NAME(FIO_MEMORY_NAME, free)((ptr))
#define FIO_MEM_REALLOC_IS_SAFE_ FIO_NAME(FIO_MEMORY_NAME, realloc_is_safe)()

#endif /* FIO_MALLOC_TMP_USE_SYSTEM */

/* *****************************************************************************





Memory Allocation - start implementation





***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)
/* internal workings start here */

/* *****************************************************************************







Helpers and System Memory Allocation




***************************************************************************** */
#ifndef H___FIO_MEM_INCLUDE_ONCE___H
#define H___FIO_MEM_INCLUDE_ONCE___H

#define FIO_MEM_BYTES2PAGES(size)                                              \
  (((size_t)(size) + ((1UL << FIO_MEM_PAGE_SIZE_LOG) - 1)) &                   \
   ((~(size_t)0) << FIO_MEM_PAGE_SIZE_LOG))

/* *****************************************************************************



POSIX Allocation



***************************************************************************** */
#if FIO_OS_POSIX || __has_include("sys/mman.h")
#include <sys/mman.h>

/* Mitigates MAP_ANONYMOUS not being defined on older versions of MacOS */
#if !defined(MAP_ANONYMOUS)
#if defined(MAP_ANON)
#define MAP_ANONYMOUS MAP_ANON
#else
#define MAP_ANONYMOUS 0
#endif /* defined(MAP_ANONYMOUS) */
#endif /* FIO_MEM_SYS_ALLOC */

/* inform the compiler that the returned value is aligned on 16 byte marker */
#if __clang__ || __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8)
#define FIO_PAGE_ALIGN                                                         \
  __attribute__((assume_aligned((1UL << FIO_MEM_PAGE_SIZE_LOG))))
#define FIO_PAGE_ALIGN_NEW                                                     \
  __attribute__((malloc, assume_aligned((1UL << FIO_MEM_PAGE_SIZE_LOG))))
#else
#define FIO_PAGE_ALIGN
#define FIO_PAGE_ALIGN_NEW
#endif /* (__clang__ || __GNUC__)... */

/*
 * allocates memory using `mmap`, but enforces alignment.
 */
FIO_SFUNC void *FIO_MEM_SYS_ALLOC_def_func(size_t bytes,
                                           uint8_t alignment_log) {
  void *result;
  static void *next_alloc = (void *)0x01;
  const size_t alignment_mask = (1ULL << alignment_log) - 1;
  const size_t alignment_size = (1ULL << alignment_log);
  bytes = FIO_MEM_BYTES2PAGES(bytes);
  next_alloc =
      (void *)(((uintptr_t)next_alloc + alignment_mask) & alignment_mask);
/* hope for the best? */
#ifdef MAP_ALIGNED
  result = mmap(next_alloc,
                bytes,
                PROT_READ | PROT_WRITE,
                MAP_PRIVATE | MAP_ANONYMOUS | MAP_ALIGNED(alignment_log),
                -1,
                0);
#else
  result = mmap(next_alloc,
                bytes,
                PROT_READ | PROT_WRITE,
                MAP_PRIVATE | MAP_ANONYMOUS,
                -1,
                0);
#endif /* MAP_ALIGNED */
  if (result == MAP_FAILED)
    return (void *)NULL;
  if (((uintptr_t)result & alignment_mask)) {
    munmap(result, bytes);
    result = mmap(NULL,
                  bytes + alignment_size,
                  PROT_READ | PROT_WRITE,
                  MAP_PRIVATE | MAP_ANONYMOUS,
                  -1,
                  0);
    if (result == MAP_FAILED) {
      return (void *)NULL;
    }
    const uintptr_t offset =
        (alignment_size - ((uintptr_t)result & alignment_mask));
    if (offset) {
      munmap(result, offset);
      result = (void *)((uintptr_t)result + offset);
    }
    munmap((void *)((uintptr_t)result + bytes), alignment_size - offset);
  }
  next_alloc = (void *)((uintptr_t)result + (bytes << 2));
  return result;
}

/*
 * Re-allocates memory using `mmap`, enforcing alignment.
 */
FIO_SFUNC void *FIO_MEM_SYS_REALLOC_def_func(void *mem,
                                             size_t old_len,
                                             size_t new_len,
                                             uint8_t alignment_log) {
  old_len = FIO_MEM_BYTES2PAGES(old_len);
  new_len = FIO_MEM_BYTES2PAGES(new_len);
  if (new_len > old_len) {
    void *result;
#if defined(__linux__)
    result = mremap(mem, old_len, new_len, 0);
    if (result != MAP_FAILED)
      return result;
#endif
    result = mmap((void *)((uintptr_t)mem + old_len),
                  new_len - old_len,
                  PROT_READ | PROT_WRITE,
                  MAP_PRIVATE | MAP_ANONYMOUS,
                  -1,
                  0);
    if (result == (void *)((uintptr_t)mem + old_len)) {
      result = mem;
    } else {
      /* copy and free */
      munmap(result, new_len - old_len); /* free the failed attempt */
      result =
          FIO_MEM_SYS_ALLOC_def_func(new_len,
                                     alignment_log); /* allocate new memory */
      if (!result) {
        return (void *)NULL;
      }
      FIO_MEMCPY(result, mem, old_len); /* copy data */
      munmap(mem, old_len);             /* free original memory */
    }
    return result;
  }
  if (old_len != new_len) /* remove dangling pages */
    munmap((void *)((uintptr_t)mem + new_len), old_len - new_len);
  return mem;
}

/* frees memory using `munmap`. */
FIO_IFUNC void FIO_MEM_SYS_FREE_def_func(void *mem, size_t bytes) {
  bytes = FIO_MEM_BYTES2PAGES(bytes);
  munmap(mem, bytes);
}

/* *****************************************************************************



Windows Allocation



***************************************************************************** */
#elif FIO_OS_WIN
#include <memoryapi.h>

FIO_IFUNC void FIO_MEM_SYS_FREE_def_func(void *mem, size_t bytes) {
  bytes = FIO_MEM_BYTES2PAGES(bytes);
  if (!VirtualFree(mem, 0, MEM_RELEASE))
    FIO_LOG_ERROR("Memory address at %p couldn't be returned to the system",
                  mem);
  (void)bytes;
}

FIO_IFUNC void *FIO_MEM_SYS_ALLOC_def_func(size_t bytes,
                                           uint8_t alignment_log) {
  // return aligned_alloc((pages << 12), (1UL << alignment_log));
  void *result;
  size_t attempts = 0;
  static void *next_alloc = (void *)0x01;
  const uintptr_t alignment_rounder = (1ULL << alignment_log) - 1;
  const uintptr_t alignment_mask = ~alignment_rounder;
  bytes = FIO_MEM_BYTES2PAGES(bytes);
  do {
    next_alloc =
        (void *)(((uintptr_t)next_alloc + alignment_rounder) & alignment_mask);
    FIO_ASSERT_DEBUG(!((uintptr_t)next_alloc & alignment_rounder),
                     "alignment allocation rounding error?");
    result =
        VirtualAlloc(next_alloc, (bytes << 2), MEM_RESERVE, PAGE_READWRITE);
    next_alloc = (void *)((uintptr_t)next_alloc + (bytes << 2));
  } while (!result && (attempts++) < 1024);
  if (result) {
    result = VirtualAlloc(result, bytes, MEM_COMMIT, PAGE_READWRITE);
    FIO_ASSERT_DEBUG(result, "couldn't commit memory after reservation?!");

  } else {
    FIO_LOG_ERROR("Couldn't allocate memory from the system, error %zu."
                  "\n\t%zu attempts with final address %p",
                  GetLastError(),
                  attempts,
                  next_alloc);
  }
  return result;
}

FIO_IFUNC void *FIO_MEM_SYS_REALLOC_def_func(void *mem,
                                             size_t old_len,
                                             size_t new_len,
                                             uint8_t alignment_log) {
  if (!new_len)
    goto free_mem;
  old_len = FIO_MEM_BYTES2PAGES(old_len);
  new_len = FIO_MEM_BYTES2PAGES(new_len);
  if (new_len > old_len) {
    /* extend allocation */
    void *tmp = VirtualAlloc((void *)((uintptr_t)mem + old_len),
                             new_len - old_len,
                             MEM_COMMIT,
                             PAGE_READWRITE);
    if (tmp)
      return mem;
    /* Alloc, Copy, Free... sorry... */
    tmp = FIO_MEM_SYS_ALLOC_def_func(new_len, alignment_log);
    if (!tmp) {
      FIO_LOG_ERROR("sysem realloc failed to allocate memory.");
      return NULL;
    }
    FIO_MEMCPY(tmp, mem, old_len);
    FIO_MEM_SYS_FREE_def_func(mem, old_len);
    mem = tmp;
  } else if (old_len > new_len) {
    /* shrink allocation */
    if (!VirtualFree((void *)((uintptr_t)mem + new_len),
                     old_len - new_len,
                     MEM_DECOMMIT))
      FIO_LOG_ERROR("failed to decommit memory range @ %p.", mem);
  }
  return mem;
free_mem:
  FIO_MEM_SYS_FREE_def_func(mem, old_len);
  mem = NULL;
  return NULL;
}

/* *****************************************************************************


Unknown OS... Unsupported?


***************************************************************************** */
#else /* FIO_OS_POSIX / FIO_OS_WIN => unknown...? */

FIO_IFUNC void *FIO_MEM_SYS_ALLOC_def_func(size_t bytes,
                                           uint8_t alignment_log) {
  // return aligned_alloc((pages << 12), (1UL << alignment_log));
  exit(-1);
  (void)bytes;
  (void)alignment_log;
}

FIO_IFUNC void *FIO_MEM_SYS_REALLOC_def_func(void *mem,
                                             size_t old_len,
                                             size_t new_len,
                                             uint8_t alignment_log) {
  (void)old_len;
  (void)alignment_log;
  new_len = FIO_MEM_BYTES2PAGES(new_len);
  return realloc(mem, new_len);
}

FIO_IFUNC void FIO_MEM_SYS_FREE_def_func(void *mem, size_t bytes) {
  free(mem);
  (void)bytes;
}

#endif /* FIO_OS_POSIX / FIO_OS_WIN */
/* *****************************************************************************
Overridable system allocation macros
***************************************************************************** */
#ifndef FIO_MEM_SYS_ALLOC
#define FIO_MEM_SYS_ALLOC(pages, alignment_log)                                \
  FIO_MEM_SYS_ALLOC_def_func((pages), (alignment_log))
#define FIO_MEM_SYS_REALLOC(ptr, old_pages, new_pages, alignment_log)          \
  FIO_MEM_SYS_REALLOC_def_func((ptr), (old_pages), (new_pages), (alignment_log))
#define FIO_MEM_SYS_FREE(ptr, pages) FIO_MEM_SYS_FREE_def_func((ptr), (pages))
#endif /* FIO_MEM_SYS_ALLOC */

#endif /* H___FIO_MEM_INCLUDE_ONCE___H */

/* *****************************************************************************
FIO_MEMORY_DISABLE - use the system allocator
***************************************************************************** */
#if defined(FIO_MALLOC_TMP_USE_SYSTEM)

SFUNC void *FIO_MEM_ALIGN_NEW FIO_NAME(FIO_MEMORY_NAME, malloc)(size_t size) {
#if FIO_MEMORY_INITIALIZE_ALLOCATIONS
  return calloc(size, 1);
#elif defined(DEBUG) && DEBUG
  void *ret = malloc(size);
  if (ret)
    FIO_MEMSET(ret, 0xFA, size);
  return ret;
#else
  return malloc(size);
#endif
}
SFUNC void *FIO_MEM_ALIGN_NEW FIO_NAME(FIO_MEMORY_NAME,
                                       calloc)(size_t size_per_unit,
                                               size_t unit_count) {
  return calloc(size_per_unit, unit_count);
}
SFUNC void FIO_NAME(FIO_MEMORY_NAME, free)(void *ptr) { free(ptr); }
SFUNC void *FIO_MEM_ALIGN FIO_NAME(FIO_MEMORY_NAME, realloc)(void *ptr,
                                                             size_t new_size) {
  return realloc(ptr, new_size);
}
SFUNC void *FIO_MEM_ALIGN FIO_NAME(FIO_MEMORY_NAME, realloc2)(void *ptr,
                                                              size_t new_size,
                                                              size_t copy_len) {
  return realloc(ptr, new_size);
  (void)copy_len;
}
SFUNC void *FIO_MEM_ALIGN_NEW FIO_NAME(FIO_MEMORY_NAME, mmap)(size_t size) {
  return calloc(size, 1);
}

SFUNC void FIO_NAME(FIO_MEMORY_NAME, malloc_after_fork)(void) {}
/** Prints the allocator's data structure. May be used for debugging. */
SFUNC void FIO_NAME(FIO_MEMORY_NAME, malloc_print_state)(void) {}
/** Prints the allocator's free block list. May be used for debugging. */
SFUNC void FIO_NAME(FIO_MEMORY_NAME, malloc_print_free_block_list)(void) {}
/** Prints the settings used to define the allocator. */
SFUNC void FIO_NAME(FIO_MEMORY_NAME, malloc_print_settings)(void) {}
SFUNC size_t FIO_NAME(FIO_MEMORY_NAME, malloc_block_size)(void) { return 0; }

#ifdef FIO_TEST_ALL
SFUNC void FIO_NAME_TEST(FIO_NAME(stl, FIO_MEMORY_NAME), mem)(void) {
  fprintf(stderr, "* Custom memory allocator bypassed.\n");
}
#endif /* FIO_TEST_ALL */

#else /* FIO_MEMORY_DISABLE */

/* *****************************************************************************





                  Memory allocation implementation starts here
                    helper function and setup are complete





***************************************************************************** */

/* *****************************************************************************
Lock type choice
***************************************************************************** */
#if FIO_MEMORY_USE_THREAD_MUTEX
#define FIO_MEMORY_LOCK_TYPE fio_thread_mutex_t
#define FIO_MEMORY_LOCK_TYPE_INIT(lock)                                        \
  ((lock) = (fio_thread_mutex_t)FIO_THREAD_MUTEX_INIT)
#define FIO_MEMORY_TRYLOCK(lock) fio_thread_mutex_trylock(&(lock))
#define FIO_MEMORY_LOCK(lock)    fio_thread_mutex_lock(&(lock))
#define FIO_MEMORY_UNLOCK(lock)                                                \
  do {                                                                         \
    int tmp__ = fio_thread_mutex_unlock(&(lock));                              \
    if (tmp__) {                                                               \
      FIO_LOG_ERROR("Couldn't free mutex! error (%d): %s",                     \
                    tmp__,                                                     \
                    strerror(tmp__));                                          \
    }                                                                          \
  } while (0)

#define FIO_MEMORY_LOCK_NAME "pthread_mutex"
#else
#define FIO_MEMORY_LOCK_TYPE            fio_lock_i
#define FIO_MEMORY_LOCK_TYPE_INIT(lock) ((lock) = FIO_LOCK_INIT)
#define FIO_MEMORY_TRYLOCK(lock)        fio_trylock(&(lock))
#define FIO_MEMORY_LOCK(lock)           fio_lock(&(lock))
#define FIO_MEMORY_UNLOCK(lock)         fio_unlock(&(lock))
#define FIO_MEMORY_LOCK_NAME            "facil.io spinlocks"
#endif

/* *****************************************************************************
Allocator debugging helpers
***************************************************************************** */

#if defined(DEBUG) || defined(FIO_LEAK_COUNTER)
FIO_LEAK_COUNTER_DEF(FIO_NAME(FIO_MEMORY_NAME, __malloc_chunk))
FIO_LEAK_COUNTER_DEF(FIO_NAME(FIO_MEMORY_NAME, malloc))
static volatile size_t FIO_NAME(FIO_MEMORY_NAME, __malloc_total);
#define FIO_MEMORY_ON_CHUNK_ALLOC(ptr)                                         \
  do {                                                                         \
    FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(FIO_MEMORY_NAME, __malloc_chunk));      \
    FIO_LOG_DEBUG2("MEMORY CHUNK-ALLOC allocated      %p", ptr);               \
  } while (0);
#define FIO_MEMORY_ON_CHUNK_FREE(ptr)                                          \
  do {                                                                         \
    FIO_LEAK_COUNTER_ON_FREE(FIO_NAME(FIO_MEMORY_NAME, __malloc_chunk));       \
    FIO_LOG_DEBUG2("MEMORY CHUNK-DEALLOC de-allocated %p", ptr);               \
  } while (0);
#define FIO_MEMORY_ON_CHUNK_CACHE(ptr)                                         \
  do {                                                                         \
    FIO_LOG_DEBUG2("MEMORY CACHE-PUSH placed          %p in cache", ptr);      \
  } while (0);
#define FIO_MEMORY_ON_CHUNK_UNCACHE(ptr)                                       \
  do {                                                                         \
    FIO_LOG_DEBUG2("MEMORY CACHE-POP retrieved        %p from cache", ptr);    \
  } while (0);

#define FIO_MEMORY_ON_BLOCK_RESET_IN_LOCK(ptr, blk)                            \
  do {                                                                         \
    if (0)                                                                     \
      FIO_LOG_DEBUG2("MEMORY chunk %p block %zu reset in lock",                \
                     ptr,                                                      \
                     (size_t)blk);                                             \
  } while (0);

#define FIO_MEMORY_ON_BIG_BLOCK_SET(ptr)                                       \
  do {                                                                         \
    if (1)                                                                     \
      FIO_LOG_DEBUG2("MEMORY chunk %p used as big-block", ptr);                \
  } while (0);

#define FIO_MEMORY_ON_BIG_BLOCK_UNSET(ptr)                                     \
  do {                                                                         \
    if (1)                                                                     \
      FIO_LOG_DEBUG2("MEMORY chunk %p no longer used as big-block", ptr);      \
  } while (0);
#define FIO_MEMORY_PRINT_STATS_END()                                           \
  do {                                                                         \
    FIO_LOG_DEBUG2(                                                            \
        "(" FIO_MACRO2STR(                                                     \
            FIO_NAME(FIO_MEMORY_NAME, malloc)) ") total allocations: %zu",     \
        FIO_NAME(FIO_MEMORY_NAME, __malloc_total));                            \
  } while (0)
#define FIO_MEMORY_ON_ALLOC_FUNC()                                             \
  do {                                                                         \
    FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(FIO_MEMORY_NAME, malloc));              \
    fio_atomic_add(&FIO_NAME(FIO_MEMORY_NAME, __malloc_total), 1);             \
  } while (0)
#define FIO_MEMORY_ON_FREE_FUNC()                                              \
  FIO_LEAK_COUNTER_ON_FREE(FIO_NAME(FIO_MEMORY_NAME, malloc))
#else /* defined(DEBUG) || defined(FIO_LEAK_COUNTER) */
#define FIO_MEMORY_ON_CHUNK_ALLOC(ptr)              ((void)0)
#define FIO_MEMORY_ON_CHUNK_FREE(ptr)               ((void)0)
#define FIO_MEMORY_ON_CHUNK_CACHE(ptr)              ((void)0)
#define FIO_MEMORY_ON_CHUNK_UNCACHE(ptr)            ((void)0)
#define FIO_MEMORY_ON_BLOCK_RESET_IN_LOCK(ptr, blk) ((void)0)
#define FIO_MEMORY_ON_BIG_BLOCK_SET(ptr)            ((void)0)
#define FIO_MEMORY_ON_BIG_BLOCK_UNSET(ptr)          ((void)0)
#define FIO_MEMORY_PRINT_STATS_END()                ((void)0)
#define FIO_MEMORY_ON_ALLOC_FUNC()                  ((void)0)
#define FIO_MEMORY_ON_FREE_FUNC()                   ((void)0)
#endif /* defined(DEBUG) || defined(FIO_LEAK_COUNTER) */

/* *****************************************************************************






Memory chunk headers and block data (in chunk header)






***************************************************************************** */

/* *****************************************************************************
Chunk and Block data / header
***************************************************************************** */

typedef struct {
  volatile int32_t ref;
  volatile int32_t pos;
} FIO_NAME(FIO_MEMORY_NAME, __mem_block_s);

typedef struct {
  /* the head of the chunk... node->next says a lot */
  uint32_t marker;
  volatile int32_t ref;
  FIO_NAME(FIO_MEMORY_NAME, __mem_block_s)
  blocks[FIO_MEMORY_BLOCKS_PER_ALLOCATION];
} FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s);

#if FIO_MEMORY_ENABLE_BIG_ALLOC
/* big-blocks consumes a chunk, sizeof header MUST be <= chunk header */
typedef struct {
  /* marker and ref MUST overlay chunk header */
  uint32_t marker;
  volatile int32_t ref;
  volatile int32_t pos;
} FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_s);
#endif /* FIO_MEMORY_ENABLE_BIG_ALLOC */

/* *****************************************************************************
Arena type
***************************************************************************** */
typedef struct {
  void *block;
  int32_t last_pos;
  FIO_MEMORY_LOCK_TYPE lock;
  uint8_t pad_for_cache___[115]; /* cache line padding */
} FIO_NAME(FIO_MEMORY_NAME, __mem_arena_s);

/* *****************************************************************************
Allocator State
***************************************************************************** */

typedef struct FIO_NAME(FIO_MEMORY_NAME, __mem_state_s)
    FIO_NAME(FIO_MEMORY_NAME, __mem_state_s);

static struct FIO_NAME(FIO_MEMORY_NAME, __mem_state_s) {
#if FIO_MEMORY_CACHE_SLOTS
  /** cache array container for available memory chunks */
  struct {
    /* chunk slot array */
    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) * a[FIO_MEMORY_CACHE_SLOTS];
    size_t pos;
  } cache;
#endif /* FIO_MEMORY_CACHE_SLOTS */

#if FIO_MEMORY_ENABLE_BIG_ALLOC
  /** a block for big allocations, shared (no arena) */
  FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_s) * big_block;
  int32_t big_last_pos;
  /** big allocation lock */
  FIO_MEMORY_LOCK_TYPE big_lock;
  uint8_t pad_for_cache___[115]; /* cache line padding */
#endif /* FIO_MEMORY_ENABLE_BIG_ALLOC */
  /** main memory state lock */
  FIO_MEMORY_LOCK_TYPE lock;
  /** free list for available blocks */
  FIO_LIST_HEAD blocks;
  /** the arena count for the allocator */
  uint8_t pad_for_cache2___[111]; /* cache line padding */
  size_t arena_count;
  FIO_NAME(FIO_MEMORY_NAME, __mem_arena_s) arena[];
} * FIO_NAME(FIO_MEMORY_NAME, __mem_state);

/* *****************************************************************************
Arena assignment
***************************************************************************** */

/* SublimeText marker */
void fio___mem_arena_unlock___(void);
/** Unlocks the thread's arena. */
FIO_SFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_arena_unlock)(
    FIO_NAME(FIO_MEMORY_NAME, __mem_arena_s) * a) {
  FIO_ASSERT_DEBUG(a, "unlocking a NULL arena?!");
  FIO_MEMORY_UNLOCK(a->lock);
}

/* SublimeText marker */
void fio___mem_arena_lock___(void);

/** Locks and returns the thread's arena. */
FIO_SFUNC FIO_NAME(FIO_MEMORY_NAME, __mem_arena_s) *
    FIO_NAME(FIO_MEMORY_NAME, __mem_arena_lock)(void) {
#if FIO_MEMORY_ARENA_COUNT == 1
  FIO_MEMORY_LOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[0].lock);
  return FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena;

#else /* FIO_MEMORY_ARENA_COUNT != 1 */

#if defined(DEBUG) && FIO_MEMORY_ARENA_COUNT > 0 && !defined(FIO_TEST_ALL)
  static size_t warning_printed = 0;
#define FIO___MEMORY_ARENA_LOCK_WARNING()                                      \
  do {                                                                         \
    if (!warning_printed)                                                      \
      FIO_LOG_WARNING(FIO_MACRO2STR(FIO_NAME(                                  \
          FIO_MEMORY_NAME,                                                     \
          malloc)) " high arena contention.\n"                                 \
                   "          Consider recompiling with more arenas.");        \
    warning_printed = 1;                                                       \
  } while (0)
#else /* !DEBUG || FIO_MEMORY_ARENA_COUNT <= 0 */
#define FIO___MEMORY_ARENA_LOCK_WARNING()
#endif
  /** thread arena value */
  size_t arena_index;
  size_t loop_count = 0;
  {
    /* select the default arena selection using a thread ID. */
    union {
      void *p;
      fio_thread_t t;
    } u = {.t = fio_thread_current()};
    arena_index = (fio_risky_ptr(u.p) & 127) %
                  FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count;
#if (defined(DEBUG) && 0)
    static void *pthread_last = NULL;
    if (pthread_last != u.p) {
      FIO_LOG_DEBUG(
          "thread %p (%p) associated with arena %zu / %zu",
          u.p,
          (void *)fio_risky_ptr(u.p),
          arena_index,
          (size_t)FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count);
      pthread_last = u.p;
    }
#endif
  }
  for (;;) {
    /* rotate all arenas to find one that's available */
    if (!FIO_MEMORY_TRYLOCK(
            FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[arena_index].lock))
      return (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena + arena_index);
    FIO_LOG_DDEBUG("thread %p had to switch arena from %zu / %zu",
                   fio_thread_current(),
                   arena_index,
                   (size_t)FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count);
    ++arena_index;
    if (arena_index == FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count)
      arena_index = 0;
    if (++loop_count <
        (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count << 1))
      continue;
    FIO___MEMORY_ARENA_LOCK_WARNING();
#undef FIO___MEMORY_ARENA_LOCK_WARNING
#if FIO_MEMORY_USE_THREAD_MUTEX && FIO_OS_POSIX
    /* slow wait for arena */
    FIO_MEMORY_LOCK(
        FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[arena_index].lock);
    return FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena + arena_index;
#else
    // FIO_THREAD_RESCHEDULE();
#endif /* FIO_MEMORY_USE_THREAD_MUTEX */
  }
#endif /* FIO_MEMORY_ARENA_COUNT != 1 */
}

/* *****************************************************************************
Converting between chunk & block data to pointers (and back)
***************************************************************************** */

#define FIO_MEMORY_HEADER_SIZE                                                 \
  ((sizeof(FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s)) +                         \
    (FIO_MEMORY_ALIGN_SIZE - 1)) &                                             \
   (~(FIO_MEMORY_ALIGN_SIZE - 1)))

#define FIO_MEMORY_BLOCK_SIZE                                                  \
  (((FIO_MEMORY_SYS_ALLOCATION_SIZE - FIO_MEMORY_HEADER_SIZE) /                \
    FIO_MEMORY_BLOCKS_PER_ALLOCATION) &                                        \
   (~(FIO_MEMORY_ALIGN_SIZE - 1)))

#define FIO_MEMORY_UNITS_PER_BLOCK                                             \
  (FIO_MEMORY_BLOCK_SIZE / FIO_MEMORY_ALIGN_SIZE)

/* SublimeText marker */
void fio___mem_chunk2ptr___(void);
/** returns a pointer within a chunk, given it's block and offset value. */
FIO_IFUNC void *FIO_NAME(FIO_MEMORY_NAME, __mem_chunk2ptr)(
    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) * c,
    size_t block,
    size_t offset) {
  return (void *)(((uintptr_t)(c) + FIO_MEMORY_HEADER_SIZE) +
                  (block * FIO_MEMORY_BLOCK_SIZE) +
                  (offset << FIO_MEMORY_ALIGN_LOG));
}

/* SublimeText marker */
void fio___mem_ptr2chunk___(void);
/** returns a chunk given a pointer. */
FIO_IFUNC FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *
    FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2chunk)(void *p) {
  return FIO_PTR_MATH_RMASK(FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s),
                            p,
                            FIO_MEMORY_SYS_ALLOCATION_SIZE_LOG);
}

/* SublimeText marker */
void fio___mem_ptr2index___(void);
/** returns a pointer's block index within it's chunk. */
FIO_IFUNC size_t FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2index)(
    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) * c,
    void *p) {
  FIO_ASSERT_DEBUG(c == FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2chunk)(p),
                   "chunk-pointer offset argument error");
  size_t i =
      (size_t)FIO_PTR_MATH_LMASK(void, p, FIO_MEMORY_SYS_ALLOCATION_SIZE_LOG);
  i -= FIO_MEMORY_HEADER_SIZE;
  i /= FIO_MEMORY_BLOCK_SIZE;
  return i;
  (void)c;
}

/* *****************************************************************************
Allocator State Initialization & Cleanup
***************************************************************************** */
#define FIO_MEMORY_STATE_SIZE(arena_count)                                     \
  FIO_MEM_BYTES2PAGES(                                                         \
      (sizeof(*FIO_NAME(FIO_MEMORY_NAME, __mem_state)) +                       \
       (sizeof(FIO_NAME(FIO_MEMORY_NAME, __mem_arena_s)) * (arena_count))))

/* function declarations for functions called during cleanup */
FIO_IFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_dealloc)(
    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) * c);
FIO_IFUNC void *FIO_NAME(FIO_MEMORY_NAME, __mem_block_new)(void);
FIO_IFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_block_free)(void *ptr);
FIO_IFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_free)(void *ptr);
FIO_IFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_free)(
    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) * c);

/* IDE marker */
void fio___mem_state_cleanup___(void);
FIO_SFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_state_cleanup)(void *ignr_) {
  if (!FIO_NAME(FIO_MEMORY_NAME, __mem_state)) {
    FIO_LOG_DEBUG2(FIO_MACRO2STR(
        FIO_NAME(FIO_MEMORY_NAME,
                 __mem_state_cleanup)) " called more than once (NULL state).");
    return;
  }
  (void)ignr_;
  FIO_LOG_DDEBUG2(
      "starting facil.io memory allocator cleanup for " FIO_MACRO2STR(
          FIO_NAME(FIO_MEMORY_NAME, malloc)) ".");
  /* free arena blocks */
  for (size_t i = 0; i < FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count;
       ++i) {
    if (FIO_MEMORY_TRYLOCK(
            FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[i].lock)) {
      FIO_MEMORY_UNLOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[i].lock);
      FIO_LOG_ERROR(FIO_MACRO2STR(
          FIO_NAME(FIO_MEMORY_NAME,
                   malloc)) "cleanup called while some arenas are in use!");
    }
    FIO_MEMORY_UNLOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[i].lock);
    FIO_NAME(FIO_MEMORY_NAME, __mem_block_free)
    (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[i].block);
    FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[i].block = NULL;
    FIO_MEMORY_LOCK_TYPE_INIT(
        FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[i].lock);
  }

#if FIO_MEMORY_ENABLE_BIG_ALLOC
  /* cleanup big-alloc chunk */
  if (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_block) {
    if ((uint32_t)FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_block->ref > 1) {
      FIO_LOG_WARNING("(" FIO_MACRO2STR(FIO_NAME(
          FIO_MEMORY_NAME,
          malloc)) ") active big-block reference count error at %p\n"
                   "          Possible memory leaks for big-block allocation.");
    }
    FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_free)
    (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_block);
    FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_block = NULL;
    FIO_MEMORY_LOCK_TYPE_INIT(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_lock);
  }
#endif /* FIO_MEMORY_ENABLE_BIG_ALLOC */

#if FIO_MEMORY_CACHE_SLOTS
  /* deallocate all chunks in the cache */
  while (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->cache.pos) {
    const size_t pos = --FIO_NAME(FIO_MEMORY_NAME, __mem_state)->cache.pos;
    FIO_MEMORY_ON_CHUNK_UNCACHE(
        FIO_NAME(FIO_MEMORY_NAME, __mem_state)->cache.a[pos]);
    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_dealloc)
    (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->cache.a[pos]);
    FIO_NAME(FIO_MEMORY_NAME, __mem_state)->cache.a[pos] = NULL;
  }
#endif /* FIO_MEMORY_CACHE_SLOTS */

  /* report any blocks in the allocation list - even if not in DEBUG mode */
  if (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks.next !=
      &FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks) {
    struct t_s {
      FIO_LIST_NODE node;
    };
    void *last_chunk = NULL;
    FIO_LOG_WARNING("(" FIO_MACRO2STR(
        FIO_NAME(FIO_MEMORY_NAME,
                 malloc)) ") blocks left after cleanup - memory leaks?");
    FIO_LIST_EACH(struct t_s,
                  node,
                  &FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks,
                  pos) {
      if (last_chunk == (void *)FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2chunk)(pos))
        continue;
      last_chunk = (void *)FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2chunk)(pos);
      FIO_LOG_WARNING(
          "(" FIO_MACRO2STR(FIO_NAME(FIO_MEMORY_NAME,
                                     malloc)) ") leaked block(s) for chunk %p",
          (void *)pos,
          last_chunk);
    }
  }

  /* dealloc the state machine */
  const size_t s = FIO_MEMORY_STATE_SIZE(
      FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count);
  FIO_MEM_SYS_FREE(FIO_NAME(FIO_MEMORY_NAME, __mem_state), s);
  FIO_NAME(FIO_MEMORY_NAME, __mem_state) =
      (FIO_NAME(FIO_MEMORY_NAME, __mem_state_s *))NULL;

  FIO_MEMORY_PRINT_STATS_END();
  FIO_LOG_DDEBUG2(
      "finished facil.io memory allocator cleanup for " FIO_MACRO2STR(
          FIO_NAME(FIO_MEMORY_NAME, malloc)) ".");
}

FIO_SFUNC void FIO_NAME(FIO_MEMORY_NAME,
                        __malloc_after_fork_task)(void *ignr_) {
  (void)ignr_;
  FIO_NAME(FIO_MEMORY_NAME, malloc_after_fork)();
}

/* initializes (allocates) the arenas and state machine */
FIO_CONSTRUCTOR(FIO_NAME(FIO_MEMORY_NAME, __mem_state_setup)) {
  if (FIO_NAME(FIO_MEMORY_NAME, __mem_state))
    return;
  fio_state_callback_add(FIO_CALL_IN_CHILD,
                         FIO_NAME(FIO_MEMORY_NAME, __malloc_after_fork_task),
                         NULL);
  fio_state_callback_add(FIO_CALL_AT_EXIT,
                         FIO_NAME(FIO_MEMORY_NAME, __mem_state_cleanup),
                         NULL);
  /* allocate the state machine */
  {
#if FIO_MEMORY_ARENA_COUNT > 0
    size_t const arena_count = FIO_MEMORY_ARENA_COUNT;
#else
    size_t arena_count = FIO_MEMORY_ARENA_COUNT_FALLBACK;
#ifdef _SC_NPROCESSORS_ONLN
    arena_count = sysconf(_SC_NPROCESSORS_ONLN);
    if (arena_count == (size_t)-1UL)
      arena_count = FIO_MEMORY_ARENA_COUNT_FALLBACK;
    else /* arenas !> threads (birthday) */
      arena_count = (arena_count << 1) + 2;
#else /* FIO_MEMORY_ARENA_COUNT <= 0 */
#if _MSC_VER || __MINGW32__
    /* https://learn.microsoft.com/en-us/windows/win32/api/sysinfoapi/ns-sysinfoapi-system_info
     */
    SYSTEM_INFO win_system_info;
    GetSystemInfo(&win_system_info);
    arena_count = (size_t)win_system_info.dwNumberOfProcessors;
#else
#warning Dynamic CPU core count is unavailable - assuming FIO_MEMORY_ARENA_COUNT_FALLBACK cores.
#endif
#endif /* _SC_NPROCESSORS_ONLN */
#if FIO_MEMORY_ARENA_COUNT < -1
    arena_count = arena_count / (0 - FIO_MEMORY_ARENA_COUNT);
#endif
    if (arena_count >= FIO_MEMORY_ARENA_COUNT_MAX)
      arena_count = FIO_MEMORY_ARENA_COUNT_MAX;
    if (!arena_count)
      arena_count = 1;

#endif /* FIO_MEMORY_ARENA_COUNT <= 0 */

    const size_t s = FIO_MEMORY_STATE_SIZE(arena_count);
    FIO_NAME(FIO_MEMORY_NAME, __mem_state) =
        (FIO_NAME(FIO_MEMORY_NAME, __mem_state_s *))FIO_MEM_SYS_ALLOC(s, 0);
    FIO_ASSERT_ALLOC(FIO_NAME(FIO_MEMORY_NAME, __mem_state));
    FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count = arena_count;
  }
  FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks =
      FIO_LIST_INIT(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks);
  FIO_NAME(FIO_MEMORY_NAME, malloc_after_fork)();

#if defined(FIO_MEMORY_WARMUP) && FIO_MEMORY_WARMUP
  for (size_t i = 0; i < (size_t)FIO_MEMORY_WARMUP &&
                     i < FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count;
       ++i) {
    FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[i].block =
        FIO_NAME(FIO_MEMORY_NAME, __mem_block_new)();
  }
#endif
#ifdef DEBUG
  FIO_NAME(FIO_MEMORY_NAME, malloc_print_settings)();
#endif /* DEBUG */
  (void)FIO_NAME(FIO_MEMORY_NAME, malloc_print_free_block_list);
  (void)FIO_NAME(FIO_MEMORY_NAME, malloc_print_state);
  (void)FIO_NAME(FIO_MEMORY_NAME, malloc_print_settings);
}

/* SublimeText marker */
void fio_after_fork___(void);
/**
 * When forking is called manually, call this function to reset the facil.io
 * memory allocator's locks.
 */
SFUNC void FIO_NAME(FIO_MEMORY_NAME, malloc_after_fork)(void) {
  if (!FIO_NAME(FIO_MEMORY_NAME, __mem_state)) {
    FIO_NAME(FIO_MEMORY_NAME, __mem_state_setup)();
    return;
  }
  FIO_LOG_DEBUG2("MEMORY reinitializing " FIO_MACRO2STR(
      FIO_NAME(FIO_MEMORY_NAME, malloc)) " state");
  FIO_MEMORY_LOCK_TYPE_INIT(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->lock);
#if FIO_MEMORY_ENABLE_BIG_ALLOC
  FIO_MEMORY_LOCK_TYPE_INIT(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_lock);
#endif /* FIO_MEMORY_ENABLE_BIG_ALLOC */
  for (size_t i = 0; i < FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count;
       ++i) {
    FIO_MEMORY_LOCK_TYPE_INIT(
        FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[i].lock);
  }
}

/* *****************************************************************************
Memory Allocation - state printing (debug helper)
***************************************************************************** */

/* SublimeText marker */
void fio_malloc_print_state___(void);
/** Prints the allocator's data structure. May be used for debugging. */
SFUNC void FIO_NAME(FIO_MEMORY_NAME, malloc_print_state)(void) {
  fprintf(
      stderr,
      FIO_MACRO2STR(FIO_NAME(FIO_MEMORY_NAME, malloc)) " allocator state:\n");
  for (size_t i = 0; i < FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count;
       ++i) {
    fprintf(stderr,
            "\t* arena[%zu] block: %p\n",
            i,
            (void *)FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[i].block);
    if (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[i].block) {
      FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *c =
          FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2chunk)(
              FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[i].block);
      size_t b = FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2index)(
          c,
          FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena[i].block);
      fprintf(stderr, "\t\tchunk-ref: %zu (%p)\n", (size_t)c->ref, (void *)c);
      fprintf(stderr,
              "\t\t- block[%zu]-ref: %zu\n"
              "\t\t- block[%zu]-pos: %zu\n",
              b,
              (size_t)c->blocks[b].ref,
              b,
              (size_t)c->blocks[b].pos);
    }
  }
#if FIO_MEMORY_ENABLE_BIG_ALLOC
  if (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_block) {
    fprintf(stderr, "\t---big allocations---\n");
    fprintf(stderr,
            "\t* big-block: %p\n"
            "\t\t ref: %zu\n"
            "\t\t pos: %zu\n",
            (void *)FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_block,
            (size_t)FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_block->ref,
            (size_t)FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_block->pos);
  } else {
    fprintf(stderr,
            "\t---big allocations---\n"
            "\t* big-block: NULL\n");
  }

#endif /* FIO_MEMORY_ENABLE_BIG_ALLOC */

#if FIO_MEMORY_CACHE_SLOTS
  fprintf(stderr, "\t---caches---\n");
  for (size_t i = 0; i < FIO_MEMORY_CACHE_SLOTS; ++i) {
    fprintf(stderr,
            "\t* cache[%zu] chunk: %p\n",
            i,
            (void *)FIO_NAME(FIO_MEMORY_NAME, __mem_state)->cache.a[i]);
  }
#endif /* FIO_MEMORY_CACHE_SLOTS */
}

void fio_malloc_print_free_block_list___(void);
/** Prints the allocator's free block list. May be used for debugging. */
SFUNC void FIO_NAME(FIO_MEMORY_NAME, malloc_print_free_block_list)(void) {
  if (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks.prev ==
      &FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks)
    return;
  fprintf(stderr,
          FIO_MACRO2STR(FIO_NAME(FIO_MEMORY_NAME,
                                 malloc)) " allocator free block list:\n");
  FIO_LIST_NODE *n = FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks.prev;
  for (size_t i = 0; n != &FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks;
       ++i) {
    fprintf(stderr, "\t[%zu] %p\n", i, (void *)n);
    n = n->prev;
  }
}

/* *****************************************************************************
chunk allocation / deallocation
***************************************************************************** */

/* SublimeText marker */
void fio___mem_chunk_dealloc___(void);
/* returns memory to system */
FIO_IFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_dealloc)(
    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) * c) {
  if (!c)
    return;
  FIO_MEMORY_ON_CHUNK_FREE(c);
  FIO_MEM_SYS_FREE(((void *)c), FIO_MEMORY_SYS_ALLOCATION_SIZE);
}

FIO_IFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_cache_or_dealloc)(
    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) * c) {
#if FIO_MEMORY_CACHE_SLOTS
  /* place in cache...? */
  if (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->cache.pos <
      FIO_MEMORY_CACHE_SLOTS) {
    FIO_MEMORY_ON_CHUNK_CACHE(c);
    FIO_NAME(FIO_MEMORY_NAME, __mem_state)
        ->cache.a[FIO_NAME(FIO_MEMORY_NAME, __mem_state)->cache.pos++] = c;
    c = NULL;
  }
#endif /* FIO_MEMORY_CACHE_SLOTS */

  FIO_MEMORY_UNLOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->lock);
  FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_dealloc)(c);
}

FIO_IFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_free)(
    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) * c) {
  /* should we free the chunk? */
  if (!c || fio_atomic_sub_fetch(&c->ref, 1)) {
    FIO_MEMORY_UNLOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->lock);
    return;
  }

  /* remove all blocks from the block allocation list */
  for (size_t b = 0; b < FIO_MEMORY_BLOCKS_PER_ALLOCATION; ++b) {
    FIO_LIST_NODE *n =
        (FIO_LIST_NODE *)FIO_NAME(FIO_MEMORY_NAME, __mem_chunk2ptr)(c, b, 0);
    if (n->prev && n->next) {
      FIO_LIST_REMOVE(n);
      n->prev = n->next = NULL;
    }
  }
  FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_cache_or_dealloc)(c);
}

/* SublimeText marker */
void fio___mem_chunk_new___(void);
/* UNSAFE! returns a clean chunk (cache / allocation). */
FIO_IFUNC FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *
    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_new)(const size_t needs_lock) {
  FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *c = NULL;
#if FIO_MEMORY_CACHE_SLOTS
  /* cache allocation */
  if (needs_lock) {
    FIO_MEMORY_LOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->lock);
  }
  if (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->cache.pos) {
    c = FIO_NAME(FIO_MEMORY_NAME, __mem_state)
            ->cache.a[--FIO_NAME(FIO_MEMORY_NAME, __mem_state)->cache.pos];
    FIO_NAME(FIO_MEMORY_NAME, __mem_state)
        ->cache.a[FIO_NAME(FIO_MEMORY_NAME, __mem_state)->cache.pos] = NULL;
  }
  if (needs_lock) {
    FIO_MEMORY_UNLOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->lock);
  }
  if (c) {
    FIO_MEMORY_ON_CHUNK_UNCACHE(c);
    *c = (FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s)){.ref = 1};
    return c;
  }
#endif /* FIO_MEMORY_CACHE_SLOTS */

  /* system allocation */
  c = (FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *)FIO_MEM_SYS_ALLOC(
      FIO_MEMORY_SYS_ALLOCATION_SIZE,
      FIO_MEMORY_SYS_ALLOCATION_SIZE_LOG);

  if (!c)
    return c;
  FIO_MEMORY_ON_CHUNK_ALLOC(c);
  c->ref = 1;
  return c;
  (void)needs_lock; /* in case it isn't used */
}

/* *****************************************************************************
block allocation / deallocation
***************************************************************************** */

FIO_IFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_block__reset_memory)(
    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) * c,
    size_t b) {
#if FIO_MEMORY_INITIALIZE_ALLOCATIONS
  if (c->blocks[b].pos >= (int32_t)(FIO_MEMORY_UNITS_PER_BLOCK - 4)) {
    /* zero out the whole block */
    FIO_MEMSET(FIO_NAME(FIO_MEMORY_NAME, __mem_chunk2ptr)(c, b, 0),
               0,
               FIO_MEMORY_BLOCK_SIZE);
  } else {
    /* zero out only the memory that was used */
    FIO_MEMSET(FIO_NAME(FIO_MEMORY_NAME, __mem_chunk2ptr)(c, b, 0),
               0,
               (((size_t)c->blocks[b].pos) << FIO_MEMORY_ALIGN_LOG));
  }
#elif defined(DEBUG) && DEBUG
  /* set all bytes to 0xAF to better catch initialization bugs */
  FIO_MEMSET(FIO_NAME(FIO_MEMORY_NAME, __mem_chunk2ptr)(c, b, 0),
             0xFA,
             FIO_MEMORY_BLOCK_SIZE);
#else
  /** only reset a block's free-list header */
  FIO_MEMSET(FIO_NAME(FIO_MEMORY_NAME, __mem_chunk2ptr)(c, b, 0),
             0,
             (((FIO_MEMORY_ALIGN_SIZE - 1) + sizeof(FIO_LIST_NODE)) &
              (~(FIO_MEMORY_ALIGN_SIZE - 1))));
#endif /*FIO_MEMORY_INITIALIZE_ALLOCATIONS*/
  c->blocks[b].pos = 0;
}

/* SublimeText marker */
void fio___mem_block_free___(void);
/** frees a block / decreases it's reference count */
FIO_IFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_block_free)(void *p) {
  FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *c =
      FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2chunk)(p);
  size_t b = FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2index)(c, p);
  if (!c)
    return;
  FIO_ASSERT_DEBUG(
      (uint32_t)c->blocks[b].ref <= FIO_MEMORY_UNITS_PER_BLOCK + 1,
      "block reference count corrupted, possible double free? (%zd)",
      (size_t)c->blocks[b].ref);
  FIO_ASSERT_DEBUG(
      (uint32_t)c->blocks[b].pos <= FIO_MEMORY_UNITS_PER_BLOCK + 1,
      "block allocation position corrupted, possible double free? (%zd)",
      (size_t)c->blocks[b].pos);
  if (fio_atomic_sub_fetch(&c->blocks[b].ref, 1))
    return;

  /* reset memory */
  FIO_NAME(FIO_MEMORY_NAME, __mem_block__reset_memory)(c, b);

  /* place in free list */
  FIO_MEMORY_LOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->lock);
  FIO_LIST_NODE *n =
      (FIO_LIST_NODE *)FIO_NAME(FIO_MEMORY_NAME, __mem_chunk2ptr)(c, b, 0);
  FIO_LIST_PUSH(&FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks, n);
  /* free chunk reference while in locked state */
  FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_free)(c);
}

/* SublimeText marker */
void fio___mem_block_new___(void);
/** returns a new block with a reference count of 1 */
FIO_IFUNC void *FIO_NAME(FIO_MEMORY_NAME, __mem_block_new)(void) {
  void *p = NULL;
  FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *c = NULL;
  size_t b;

  FIO_MEMORY_LOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->lock);

  /* try to collect from list */
  if (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks.prev !=
      &FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks) {
    FIO_LIST_NODE *n = FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks.prev;
    FIO_LIST_REMOVE(n);
    n->next = n->prev = NULL;
    c = FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2chunk)((void *)n);
    fio_atomic_add_fetch(&c->ref, 1);
    p = (void *)n;
    b = FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2index)(c, p);
    goto done;
  }

  /* allocate from cache / system (sets chunk reference to 1) */
  c = FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_new)(0);
  if (!c)
    goto done;

  /* use the first block in the chunk as the new block */
  p = FIO_NAME(FIO_MEMORY_NAME, __mem_chunk2ptr)(c, 0, 0);

  /* place the rest of the blocks in the block allocation list */
  for (b = 1; b < FIO_MEMORY_BLOCKS_PER_ALLOCATION; ++b) {
    FIO_LIST_NODE *n =
        (FIO_LIST_NODE *)FIO_NAME(FIO_MEMORY_NAME, __mem_chunk2ptr)(c, b, 0);
    FIO_LIST_PUSH(&FIO_NAME(FIO_MEMORY_NAME, __mem_state)->blocks, n);
  }
  /* set block index to zero */
  b = 0;

done:
  FIO_MEMORY_UNLOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->lock);
  if (!p)
    return p;
  /* update block reference and allocation position */
  c->blocks[b].ref = 1;
  c->blocks[b].pos = 0;
  return p;
}

/* *****************************************************************************
Small allocation internal API
***************************************************************************** */

/* SublimeText marker */
void fio___mem_slice_new___(void);
/** slice a block to allocate a set number of bytes. */
FIO_SFUNC void *FIO_MEM_ALIGN_NEW FIO_NAME(FIO_MEMORY_NAME,
                                           __mem_slice_new)(size_t bytes,
                                                            void *is_realloc) {
  void *p = NULL;
  bytes = (bytes + ((1UL << FIO_MEMORY_ALIGN_LOG) - 1)) >> FIO_MEMORY_ALIGN_LOG;
  FIO_NAME(FIO_MEMORY_NAME, __mem_arena_s) *a =
      FIO_NAME(FIO_MEMORY_NAME, __mem_arena_lock)();

  if (!a->block) {
    a->block = FIO_NAME(FIO_MEMORY_NAME, __mem_block_new)();
    a->last_pos = 0;
  }
  for (;;) {
    if (!a->block)
      goto no_mem;
    void *const block = a->block;

    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *const c =
        FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2chunk)(block);
    const size_t b = FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2index)(c, block);

    /* add allocation reference */
    /* if we are the only thread holding a reference to this block - reset. */
    if (fio_atomic_add(&c->blocks[b].ref, 1) == 1 && c->blocks[b].pos) {
      FIO_NAME(FIO_MEMORY_NAME, __mem_block__reset_memory)(c, b);
      FIO_MEMORY_ON_BLOCK_RESET_IN_LOCK(c, b);
      a->last_pos = 0;
    }

    /* enough space? allocate */
    if (c->blocks[b].pos + bytes < FIO_MEMORY_UNITS_PER_BLOCK) {
      /* a lucky realloc? */
      if (is_realloc &&
          is_realloc ==
              FIO_NAME(FIO_MEMORY_NAME, __mem_chunk2ptr)(c, b, a->last_pos)) {
        c->blocks[b].pos += bytes;
        fio_atomic_sub(&c->blocks[b].ref, 1); /* release reference added */
        FIO_NAME(FIO_MEMORY_NAME, __mem_arena_unlock)(a);
        return is_realloc;
      }
      p = FIO_NAME(FIO_MEMORY_NAME, __mem_chunk2ptr)(c, b, c->blocks[b].pos);
      a->last_pos = c->blocks[b].pos;
      c->blocks[b].pos += bytes;
      FIO_NAME(FIO_MEMORY_NAME, __mem_arena_unlock)(a);
      return p;
    }
    is_realloc = NULL;

    /*
     * allocate a new block before freeing the existing block
     * this prevents the last chunk from de-allocating and reallocating
     */
    a->block = FIO_NAME(FIO_MEMORY_NAME, __mem_block_new)();
    a->last_pos = 0;

    /* release allocation reference added */
    fio_atomic_sub(&c->blocks[b].ref, 1);
    /* release the reference held by the arena (allocator) */
    FIO_NAME(FIO_MEMORY_NAME, __mem_block_free)(block);
  }

no_mem:
  FIO_NAME(FIO_MEMORY_NAME, __mem_arena_unlock)(a);
  errno = ENOMEM;
  return p;
}

/* SublimeText marker */
void fio_____mem_slice_free___(void);
/** slice a block to allocate a set number of bytes. */
FIO_IFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_slice_free)(void *p) {
  FIO_NAME(FIO_MEMORY_NAME, __mem_block_free)(p);
}

/* *****************************************************************************
big block allocation / de-allocation
***************************************************************************** */
#if FIO_MEMORY_ENABLE_BIG_ALLOC

#define FIO_MEMORY_BIG_BLOCK_MARKER ((~(uint32_t)0) << 2)
#define FIO_MEMORY_BIG_BLOCK_HEADER_SIZE                                       \
  (((sizeof(FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_s)) +                    \
     ((FIO_MEMORY_ALIGN_SIZE - 1))) &                                          \
    ((~(0UL)) << FIO_MEMORY_ALIGN_LOG)))

#define FIO_MEMORY_BIG_BLOCK_SIZE                                              \
  (FIO_MEMORY_SYS_ALLOCATION_SIZE - FIO_MEMORY_BIG_BLOCK_HEADER_SIZE)

#define FIO_MEMORY_UNITS_PER_BIG_BLOCK                                         \
  (FIO_MEMORY_BIG_BLOCK_SIZE / FIO_MEMORY_ALIGN_SIZE)

/* SublimeText marker */
void fio___mem_big_block__reset_memory___(void);
/** zeros out a big-block's memory, keeping it's reference count at 1. */
FIO_IFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_big_block__reset_memory)(
    FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_s) * b) {

#if FIO_MEMORY_INITIALIZE_ALLOCATIONS
  /* zero out memory */
  if (b->pos >= (int32_t)(FIO_MEMORY_UNITS_PER_BIG_BLOCK - 10)) {
    /* zero out everything */
    FIO_MEMSET((void *)b, 0, FIO_MEMORY_SYS_ALLOCATION_SIZE);
  } else {
    /* zero out only the used part of the memory */
    FIO_MEMSET((void *)b,
               0,
               (((size_t)b->pos << FIO_MEMORY_ALIGN_LOG) +
                FIO_MEMORY_BIG_BLOCK_HEADER_SIZE));
  }
#else
#if defined(DEBUG) && DEBUG
  /* set all bytes to 0xAF to better catch initialization bugs */
  FIO_MEMSET((void *)b, 0xFA, FIO_MEMORY_SYS_ALLOCATION_SIZE);
#endif /* DEBUG */
  /* reset chunk header, which is always bigger than big_block header*/
  FIO_MEMSET((void *)b, 0, sizeof(FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s)));
  /* zero out possible block memory (if required) */
  for (size_t i = 0; i < FIO_MEMORY_BLOCKS_PER_ALLOCATION; ++i) {
    FIO_NAME(FIO_MEMORY_NAME, __mem_block__reset_memory)
    ((FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *)b, i);
  }
#endif /* FIO_MEMORY_INITIALIZE_ALLOCATIONS */
  b->ref = 1;
}

/* SublimeText marker */
void fio___mem_big_block_free___(void);
/** frees a block / decreases it's reference count */
FIO_IFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_free)(void *p) {
  // FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s)      ;
  FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_s) *b =
      (FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_s) *)
          FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2chunk)(p);
  /* should we free the block? */
  if (!b || fio_atomic_sub_fetch(&b->ref, 1))
    return;
  FIO_MEMORY_ON_BIG_BLOCK_UNSET(b);

  /* zero out memory */
  FIO_NAME(FIO_MEMORY_NAME, __mem_big_block__reset_memory)(b);
#if FIO_MEMORY_CACHE_SLOTS
  /* lock for chunk de-allocation review () */
  FIO_MEMORY_LOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->lock);
  FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_cache_or_dealloc)
  ((FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *)b);
#else
  FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_dealloc)
  ((FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *)b);
#endif
}

/* SublimeText marker */
void fio___mem_big_block_new___(void);
/** returns a new block with a reference count of 1 */
FIO_IFUNC FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_s) *
    FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_new)(void) {
  FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_s) *b =
      (FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_s) *)
          FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_new)(1);
  if (!b)
    goto no_mem;
  b->marker = FIO_MEMORY_BIG_BLOCK_MARKER;
  b->ref = 1;
  b->pos = 0;
  FIO_MEMORY_ON_BIG_BLOCK_SET(b);
  return b;
no_mem:
  errno = ENOMEM;
  return b;
}

/* *****************************************************************************
Big allocation internal API
***************************************************************************** */

/* SublimeText marker */
void fio___mem_big2ptr___(void);
/** returns a pointer within a chunk, given it's block and offset value. */
FIO_IFUNC void *FIO_NAME(FIO_MEMORY_NAME, __mem_big2ptr)(
    FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_s) * b,
    size_t offset) {
  return (void *)(((uintptr_t)(b) + FIO_MEMORY_BIG_BLOCK_HEADER_SIZE) +
                  (offset << FIO_MEMORY_ALIGN_LOG));
}

/* SublimeText marker */
void fio___mem_big_slice_new___(void);
FIO_SFUNC void *FIO_MEM_ALIGN_NEW
FIO_NAME(FIO_MEMORY_NAME, __mem_big_slice_new)(size_t bytes, void *is_realloc) {
  void *p = NULL;
  bytes = (bytes + ((1UL << FIO_MEMORY_ALIGN_LOG) - 1)) >> FIO_MEMORY_ALIGN_LOG;
  for (;;) {
    FIO_MEMORY_LOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_lock);
    if (!FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_block) {
      FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_block =
          FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_new)();
      FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_last_pos = 0;
    }

    if (!FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_block)
      goto done;
    FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_s) *b =
        FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_block;

    /* are we the only thread holding a reference to this block... reset? */
    if (b->ref == 1 && b->pos) {
      FIO_NAME(FIO_MEMORY_NAME, __mem_big_block__reset_memory)(b);
      FIO_MEMORY_ON_BLOCK_RESET_IN_LOCK(b, 0);
      b->marker = FIO_MEMORY_BIG_BLOCK_MARKER;
      FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_last_pos = 0;
    }

    /* enough space? */
    if (b->pos + bytes < FIO_MEMORY_UNITS_PER_BIG_BLOCK) {
      /* a lucky realloc? */
      if (is_realloc &&
          is_realloc ==
              FIO_NAME(FIO_MEMORY_NAME, __mem_big2ptr)(
                  b,
                  FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_last_pos)) {
        b->pos += bytes;
        FIO_MEMORY_UNLOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_lock);
        return is_realloc;
      }

      p = FIO_NAME(FIO_MEMORY_NAME, __mem_big2ptr)(b, b->pos);
      fio_atomic_add(&b->ref, 1); /* keep inside lock to enable reset */
      FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_last_pos = b->pos;
      b->pos += bytes;
      FIO_MEMORY_UNLOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_lock);
      return p;
    }

    is_realloc = NULL;
    FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_block = NULL;
    FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_last_pos = 0;
    FIO_MEMORY_UNLOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_lock);
    FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_free)(b);
  }
done:
  FIO_MEMORY_UNLOCK(FIO_NAME(FIO_MEMORY_NAME, __mem_state)->big_lock);
  return p;
}

/* SublimeText marker */
void fio_____mem_big_slice_free___(void);
/** slice a block to allocate a set number of bytes. */
FIO_IFUNC void FIO_NAME(FIO_MEMORY_NAME, __mem_big_slice_free)(void *p) {
  FIO_NAME(FIO_MEMORY_NAME, __mem_big_block_free)(p);
}

#endif /* FIO_MEMORY_ENABLE_BIG_ALLOC */
/* *****************************************************************************
Memory Allocation - malloc(0) pointer
***************************************************************************** */

static long double FIO_NAME(
    FIO_MEMORY_NAME,
    malloc_zero)[((1UL << (FIO_MEMORY_ALIGN_LOG)) / sizeof(long double)) + 1];

#define FIO_MEMORY_MALLOC_ZERO_POINTER                                         \
  ((void *)(((uintptr_t)FIO_NAME(FIO_MEMORY_NAME, malloc_zero) +               \
             (FIO_MEMORY_ALIGN_SIZE - 1)) &                                    \
            ((~(uintptr_t)0) << FIO_MEMORY_ALIGN_LOG)))

/* *****************************************************************************
Memory Allocation - API implementation - debugging and info
***************************************************************************** */

/* SublimeText marker */
void fio_malloc_block_size___(void);
/* public API obligation */
SFUNC size_t FIO_NAME(FIO_MEMORY_NAME, malloc_block_size)(void) {
  return FIO_MEMORY_BLOCK_SIZE;
}

void fio_malloc_arenas___(void);
SFUNC size_t FIO_NAME(FIO_MEMORY_NAME, malloc_arenas)(void) {
  return FIO_NAME(FIO_MEMORY_NAME, __mem_state)
             ? FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count
             : 0;
}

SFUNC void FIO_NAME(FIO_MEMORY_NAME, malloc_print_settings)(void) {
  // FIO_LOG_DEBUG2(
  fprintf(
      stderr,
      "Custom memory allocator " FIO_MACRO2STR(FIO_NAME(
          FIO_MEMORY_NAME,
          malloc)) " initialized with:\n"
                   "\t* system allocation arenas:                 %zu arenas\n"
                   "\t* system allocation size:                   %zu bytes\n"
                   "\t* system allocation overhead (theoretical): %zu bytes\n"
                   "\t* system allocation overhead (actual):      %zu bytes\n"
                   "\t* cached system allocations (max):          %zu units\n"
                   "\t* memory block size:                        %zu bytes\n"
                   "\t* blocks per system allocation:             %zu blocks\n"
                   "\t* allocation units per block:               %zu units\n"
                   "\t* arena per-allocation limit:               %zu bytes\n"
                   "\t* local per-allocation limit (before mmap): %zu bytes\n"
                   "\t* allocation alignment (non-zero):          %zu bytes\n"
                   "\t* malloc(0) pointer:                        %p\n"
                   "\t* always initializes memory  (zero-out):    %s\n"
                   "\t* " FIO_MEMORY_LOCK_NAME " locking system\n",
      (size_t)FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count,
      (size_t)FIO_MEMORY_SYS_ALLOCATION_SIZE,
      (size_t)FIO_MEMORY_HEADER_SIZE,
      (size_t)FIO_MEMORY_SYS_ALLOCATION_SIZE % (size_t)FIO_MEMORY_BLOCK_SIZE,
      (size_t)FIO_MEMORY_CACHE_SLOTS,
      (size_t)FIO_MEMORY_BLOCK_SIZE,
      (size_t)FIO_MEMORY_BLOCKS_PER_ALLOCATION,
      (size_t)FIO_MEMORY_UNITS_PER_BLOCK,
      (size_t)FIO_MEMORY_BLOCK_ALLOC_LIMIT,
      (size_t)FIO_MEMORY_ALLOC_LIMIT,
      (size_t)FIO_MEMORY_ALIGN_SIZE,
      FIO_MEMORY_MALLOC_ZERO_POINTER,
      (FIO_MEMORY_INITIALIZE_ALLOCATIONS ? "true" : "false"));
}

/* *****************************************************************************
Malloc implementation
***************************************************************************** */

/* SublimeText marker */
void fio___malloc__(void);
/**
 * Allocates memory using a per-CPU core block memory pool.
 * Memory is zeroed out.
 *
 * Allocations above FIO_MEMORY_BLOCK_ALLOC_LIMIT will be redirected to `mmap`,
 * as if `mempool_mmap` was called.
 *
 * `mempool_malloc` promises a best attempt at providing locality between
 * consecutive calls, but locality can't be guaranteed.
 */
FIO_IFUNC void *FIO_MEM_ALIGN_NEW FIO_NAME(FIO_MEMORY_NAME,
                                           ___malloc)(size_t size,
                                                      void *is_realloc) {
  void *p = NULL;
  if (!size)
    goto malloc_zero;

#if FIO_MEMORY_ENABLE_BIG_ALLOC
  if ((is_realloc && size > (FIO_MEMORY_BIG_BLOCK_SIZE -
                             (FIO_MEMORY_BIG_BLOCK_HEADER_SIZE << 1))) ||
      (!is_realloc && size > FIO_MEMORY_ALLOC_LIMIT))
#else
  if (!is_realloc && size > FIO_MEMORY_ALLOC_LIMIT)
#endif
  {
#ifdef DEBUG
    FIO_LOG_WARNING(
        "unintended " FIO_MACRO2STR(
            FIO_NAME(FIO_MEMORY_NAME, mmap)) " allocation (slow): %zu bytes",
        FIO_MEM_BYTES2PAGES(size));
#endif
    p = FIO_NAME(FIO_MEMORY_NAME, mmap)(size);
    return p;
  }
  if (!FIO_NAME(FIO_MEMORY_NAME, __mem_state)) {
    FIO_NAME(FIO_MEMORY_NAME, __mem_state_setup)();
  }
#if FIO_MEMORY_ENABLE_BIG_ALLOC
  if ((is_realloc &&
       size > FIO_MEMORY_BLOCK_SIZE - (2 << FIO_MEMORY_ALIGN_LOG)) ||
      (!is_realloc && size > FIO_MEMORY_BLOCK_ALLOC_LIMIT)) {
    p = FIO_NAME(FIO_MEMORY_NAME, __mem_big_slice_new)(size, is_realloc);
    if (p && p != is_realloc) {
      FIO_MEMORY_ON_ALLOC_FUNC();
    }
    return p;
  }
#endif /* FIO_MEMORY_ENABLE_BIG_ALLOC */

  p = FIO_NAME(FIO_MEMORY_NAME, __mem_slice_new)(size, is_realloc);
  if (p && p != is_realloc) {
    FIO_MEMORY_ON_ALLOC_FUNC();
  }
  return p;
malloc_zero:
  p = FIO_MEMORY_MALLOC_ZERO_POINTER;
  return p;
}

/* *****************************************************************************
Memory Allocation - API implementation
***************************************************************************** */

/* SublimeText marker */
void fio_malloc__(void);
/**
 * Allocates memory using a per-CPU core block memory pool.
 * Memory is zeroed out.
 *
 * Allocations above FIO_MEMORY_BLOCK_ALLOC_LIMIT will be redirected to `mmap`,
 * as if `mempool_mmap` was called.
 *
 * `mempool_malloc` promises a best attempt at providing locality between
 * consecutive calls, but locality can't be guaranteed.
 */
SFUNC void *FIO_MEM_ALIGN_NEW FIO_NAME(FIO_MEMORY_NAME, malloc)(size_t size) {
  void *p = FIO_NAME(FIO_MEMORY_NAME, ___malloc)(size, NULL);
#if !FIO_MEMORY_INITIALIZE_ALLOCATIONS && defined(DEBUG) && DEBUG
  /* set all bytes to 0xAF to better catch initialization bugs */
  FIO_MEMSET(p, 0xFA, size);
#endif /* DEBUG dirtify */
  return p;
}

/* SublimeText marker */
void fio_calloc__(void);
/**
 * same as calling `fio_malloc(size_per_unit * unit_count)`;
 *
 * Allocations above FIO_MEMORY_BLOCK_ALLOC_LIMIT will be redirected to `mmap`,
 * as if `mempool_mmap` was called.
 */
SFUNC void *FIO_MEM_ALIGN_NEW FIO_NAME(FIO_MEMORY_NAME,
                                       calloc)(size_t size_per_unit,
                                               size_t unit_count) {
#if FIO_MEMORY_INITIALIZE_ALLOCATIONS
  return FIO_NAME(FIO_MEMORY_NAME, malloc)(size_per_unit * unit_count);
#else
  void *p;
  /* round up to alignment size. */
  const size_t len =
      ((size_per_unit * unit_count) + (FIO_MEMORY_ALIGN_SIZE - 1)) &
      (~((size_t)FIO_MEMORY_ALIGN_SIZE - 1));
  p = FIO_NAME(FIO_MEMORY_NAME, malloc)(len);
  /* initialize memory only when required */
  FIO_MEMSET(p, 0, len);
  return p;
#endif /* FIO_MEMORY_INITIALIZE_ALLOCATIONS */
}

/* SublimeText marker */
void fio_free__(void);
/** Frees memory that was allocated using this library. */
SFUNC void FIO_NAME(FIO_MEMORY_NAME, free)(void *ptr) {
  if (!ptr || ptr == FIO_MEMORY_MALLOC_ZERO_POINTER)
    return;
  FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *c =
      FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2chunk)(ptr);
  if (!c) {
    FIO_LOG_ERROR(FIO_MACRO2STR(
        FIO_NAME(FIO_MEMORY_NAME,
                 free)) " attempting to free a pointer owned by a NULL chunk.");
    return;
  }
  FIO_MEMORY_ON_FREE_FUNC();

#if FIO_MEMORY_ENABLE_BIG_ALLOC
  if (c->marker == FIO_MEMORY_BIG_BLOCK_MARKER) {
    FIO_NAME(FIO_MEMORY_NAME, __mem_big_slice_free)(ptr);
    return;
  }
#endif /* FIO_MEMORY_ENABLE_BIG_ALLOC */

  /* big mmap allocation? */
  if (((uintptr_t)c + FIO_MEMORY_ALIGN_SIZE) == (uintptr_t)ptr && c->marker)
    goto mmap_free;

  FIO_NAME(FIO_MEMORY_NAME, __mem_slice_free)(ptr);
  return;

mmap_free:
  /* zero out memory before returning it to the system */
  FIO_MEMSET(ptr,
             0,
             ((size_t)c->marker << FIO_MEM_PAGE_SIZE_LOG) -
                 FIO_MEMORY_ALIGN_SIZE);
  FIO_MEMORY_ON_CHUNK_FREE(c);
  FIO_MEM_SYS_FREE(c, (size_t)c->marker << FIO_MEM_PAGE_SIZE_LOG);
}

/* SublimeText marker */
void fio_realloc__(void);
/**
 * Re-allocates memory. An attempt to avoid copying the data is made only for
 * big memory allocations (larger than FIO_MEMORY_BLOCK_ALLOC_LIMIT).
 */
SFUNC void *FIO_MEM_ALIGN FIO_NAME(FIO_MEMORY_NAME, realloc)(void *ptr,
                                                             size_t new_size) {
  return FIO_NAME(FIO_MEMORY_NAME, realloc2)(ptr, new_size, new_size);
}

/**
 * Uses system page maps for reallocation.
 */
FIO_SFUNC void *FIO_NAME(FIO_MEMORY_NAME, __mem_realloc2_big)(
    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) * c,
    size_t new_size) {
  const size_t new_len = FIO_MEM_BYTES2PAGES(new_size + FIO_MEMORY_ALIGN_SIZE);
  c = (FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *)FIO_MEM_SYS_REALLOC(
      c,
      (size_t)c->marker << FIO_MEM_PAGE_SIZE_LOG,
      new_len,
      FIO_MEMORY_SYS_ALLOCATION_SIZE_LOG);
  if (!c)
    return NULL;
  c->marker = (uint32_t)(new_len >> FIO_MEM_PAGE_SIZE_LOG);
  return (void *)((uintptr_t)c + FIO_MEMORY_ALIGN_SIZE);
}

/* SublimeText marker */
void fio_realloc2__(void);
/**
 * Re-allocates memory. An attempt to avoid copying the data is made only for
 * big memory allocations (larger than FIO_MEMORY_BLOCK_ALLOC_LIMIT).
 *
 * This variation is slightly faster as it might copy less data.
 */
SFUNC void *FIO_MEM_ALIGN FIO_NAME(FIO_MEMORY_NAME, realloc2)(void *ptr,
                                                              size_t new_size,
                                                              size_t copy_len) {
  void *mem = NULL;
  if (!new_size)
    goto act_as_free;
  if (!ptr || ptr == FIO_MEMORY_MALLOC_ZERO_POINTER)
    goto act_as_malloc;

  { /* test for big-paged malloc and limit copy_len */
    FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *c =
        FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2chunk)(ptr);
    size_t b = FIO_NAME(FIO_MEMORY_NAME, __mem_ptr2index)(c, ptr);
    FIO_ASSERT(c, "cannot reallocate a pointer with a NULL system allocation");

    register size_t max_len =
        ((uintptr_t)FIO_NAME(FIO_MEMORY_NAME, __mem_chunk2ptr)(c, b, 0) +
         FIO_MEMORY_BLOCK_SIZE) -
        ((uintptr_t)ptr);
#if FIO_MEMORY_ENABLE_BIG_ALLOC
    if (c->marker == FIO_MEMORY_BIG_BLOCK_MARKER) {
      /* extend max_len to accommodate possible length */
      max_len =
          ((uintptr_t)c + FIO_MEMORY_SYS_ALLOCATION_SIZE) - ((uintptr_t)ptr);
    } else
#endif /* FIO_MEMORY_ENABLE_BIG_ALLOC */
      if ((uintptr_t)(c) + FIO_MEMORY_ALIGN_SIZE == (uintptr_t)ptr &&
          c->marker) {
        if (new_size > FIO_MEMORY_ALLOC_LIMIT)
          return (
              mem = FIO_NAME(FIO_MEMORY_NAME, __mem_realloc2_big)(c, new_size));
        max_len = new_size; /* shrinking from mmap to allocator */
      }

    if (copy_len > max_len)
      copy_len = max_len;
    if (copy_len > new_size)
      copy_len = new_size;
  }

  mem = FIO_NAME(FIO_MEMORY_NAME, ___malloc)(new_size, ptr);
  if (!mem || mem == ptr) {
    return mem;
  }

  /* when allocated from the same block, the max length might be adjusted */
  if ((uintptr_t)mem > (uintptr_t)ptr &&
      (uintptr_t)ptr + copy_len >= (uintptr_t)mem) {
    copy_len = (uintptr_t)mem - (uintptr_t)ptr;
  }

  FIO_MEMCPY(mem,
             ptr,
             ((copy_len + (FIO_MEMORY_ALIGN_SIZE - 1)) &
              ((~(size_t)0) << FIO_MEMORY_ALIGN_LOG)));
  // zero out leftover bytes, if any.
  while (copy_len & (FIO_MEMORY_ALIGN_SIZE - 1)) {
    ((uint8_t *)mem)[copy_len++] = 0;
  }

  FIO_NAME(FIO_MEMORY_NAME, free)(ptr);

  return mem;

act_as_malloc:
  mem = FIO_NAME(FIO_MEMORY_NAME, ___malloc)(new_size, NULL);
  return mem;

act_as_free:
  FIO_NAME(FIO_MEMORY_NAME, free)(ptr);
  mem = FIO_MEMORY_MALLOC_ZERO_POINTER;
  return mem;
}

/* SublimeText marker */
void fio_mmap__(void);
/**
 * Allocates memory directly using `mmap`, this is preferred for objects that
 * both require almost a page of memory (or more) and expect a long lifetime.
 *
 * However, since this allocation will invoke the system call (`mmap`), it will
 * be inherently slower.
 *
 * `mempoll_free` can be used for deallocating the memory.
 */
SFUNC void *FIO_MEM_ALIGN_NEW FIO_NAME(FIO_MEMORY_NAME, mmap)(size_t size) {
  if (!size)
    return FIO_NAME(FIO_MEMORY_NAME, malloc)(0);
  size_t pages = FIO_MEM_BYTES2PAGES(size + FIO_MEMORY_ALIGN_SIZE);
  if (((uint64_t)pages >> (31 + FIO_MEM_PAGE_SIZE_LOG)))
    return NULL;
  FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *c =
      (FIO_NAME(FIO_MEMORY_NAME, __mem_chunk_s) *)
          FIO_MEM_SYS_ALLOC(pages, FIO_MEMORY_SYS_ALLOCATION_SIZE_LOG);
  if (!c)
    goto no_mem;
  FIO_MEMORY_ON_ALLOC_FUNC();
  FIO_MEMORY_ON_CHUNK_ALLOC(c);
  c->marker = (uint32_t)(pages >> FIO_MEM_PAGE_SIZE_LOG);
  return (void *)((uintptr_t)c + FIO_MEMORY_ALIGN_SIZE);
no_mem:
  errno = ENOMEM;
  return NULL;
}

/* *****************************************************************************
Override the system's malloc functions if required
***************************************************************************** */
#if defined(FIO_MALLOC_OVERRIDE_SYSTEM) && !defined(H___FIO_MALLOC_OVERRIDE___H)
#define H___FIO_MALLOC_OVERRIDE___H
void *malloc(size_t size) { return FIO_NAME(FIO_MEMORY_NAME, malloc)(size); }
void *calloc(size_t size, size_t count) {
  return FIO_NAME(FIO_MEMORY_NAME, calloc)(size, count);
}
void free(void *ptr) { FIO_NAME(FIO_MEMORY_NAME, free)(ptr); }
void *realloc(void *ptr, size_t new_size) {
  return FIO_NAME(FIO_MEMORY_NAME, realloc2)(ptr, new_size, new_size);
}
#endif /* FIO_MALLOC_OVERRIDE_SYSTEM */
#undef FIO_MALLOC_OVERRIDE_SYSTEM

/* *****************************************************************************





Memory Allocation - test - tests specific allocator settings





***************************************************************************** */
#ifdef FIO_TEST_ALL

#ifndef H___FIO_TEST_MEMORY_HELPERS_H
#define H___FIO_TEST_MEMORY_HELPERS_H

FIO_IFUNC void fio___memset_test_aligned(void *restrict dest_,
                                         uint64_t data,
                                         size_t bytes,
                                         const char *msg) {
  uint8_t *r = (uint8_t *)dest_;
  uint8_t *e_group = r + (bytes & (~(size_t)63ULL));
  uint64_t d[8] = {data, data, data, data, data, data, data, data};
  while (r < e_group) {
    fio_memcpy64(d, r);
    FIO_ASSERT(d[0] == data && d[1] == data && d[2] == data && d[3] == data &&
                   d[4] == data && d[5] == data && d[6] == data && d[7] == data,
               "%s memory data was overwritten",
               msg);
    r += 64;
  }
  fio_memcpy63x(d, r, bytes);
  FIO_ASSERT(d[0] == data && d[1] == data && d[2] == data && d[3] == data &&
                 d[4] == data && d[5] == data && d[6] == data && d[7] == data,
             "%s memory data was overwritten",
             msg);
  (void)msg; /* in case FIO_ASSERT is disabled */
}
#endif /* H___FIO_TEST_MEMORY_HELPERS_H */

#ifndef FIO_TEST_MULTI_THREADED
#define FIO_TEST_MULTI_THREADED 0
#endif

/* contention testing (multi-threaded) */
FIO_IFUNC void *FIO_NAME_TEST(FIO_NAME(FIO_MEMORY_NAME, fio),
                              mem_tsk)(void *i_) {
  uintptr_t cycles = (uintptr_t)i_;
  const size_t test_byte_count =
      FIO_MEMORY_SYS_ALLOCATION_SIZE + (FIO_MEMORY_SYS_ALLOCATION_SIZE >> 1);
  uint64_t marker[2];
  do {
    marker[0] = fio_rand64();
    marker[1] = fio_rand64();
  } while (!marker[0] || !marker[1] || marker[0] == marker[1]);

  const size_t limit = (test_byte_count / cycles);
  char **ary = (char **)FIO_NAME(FIO_MEMORY_NAME, calloc)(sizeof(*ary), limit);
  const uintptr_t alignment_mask = (FIO_MEMORY_ALIGN_SIZE - 1);
  FIO_ASSERT(ary, "allocation failed for test container");
  for (size_t i = 0; i < limit; ++i) {
    if (1) {
      /* add some fragmentation */
      char *tmp = (char *)FIO_NAME(FIO_MEMORY_NAME, malloc)(16);
      FIO_NAME(FIO_MEMORY_NAME, free)(tmp);
      FIO_ASSERT(tmp, "small allocation failed!");
      FIO_ASSERT(!((uintptr_t)tmp & alignment_mask),
                 "allocation alignment error!");
    }
    ary[i] = (char *)FIO_NAME(FIO_MEMORY_NAME, malloc)(cycles);
    FIO_ASSERT(ary[i], "allocation failed!");
    FIO_ASSERT(!((uintptr_t)ary[i] & alignment_mask),
               "allocation alignment error!");
    FIO_ASSERT(!FIO_MEMORY_INITIALIZE_ALLOCATIONS || !ary[i][(cycles - 1)],
               "allocated memory not zero (end): %p",
               (void *)ary[i]);
    FIO_ASSERT(!FIO_MEMORY_INITIALIZE_ALLOCATIONS || !ary[i][0],
               "allocated memory not zero (start): %p",
               (void *)ary[i]);
    FIO_MEMSET(ary[i], 0, cycles);
    fio_xmask(ary[i], cycles, marker[i & 1]);
  }
  for (size_t i = 0; i < limit; ++i) {
    char *tmp = (char *)FIO_NAME(FIO_MEMORY_NAME,
                                 realloc2)(ary[i], (cycles << 1), (cycles));
    FIO_ASSERT(tmp, "re-allocation failed!");
    ary[i] = tmp;
    FIO_ASSERT(!((uintptr_t)ary[i] & alignment_mask),
               "allocation alignment error!");
    FIO_ASSERT(!FIO_MEMORY_INITIALIZE_ALLOCATIONS || !ary[i][(cycles)],
               "realloc2 copy overflow!");
    fio___memset_test_aligned(ary[i], marker[i & 1], (cycles), "realloc grow");
    tmp =
        (char *)FIO_NAME(FIO_MEMORY_NAME, realloc2)(ary[i], (cycles), (cycles));
    FIO_ASSERT(tmp, "re-allocation (shrinking) failed!");
    ary[i] = tmp;
    fio___memset_test_aligned(ary[i],
                              marker[i & 1],
                              (cycles),
                              "realloc shrink");
  }
  for (size_t i = 0; i < limit; ++i) {
    fio___memset_test_aligned(ary[i], marker[i & 1], (cycles), "mem review");
    FIO_NAME(FIO_MEMORY_NAME, free)(ary[i]);
    ary[i] = NULL;
  }

  uint64_t mark;
  void *old = &mark;
  mark = fio_risky_hash(&old, sizeof(mark), 0);

  for (int repeat_cycle_test = 0; repeat_cycle_test < 4; ++repeat_cycle_test) {
    for (size_t i = 0; i < limit - 4; i += 4) {
      if (ary[i])
        fio___memset_test_aligned(ary[i], mark, 16, "mark missing at ary[0]");
      FIO_NAME(FIO_MEMORY_NAME, free)(ary[i]);
      if (ary[i + 1])
        fio___memset_test_aligned(ary[i + 1],
                                  mark,
                                  cycles,
                                  "mark missing at ary[1]");
      FIO_NAME(FIO_MEMORY_NAME, free)(ary[i + 1]);
      if (ary[i + 2])
        fio___memset_test_aligned(ary[i + 2],
                                  mark,
                                  cycles,
                                  "mark missing at ary[2]");
      FIO_NAME(FIO_MEMORY_NAME, free)(ary[i + 2]);
      if (ary[i + 3])
        fio___memset_test_aligned(ary[i + 3],
                                  mark,
                                  cycles,
                                  "mark missing at ary[3]");
      FIO_NAME(FIO_MEMORY_NAME, free)(ary[i + 3]);

      ary[i] = (char *)FIO_NAME(FIO_MEMORY_NAME, malloc)(cycles);
      FIO_MEMSET(ary[i], 0, cycles);
      fio_xmask(ary[i], cycles, mark);

      ary[i + 1] = (char *)FIO_NAME(FIO_MEMORY_NAME, malloc)(cycles);
      FIO_NAME(FIO_MEMORY_NAME, free)(ary[i + 1]);
      ary[i + 1] = (char *)FIO_NAME(FIO_MEMORY_NAME, malloc)(cycles);
      FIO_MEMSET(ary[i + 1], 0, cycles);
      fio_xmask(ary[i + 1], cycles, mark);

      ary[i + 2] = (char *)FIO_NAME(FIO_MEMORY_NAME, malloc)(cycles);
      FIO_MEMSET(ary[i + 2], 0, cycles);
      fio_xmask(ary[i + 2], cycles, mark);
      ary[i + 2] = (char *)FIO_NAME(FIO_MEMORY_NAME,
                                    realloc2)(ary[i + 2], cycles * 2, cycles);

      ary[i + 3] = (char *)FIO_NAME(FIO_MEMORY_NAME, malloc)(cycles);
      FIO_NAME(FIO_MEMORY_NAME, free)(ary[i + 3]);
      ary[i + 3] = (char *)FIO_NAME(FIO_MEMORY_NAME, malloc)(cycles);
      FIO_MEMSET(ary[i + 3], 0, cycles);
      fio_xmask(ary[i + 3], cycles, mark);
      ary[i + 3] = (char *)FIO_NAME(FIO_MEMORY_NAME,
                                    realloc2)(ary[i + 3], cycles * 2, cycles);

      for (int b = 0; b < 4; ++b) {
        for (size_t pos = 0; pos < (cycles / sizeof(uint64_t)); ++pos) {
          FIO_ASSERT(((uint64_t *)(ary[i + b]))[pos] == mark,
                     "memory mark corrupted at test ptr %zu",
                     i + b);
        }
      }
      for (int b = 1; b < 4; ++b) {
        FIO_NAME(FIO_MEMORY_NAME, free)(ary[b]);
        ary[b] = NULL;
        FIO_NAME(FIO_MEMORY_NAME, free)(ary[i + b]);
      }
      for (int b = 1; b < 4; ++b) {
        ary[i + b] = (char *)FIO_NAME(FIO_MEMORY_NAME, malloc)(cycles);
        if (i) {
          ary[b] = (char *)FIO_NAME(FIO_MEMORY_NAME, malloc)(cycles);
          FIO_MEMSET(ary[b], 0, cycles);
          fio_xmask(ary[b], cycles, mark);
        }
        FIO_MEMSET(ary[i + b], 0, cycles);
        fio_xmask(ary[i + b], cycles, mark);
      }

      for (int b = 0; b < 4; ++b) {
        for (size_t pos = 0; pos < (cycles / sizeof(uint64_t)); ++pos) {
          FIO_ASSERT(((uint64_t *)(ary[b]))[pos] == mark,
                     "memory mark corrupted at test ptr %zu",
                     i + b);
          FIO_ASSERT(((uint64_t *)(ary[i + b]))[pos] == mark,
                     "memory mark corrupted at test ptr %zu",
                     i + b);
        }
      }
    }
  }
  for (size_t i = 0; i < limit; ++i) {
    FIO_NAME(FIO_MEMORY_NAME, free)(ary[i]);
    ary[i] = NULL;
  }

  FIO_NAME(FIO_MEMORY_NAME, free)(ary);
  return NULL;
}

/* main test function */
FIO_SFUNC void FIO_NAME_TEST(FIO_NAME(stl, FIO_MEMORY_NAME), mem)(void) {
  fprintf(stderr,
          "* Testing core memory allocator " FIO_MACRO2STR(
              FIO_NAME(FIO_MEMORY_NAME, malloc)) ".\n");

  const uintptr_t alignment_mask = (FIO_MEMORY_ALIGN_SIZE - 1);
  fprintf(stderr,
          "* Validating allocation alignment on %zu byte border.\n",
          (size_t)(FIO_MEMORY_ALIGN_SIZE));
  for (size_t i = 0; i < alignment_mask; ++i) {
    void *p = FIO_NAME(FIO_MEMORY_NAME, malloc)(i);
    FIO_ASSERT(!((uintptr_t)p & alignment_mask),
               "allocation alignment error allocating %zu bytes!",
               i);
    FIO_NAME(FIO_MEMORY_NAME, free)(p);
  }
  const size_t thread_count =
      FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count +
      (FIO_NAME(FIO_MEMORY_NAME, __mem_state)->arena_count >> 1);

  for (uintptr_t cycles = 16; cycles <= (FIO_MEMORY_ALLOC_LIMIT); cycles *= 2) {
    fprintf(stderr,
            "* Testing %zu byte allocation blocks, single threaded.\n",
            (size_t)(cycles));
    FIO_NAME_TEST(FIO_NAME(FIO_MEMORY_NAME, fio), mem_tsk)((void *)cycles);
  }

  if (FIO_TEST_MULTI_THREADED) {

    for (uintptr_t cycles = 16; cycles <= (FIO_MEMORY_ALLOC_LIMIT);
         cycles *= 2) {
#if _MSC_VER
      fio_thread_t threads[(FIO_MEMORY_ARENA_COUNT_MAX + 1) * 2];
      FIO_ASSERT(((FIO_MEMORY_ARENA_COUNT_MAX + 1) * 2) >= thread_count,
                 "Please use CLang or GCC to test this memory allocator");
#else
      fio_thread_t threads[thread_count];
#endif

      fprintf(stderr,
              "* Testing %zu byte allocation blocks, using %zu threads.\n",
              (size_t)(cycles),
              (thread_count + 1));
      for (size_t i = 0; i < thread_count; ++i) {
        if (fio_thread_create(
                threads + i,
                FIO_NAME_TEST(FIO_NAME(FIO_MEMORY_NAME, fio), mem_tsk),
                (void *)cycles)) {
          abort();
        }
      }
      FIO_NAME_TEST(FIO_NAME(FIO_MEMORY_NAME, fio), mem_tsk)((void *)cycles);
      for (size_t i = 0; i < thread_count; ++i) {
        fio_thread_join(threads + i);
      }
    }
  }
  fprintf(stderr,
          "* Re-validating allocation alignment on %zu byte border.\n",
          (size_t)(FIO_MEMORY_ALIGN_SIZE));
  for (size_t i = 0; i < alignment_mask; ++i) {
    void *p = FIO_NAME(FIO_MEMORY_NAME, malloc)(i);
    FIO_ASSERT(!((uintptr_t)p & alignment_mask),
               "allocation alignment error allocating %zu bytes!",
               i);
    FIO_NAME(FIO_MEMORY_NAME, free)(p);
  }

#if DEBUG
  FIO_NAME(FIO_MEMORY_NAME, malloc_print_state)();
  FIO_NAME(FIO_MEMORY_NAME, __mem_state_cleanup)(NULL);
#endif /* DEBUG */
}
#endif /* FIO_TEST_ALL */

/* *****************************************************************************
Memory pool cleanup
***************************************************************************** */
#undef FIO_MEM_ALIGN
#undef FIO_MEM_ALIGN_NEW
#undef FIO_MEMORY_MALLOC_ZERO_POINTER

#endif /* FIO_MEMORY_DISABLE */
#endif /* FIO_EXTERN_COMPLETE */
#endif /* FIO_MEMORY_NAME */

#undef FIO_MEMORY_ON_CHUNK_ALLOC
#undef FIO_MEMORY_ON_CHUNK_FREE
#undef FIO_MEMORY_ON_CHUNK_CACHE
#undef FIO_MEMORY_ON_CHUNK_UNCACHE
#undef FIO_MEMORY_ON_BLOCK_RESET_IN_LOCK
#undef FIO_MEMORY_ON_BIG_BLOCK_SET
#undef FIO_MEMORY_ON_BIG_BLOCK_UNSET
#undef FIO_MEMORY_ON_ALLOC_FUNC
#undef FIO_MEMORY_ON_FREE_FUNC
#undef FIO_MEMORY_PRINT_STATS_END

#undef FIO_MEMORY_ARENA_COUNT
#undef FIO_MEMORY_SYS_ALLOCATION_SIZE_LOG
#undef FIO_MEMORY_CACHE_SLOTS
#undef FIO_MEMORY_ALIGN_LOG
#undef FIO_MEMORY_INITIALIZE_ALLOCATIONS
#undef FIO_MEMORY_USE_THREAD_MUTEX
#undef FIO_MEMORY_BLOCK_SIZE
#undef FIO_MEMORY_BLOCKS_PER_ALLOCATION_LOG
#undef FIO_MEMORY_BLOCKS_PER_ALLOCATION
#undef FIO_MEMORY_ENABLE_BIG_ALLOC
// #undef FIO_MEMORY_ARENA_COUNT_FALLBACK
// #undef FIO_MEMORY_ARENA_COUNT_MAX
#undef FIO_MEMORY_WARMUP

#undef FIO_MEMORY_LOCK_NAME
#undef FIO_MEMORY_LOCK_TYPE
#undef FIO_MEMORY_LOCK_TYPE_INIT
#undef FIO_MEMORY_TRYLOCK
#undef FIO_MEMORY_LOCK
#undef FIO_MEMORY_UNLOCK

/* don't undefine FIO_MEMORY_NAME due to possible use in allocation macros */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_POLL               /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                            POSIX Portable Polling



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_POLL) && !defined(H___FIO_POLL___H) &&                         \
    !defined(FIO___RECURSIVE_INCLUDE)

#ifndef FIO_POLL_POSSIBLE_FLAGS
/** The user flags IO events recognize */
#define FIO_POLL_POSSIBLE_FLAGS (POLLIN | POLLOUT | POLLPRI)
#endif

#ifndef FIO_POLL_MAX_EVENTS
#if UINTPTR_MAX <= 0xFFFFFFFF
/** relevant only for epoll and kqueue - maximum number of events per review */
#define FIO_POLL_MAX_EVENTS 256
#else
/** relevant only for epoll and kqueue - maximum number of events per review */
#define FIO_POLL_MAX_EVENTS 128
#endif
#endif

/* *****************************************************************************
Possible polling engine (system call) selection
***************************************************************************** */

#ifndef FIO_POLL_ENGINE_POLL
/** define `FIO_POLL_ENGINE` as `FIO_POLL_ENGINE_POLL` to use `poll` */
#define FIO_POLL_ENGINE_POLL 1
#endif
#ifndef FIO_POLL_ENGINE_EPOLL
/** define `FIO_POLL_ENGINE` as `FIO_POLL_ENGINE_EPOLL` to use `epoll` */
#define FIO_POLL_ENGINE_EPOLL 2
#endif
#ifndef FIO_POLL_ENGINE_KQUEUE
/** define `FIO_POLL_ENGINE` as `FIO_POLL_ENGINE_KQUEUE` to use `kqueue` */
#define FIO_POLL_ENGINE_KQUEUE 3
#endif

/* if `FIO_POLL_ENGINE` wasn't define, detect automatically. */
#if !defined(FIO_POLL_ENGINE)
#if defined(HAVE_EPOLL) || __has_include("sys/epoll.h")
#define FIO_POLL_ENGINE FIO_POLL_ENGINE_EPOLL
#elif (defined(HAVE_KQUEUE) || __has_include("sys/event.h"))
#define FIO_POLL_ENGINE FIO_POLL_ENGINE_KQUEUE
#else
#define FIO_POLL_ENGINE FIO_POLL_ENGINE_POLL
#endif
#endif /* FIO_POLL_ENGINE */

#if FIO_POLL_ENGINE == FIO_POLL_ENGINE_POLL
#ifndef FIO_POLL_ENGINE_STR
#define FIO_POLL_ENGINE_STR "poll"
#endif
#elif FIO_POLL_ENGINE == FIO_POLL_ENGINE_EPOLL
#ifndef FIO_POLL_ENGINE_STR
#define FIO_POLL_ENGINE_STR "epoll"
#endif
#elif FIO_POLL_ENGINE == FIO_POLL_ENGINE_KQUEUE
#ifndef FIO_POLL_ENGINE_STR
#define FIO_POLL_ENGINE_STR "kqueue"
#endif
#endif
/* *****************************************************************************
Polling API
***************************************************************************** */

/** the `fio_poll_s` type should be considered opaque. */
typedef struct fio_poll_s fio_poll_s;

typedef struct {
  /** callback for when data is available in the incoming buffer. */
  void (*on_data)(void *udata);
  /** callback for when the outgoing buffer allows a call to `write`. */
  void (*on_ready)(void *udata);
  /** callback for closed connections and / or connections with errors. */
  void (*on_close)(void *udata);
} fio_poll_settings_s;

/** Initializes the polling object, allocating its resources. */
FIO_IFUNC void fio_poll_init(fio_poll_s *p, fio_poll_settings_s);
/** Initializes the polling object, allocating its resources. */
#define fio_poll_init(p, ...)                                                  \
  fio_poll_init((p), (fio_poll_settings_s){__VA_ARGS__})

/** Destroys the polling object, freeing its resources. */
FIO_IFUNC void fio_poll_destroy(fio_poll_s *p);

/** returns the system call used for polling as a constant string. */
FIO_IFUNC const char *fio_poll_engine(void);

/**
 * Adds a file descriptor to be monitored, adds events to be monitored or
 * updates the monitored file's `udata`.
 *
 * Possible flags are: `POLLIN` and `POLLOUT`. Other flags may be set but might
 * be ignored.
 *
 * Monitoring mode is always one-shot. If an event if fired, it is removed from
 * the monitoring state.
 *
 * Returns -1 on error.
 */
SFUNC int fio_poll_monitor(fio_poll_s *p,
                           int fd,
                           void *udata,
                           unsigned short flags);

/**
 * Reviews if any of the monitored file descriptors has any events.
 *
 * `timeout` is in milliseconds.
 *
 * Returns the number of events called.
 *
 * Polling is thread safe, but has different effects on different threads.
 *
 * Adding a new file descriptor from one thread while polling in a different
 * thread will not poll that IO until `fio_poll_review` is called again.
 */
SFUNC int fio_poll_review(fio_poll_s *p, size_t timeout);

/** Stops monitoring the specified file descriptor (if monitoring). */
SFUNC int fio_poll_forget(fio_poll_s *p, int fd);

/* *****************************************************************************
Implementation Helpers
***************************************************************************** */

/** returns the system call used for polling as a constant string. */
FIO_IFUNC const char *fio_poll_engine(void) { return FIO_POLL_ENGINE_STR; }

/* validate settings */
#define FIO_POLL_VALIDATE(settings_dest)                                       \
  if (!(settings_dest).on_data)                                                \
    (settings_dest).on_data = fio___poll_ev_mock;                              \
  if (!(settings_dest).on_ready)                                               \
    (settings_dest).on_ready = fio___poll_ev_mock;                             \
  if (!(settings_dest).on_close)                                               \
    (settings_dest).on_close = fio___poll_ev_mock;

SFUNC void fio___poll_ev_mock(void *udata);

#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)
/* mock event */
SFUNC void fio___poll_ev_mock(void *udata) { (void)udata; }
#endif /* defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN) */
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_POLL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE)                /* Dev test - ignore line */
#define FIO_POLL_ENGINE FIO_POLL_ENGINE_EPOLL /* Dev */
#define FIO___DEV___    /* Development inclusion - ignore line */
#define FIO_POLL        /* Development inclusion - ignore line */
#include "./include.h"  /* Development inclusion - ignore line */
#endif                  /* Development inclusion - ignore line */
/* ************************************************************************* */
#if defined(FIO_POLL) &&                                                       \
    (defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)) &&                  \
    FIO_POLL_ENGINE == FIO_POLL_ENGINE_EPOLL &&                                \
    !defined(H___FIO_POLL_EGN___H) && !defined(H___FIO_POLL___H) &&            \
    !defined(FIO___RECURSIVE_INCLUDE)
#define H___FIO_POLL_EGN___H
/* *****************************************************************************




                        POSIX Portable Polling with `epoll`



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#include <sys/epoll.h>

/* *****************************************************************************
Polling API
***************************************************************************** */

/** the `fio_poll_s` type should be considered opaque. */
struct fio_poll_s {
  fio_poll_settings_s settings;
  struct pollfd fds[2];
  int fd[2];
};

FIO_SFUNC void fio___epoll_after_fork(void *p_) {
  fio_poll_s *p = (fio_poll_s *)p_;
  fio_poll_destroy(p);
  fio_poll_init FIO_NOOP(p, p->settings);
}

/** Initializes the polling object, allocating its resources. */
FIO_IFUNC void fio_poll_init FIO_NOOP(fio_poll_s *p, fio_poll_settings_s args) {
  *p = (fio_poll_s){
      .settings = args,
      .fds =
          {
              {.fd = epoll_create1(0), .events = (POLLIN | POLLOUT)},
              {.fd = epoll_create1(0), .events = (POLLIN | POLLOUT)},
          },
  };
  FIO_POLL_VALIDATE(p->settings);
  fio_state_callback_add(FIO_CALL_IN_CHILD, fio___epoll_after_fork, p);
}

/** Destroys the polling object, freeing its resources. */
FIO_IFUNC void fio_poll_destroy(fio_poll_s *p) {
  for (int i = 0; i < 2; ++i) {
    if (p->fds[i].fd != -1)
      close(p->fds[i].fd);
    p->fds[i].fd = -1;
  }
  fio_state_callback_remove(FIO_CALL_IN_CHILD, fio___epoll_after_fork, p);
}

/* *****************************************************************************
Poll Monitoring Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

FIO_IFUNC int fio___epoll_add2(int fd,
                               void *udata,
                               uint32_t events,
                               int ep_fd) {
  int ret = 0;
  struct epoll_event chevent;
  do {
    errno = 0;
    chevent = (struct epoll_event){
        .events = events,
        .data.ptr = udata,
    };
    ret = epoll_ctl(ep_fd, EPOLL_CTL_MOD, fd, &chevent);
    if (ret == -1 && errno == ENOENT) {
      errno = 0;
      chevent = (struct epoll_event){
          .events = events,
          .data.ptr = udata,
      };
      ret = epoll_ctl(ep_fd, EPOLL_CTL_ADD, fd, &chevent);
    }
  } while (errno == EINTR);

  return ret;
}

/**
 * Adds a file descriptor to be monitored, adds events to be monitored or
 * updates the monitored file's `udata`.
 *
 * Possible flags are: `POLLIN` and `POLLOUT`. Other flags may be set but might
 * be ignored.
 *
 * Monitoring mode is always one-shot. If an event if fired, it is removed from
 * the monitoring state.
 *
 * Returns -1 on error.
 */
SFUNC int fio_poll_monitor(fio_poll_s *p,
                           int fd,
                           void *udata,
                           unsigned short flags) {
  int r = 0;
  if ((flags & POLLOUT))
    r |= fio___epoll_add2(fd,
                          udata,
                          (EPOLLOUT | EPOLLRDHUP | EPOLLHUP | EPOLLONESHOT),
                          p->fds[0].fd);
  if ((flags & POLLIN))
    r |= fio___epoll_add2(fd,
                          udata,
                          (EPOLLIN | EPOLLRDHUP | EPOLLHUP | EPOLLONESHOT),
                          p->fds[1].fd);
  return r;
}

/**
 * Stops monitoring the specified file descriptor, returning its udata (if any).
 */
SFUNC int fio_poll_forget(fio_poll_s *p, int fd) {
  int r = 0;
  struct epoll_event chevent = {.events = (EPOLLOUT | EPOLLIN)};
  r |= epoll_ctl(p->fds[0].fd, EPOLL_CTL_DEL, fd, &chevent);
  r |= epoll_ctl(p->fds[1].fd, EPOLL_CTL_DEL, fd, &chevent);
  return r;
}

/**
 * Reviews if any of the monitored file descriptors has any events.
 *
 * `timeout` is in milliseconds.
 *
 * Returns the number of events called.
 *
 * Polling is thread safe, but has different effects on different threads.
 *
 * Adding a new file descriptor from one thread while polling in a different
 * thread will not poll that IO until `fio_poll_review` is called again.
 */
SFUNC int fio_poll_review(fio_poll_s *p, size_t timeout) {
  int total = 0;
  struct epoll_event events[FIO_POLL_MAX_EVENTS];
  /* wait for events and handle them */
  int internal_count = poll(p->fds, 2, timeout);
  if (internal_count <= 0)
    return total;
  int active_count = epoll_wait(p->fds[0].fd, events, FIO_POLL_MAX_EVENTS, 0);
  if (active_count > 0) {
    for (int i = 0; i < active_count; i++) {
      // errors are handled as disconnections (on_close) in the EPOLLIN queue
      // if no error, try an active event(s)
      if (events[i].events & EPOLLOUT)
        p->settings.on_ready(events[i].data.ptr);
    } // end for loop
    total += active_count;
  }
  active_count = epoll_wait(p->fds[1].fd, events, FIO_POLL_MAX_EVENTS, 0);
  if (active_count > 0) {
    for (int i = 0; i < active_count; i++) {
      // errors are handled as disconnections (on_close), but only once...
      if (events[i].events & (~(EPOLLIN | EPOLLOUT)))
        p->settings.on_close(events[i].data.ptr);
      // no error, then it's an active event(s)
      else if (events[i].events & EPOLLIN)
        p->settings.on_data(events[i].data.ptr);
    } // end for loop
    total += active_count;
  }
  return total;
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */
#endif /* FIO_POLL_ENGINE == FIO_POLL_ENGINE_EPOLL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE)                 /* Dev test - ignore line */
#define FIO_POLL_ENGINE FIO_POLL_ENGINE_KQUEUE /* Dev */
#define FIO___DEV___    /* Development inclusion - ignore line */
#define FIO_POLL        /* Development inclusion - ignore line */
#include "./include.h"  /* Development inclusion - ignore line */
#endif                  /* Development inclusion - ignore line */
/* ************************************************************************* */
#if defined(FIO_POLL) &&                                                       \
    (defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)) &&                  \
    FIO_POLL_ENGINE == FIO_POLL_ENGINE_KQUEUE &&                               \
    !defined(H___FIO_POLL_EGN___H) && !defined(H___FIO_POLL___H) &&            \
    !defined(FIO___RECURSIVE_INCLUDE)
#define H___FIO_POLL_EGN___H
/* *****************************************************************************




                        POSIX Portable Polling with `kqueue`



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#include <sys/event.h>
/* *****************************************************************************
Polling API
***************************************************************************** */

/** the `fio_poll_s` type should be considered opaque. */
struct fio_poll_s {
  fio_poll_settings_s settings;
  int fd;
};

FIO_SFUNC void fio___kqueue_after_fork(void *p_) {
  fio_poll_s *p = (fio_poll_s *)p_;
  fio_poll_destroy(p);
  fio_poll_init FIO_NOOP(p, p->settings);
}

/** Initializes the polling object, allocating its resources. */
FIO_IFUNC void fio_poll_init FIO_NOOP(fio_poll_s *p, fio_poll_settings_s args) {
  *p = (fio_poll_s){
      .settings = args,
      .fd = kqueue(),
  };
  if (p->fd == -1) {
    FIO_LOG_FATAL("couldn't open kqueue.\n");
    exit(errno);
  }
  FIO_POLL_VALIDATE(p->settings);
  fio_state_callback_add(FIO_CALL_IN_CHILD, fio___kqueue_after_fork, p);
}

/** Destroys the polling object, freeing its resources. */
FIO_IFUNC void fio_poll_destroy(fio_poll_s *p) {
  if (p->fd != -1)
    close(p->fd);
  p->fd = -1;
  fio_state_callback_remove(FIO_CALL_IN_CHILD, fio___kqueue_after_fork, p);
}

/* *****************************************************************************
Poll Monitoring Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/**
 * Adds a file descriptor to be monitored, adds events to be monitored or
 * updates the monitored file's `udata`.
 *
 * Possible flags are: `POLLIN` and `POLLOUT`. Other flags may be set but might
 * be ignored.
 *
 * Monitoring mode is always one-shot. If an event if fired, it is removed from
 * the monitoring state.
 *
 * Returns -1 on error.
 */
SFUNC int fio_poll_monitor(fio_poll_s *p,
                           int fd,
                           void *udata,
                           unsigned short flags) {
  int r = -1;
  struct kevent chevent[2];
  int i = 0;
  if ((flags & POLLIN)) {
    EV_SET(chevent,
           fd,
           EVFILT_READ,
           EV_ADD | EV_ENABLE | EV_CLEAR | EV_ONESHOT,
           0,
           0,
           udata);
    ++i;
  }
  if ((flags & POLLOUT)) {
    EV_SET(chevent + i,
           fd,
           EVFILT_WRITE,
           EV_ADD | EV_ENABLE | EV_CLEAR | EV_ONESHOT,
           0,
           0,
           udata);
    ++i;
  }
  do {
    errno = 0;
  } while ((r = kevent(p->fd, chevent, i, NULL, 0, NULL)) == -1 &&
           errno == EINTR);
  return r;
}

/**
 * Reviews if any of the monitored file descriptors has any events.
 *
 * `timeout` is in milliseconds.
 *
 * Returns the number of events called.
 *
 * Polling is thread safe, but has different effects on different threads.
 *
 * Adding a new file descriptor from one thread while polling in a different
 * thread will not poll that IO until `fio_poll_review` is called again.
 */
SFUNC int fio_poll_review(fio_poll_s *p, size_t timeout_) {
  if (p->fd < 0)
    return -1;
  struct kevent events[FIO_POLL_MAX_EVENTS] = {{0}};

  const struct timespec timeout = {
      .tv_sec = (time_t)(timeout_ / 1000),
      .tv_nsec = (suseconds_t)((timeout_ % 1000) * 1000000)};
  /* wait for events and handle them */
  int active_count =
      kevent(p->fd, NULL, 0, events, FIO_POLL_MAX_EVENTS, &timeout);

  if (active_count > 0) {
    for (int i = 0; i < active_count; i++) {
      // test for event(s) type
      if (events[i].filter == EVFILT_WRITE) {
        p->settings.on_ready(events[i].udata);
      } else if (events[i].filter == EVFILT_READ) {
        p->settings.on_data(events[i].udata);
      }
      if (events[i].flags & (EV_EOF | EV_ERROR)) {
        p->settings.on_close(events[i].udata);
      }
    }
  } else if (active_count < 0) {
    if (errno == EINTR)
      return 0;
    return -1;
  }
  return active_count;
}

/** Stops monitoring the specified file descriptor (if monitoring). */
SFUNC int fio_poll_forget(fio_poll_s *p, int fd) {
  int r = 0;
  if (p->fd == -1)
    return (r = -1);
  struct kevent chevent[2];
  EV_SET(chevent, fd, EVFILT_READ, EV_DELETE, 0, 0, NULL);
  EV_SET(chevent + 1, fd, EVFILT_WRITE, EV_DELETE, 0, 0, NULL);
  do {
    errno = 0;
    r = kevent(p->fd, chevent, 2, NULL, 0, NULL);
  } while (errno == EINTR);
  return r;
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */
#endif /* FIO_POLL_ENGINE == FIO_POLL_ENGINE_KQUEUE */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE)               /* Dev test - ignore line */
#define FIO_POLL_ENGINE FIO_POLL_ENGINE_POLL /* Dev */
#define FIO___DEV___    /* Development inclusion - ignore line */
#define FIO_POLL        /* Development inclusion - ignore line */
#include "./include.h"  /* Development inclusion - ignore line */
#endif                  /* Development inclusion - ignore line */
/* ************************************************************************* */
#if defined(FIO_POLL) &&                                                       \
    (defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)) &&                  \
    FIO_POLL_ENGINE == FIO_POLL_ENGINE_POLL &&                                 \
    !defined(H___FIO_POLL_EGN___H) && !defined(H___FIO_POLL___H) &&            \
    !defined(FIO___RECURSIVE_INCLUDE)
#define H___FIO_POLL_EGN___H
/* *****************************************************************************



                        POSIX Portable Polling with `poll`


Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#ifdef POLLRDHUP
#define FIO_POLL_EX_FLAGS POLLRDHUP
#else
#define FIO_POLL_EX_FLAGS 0
#endif

typedef struct {
  void *udata;
  int fd;
  unsigned short flags;
} fio___poll_i_s;

#define FIO___POLL_IMAP_CMP(a, b) ((a)->fd == (b)->fd)
#define FIO___POLL_IMAP_HASH(o)   (fio_risky_ptr((void *)((uintptr_t)((o)->fd))))
FIO_TYPEDEF_IMAP_ARRAY(fio___poll_map,
                       fio___poll_i_s,
                       uint32_t,
                       FIO___POLL_IMAP_HASH,
                       FIO___POLL_IMAP_CMP,
                       FIO_IMAP_ALWAYS_VALID)
#undef FIO___POLL_IMAP_CMP
#undef FIO___POLL_IMAP_VALID
#undef FIO___POLL_IMAP_HASH

struct fio_poll_s {
  fio_poll_settings_s settings;
  fio___poll_map_s map;
  FIO___LOCK_TYPE lock;
};

/* *****************************************************************************
Poll Monitoring Implementation - inline static functions
***************************************************************************** */

/** Initializes the polling object, allocating its resources. */
FIO_IFUNC void fio_poll_init FIO_NOOP(fio_poll_s *p, fio_poll_settings_s args) {
  if (p) {
    *p = (fio_poll_s){
        .settings = args,
        .map = {0},
        .lock = FIO___LOCK_INIT,
    };
    FIO_POLL_VALIDATE(p->settings);
  }
}

/** Destroys the polling object, freeing its resources. */
FIO_IFUNC void fio_poll_destroy(fio_poll_s *p) {
  if (!p)
    return;
  fio___poll_map_destroy(&p->map);
  FIO___LOCK_DESTROY(p->lock);
}

/* *****************************************************************************
Poll Monitoring Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* handle events, return a mask for possible remaining flags. */
FIO_IFUNC unsigned short fio___poll_handle_events(fio_poll_s *p,
                                                  void *udata,
                                                  unsigned short flags) {
  if ((flags & POLLOUT))
    p->settings.on_ready(udata);
  if ((flags & (POLLIN | POLLPRI)))
    p->settings.on_data(udata);
  if ((flags & (POLLHUP | POLLERR | POLLNVAL | FIO_POLL_EX_FLAGS))) {
    p->settings.on_close(udata);
    return 0;
  }
  return ~flags;
}

/**
 * Adds a file descriptor to be monitored, adds events to be monitored or
 * updates the monitored file's `udata`.
 *
 * Possible flags are: `POLLIN` and `POLLOUT`. Other flags may be set but might
 * be ignored.
 *
 * Monitoring mode is always one-shot. If an event if fired, it is removed from
 * the monitoring state.
 *
 * Returns -1 on error.
 */
SFUNC int fio_poll_monitor(fio_poll_s *p,
                           int fd,
                           void *udata,
                           unsigned short flags) {
  int r = -1;
  if (!p || fd == -1)
    return r;
  r = 0;
  flags &= FIO_POLL_POSSIBLE_FLAGS;
  flags |= FIO_POLL_EX_FLAGS;
  fio___poll_i_s i = {.udata = udata, .fd = fd, .flags = flags};
  FIO___LOCK_LOCK(p->lock);
  fio___poll_i_s *ptr = fio___poll_map_set(&p->map, i, 0);
  ptr->flags |= flags;
  FIO___LOCK_UNLOCK(p->lock);
  return r;
}

/**
 * Reviews if any of the monitored file descriptors has any events.
 *
 * `timeout` is in milliseconds.
 *
 * Returns the number of events called.
 *
 * Polling is thread safe, but has different effects on different threads.
 *
 * Adding a new file descriptor from one thread while polling in a different
 * thread will not poll that IO until `fio_poll_review` is called again.
 */
SFUNC int fio_poll_review(fio_poll_s *p, size_t timeout) {
  int events = -1;
  int handled = -1;
  if (!p || !(p->map.count)) {
    if (timeout) {
      FIO_THREAD_WAIT((timeout * 1000000));
    }
    return 0;
  }
  /* handle events in a copy, allowing events / threads to mutate it */
  FIO___LOCK_LOCK(p->lock);
  fio_poll_s cpy = *p;
  p->map = (fio___poll_map_s){0};
  FIO___LOCK_UNLOCK(p->lock);

  const size_t max = cpy.map.count;
  const unsigned short flag_mask = FIO_POLL_POSSIBLE_FLAGS | FIO_POLL_EX_FLAGS;

  int w = 0, r = 0, i = 0;
  struct pollfd *pfd = (struct pollfd *)FIO_MEM_REALLOC_(
      NULL,
      0,
      ((max * sizeof(void *)) + (max * sizeof(struct pollfd))),
      0);
  void **uary = (void **)(pfd + max);

  FIO_IMAP_EACH(fio___poll_map, (&cpy.map), pos) {
    if (!(cpy.map.ary[pos].flags & flag_mask))
      continue;
    pfd[r] = (struct pollfd){.fd = cpy.map.ary[pos].fd,
                             .events = (short)cpy.map.ary[pos].flags};
    uary[r] = cpy.map.ary[pos].udata;
    ++r;
  }

#if FIO_OS_WIN
  events = WSAPoll(pfd, r, (int)timeout);
#else
  events = poll(pfd, r, (int)timeout);
#endif

  if (events > 0) {
    /* handle events and remove consumed entries */
    for (i = 0; i < r && handled < events; ++i) {
      if (pfd[i].revents) {
        ++handled;
        pfd[i].events &=
            fio___poll_handle_events(&cpy, uary[i], pfd[i].revents);
      }
      if ((pfd[i].events & (~(FIO_POLL_EX_FLAGS)))) {
        if (i != w) {
          pfd[w] = pfd[i];
          uary[w] = uary[i];
        }
        ++w;
      }
    }
    if (i < r && i != w) {
      FIO_MEMMOVE(pfd + w, pfd + i, ((r - i) * sizeof(*pfd)));
      FIO_MEMMOVE(uary + w, uary + i, ((r - i) * sizeof(*uary)));
    }
  }
  w += r - i;
  i = 0;

  FIO___LOCK_LOCK(p->lock);
  if (!p->map.count && events <= 0) {
    p->map = cpy.map;
    i = 1;
    goto finish;
  }
  if (w) {
    fio___poll_map_reserve(&p->map, w + p->map.count);
    for (i = 0; i < w; ++i) {
      fio___poll_i_s *existing =
          fio___poll_map_get(&p->map, (fio___poll_i_s){.fd = pfd[i].fd});
      if (existing) {
        existing->flags |= existing->flags ? pfd[i].events : 0;
        continue;
      }
      fio___poll_map_set(&p->map,
                         (fio___poll_i_s){
                             .fd = pfd[i].fd,
                             .flags = (unsigned short)pfd[i].events,
                             .udata = uary[i],
                         },
                         1);
    }
  }
  i = 0;

finish:
  FIO___LOCK_UNLOCK(p->lock);
  FIO_MEM_FREE(pfd, ((max * sizeof(void *)) + (max * sizeof(struct pollfd))));
  if (!i)
    fio___poll_map_destroy(&cpy.map);
  return events;
}

/** Stops monitoring the specified file descriptor, returning -1 on error. */
SFUNC int fio_poll_forget(fio_poll_s *p, int fd) {
  int r = 0;
  fio___poll_i_s i = {.fd = fd};
  FIO___LOCK_LOCK(p->lock);
  fio___poll_i_s *ptr = fio___poll_map_set(&p->map, i, 0);
  if (!ptr->flags)
    r = -1;
  ptr->flags = 0;
  FIO___LOCK_UNLOCK(p->lock);
  return r;
}

/** Closes all sockets, calling the `on_close`. */
SFUNC void fio_poll_close_all(fio_poll_s *p) {
  FIO___LOCK_LOCK(p->lock);
  fio_poll_s cpy = *p;
  p->map = (fio___poll_map_s){0};
  FIO___LOCK_UNLOCK(p->lock);
  const unsigned short flag_mask = FIO_POLL_POSSIBLE_FLAGS | FIO_POLL_EX_FLAGS;
  FIO_IMAP_EACH(fio___poll_map, (&cpy.map), pos) {
    if ((cpy.map.ary[pos].flags & flag_mask)) {
      cpy.settings.on_close(cpy.map.ary[pos].udata);
      fio_sock_close(cpy.map.ary[pos].fd);
    }
  }
  fio___poll_map_destroy(&cpy.map);
}
/* *****************************************************************************
Cleanup
***************************************************************************** */
#undef FIO_POLL_EX_FLAGS
#endif /* FIO_EXTERN_COMPLETE */
#endif /* FIO_POLL_ENGINE == FIO_POLL_ENGINE_POLL */

#if defined(FIO_POLL) && !defined(H___FIO_POLL___H) &&                         \
    !defined(FIO___RECURSIVE_INCLUDE)
#define H___FIO_POLL___H
#undef FIO_POLL
#endif /* FIO_POLL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_QUEUE              /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                                Task / Timer Queues
                                (Event Loop Engine)



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_QUEUE) && !defined(H___FIO_QUEUE___H)
#define H___FIO_QUEUE___H

/* *****************************************************************************
Queue Type(s)
***************************************************************************** */

/* Note: FIO_QUEUE_TASKS_PER_ALLOC can't be more than 65535 */
#ifndef FIO_QUEUE_TASKS_PER_ALLOC
#if UINTPTR_MAX <= 0xFFFFFFFF
/* fits fio_queue_s in one page on most 32 bit machines */
#define FIO_QUEUE_TASKS_PER_ALLOC 338
#else
/* fits fio_queue_s in one page on most 64 bit machines */
#define FIO_QUEUE_TASKS_PER_ALLOC 168
#endif
#endif

/** Task information */
typedef struct {
  /** The function to call */
  void (*fn)(void *, void *);
  /** User opaque data */
  void *udata1;
  /** User opaque data */
  void *udata2;
} fio_queue_task_s;

/* internal use */
typedef struct fio___task_ring_s {
  uint16_t r;   /* reader position */
  uint16_t w;   /* writer position */
  uint16_t dir; /* direction */
  struct fio___task_ring_s *next;
  fio_queue_task_s buf[FIO_QUEUE_TASKS_PER_ALLOC];
} fio___task_ring_s;

/** The queue object - should be considered opaque (or, at least, read only). */
typedef struct {
  /** task read pointer. */
  fio___task_ring_s *r;
  /** task write pointer. */
  fio___task_ring_s *w;
  /** the number of tasks waiting to be performed. */
  uint32_t count;
  /** global queue lock. */
  FIO___LOCK_TYPE lock;
  /** linked lists of consumer threads. */
  FIO_LIST_NODE consumers;
  /** main ring buffer associated with the queue. */
  fio___task_ring_s mem;
} fio_queue_s;

typedef struct {
  FIO_LIST_NODE node;
  fio_queue_s *queue;
  fio_thread_t thread;
  fio_thread_mutex_t mutex;
  fio_thread_cond_t cond;
  size_t workers;
  volatile int stop;
} fio___thread_group_s;

/* *****************************************************************************
Queue API
***************************************************************************** */

#if FIO_USE_THREAD_MUTEX_TMP
/** May be used to initialize global, static memory, queues. */
#define FIO_QUEUE_STATIC_INIT(queue)                                           \
  {                                                                            \
    .r = &(queue).mem, .w = &(queue).mem,                                      \
    .lock = (fio_thread_mutex_t)FIO_THREAD_MUTEX_INIT,                         \
    .consumers = FIO_LIST_INIT((queue).consumers),                             \
  }
#else
/** May be used to initialize global, static memory, queues. */
#define FIO_QUEUE_STATIC_INIT(queue)                                           \
  {                                                                            \
    .r = &(queue).mem, .w = &(queue).mem, .lock = FIO_LOCK_INIT,               \
    .consumers = FIO_LIST_INIT((queue).consumers),                             \
  }
#endif

/** Initializes a fio_queue_s object. */
FIO_IFUNC void fio_queue_init(fio_queue_s *q);

/** Destroys a queue and re-initializes it, after freeing any used resources. */
SFUNC void fio_queue_destroy(fio_queue_s *q);

/** Creates a new queue object (allocated on the heap). */
SFUNC fio_queue_s *fio_queue_new(void);

/** Frees a queue object after calling fio_queue_destroy. */
SFUNC void fio_queue_free(fio_queue_s *q);

/** Pushes a task to the queue. Returns -1 on error. */
SFUNC int fio_queue_push(fio_queue_s *q, fio_queue_task_s task);

/**
 * Pushes a task to the queue, offering named arguments for the task.
 * Returns -1 on error.
 */
#define fio_queue_push(q, ...)                                                 \
  fio_queue_push((q), (fio_queue_task_s){__VA_ARGS__})

/** Pushes a task to the head of the queue. Returns -1 on error (no memory). */
SFUNC int fio_queue_push_urgent(fio_queue_s *q, fio_queue_task_s task);

/**
 * Pushes a task to the queue, offering named arguments for the task.
 * Returns -1 on error.
 */
#define fio_queue_push_urgent(q, ...)                                          \
  fio_queue_push_urgent((q), (fio_queue_task_s){__VA_ARGS__})

/** Pops a task from the queue (FIFO). Returns a NULL task on error. */
SFUNC fio_queue_task_s fio_queue_pop(fio_queue_s *q);

/** Performs a task from the queue. Returns -1 on error (queue empty). */
SFUNC int fio_queue_perform(fio_queue_s *q);

/** Performs all tasks in the queue. */
SFUNC void fio_queue_perform_all(fio_queue_s *q);

/** returns the number of tasks in the queue. */
FIO_IFUNC uint32_t fio_queue_count(fio_queue_s *q);

/** Adds worker / consumer threads to perform the jobs in the queue. */
SFUNC int fio_queue_workers_add(fio_queue_s *q, size_t count);

/** Signals all worker threads to stop performing tasks and terminate. */
SFUNC void fio_queue_workers_stop(fio_queue_s *q);

/** Signals all worker threads to stop, waiting for them to complete. */
SFUNC void fio_queue_workers_join(fio_queue_s *q);

/** Signals all worker threads to go back to work (new tasks added). */
SFUNC void fio_queue_workers_wake(fio_queue_s *q);

/* *****************************************************************************
Timer Queue Types and API
***************************************************************************** */

typedef struct fio___timer_event_s fio___timer_event_s;

typedef struct {
  fio___timer_event_s *next;
  FIO___LOCK_TYPE lock;
} fio_timer_queue_s;

#if FIO_USE_THREAD_MUTEX_TMP
#define FIO_TIMER_QUEUE_INIT                                                   \
  { .lock = ((fio_thread_mutex_t)FIO_THREAD_MUTEX_INIT) }
#else
#define FIO_TIMER_QUEUE_INIT                                                   \
  { .lock = FIO_LOCK_INIT }
#endif

typedef struct {
  /** The timer function. If it returns a non-zero value, the timer stops. */
  int (*fn)(void *, void *);
  /** Opaque user data. */
  void *udata1;
  /** Opaque user data. */
  void *udata2;
  /** Called when the timer is done (finished). */
  void (*on_finish)(void *, void *);
  /** Timer interval, in milliseconds. */
  uint32_t every;
  /** The number of times the timer should be performed. -1 == infinity. */
  int32_t repetitions;
  /** Millisecond at which to start. If missing, filled automatically. */
  int64_t start_at;
} fio_timer_schedule_args_s;

/** Adds a time-bound event to the timer queue. */
SFUNC void fio_timer_schedule(fio_timer_queue_s *timer_queue,
                              fio_timer_schedule_args_s args);

/** A MACRO allowing named arguments to be used. See fio_timer_schedule_args_s.
 */
#define fio_timer_schedule(timer_queue, ...)                                   \
  fio_timer_schedule((timer_queue), (fio_timer_schedule_args_s){__VA_ARGS__})

/** Pushes due events from the timer queue to an event queue. */
SFUNC size_t fio_timer_push2queue(fio_queue_s *queue,
                                  fio_timer_queue_s *timer_queue,
                                  int64_t now_in_milliseconds);

/*
 * Returns the millisecond at which the next event should occur.
 *
 * If no timer is due (list is empty), returns `(uint64_t)-1`.
 *
 * NOTE: unless manually specified, millisecond timers are relative to
 * `fio_time_milli()`.
 */
FIO_IFUNC int64_t fio_timer_next_at(fio_timer_queue_s *timer_queue);

/**
 * Clears any waiting timer bound tasks.
 *
 * NOTE:
 *
 * The timer queue must NEVER be freed when there's a chance that timer tasks
 * are waiting to be performed in a `fio_queue_s`.
 *
 * This is due to the fact that the tasks may try to reschedule themselves (if
 * they repeat).
 */
SFUNC void fio_timer_destroy(fio_timer_queue_s *timer_queue);

/* *****************************************************************************
Queue Inline Helpers
***************************************************************************** */

/** returns the number of tasks in the queue. */
FIO_IFUNC uint32_t fio_queue_count(fio_queue_s *q) { return q->count; }

/** Initializes a fio_queue_s object. */
FIO_IFUNC void fio_queue_init(fio_queue_s *q) {
  /* do this manually, we don't want to reset a whole page */
  q->r = &q->mem;
  q->w = &q->mem;
  q->count = 0;
  q->consumers = FIO_LIST_INIT(q->consumers);
  q->lock = FIO___LOCK_INIT;
  q->mem.next = NULL;
  q->mem.r = q->mem.w = q->mem.dir = 0;
}

/* *****************************************************************************
Timer Queue Inline Helpers
***************************************************************************** */

struct fio___timer_event_s {
  int (*fn)(void *, void *);
  void *udata1;
  void *udata2;
  void (*on_finish)(void *udata1, void *udata2);
  int64_t due;
  uint32_t every;
  int32_t repetitions;
  struct fio___timer_event_s *next;
};

/*
 * Returns the millisecond at which the next event should occur.
 *
 * If no timer is due (list is empty), returns `-1`.
 *
 * NOTE: unless manually specified, millisecond timers are relative to
 * `fio_time_milli()`.
 */
FIO_IFUNC int64_t fio_timer_next_at(fio_timer_queue_s *tq) {
  int64_t v = -1;
  if (!tq)
    goto missing_tq;
  if (!tq || !tq->next)
    return v;
  FIO___LOCK_LOCK(tq->lock);
  if (tq->next)
    v = tq->next->due;
  FIO___LOCK_UNLOCK(tq->lock);
  return v;

missing_tq:
  FIO_LOG_ERROR("`fio_timer_next_at` called with a NULL timer queue!");
  return v;
}

/* *****************************************************************************
Queue Implementation
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* task queue leak detection */
FIO_LEAK_COUNTER_DEF(fio_queue)
FIO_LEAK_COUNTER_DEF(fio_queue_task_rings)
/** Destroys a queue and re-initializes it, after freeing any used resources. */
SFUNC void fio_queue_destroy(fio_queue_s *q) {
  for (;;) {
    FIO___LOCK_LOCK(q->lock);
    while (q->r) {
      fio___task_ring_s *tmp = q->r;
      q->r = q->r->next;
      if (tmp != &q->mem)
        FIO_MEM_FREE_(tmp, sizeof(*tmp));
    }
    if (FIO_LIST_IS_EMPTY(&q->consumers)) {
      FIO___LOCK_UNLOCK(q->lock);
      break;
    }
    FIO_LIST_EACH(fio___thread_group_s, node, &q->consumers, pos) {
      fio_atomic_or(&pos->stop, 1);
      for (size_t i = 0; i < pos->workers; ++i)
        fio_thread_cond_signal(&pos->cond);
    }
    FIO_LIST_EACH(fio___thread_group_s, node, &q->consumers, pos) {
      FIO___LOCK_UNLOCK(q->lock);
      fio_thread_join(&pos->thread);
      FIO___LOCK_LOCK(q->lock);
    }
    FIO___LOCK_UNLOCK(q->lock);
    if (FIO_LIST_IS_EMPTY(&q->consumers))
      break;
    FIO_THREAD_RESCHEDULE();
  }
  FIO___LOCK_DESTROY(q->lock);
  fio_queue_init(q);
}

/** Creates a new queue object (allocated on the heap). */
SFUNC fio_queue_s *fio_queue_new(void) {
  fio_queue_s *q = (fio_queue_s *)FIO_MEM_REALLOC_(NULL, 0, sizeof(*q), 0);
  if (!q)
    return NULL;
  fio_queue_init(q);
  FIO_LEAK_COUNTER_ON_ALLOC(fio_queue);
  return q;
}

/** Frees a queue object after calling fio_queue_destroy. */
SFUNC void fio_queue_free(fio_queue_s *q) {
  fio_queue_destroy(q);
  if (q) {
    FIO_LEAK_COUNTER_ON_FREE(fio_queue);
    FIO_MEM_FREE_(q, sizeof(*q));
  }
}

FIO_IFUNC int fio___task_ring_push(fio___task_ring_s *r,
                                   fio_queue_task_s task) {
  if (r->dir && r->r == r->w)
    return -1;
  r->buf[r->w] = task;
  ++(r->w);
  if (r->w == FIO_QUEUE_TASKS_PER_ALLOC) {
    r->w = 0;
    r->dir = ~r->dir;
  }
  return 0;
}

FIO_IFUNC int fio___task_ring_unpop(fio___task_ring_s *r,
                                    fio_queue_task_s task) {
  if (r->dir && r->r == r->w)
    return -1;
  if (!r->r) {
    r->r = FIO_QUEUE_TASKS_PER_ALLOC;
    r->dir = ~r->dir;
  }
  --r->r;
  r->buf[r->r] = task;
  return 0;
}

FIO_IFUNC fio_queue_task_s fio___task_ring_pop(fio___task_ring_s *r) {
  fio_queue_task_s t = {.fn = NULL};
  if (!r->dir && r->r == r->w) {
    return t;
  }
  t = r->buf[r->r];
  r->buf[r->r] = (fio_queue_task_s){.fn = NULL};
  ++r->r;
  if (r->r == FIO_QUEUE_TASKS_PER_ALLOC) {
    r->r = 0;
    r->dir = ~r->dir;
  }
  return t;
}

int fio_queue_push___(void); /* sublime text marker */
/** Pushes a task to the queue. Returns -1 on error. */
SFUNC int fio_queue_push FIO_NOOP(fio_queue_s *q, fio_queue_task_s task) {
  if (!task.fn)
    return 0;
  FIO___LOCK_LOCK(q->lock);
  if (fio___task_ring_push(q->w, task)) {
    if (q->w != &q->mem && q->mem.next == NULL) {
      q->w->next = &q->mem;
      q->mem.w = q->mem.r = q->mem.dir = 0;
    } else {
      void *tmp = (fio___task_ring_s *)
          FIO_MEM_REALLOC_(NULL, 0, sizeof(*q->w->next), 0);
      if (!tmp)
        goto no_mem;
      FIO_LEAK_COUNTER_ON_ALLOC(fio_queue_task_rings);
      q->w->next = (fio___task_ring_s *)tmp;
      if (!FIO_MEM_REALLOC_IS_SAFE_) {
        q->w->next->r = q->w->next->w = q->w->next->dir = 0;

        q->w->next->next = NULL;
      }
    }
    q->w = q->w->next;
    fio___task_ring_push(q->w, task);
  }
  ++q->count;
  if (!FIO_LIST_IS_EMPTY(&q->consumers)) {
    FIO_LIST_EACH(fio___thread_group_s, node, &q->consumers, pos) {
      fio_thread_cond_signal(&pos->cond);
    }
  }
  FIO___LOCK_UNLOCK(q->lock);
  return 0;
no_mem:
  FIO___LOCK_UNLOCK(q->lock);
  FIO_LOG_ERROR("No memory for Queue %p to increase task ring buffer.",
                (void *)q);
  return -1;
}

int fio_queue_push_urgent___(void); /* IDE marker */
/** Pushes a task to the head of the queue. Returns -1 on error (no memory). */
SFUNC int fio_queue_push_urgent FIO_NOOP(fio_queue_s *q,
                                         fio_queue_task_s task) {
  if (!task.fn)
    return 0;
  FIO___LOCK_LOCK(q->lock);
  if (fio___task_ring_unpop(q->r, task)) {
    /* such a shame... but we must allocate a while task block for one task */
    fio___task_ring_s *tmp =
        (fio___task_ring_s *)FIO_MEM_REALLOC_(NULL, 0, sizeof(*q->w->next), 0);
    if (!tmp)
      goto no_mem;
    FIO_LEAK_COUNTER_ON_ALLOC(fio_queue_task_rings);
    tmp->next = q->r;
    q->r = tmp;
    tmp->w = 1;
    tmp->dir = tmp->r = 0;
    tmp->buf[0] = task;
  }
  ++q->count;
  if (!FIO_LIST_IS_EMPTY(&q->consumers)) {
    FIO_LIST_EACH(fio___thread_group_s, node, &q->consumers, pos) {
      fio_thread_cond_signal(&pos->cond);
    }
  }
  FIO___LOCK_UNLOCK(q->lock);
  return 0;
no_mem:
  FIO___LOCK_UNLOCK(q->lock);
  FIO_LOG_ERROR("No memory for Queue %p to increase task ring buffer.",
                (void *)q);
  return -1;
}

/** Pops a task from the queue (FIFO). Returns a NULL task on error. */
SFUNC fio_queue_task_s fio_queue_pop(fio_queue_s *q) {
  fio_queue_task_s t = {.fn = NULL};
  fio___task_ring_s *to_free = NULL;
  fio___task_ring_s *to_free_tst = NULL;
  if (!q->count)
    return t;
  FIO___LOCK_LOCK(q->lock);
  if (!q->count)
    goto finish;
  if (!(t = fio___task_ring_pop(q->r)).fn) {
    to_free = q->r;
    q->r = to_free->next;
    to_free->next = NULL;
    t = fio___task_ring_pop(q->r);
  }
  if (t.fn && !(--q->count) && q->r != &q->mem) {
    if (to_free && to_free != &q->mem) { // edge case
      FIO_LEAK_COUNTER_ON_FREE(fio_queue_task_rings);
      FIO_MEM_FREE_(to_free, sizeof(*to_free));
    }
    to_free = q->r;
    q->r = q->w = &q->mem;
    q->mem.w = q->mem.r = q->mem.dir = 0;
  }
  to_free_tst = &q->mem;
finish:
  FIO___LOCK_UNLOCK(q->lock);
  if (to_free && to_free != to_free_tst) {
    FIO_LEAK_COUNTER_ON_FREE(fio_queue_task_rings);
    FIO_MEM_FREE_(to_free, sizeof(*to_free));
  }
  return t;
}

/** Performs a task from the queue. Returns -1 on error (queue empty). */
SFUNC int fio_queue_perform(fio_queue_s *q) {
  fio_queue_task_s t = fio_queue_pop(q);
  if (!t.fn)
    return -1;
  t.fn(t.udata1, t.udata2);
  return 0;
}

/** Performs all tasks in the queue. */
SFUNC void fio_queue_perform_all(fio_queue_s *q) {
  fio_queue_task_s t;
  while ((t = fio_queue_pop(q)).fn)
    t.fn(t.udata1, t.udata2);
}

/* *****************************************************************************
Queue Consumer Threads
***************************************************************************** */

FIO_SFUNC void *fio___queue_worker_task(void *g_) {
  fio___thread_group_s *grp = (fio___thread_group_s *)g_;
  fio_state_callback_force(FIO_CALL_ON_WORKER_THREAD_START);
  while (!grp->stop) {
    fio_queue_perform_all(grp->queue);
    fio_thread_mutex_lock(&grp->mutex);
    if (!grp->stop)
      fio_thread_cond_wait(&grp->cond, &grp->mutex);
    fio_thread_mutex_unlock(&grp->mutex);
    fio_queue_perform_all(grp->queue);
  }
  fio_state_callback_force(FIO_CALL_ON_WORKER_THREAD_END);
  return NULL;
}
FIO_SFUNC void *fio___queue_worker_manager(void *g_) {
  fio_thread_t threads_buf[256];
  fio___thread_group_s grp = *(fio___thread_group_s *)g_;
  FIO_LIST_PUSH(&grp.queue->consumers, &grp.node);
  grp.stop = 0;
  fio_thread_t *threads =
      grp.workers > 256
          ? ((fio_thread_t *)
                 FIO_MEM_REALLOC_(NULL, 0, sizeof(*threads) * grp.workers, 0))
          : threads_buf;
  fio_thread_mutex_init(&grp.mutex);
  fio_thread_cond_init(&grp.cond);
  for (size_t i = 0; i < grp.workers; ++i) {
    fio_thread_create(threads + i, fio___queue_worker_task, (void *)&grp);
  }
  fio_atomic_and(&((fio___thread_group_s *)g_)->stop, 0);
  /* from this point on, g_ is invalid! */
  for (size_t i = 0; i < grp.workers; ++i) {
    fio_thread_join(threads + i);
  }
  if (threads != threads_buf)
    FIO_MEM_FREE_(threads, sizeof(*threads) * grp.workers);
  FIO___LOCK_LOCK(grp.queue->lock);
  FIO_LIST_REMOVE(&grp.node);
  FIO___LOCK_UNLOCK(grp.queue->lock);
  fio_queue_perform_all(grp.queue);
  return NULL;
}

SFUNC int fio_queue_workers_add(fio_queue_s *q, size_t workers) {
  FIO___LOCK_LOCK(q->lock);
  if (!q->consumers.next || !q->consumers.prev) {
    q->consumers = FIO_LIST_INIT(q->consumers);
  }
  fio___thread_group_s grp = {.queue = q, .workers = workers, .stop = 1};
  if (fio_thread_create(&grp.thread, fio___queue_worker_manager, &grp)) {
    FIO___LOCK_UNLOCK(q->lock);
    return -1;
  }
  while (grp.stop)
    FIO_THREAD_RESCHEDULE();
  FIO___LOCK_UNLOCK(q->lock);
  return 0;
}

SFUNC void fio_queue_workers_stop(fio_queue_s *q) {
  if (FIO_LIST_IS_EMPTY(&q->consumers))
    return;
  FIO___LOCK_LOCK(q->lock);
  FIO_LIST_EACH(fio___thread_group_s, node, &q->consumers, pos) {
    fio_atomic_or(&pos->stop, 1);
    for (size_t i = 0; i < pos->workers * 2; ++i)
      fio_thread_cond_signal(&pos->cond);
  }
  FIO___LOCK_UNLOCK(q->lock);
}

/** Signals all worker threads to go back to work (new tasks were). */
SFUNC void fio_queue_workers_wake(fio_queue_s *q) {
  if (FIO_LIST_IS_EMPTY(&q->consumers))
    return;
  FIO___LOCK_LOCK(q->lock);
  FIO_LIST_EACH(fio___thread_group_s, node, &q->consumers, pos) {
    fio_thread_cond_signal(&pos->cond);
  }
  FIO___LOCK_UNLOCK(q->lock);
}

/** Signals all worker threads to stop, waiting for them to complete. */
SFUNC void fio_queue_workers_join(fio_queue_s *q) {
  fio_queue_workers_stop(q);
  FIO___LOCK_LOCK(q->lock);
  FIO_LIST_EACH(fio___thread_group_s, node, &q->consumers, pos) {
    FIO___LOCK_UNLOCK(q->lock);
    fio_thread_join(&pos->thread);
    FIO___LOCK_LOCK(q->lock);
  }
  FIO___LOCK_UNLOCK(q->lock);
}

/* *****************************************************************************
Timer Queue Implementation
***************************************************************************** */
FIO_LEAK_COUNTER_DEF(fio___timer_event_s)

FIO_IFUNC void fio___timer_insert(fio___timer_event_s **pos,
                                  fio___timer_event_s *e) {
  while (*pos && e->due >= (*pos)->due)
    pos = &((*pos)->next);
  e->next = *pos;
  *pos = e;
}

FIO_IFUNC fio___timer_event_s *fio___timer_pop(fio___timer_event_s **pos,
                                               int64_t due) {
  if (!*pos || (*pos)->due > due)
    return NULL;
  fio___timer_event_s *t = *pos;
  *pos = t->next;
  return t;
}

FIO_IFUNC fio___timer_event_s *fio___timer_event_new(
    fio_timer_schedule_args_s args) {
  fio___timer_event_s *t = NULL;
  t = (fio___timer_event_s *)FIO_MEM_REALLOC_(NULL, 0, sizeof(*t), 0);
  if (!t)
    goto init_error;
  FIO_LEAK_COUNTER_ON_ALLOC(fio___timer_event_s);
  if (!args.repetitions)
    args.repetitions = 1;
  *t = (fio___timer_event_s){
      .fn = args.fn,
      .udata1 = args.udata1,
      .udata2 = args.udata2,
      .on_finish = args.on_finish,
      .due = args.start_at + args.every,
      .every = args.every,
      .repetitions = args.repetitions,
  };
  return t;
init_error:
  if (args.on_finish)
    args.on_finish(args.udata1, args.udata2);
  return NULL;
}

FIO_IFUNC void fio___timer_event_free(fio_timer_queue_s *tq,
                                      fio___timer_event_s *t) {
  if (tq && (t->repetitions < 0 || fio_atomic_sub_fetch(&t->repetitions, 1))) {
    FIO___LOCK_LOCK(tq->lock);
    fio___timer_insert(&tq->next, t);
    FIO___LOCK_UNLOCK(tq->lock);
    return;
  }
  if (t->on_finish)
    t->on_finish(t->udata1, t->udata2);
  FIO_LEAK_COUNTER_ON_FREE(fio___timer_event_s);
  FIO_MEM_FREE_(t, sizeof(*t));
}

FIO_SFUNC void fio___timer_perform(void *timer_, void *t_) {
  fio_timer_queue_s *tq = (fio_timer_queue_s *)timer_;
  fio___timer_event_s *t = (fio___timer_event_s *)t_;
  if (t->fn(t->udata1, t->udata2))
    tq = NULL;
  t->due += t->every;
  fio___timer_event_free(tq, t);
}

/** Pushes due events from the timer queue to an event queue. */
SFUNC size_t fio_timer_push2queue(fio_queue_s *queue,
                                  fio_timer_queue_s *timer,
                                  int64_t start_at) {
  size_t r = 0;
  if (!start_at)
    start_at = fio_time_milli();
  if (FIO___LOCK_TRYLOCK(timer->lock))
    return 0;
  fio___timer_event_s *t;
  while ((t = fio___timer_pop(&timer->next, start_at))) {
    fio_queue_push(queue,
                   .fn = fio___timer_perform,
                   .udata1 = timer,
                   .udata2 = t);
    ++r;
  }
  FIO___LOCK_UNLOCK(timer->lock);
  return r;
}

void fio_timer_schedule___(void); /* IDE marker */
/** Adds a time-bound event to the timer queue. */
SFUNC void fio_timer_schedule FIO_NOOP(fio_timer_queue_s *timer,
                                       fio_timer_schedule_args_s args) {
  fio___timer_event_s *t = NULL;
  if (!timer || !args.fn || !args.every)
    goto no_timer_queue;
  if (!args.start_at)
    args.start_at = fio_time_milli();
  t = fio___timer_event_new(args);
  if (!t)
    return;
  FIO___LOCK_LOCK(timer->lock);
  fio___timer_insert(&timer->next, t);
  FIO___LOCK_UNLOCK(timer->lock);
  return;
no_timer_queue:
  if (args.on_finish)
    args.on_finish(args.udata1, args.udata2);
  FIO_LOG_ERROR("fio_timer_schedule called with illegal arguments.");
}

/**
 * Clears any waiting timer bound tasks.
 *
 * NOTE:
 *
 * The timer queue must NEVER be freed when there's a chance that timer tasks
 * are waiting to be performed in a `fio_queue_s`.
 *
 * This is due to the fact that the tasks may try to reschedule themselves (if
 * they repeat).
 */
SFUNC void fio_timer_destroy(fio_timer_queue_s *tq) {
  fio___timer_event_s *next;
  FIO___LOCK_LOCK(tq->lock);
  next = tq->next;
  tq->next = NULL;
  FIO___LOCK_UNLOCK(tq->lock);
  FIO___LOCK_DESTROY(tq->lock);
  while (next) {
    fio___timer_event_s *tmp = next;

    next = next->next;
    fio___timer_event_free(NULL, tmp);
  }
}
/* *****************************************************************************
Queue/Timer Cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_QUEUE
#endif /* FIO_QUEUE */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_STREAM             /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




      A packet based data stream for storing / buffering endless data.



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_STREAM) && !defined(H___FIO_STREAM___H)
#define H___FIO_STREAM___H
#include <sys/stat.h>

#ifndef FIO_STREAM_COPY_PER_PACKET
/** Break apart large memory blocks into smaller pieces. by default 96Kb */
#define FIO_STREAM_COPY_PER_PACKET 98304
#endif

#ifndef FIO_STREAM_ALWAYS_COPY_IF_LESS_THAN
/** If the data added is less than said bytes, copy is preferred (locality). */
#define FIO_STREAM_ALWAYS_COPY_IF_LESS_THAN 116
#ifdef DEBUG
#undef FIO_STREAM_ALWAYS_COPY_IF_LESS_THAN
#define FIO_STREAM_ALWAYS_COPY_IF_LESS_THAN 8
#endif
#endif

/* *****************************************************************************
Stream API - types, constructor / destructor
***************************************************************************** */

typedef struct fio_stream_packet_s fio_stream_packet_s;

typedef struct {
  /* do not directly access! */
  fio_stream_packet_s *next;
  fio_stream_packet_s **pos;
  size_t consumed;
  size_t length;
} fio_stream_s;

/* at this point publish (declare only) the public API */

#ifndef FIO_STREAM_INIT
/* Initialization macro. */
#define FIO_STREAM_INIT(s)                                                     \
  { .next = NULL, .pos = &(s).next }
#endif

/* do we have a constructor? */
#ifndef FIO_REF_CONSTRUCTOR_ONLY

/* Allocates a new object on the heap and initializes it's memory. */
FIO_IFUNC fio_stream_s *fio_stream_new(void);

/* Frees any internal data AND the object's container! */
FIO_IFUNC int fio_stream_free(fio_stream_s *stream);

#endif /* FIO_REF_CONSTRUCTOR_ONLY */

/** Destroys the object, re-initializing its container. */
SFUNC void fio_stream_destroy(fio_stream_s *stream);

/* *****************************************************************************
Stream API - packing data into packets and adding it to the stream
***************************************************************************** */

/** Packs data into a fio_stream_packet_s container. */
SFUNC fio_stream_packet_s *fio_stream_pack_data(void *buf,
                                                size_t len,
                                                size_t offset,
                                                uint8_t copy_buffer,
                                                void (*dealloc_func)(void *));

/** Packs a file descriptor into a fio_stream_packet_s container. */
SFUNC fio_stream_packet_s *fio_stream_pack_fd(int fd,
                                              size_t len,
                                              size_t offset,
                                              uint8_t keep_open);

/** Adds a packet to the stream. This isn't thread safe.*/
SFUNC void fio_stream_add(fio_stream_s *stream, fio_stream_packet_s *packet);

/** Destroys the fio_stream_packet_s - call this ONLY if unused. */
SFUNC void fio_stream_pack_free(fio_stream_packet_s *packet);

/* *****************************************************************************
Stream API - Consuming the stream
***************************************************************************** */

/**
 * Reads data from the stream (if any), leaving it in the stream.
 *
 * `buf` MUST point to a buffer with - at least - `len` bytes. This is required
 * in case the packed data is fragmented or references a file and needs to be
 * copied to an available buffer.
 *
 * On error, or if the stream is empty, `buf` will be set to NULL and `len` will
 * be set to zero.
 *
 * Otherwise, `buf` may retain the same value or it may point directly to a
 * memory address within the stream's buffer (the original value may be lost)
 * and `len` will be updated to the largest possible value for valid data that
 * can be read from `buf`.
 *
 * Note: this isn't thread safe.
 */
SFUNC void fio_stream_read(fio_stream_s *stream, char **buf, size_t *len);

/**
 * Advances the Stream, so the first `len` bytes are marked as consumed.
 *
 * Note: this isn't thread safe.
 */
SFUNC void fio_stream_advance(fio_stream_s *stream, size_t len);

/**
 * Returns true if there's any data in the stream.
 *
 * Note: this isn't truly thread safe.
 */
FIO_IFUNC uint8_t fio_stream_any(fio_stream_s *stream);

/**
 * Returns the number of bytes waiting in the stream.
 *
 * Note: this isn't truly thread safe.
 */
FIO_IFUNC size_t fio_stream_length(fio_stream_s *stream);

/* *****************************************************************************








                          Stream Implementation








***************************************************************************** */

/* *****************************************************************************
Stream Implementation - inlined static functions
***************************************************************************** */

/* do we have a constructor? */
#ifndef FIO_REF_CONSTRUCTOR_ONLY
FIO_LEAK_COUNTER_DEF(fio_stream)
/* Allocates a new object on the heap and initializes it's memory. */
FIO_IFUNC fio_stream_s *fio_stream_new(void) {
  fio_stream_s *s = (fio_stream_s *)FIO_MEM_REALLOC_(NULL, 0, sizeof(*s), 0);
  if (s) {
    *s = (fio_stream_s)FIO_STREAM_INIT(s[0]);
  }
  FIO_LEAK_COUNTER_ON_ALLOC(fio_stream);
  return s;
}
/* Frees any internal data AND the object's container! */
FIO_IFUNC int fio_stream_free(fio_stream_s *s) {
  fio_stream_destroy(s);
  FIO_MEM_FREE_(s, sizeof(*s));
  FIO_LEAK_COUNTER_ON_FREE(fio_stream);
  return 0;
}
#endif /* FIO_REF_CONSTRUCTOR_ONLY */

/* Returns true if there's any data in the stream */
FIO_IFUNC uint8_t fio_stream_any(fio_stream_s *s) { return s && s->next; }

/* Returns the number of bytes waiting in the stream */
FIO_IFUNC size_t fio_stream_length(fio_stream_s *s) { return s->length; }

/* *****************************************************************************
Stream Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

FIO_IFUNC void fio_stream_packet_free_all(fio_stream_packet_s *p);
/* Frees any internal data AND the object's container! */
SFUNC void fio_stream_destroy(fio_stream_s *s) {
  if (!s)
    return;
  fio_stream_packet_free_all(s->next);
  *s = (fio_stream_s)FIO_STREAM_INIT(s[0]);
  return;
}

FIO_LEAK_COUNTER_DEF(fio_stream_packet_s)

/* *****************************************************************************
Stream API - packing data into packets and adding it to the stream
***************************************************************************** */

struct fio_stream_packet_s {
  fio_stream_packet_s *next;
};

typedef enum {
  FIO_PACKET_TYPE_EMBEDDED = 0,
  FIO_PACKET_TYPE_EXTERNAL = 1,
  FIO_PACKET_TYPE_FILE = 2,
  FIO_PACKET_TYPE_FILE_NO_CLOSE = 3,
} fio_stream_packet_type_e;
#define FIO_STREAM___TYPE_BITS 2

typedef struct fio_stream_packet_embd_s {
  fio_stream_packet_type_e type;
  uint32_t length;
  char buf[];
} fio_stream_packet_embd_s;

typedef struct fio_stream_packet_extrn_s {
  fio_stream_packet_type_e type;
  size_t length;
  char *buf;
  uintptr_t offset;
  void (*dealloc)(void *buf);
} fio_stream_packet_extrn_s;

/** User-space socket buffer data */
typedef struct {
  fio_stream_packet_type_e type;
  size_t length;
  size_t offset;
  int fd;
} fio_stream_packet_fd_s;

FIO_SFUNC void fio_stream_packet_free(fio_stream_packet_s *p) {
  if (!p)
    return;
  FIO_LEAK_COUNTER_ON_FREE(fio_stream_packet_s);
  union {
    fio_stream_packet_embd_s *em;
    fio_stream_packet_extrn_s *ext;
    fio_stream_packet_fd_s *f;
  } const u = {.em = (fio_stream_packet_embd_s *)(p + 1)};
  switch (u.em->type) {
  case FIO_PACKET_TYPE_EMBEDDED:
    FIO_MEM_FREE_(p, sizeof(*p) + sizeof(*u.em) + u.em->length);
    break;
  case FIO_PACKET_TYPE_EXTERNAL:
    if (u.ext->dealloc)
      u.ext->dealloc(u.ext->buf);
    FIO_MEM_FREE_(p, sizeof(*p) + sizeof(*u.ext));
    break;
  case FIO_PACKET_TYPE_FILE: close(u.f->fd);
#ifdef DEBUG
    FIO_LOG_DEBUG2("fio_stream_packet_free closed file fd %d", u.f->fd);
#endif
    /* fall through */
  case FIO_PACKET_TYPE_FILE_NO_CLOSE:
    FIO_MEM_FREE_(p, sizeof(*p) + sizeof(*u.f));
    break;
  }
}

FIO_IFUNC void fio_stream_packet_free_all(fio_stream_packet_s *p) {
  while (p) {
    register fio_stream_packet_s *t = p;
    p = p->next;
    fio_stream_packet_free(t);
  }
}

FIO_IFUNC size_t fio___stream_p2len(fio_stream_packet_s *p) {
  size_t len = 0;
  if (!p)
    return len;
  union {
    fio_stream_packet_embd_s *em;
    fio_stream_packet_extrn_s *ext;
    fio_stream_packet_fd_s *f;
  } const u = {.em = (fio_stream_packet_embd_s *)(p + 1)};

  switch ((fio_stream_packet_type_e)(u.em->type &
                                     ((1UL << FIO_STREAM___TYPE_BITS) - 1))) {
  case FIO_PACKET_TYPE_EMBEDDED: return len = u.em->length; return len;
  case FIO_PACKET_TYPE_EXTERNAL: len = u.ext->length; return len;
  case FIO_PACKET_TYPE_FILE: /* fall through */
  case FIO_PACKET_TYPE_FILE_NO_CLOSE: len = u.f->length; return len;
  }
  return len;
}

/** Packs data into a fio_stream_packet_s container. */
SFUNC fio_stream_packet_s *fio_stream_pack_data(void *buf,
                                                size_t len,
                                                size_t offset,
                                                uint8_t copy_buffer,
                                                void (*dealloc_func)(void *)) {
  fio_stream_packet_s *p = NULL;
  if (!len || !buf || (len & ((~(0UL)) << (32 - FIO_STREAM___TYPE_BITS))))
    goto error;
  if (copy_buffer || len < FIO_STREAM_ALWAYS_COPY_IF_LESS_THAN) {
    while (len) {
      /* break apart large memory blocks into smaller pieces */
      const size_t slice =
          (len > FIO_STREAM_COPY_PER_PACKET) ? FIO_STREAM_COPY_PER_PACKET : len;
      fio_stream_packet_embd_s *em;
      fio_stream_packet_s *tmp = (fio_stream_packet_s *)FIO_MEM_REALLOC_(
          NULL,
          0,
          sizeof(*p) + sizeof(*em) + (sizeof(char) * slice),
          0);
      if (!tmp)
        goto error;
      FIO_LEAK_COUNTER_ON_ALLOC(fio_stream_packet_s);
      tmp->next = p;
      em = (fio_stream_packet_embd_s *)(tmp + 1);
      em->type = FIO_PACKET_TYPE_EMBEDDED;
      em->length = (uint32_t)slice;
      FIO_MEMCPY(em->buf, (char *)buf + offset + (len - slice), slice);
      p = tmp;
      len -= slice;
    }
    if (dealloc_func)
      dealloc_func(buf);
  } else {
    fio_stream_packet_extrn_s *ext;
    p = (fio_stream_packet_s *)
        FIO_MEM_REALLOC_(NULL, 0, sizeof(*p) + sizeof(*ext), 0);
    if (!p)
      goto error;
    FIO_LEAK_COUNTER_ON_ALLOC(fio_stream_packet_s);
    p->next = NULL;
    ext = (fio_stream_packet_extrn_s *)(p + 1);
    *ext = (fio_stream_packet_extrn_s){
        .type = FIO_PACKET_TYPE_EXTERNAL,
        .length = (uint32_t)len,
        .buf = (char *)buf,
        .offset = offset,
        .dealloc = dealloc_func,
    };
  }
  return p;

error:
  if (dealloc_func)
    dealloc_func(buf);
  fio_stream_packet_free_all(p);
  return p;
}

/** Packs a file descriptor into a fio_stream_packet_s container. */
SFUNC fio_stream_packet_s *fio_stream_pack_fd(int fd,
                                              size_t len,
                                              size_t offset,
                                              uint8_t keep_open) {
  fio_stream_packet_s *p = NULL;
  fio_stream_packet_fd_s *f;
  if ((unsigned)(fd + 1) < 2)
    goto no_file;

  if (!len) {
    /* review file total length and auto-calculate */
    len = fio_fd_size(fd);
    if (!len || offset >= len || len >= 0x7FFFFFFF)
      goto error;
    len -= offset;
  }

  p = (fio_stream_packet_s *)
      FIO_MEM_REALLOC_(NULL, 0, sizeof(*p) + sizeof(*f), 0);
  if (!p)
    goto error;
  FIO_LEAK_COUNTER_ON_ALLOC(fio_stream_packet_s);
  p->next = NULL;
  f = (fio_stream_packet_fd_s *)(p + 1);
  *f = (fio_stream_packet_fd_s){
      .type =
          (keep_open ? FIO_PACKET_TYPE_FILE_NO_CLOSE : FIO_PACKET_TYPE_FILE),
      .length = len,
      .offset = offset,
      .fd = fd,
  };
#ifdef DEBUG
  FIO_LOG_DEBUG2("fio_stream_pack_fd wrapping file fd %d", fd);
#endif
  return p;
error:
  if (!keep_open)
    close(fd);
no_file:
  return p;
}

/** Adds a packet to the stream. This isn't thread safe.*/
SFUNC void fio_stream_add(fio_stream_s *s, fio_stream_packet_s *p) {
  fio_stream_packet_s *last = p;
  size_t len = 0;

  if (!s || !p)
    goto error;
  len = fio___stream_p2len(p);

  while (last->next) {
    last = last->next;
    len += fio___stream_p2len(last);
  }
  if (!s->pos)
    s->pos = &s->next;
  *s->pos = p;
  s->pos = &last->next;
  s->length += len;
  return;
error:
  fio_stream_pack_free(p);
}

/** Destroys the fio_stream_packet_s - call this ONLY if unused. */
SFUNC void fio_stream_pack_free(fio_stream_packet_s *p) {
  fio_stream_packet_free_all(p);
}

/* *****************************************************************************
Stream API - Consuming the stream
***************************************************************************** */

FIO_SFUNC void fio___stream_read_internal(fio_stream_packet_s *p,
                                          char **buf,
                                          size_t *len,
                                          size_t buf_offset,
                                          size_t offset,
                                          size_t must_copy) {
  if (!p || !len[0]) {
    len[0] = 0;
    return;
  }
  union {
    fio_stream_packet_embd_s *em;
    fio_stream_packet_extrn_s *ext;
    fio_stream_packet_fd_s *f;
  } const u = {.em = (fio_stream_packet_embd_s *)(p + 1)};
  size_t written = 0;

  switch (u.em->type) {
  case FIO_PACKET_TYPE_EMBEDDED:
    if (!buf[0] || !len[0] ||
        (!must_copy && (!p->next || u.em->length >= len[0] + offset))) {
      buf[0] = u.em->buf + offset;
      len[0] = (size_t)u.em->length - offset;
      return;
    }
    written = u.em->length - offset;
    if (written > len[0])
      written = len[0];
    if (written) {
      FIO_MEMCPY(buf[0] + buf_offset, u.em->buf + offset, written);
      len[0] -= written;
    }
    if (len[0]) {
      fio___stream_read_internal(p->next, buf, len, written + buf_offset, 0, 1);
    }
    len[0] += written;
    return;
  case FIO_PACKET_TYPE_EXTERNAL:
    if (!buf[0] || !len[0] ||
        (!must_copy && (!p->next || u.ext->length >= len[0] + offset))) {
      buf[0] = u.ext->buf + u.ext->offset + offset;
      len[0] = (size_t)(u.ext->length) - offset;
      return;
    }
    written = u.ext->length - offset;
    if (written > len[0])
      written = len[0];
    if (written) {
      FIO_MEMCPY(buf[0] + buf_offset,
                 u.ext->buf + u.ext->offset + offset,
                 written);
      len[0] -= written;
    }
    if (len[0]) {
      fio___stream_read_internal(p->next, buf, len, written + buf_offset, 0, 1);
    }
    len[0] += written;
    return;
    break;
  case FIO_PACKET_TYPE_FILE: /* fall through */
  case FIO_PACKET_TYPE_FILE_NO_CLOSE:
    if (!buf[0] || !len[0]) {
      len[0] = 0;
      return;
    }
    {
      uint8_t possible_eof_surprise = 0;
      written = u.f->length - offset; /* written here == to be read & written */
      if (written > len[0])
        written = len[0];
      if (written) {
        ssize_t act;
      retry_on_signal:
        act = fio_fd_read(u.f->fd,
                          buf[0] + buf_offset,
                          written,
                          u.f->offset + offset);
        if (act <= 0) {
          /* no more data in the file? */
          FIO_LOG_DEBUG("file read error for %d: %s", u.f->fd, strerror(errno));
          if (errno == EINTR)
            goto retry_on_signal;
          // u.f->length = offset; /* mark EOF */
        } else if ((size_t)act != written) {
          /* a surprising EOF? */
          written = act;
          possible_eof_surprise = 1;
          // u.f->length = offset + act; /* mark EOF? */
        }
        len[0] -= written;
      }
      if (!possible_eof_surprise && len[0]) {
        fio___stream_read_internal(p->next,
                                   buf,
                                   len,
                                   written + buf_offset,
                                   0,
                                   1);
      }
      len[0] += written;
    }
    return;
  }
}

/**
 * Reads data from the stream (if any), leaving it in the stream.
 *
 * `buf` MUST point to a buffer with - at least - `len` bytes. This is required
 * in case the packed data is fragmented or references a file and needs to be
 * copied to an available buffer.
 *
 * On error, or if the stream is empty, `buf` will be set to NULL and `len` will
 * be set to zero.
 *
 * Otherwise, `buf` may retain the same value or it may point directly to a
 * memory address wiithin the stream's buffer (the original value may be lost)
 * and `len` will be updated to the largest possible value for valid data that
 * can be read from `buf`.
 *
 * Note: this isn't thread safe.
 */
SFUNC void fio_stream_read(fio_stream_s *s, char **buf, size_t *len) {
  if (!s || !s->next)
    goto none;
  fio___stream_read_internal(s->next, buf, len, 0, s->consumed, 0);
  return;
none:
  *buf = NULL;
  *len = 0;
}

/**
 * Advances the Stream, so the first `len` bytes are marked as consumed.
 *
 * Note: this isn't thread safe.
 */
SFUNC void fio_stream_advance(fio_stream_s *s, size_t len) {
  if (!s || !s->next)
    return;
  s->length -= len;
  len += s->consumed;
  while (len) {
    size_t p_len = fio___stream_p2len(s->next);
    if (len >= p_len) {
      fio_stream_packet_s *p = s->next;
      s->next = p->next;
      fio_stream_packet_free(p);
      len -= p_len;
      if (!s->next) {
        s->pos = &s->next;
        s->consumed = 0;
        s->length = 0;
        return;
      }
    } else {
      s->consumed = len;
      return;
    }
  }
  s->consumed = len;
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_STREAM___TYPE_BITS
#endif /* FIO_STREAM */
#undef FIO_STREAM
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_STR                /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                      Binary Safe String Core Helpers



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_STR) && !defined(H___FIO_STR___H)
#define H___FIO_STR___H
/* *****************************************************************************
String Authorship Helpers (`fio_string_write` functions)
***************************************************************************** */

/**
 * A reallocation callback type for buffers in a `fio_str_info_s`.
 *
 * The callback MUST allocate at least `len + 1` bytes, setting the new capacity
 * in `dest->capa`.
 * */
typedef int (*fio_string_realloc_fn)(fio_str_info_s *dest, size_t len);
/**
 * Writes data to the end of the string in the `fio_string_s` struct,
 * returning an updated `fio_string_s` struct.
 *
 * The returned string is NUL terminated if edited.
 *
 * * `dest` an `fio_string_s` struct containing the destination string.
 *
 * * `reallocate` is a callback that attempts to reallocate more memory (i.e.,
 * using `realloc`) and returns an updated `fio_string_s` struct containing the
 *   updated capacity and buffer pointer (as well as the original length).
 *
 *   On failure the original `fio_string_s` should be returned. if
 * `reallocate` is NULL or fails, the data copied will be truncated.
 *
 * * `src` is the data to be written to the end of `dest`.
 *
 * * `len` is the length of the data to be written to the end of `dest`.
 *
 * Note: this function performs only minimal checks and assumes that `dest` is
 *       fully valid - i.e., that `dest.capa >= dest.len`, that `dest.buf` is
 *       valid, etc'.
 *
 * An example for a `reallocate` callback using the system's `realloc` function:
 *
 *      int fio_string_realloc_system(fio_str_info_s *dest, size_t len_no_nul) {
 *       const size_t new_capa = fio_string_capa4len(len_pre_nul);
 *       void *tmp = realloc(dest.buf, new_capa);
 *       if (!tmp)
 *         return -1;
 *       dest.capa = new_capa;
 *       dest.buf = (char *)tmp;
 *       return 0;
 *     }
 *
 * An example for using the function:
 *
 *     void example(void) {
 *       char buf[32];
 *       fio_str_info_s str = FIO_STR_INFO3(buf, 0, 32);
 *       fio_string_write(&str, NULL, "The answer is: 0x", 17);
 *       str.len += fio_ltoa(str.buf + str.len, 42, 16);
 *       fio_string_write(&str, NULL, "!\n", 2);
 *       printf("%s", str.buf);
 *     }
 */
FIO_SFUNC int fio_string_write(fio_str_info_s *dest,
                               fio_string_realloc_fn reallocate,
                               const void *restrict src,
                               size_t len);

/**
 * Similar to `fio_string_write`, only replacing/inserting a sub-string in a
 * specific location.
 *
 * Negative `start_pos` values are calculated backwards, `-1` == end of String.
 *
 * When `overwrite_len` is zero, the function will insert the data at
 * `start_pos`, pushing existing data until after the inserted data.
 *
 * If `overwrite_len` is non-zero, than `overwrite_len` bytes will be
 * overwritten (or deleted).
 *
 * If `len == 0` than `src` will be ignored and the data marked for replacement
 * will be erased.
 */
SFUNC int fio_string_replace(fio_str_info_s *dest,
                             fio_string_realloc_fn reallocate,
                             intptr_t start_pos,
                             size_t overwrite_len,
                             const void *src,
                             size_t len);

/** Argument type used by fio_string_write2. */
typedef struct {
  size_t klass;
  union {
    struct {
      size_t len;
      const char *buf;
    } str;
    double f;
    int64_t i;
    uint64_t u;
  } info;
} fio_string_write_s;

/**
 * Writes a group of objects (strings, numbers, etc') to `dest`.
 *
 * `dest` and `reallocate` are similar to `fio_string_write`.
 *
 * `src` is an array of `fio_string_write_s` structs, ending with a struct
 * that's all set to 0.
 *
 * Use the `fio_string_write2` macro for ease, i.e.:
 *
 *    fio_str_info_s str = {0};
 *    fio_string_write2(&str, my_reallocate,
 *                        FIO_STRING_WRITE_STR1("The answer is: "),
 *                        FIO_STRING_WRITE_NUM(42),
 *                        FIO_STRING_WRITE_STR2("(0x", 3),
 *                        FIO_STRING_WRITE_HEX(42),
 *                        FIO_STRING_WRITE_STR2(")", 1));
 *
 * Note: this function might end up allocating more memory than absolutely
 * required as it favors fast performance over memory savings. It performs only
 * a single allocation (if any) and computes numeral string length only when
 * writing the numbers to the string.
 */
SFUNC int fio_string_write2(fio_str_info_s *restrict dest,
                            fio_string_realloc_fn reallocate,
                            const fio_string_write_s srcs[]);

/* Helper macro for fio_string_write2 */
#define fio_string_write2(dest, reallocate, ...)                               \
  fio_string_write2((dest),                                                    \
                    (reallocate),                                              \
                    (fio_string_write_s[]){__VA_ARGS__, {0}})

/** A macro to add a String to `fio_string_write2`. */
#define FIO_STRING_WRITE_STR1(str_)                                            \
  ((fio_string_write_s){                                                       \
      .klass = 1,                                                              \
      .info.str = {.len = (size_t)FIO_STRLEN((str_)), .buf = (str_)}})

/** A macro to add a String with known length to `fio_string_write2`. */
#define FIO_STRING_WRITE_STR2(str_, len_)                                      \
  ((fio_string_write_s){.klass = 1, .info.str = {.len = (len_), .buf = (str_)}})

/** A macro to add a String with known length to `fio_string_write2`. */
#define FIO_STRING_WRITE_STR_INFO(str_)                                        \
  ((fio_string_write_s){.klass = 1,                                            \
                        .info.str = {.len = (str_).len, .buf = (str_).buf}})

/** A macro to add a signed number to `fio_string_write2`. */
#define FIO_STRING_WRITE_NUM(num)                                              \
  ((fio_string_write_s){.klass = 2, .info.i = (int64_t)(num)})

/** A macro to add an unsigned number to `fio_string_write2`. */
#define FIO_STRING_WRITE_UNUM(num)                                             \
  ((fio_string_write_s){.klass = 3, .info.u = (uint64_t)(num)})

/** A macro to add a hex representation to `fio_string_write2`. */
#define FIO_STRING_WRITE_HEX(num)                                              \
  ((fio_string_write_s){.klass = 4, .info.u = (uint64_t)(num)})

/** A macro to add a binary representation to `fio_string_write2`. */
#define FIO_STRING_WRITE_BIN(num)                                              \
  ((fio_string_write_s){.klass = 5, .info.u = (uint64_t)(num)})

/** A macro to add a float (double) to `fio_string_write2`. */
#define FIO_STRING_WRITE_FLOAT(num)                                            \
  ((fio_string_write_s){.klass = 6, .info.f = (double)(num)})

/* *****************************************************************************
String Numerals support
***************************************************************************** */

/* Writes a signed number `i` to the String */
SFUNC int fio_string_write_i(fio_str_info_s *dest,
                             fio_string_realloc_fn reallocate,
                             int64_t i);
/* Writes an unsigned number `i` to the String */
SFUNC int fio_string_write_u(fio_str_info_s *dest,
                             fio_string_realloc_fn reallocate,
                             uint64_t i);
/* Writes a hex representation of `i` to the String */
SFUNC int fio_string_write_hex(fio_str_info_s *dest,
                               fio_string_realloc_fn reallocate,
                               uint64_t i);
/* Writes a binary representation of `i` to the String */
SFUNC int fio_string_write_bin(fio_str_info_s *dest,
                               fio_string_realloc_fn reallocate,
                               uint64_t i);

/* *****************************************************************************
String printf style support
***************************************************************************** */

/** Similar to fio_string_write, only using printf semantics. */
SFUNC FIO___PRINTF_STYLE(3, 0) int fio_string_printf(
    fio_str_info_s *dest,
    fio_string_realloc_fn reallocate,
    const char *format,
    ...);

/** Similar to fio_string_write, only using vprintf semantics. */
SFUNC FIO___PRINTF_STYLE(3, 0) int fio_string_vprintf(
    fio_str_info_s *dest,
    fio_string_realloc_fn reallocate,
    const char *format,
    va_list argv);

/* *****************************************************************************
String C / JSON escaping
***************************************************************************** */

/**
 * Writes data at the end of the String, escaping the data using JSON semantics.
 *
 * The JSON semantic are common to many programming languages, promising a UTF-8
 * String while making it easy to read and copy the string during debugging.
 */
SFUNC int fio_string_write_escape(fio_str_info_s *restrict dest,
                                  fio_string_realloc_fn reallocate,
                                  const void *raw,
                                  size_t raw_len);

/** Writes an escaped data into the string after un-escaping the data. */
SFUNC int fio_string_write_unescape(fio_str_info_s *dest,
                                    fio_string_realloc_fn reallocate,
                                    const void *enscaped,
                                    size_t enscaped_len);

/* *****************************************************************************
String Base32 support
***************************************************************************** */

/** Writes data to String using base64 encoding. */
SFUNC int fio_string_write_base32enc(fio_str_info_s *dest,
                                     fio_string_realloc_fn reallocate,
                                     const void *raw,
                                     size_t raw_len);

/** Writes decoded base64 data to String. */
SFUNC int fio_string_write_base32dec(fio_str_info_s *dest,
                                     fio_string_realloc_fn reallocate,
                                     const void *encoded,
                                     size_t encoded_len);

/* *****************************************************************************
String Base64 support
***************************************************************************** */

/** Writes data to String using base64 encoding. */
SFUNC int fio_string_write_base64enc(fio_str_info_s *dest,
                                     fio_string_realloc_fn reallocate,
                                     const void *raw,
                                     size_t raw_len,
                                     uint8_t url_encoded);

/** Writes decoded base64 data to String. */
SFUNC int fio_string_write_base64dec(fio_str_info_s *dest,
                                     fio_string_realloc_fn reallocate,
                                     const void *encoded,
                                     size_t encoded_len);

/* *****************************************************************************
String URL Encoding support
***************************************************************************** */

/** Writes data to String using URL encoding (a.k.a., percent encoding). */
SFUNC int fio_string_write_url_enc(fio_str_info_s *dest,
                                   fio_string_realloc_fn reallocate,
                                   const void *raw,
                                   size_t raw_len);

/** Writes decoded URL data to String, decoding + to spaces. */
SFUNC int fio_string_write_url_dec(fio_str_info_s *dest,
                                   fio_string_realloc_fn reallocate,
                                   const void *encoded,
                                   size_t encoded_len);

/** Writes decoded URL data to String, without decoding + to spaces. */
SFUNC int fio_string_write_path_dec(fio_str_info_s *dest,
                                    fio_string_realloc_fn reallocate,
                                    const void *encoded,
                                    size_t encoded_len);

/* *****************************************************************************
String HTML escaping support
***************************************************************************** */

/** Writes HTML escaped data to a String. */
SFUNC int fio_string_write_html_escape(fio_str_info_s *dest,
                                       fio_string_realloc_fn reallocate,
                                       const void *raw,
                                       size_t raw_len);

/** Writes HTML un-escaped data to a String - incomplete and minimal. */
SFUNC int fio_string_write_html_unescape(fio_str_info_s *dest,
                                         fio_string_realloc_fn reallocate,
                                         const void *enscaped,
                                         size_t enscaped_len);

/* *****************************************************************************
String File Reading support
***************************************************************************** */

/**
 * Writes up to `limit` bytes from `fd` into `dest`, starting at `start_at`.
 *
 * If `limit` is 0 (or less than 0) data will be written until EOF.
 *
 * If `start_at` is negative, position will be calculated from the end of the
 * file where `-1 == EOF`.
 *
 * Note: this will fail unless used on actual files (not sockets, not pipes).
 * */
SFUNC int fio_string_readfd(fio_str_info_s *dest,
                            fio_string_realloc_fn reallocate,
                            int fd,
                            intptr_t start_at,
                            size_t limit);

/**
 * Opens the file `filename` and pastes it's contents (or a slice ot it) at
 * the end of the String. If `limit == 0`, than the data will be read until
 * EOF.
 *
 * If the file can't be located, opened or read, or if `start_at` is beyond
 * the EOF position, NULL is returned in the state's `data` field.
 */
SFUNC int fio_string_readfile(fio_str_info_s *dest,
                              fio_string_realloc_fn reallocate,
                              const char *filename,
                              intptr_t start_at,
                              size_t limit);

/**
 * Writes up to `limit` bytes from `fd` into `dest`, starting at `start_at` and
 * ending either at the first occurrence of `delim` or at EOF.
 *
 * If `limit` is 0 (or less than 0) as much data as may be required will be
 * written.
 *
 * If `start_at` is negative, position will be calculated from the end of the
 * file where `-1 == EOF`.
 *
 * Note: this will fail unless used on actual seekable files (not sockets, not
 * pipes).
 * */
SFUNC int fio_string_getdelim_fd(fio_str_info_s *dest,
                                 fio_string_realloc_fn reallocate,
                                 int fd,
                                 intptr_t start_at,
                                 char delim,
                                 size_t limit);

/**
 * Opens the file `filename`, calls `fio_string_getdelim_fd` and closes the
 * file.
 */
SFUNC int fio_string_getdelim_file(fio_str_info_s *dest,
                                   fio_string_realloc_fn reallocate,
                                   const char *filename,
                                   intptr_t start_at,
                                   char delim,
                                   size_t limit);

/* *****************************************************************************
Memory Helpers (for Authorship)
***************************************************************************** */

/* calculates a 16 bytes boundary aligned capacity for `new_len`. */
FIO_IFUNC size_t fio_string_capa4len(size_t new_len);

/** Default reallocation callback implementation using libc `realloc`. */
#define FIO_STRING_SYS_REALLOC fio_string_sys_reallocate
/** Default reallocation callback implementation using the default allocator */
#define FIO_STRING_REALLOC fio_string_default_reallocate
/** Default reallocation callback for memory that mustn't be freed. */
#define FIO_STRING_ALLOC_COPY fio_string_default_allocate_copy
/** default allocator for the fio_keystr_s string data.. */
#define FIO_STRING_ALLOC_KEY fio_string_default_key_alloc
/** Frees memory that was allocated with the default callbacks. */
#define FIO_STRING_FREE fio_string_default_free
/** Frees memory that was allocated with the default callbacks. */
#define FIO_STRING_FREE2 fio_string_default_free2
/** Frees memory that was allocated for a key string. */
#define FIO_STRING_FREE_KEY fio_string_default_free_key
/** Does nothing. */
#define FIO_STRING_FREE_NOOP fio_string_default_free_noop
/** Does nothing. */
#define FIO_STRING_FREE_NOOP2 fio_string_default_free_noop2

/** default reallocation callback implementation. */
SFUNC int fio_string_default_reallocate(fio_str_info_s *dst, size_t len);
/** default reallocation callback for memory that mustn't be freed. */
SFUNC int fio_string_default_allocate_copy(fio_str_info_s *dest,
                                           size_t new_capa);
/** frees memory that was allocated with the default callbacks. */
SFUNC void fio_string_default_free(void *);
/** frees memory that was allocated with the default callbacks. */
SFUNC void fio_string_default_free2(fio_str_info_s str);
/** does nothing. */
SFUNC void fio_string_default_free_noop(void *);
/** does nothing. */
SFUNC void fio_string_default_free_noop2(fio_str_info_s str);

/** default allocator for the fio_keystr_s string data.. */
SFUNC void *fio_string_default_key_alloc(size_t len);
/** frees a fio_keystr_s memory that was allocated with the default callback. */
SFUNC void fio_string_default_free_key(void *, size_t);

/* *****************************************************************************
UTF-8 Support
***************************************************************************** */

/** Returns 1 if the String is UTF-8 valid and 0 if not. */
SFUNC bool fio_string_utf8_valid(fio_str_info_s str);

/** Returns the String's length in UTF-8 characters or 0 if invalid. */
SFUNC size_t fio_string_utf8_len(fio_str_info_s str);

/** Returns 0 if non-UTF-8 or returns 1-4 (UTF-8 if a valid char). */
SFUNC size_t fio_string_utf8_valid_code_point(const void *u8c, size_t buf_len);

/**
 * Takes a UTF-8 character selection information (UTF-8 position and length)
 * and updates the same variables so they reference the raw byte slice
 * information.
 *
 * If the String isn't UTF-8 valid up to the requested selection, than `pos`
 * will be updated to `-1` otherwise values are always positive.
 *
 * The returned `len` value may be shorter than the original if there wasn't
 * enough data left to accommodate the requested length. When a `len` value of
 * `0` is returned, this means that `pos` marks the end of the String.
 *
 * Returns -1 on error and 0 on success.
 */
SFUNC int fio_string_utf8_select(fio_str_info_s str,
                                 intptr_t *pos,
                                 size_t *len);

/* *****************************************************************************
Sorting / Comparison Helpers
***************************************************************************** */

/**
 * Compares two `fio_buf_info_s`, returning 1 if data in a is bigger than b.
 *
 * Note: returns 0 if data in b is bigger than or equal(!).
 */
SFUNC int fio_string_is_greater_buf(fio_buf_info_s a, fio_buf_info_s b);

/**
 * Compares two strings, returning 1 if string a is bigger than string b.
 *
 * Note: returns 0 if string b is bigger than string a or if strings are equal.
 */
FIO_IFUNC int fio_string_is_greater(fio_str_info_s a, fio_str_info_s b);

/* *****************************************************************************
Binary String Type - Embedded Strings optimized for mutability and locality
***************************************************************************** */

/* for internal use only */
typedef struct {
  uint32_t len;
  uint32_t capa;
  uint32_t ref;
} fio___bstr_meta_s;

/* for internal use only */
typedef struct {
  fio___bstr_meta_s meta;
  char *ptr;
} fio___bstr_const_s;

/** Reserves `len` for future `write` operations (used to minimize realloc). */
FIO_IFUNC char *fio_bstr_reserve(char *bstr, size_t len);

/** Copies a `fio_bstr` using "copy on write". */
FIO_IFUNC char *fio_bstr_copy(char *bstr);
/** Frees a binary string allocated by a `fio_bstr` function. Returns NULL.*/
FIO_IFUNC void fio_bstr_free(char *bstr);

/** Returns information about the fio_bstr. */
FIO_IFUNC fio_str_info_s fio_bstr_info(const char *bstr);
/** Returns information about the fio_bstr. */
FIO_IFUNC fio_buf_info_s fio_bstr_buf(const char *bstr);
/** Gets the length of the fio_bstr. `bstr` MUST NOT be NULL. */
FIO_IFUNC size_t fio_bstr_len(const char *bstr);
/** Sets the length of the fio_bstr. `bstr` MUST NOT be NULL. */
FIO_IFUNC char *fio_bstr_len_set(char *bstr, size_t len);

/** Compares to see if fio_bstr a is greater than fio_bstr b (for FIO_SORT). */
FIO_SFUNC int fio_bstr_is_greater(const char *a, const char *b);
/** Compares to see if fio_bstr a is equal to another String. */
FIO_SFUNC int fio_bstr_is_eq2info(const char *a_, fio_str_info_s b);
/** Compares to see if fio_bstr a is equal to another String. */
FIO_SFUNC int fio_bstr_is_eq2buf(const char *a_, fio_buf_info_s b);

/** Writes data to a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_write(char *bstr,
                               const void *restrict src,
                               size_t len);
/** Replaces data in a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_replace(char *bstr,
                                 intptr_t start_pos,
                                 size_t overwrite_len,
                                 const void *src,
                                 size_t len);
/** Writes data to a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_write2(char *bstr, const fio_string_write_s srcs[]);
/** Writes data to a fio_bstr, returning the address of the new fio_bstr. */
#define fio_bstr_write2(bstr, ...)                                             \
  fio_bstr_write2(bstr, (fio_string_write_s[]){__VA_ARGS__, {0}})

/** Writes number to a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_write_i(char *bstr, int64_t num);
/** Writes number to a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_write_u(char *bstr, uint64_t num);
/** Writes number to a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_write_hex(char *bstr, uint64_t num);
/** Writes number to a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_write_bin(char *bstr, uint64_t num);

/** Writes escaped data to a fio_bstr, returning its new address. */
FIO_IFUNC char *fio_bstr_write_escape(char *bstr, const void *src, size_t len);
/** Un-escapes and writes data to a fio_bstr, returning its new address. */
FIO_IFUNC char *fio_bstr_write_unescape(char *bstr,
                                        const void *src,
                                        size_t len);

/** Writes base64 encoded data to a fio_bstr, returning its new address. */
FIO_IFUNC char *fio_bstr_write_base64enc(char *bstr,
                                         const void *src,
                                         size_t len,
                                         uint8_t url_encoded);
/** Decodes base64 data and writes to a fio_bstr, returning its new address. */
FIO_IFUNC char *fio_bstr_write_base64dec(char *bstr,
                                         const void *src,
                                         size_t len);

/** Writes data to String using URL encoding (a.k.a., percent encoding). */
FIO_IFUNC char *fio_bstr_write_url_enc(char *bstr,
                                       const void *data,
                                       size_t len);
/** Writes decoded URL data to String. */
FIO_IFUNC char *fio_bstr_write_url_dec(char *bstr,
                                       const void *encoded,
                                       size_t len);

/** Writes HTML escaped data to a String. */
FIO_IFUNC char *fio_bstr_write_html_escape(char *bstr,
                                           const void *raw,
                                           size_t len);
/** Writes HTML un-escaped data to a String - incomplete and minimal. */
FIO_IFUNC char *fio_bstr_write_html_unescape(char *bstr,
                                             const void *escaped,
                                             size_t len);

/** Writes to the String from a regular file `fd`. */
FIO_IFUNC char *fio_bstr_readfd(char *bstr,
                                int fd,
                                intptr_t start_at,
                                intptr_t limit);
/** Writes to the String from a regular file named `filename`. */
FIO_IFUNC char *fio_bstr_readfile(char *bstr,
                                  const char *filename,
                                  intptr_t start_at,
                                  intptr_t limit);
/** Writes to the String from a regular file named `filename`. */
FIO_IFUNC char *fio_bstr_getdelim_file(char *bstr,
                                       const char *filename,
                                       intptr_t start_at,
                                       char delim,
                                       size_t limit);
/** Writes to the String from a regular file `fd`. */
FIO_IFUNC char *fio_bstr_getdelim_fd(char *bstr,
                                     int fd,
                                     intptr_t start_at,
                                     char delim,
                                     size_t limit);

/** Writes a `fio_bstr` in `printf` style. */
FIO_IFUNC FIO___PRINTF_STYLE(2, 0) char *fio_bstr_printf(char *bstr,
                                                         const char *format,
                                                         ...);

/** default reallocation callback implementation - mostly for internal use. */
SFUNC int fio_bstr_reallocate(fio_str_info_s *dest, size_t len);

/* *****************************************************************************
Key String Type - binary String container for Hash Maps and Arrays
***************************************************************************** */

/** a semi-opaque type used for the `fio_keystr` functions */
typedef struct fio_keystr_s fio_keystr_s;

/** returns the Key String. NOTE: Key Strings are NOT NUL TERMINATED! */
FIO_IFUNC fio_buf_info_s fio_keystr_buf(fio_keystr_s *str);
/** returns the Key String. NOTE: Key Strings are NOT NUL TERMINATED! */
FIO_IFUNC fio_str_info_s fio_keystr_info(fio_keystr_s *str);

/** Returns a TEMPORARY `fio_keystr_s`. */
FIO_IFUNC fio_keystr_s fio_keystr_tmp(const char *buf, uint32_t len);
/** Returns an initialized `fio_keystr_s` containing a copy of `str`. */
FIO_SFUNC fio_keystr_s fio_keystr_init(fio_str_info_s str,
                                       void *(*alloc_func)(size_t len));
/** Destroys an initialized `fio_keystr_s`. */
FIO_SFUNC void fio_keystr_destroy(fio_keystr_s *key,
                                  void (*free_func)(void *, size_t));
/** Compares two Key Strings. */
FIO_IFUNC int fio_keystr_is_eq(fio_keystr_s a, fio_keystr_s b);
/** Compares a Key String to any String - used internally by the hash map. */
FIO_IFUNC int fio_keystr_is_eq2(fio_keystr_s a_, fio_str_info_s b);
/** Compares a Key String to any String - used internally by the hash map. */
FIO_IFUNC int fio_keystr_is_eq3(fio_keystr_s a_, fio_buf_info_s b);
/** Returns a good-enough `fio_keystr_s` risky hash. */
FIO_IFUNC uint64_t fio_keystr_hash(fio_keystr_s a);

#define FIO_KEYSTR_CONST ((size_t)-1LL)

/* *****************************************************************************


                             String Implementation

                           IMPLEMENTATION - INLINED


***************************************************************************** */

/* *****************************************************************************
String Authorship Helpers - (inlined) implementation
***************************************************************************** */

/* calculates a 16 bytes boundary aligned capacity for `new_len`. */
FIO_IFUNC size_t fio_string_capa4len(size_t new_len) {
  return sizeof(char) *
         ((new_len + 15LL + (!(new_len & 15ULL))) & (~((size_t)15ULL)));
}

/*
 * performs `reallocate` if necessary, `capa` rounded up to 16 byte units.
 * updates `len` if reallocation fails (or is unavailable).
 */
FIO_IFUNC int fio_string___write_validate_len(fio_str_info_s *restrict dest,
                                              fio_string_realloc_fn reallocate,
                                              size_t *restrict len) {
  size_t l = len[0];
  if ((dest->capa > dest->len + l))
    return 0;
  if (reallocate && l < (dest->capa >> 2) &&
      ((dest->capa >> 2) + (dest->capa) < 0x7FFFFFFFULL))
    l = (dest->capa >> 2);
  l += dest->len;
  if (l < 0x7FFFFFFFULL && reallocate && !reallocate(dest, l))
    return 0;
  if (dest->capa > dest->len + 1)
    len[0] = dest->capa - (dest->len + 1);
  else
    len[0] = 0;
  return -1;
}

/* fio_string_write */
FIO_SFUNC int fio_string_write(fio_str_info_s *dest,
                               fio_string_realloc_fn reallocate,
                               const void *restrict src,
                               size_t len) {
  int r = 0;
  if (!len)
    return r;
  r = fio_string___write_validate_len(dest, reallocate, &len);
  if (FIO_LIKELY(len && src))
    FIO_MEMCPY(dest->buf + dest->len, src, len);
  dest->len += len;
  dest->buf[dest->len] = 0;
  return r;
}

/**
 * Compares two strings, returning 1 if string a is bigger than string b.
 *
 * Note: returns 0 if string b is bigger than string a or if strings are equal.
 */
FIO_IFUNC int fio_string_is_greater(fio_str_info_s a, fio_str_info_s b) {
  return fio_string_is_greater_buf(FIO_STR2BUF_INFO(a), FIO_STR2BUF_INFO(b));
}

/* *****************************************************************************
Binary String Type - Embedded Strings
***************************************************************************** */
FIO_LEAK_COUNTER_DEF(fio_bstr_s)

#ifndef FIO___BSTR_META
#define FIO___BSTR_META(bstr)                                                  \
  FIO_PTR_MATH_SUB(fio___bstr_meta_s, bstr, sizeof(fio___bstr_meta_s))
#endif

/** Duplicates a `fio_bstr` using copy on write. */
FIO_IFUNC char *fio_bstr_copy(char *bstr) {
  if (!bstr)
    return bstr;
  fio___bstr_meta_s *meta = FIO___BSTR_META(bstr);
  if (fio_atomic_add(&meta->ref, 1) > ((uint32_t)1UL << 31))
    goto copy_anyway;
  return bstr;
copy_anyway:
  bstr = fio_bstr_write(NULL, bstr, meta->len);
  fio_bstr_free((char *)(meta + 1));
  return bstr;
}

/** Frees a binary string allocated by a `fio_bstr` function. */
FIO_IFUNC void fio_bstr_free(char *bstr) {
  if (!bstr)
    return;
  fio___bstr_meta_s *meta = FIO___BSTR_META(bstr);
  if (fio_atomic_sub(&meta->ref, 1))
    return;
  FIO_LEAK_COUNTER_ON_FREE(fio_bstr_s);
  FIO_MEM_FREE_(meta, (meta->capa + sizeof(*meta)));
}

/** internal helper - sets the length of the fio_bstr. */
FIO_IFUNC char *fio_bstr___len_set(char *bstr, size_t len) {
  if (FIO_UNLIKELY(!bstr))
    return bstr;
  // if (FIO_UNLIKELY(len >= 0xFFFFFFFFULL))
  //   return bstr;
  bstr[(FIO___BSTR_META(bstr)->len = (uint32_t)len)] = 0;
  return bstr;
}

/** Reserves `len` for future `write` operations (used to minimize realloc). */
FIO_IFUNC char *fio_bstr_reserve(char *bstr, size_t len) {
  fio_str_info_s i = fio_bstr_info(bstr);
  if (i.len + len < i.capa)
    return bstr;
  fio_bstr_reallocate(&i, (i.len + len));
  return fio_bstr___len_set(i.buf, i.len);
}

/** Returns information about the fio_bstr. */
FIO_IFUNC fio_str_info_s fio_bstr_info(const char *bstr) {
  fio_str_info_s r = {0};
  r.buf = (char *)bstr;
  /* please emit conditional mov and not an if branches */
  if (bstr)
    r.len = FIO___BSTR_META(bstr)->len;
  if (bstr)
    r.capa = FIO___BSTR_META(bstr)->capa;
  if (bstr && FIO___BSTR_META(bstr)->ref)
    r.capa = 1;
  return r;
}

/** Returns information about the fio_bstr. */
FIO_IFUNC fio_buf_info_s fio_bstr_buf(const char *bstr) {
  fio___bstr_meta_s mem[1] = {{0}};
  fio___bstr_meta_s *meta_map[2] = {FIO___BSTR_META(bstr), mem};
  fio___bstr_meta_s *meta = meta_map[!bstr];
  return FIO_BUF_INFO2((char *)bstr, meta->len);
}

/** Gets the length of the fio_bstr. `bstr` MUST NOT be NULL. */
FIO_IFUNC size_t fio_bstr_len(const char *bstr) {
  if (!bstr)
    return 0;
  fio___bstr_meta_s *meta = FIO___BSTR_META(bstr);
  return meta->len;
}

/** Sets the length of the fio_bstr. `bstr` MUST NOT be NULL. */
FIO_IFUNC char *fio_bstr_len_set(char *bstr, size_t len) {
  fio___bstr_meta_s m[2] = {0};
  fio___bstr_meta_s *meta = FIO___BSTR_META(bstr);
  if (!bstr)
    meta = m;
  if (FIO_UNLIKELY(meta->ref || meta->capa <= len)) {
    fio_str_info_s i = fio_bstr_info(bstr);
    fio_bstr_reallocate(&i, len);
    bstr = i.buf;
  }
  return fio_bstr___len_set(bstr, len);
}

/** Writes data to a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_write(char *bstr,
                               const void *restrict src,
                               size_t len) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write(&i, fio_bstr_reallocate, src, len);
  return fio_bstr___len_set(i.buf, i.len);
}

/** Replaces data in a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_replace(char *bstr,
                                 intptr_t start_pos,
                                 size_t overwrite_len,
                                 const void *src,
                                 size_t len) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_replace(&i,
                     fio_bstr_reallocate,
                     start_pos,
                     overwrite_len,
                     src,
                     len);
  return fio_bstr___len_set(i.buf, i.len);
}

/** Writes data to a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_write2 FIO_NOOP(char *bstr,
                                         const fio_string_write_s srcs[]) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write2 FIO_NOOP(&i, fio_bstr_reallocate, srcs);
  return fio_bstr___len_set(i.buf, i.len);
}

/** Writes number to a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_write_i(char *bstr, int64_t num) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write_i(&i, fio_bstr_reallocate, num);
  return fio_bstr___len_set(i.buf, i.len);
}
/** Writes number to a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_write_u(char *bstr, uint64_t num) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write_u(&i, fio_bstr_reallocate, num);
  return fio_bstr___len_set(i.buf, i.len);
}
/** Writes number to a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_write_hex(char *bstr, uint64_t num) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write_hex(&i, fio_bstr_reallocate, num);
  return fio_bstr___len_set(i.buf, i.len);
}
/** Writes number to a fio_bstr, returning the address of the new fio_bstr. */
FIO_IFUNC char *fio_bstr_write_bin(char *bstr, uint64_t num) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write_bin(&i, fio_bstr_reallocate, num);
  return fio_bstr___len_set(i.buf, i.len);
}
/** Writes escaped data to a fio_bstr, returning its new address. */
FIO_IFUNC char *fio_bstr_write_escape(char *bstr, const void *src, size_t len) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write_escape(&i, fio_bstr_reallocate, src, len);
  return fio_bstr___len_set(i.buf, i.len);
}

/** Un-escapes and writes data to a fio_bstr, returning its new address. */
FIO_IFUNC char *fio_bstr_write_unescape(char *bstr,
                                        const void *src,
                                        size_t len) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write_unescape(&i, fio_bstr_reallocate, src, len);
  return fio_bstr___len_set(i.buf, i.len);
}

/** Writes base64 encoded data to a fio_bstr, returning its new address. */
FIO_IFUNC char *fio_bstr_write_base64enc(char *bstr,
                                         const void *src,
                                         size_t len,
                                         uint8_t url_encoded) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write_base64enc(&i, fio_bstr_reallocate, src, len, url_encoded);
  return fio_bstr___len_set(i.buf, i.len);
}

/** Decodes base64 data and writes to a fio_bstr, returning its new address. */
FIO_IFUNC char *fio_bstr_write_base64dec(char *bstr,
                                         const void *src,
                                         size_t len) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write_base64dec(&i, fio_bstr_reallocate, src, len);
  return fio_bstr___len_set(i.buf, i.len);
}

/** Writes data to String using URL encoding (a.k.a., percent encoding). */
FIO_IFUNC char *fio_bstr_write_url_enc(char *bstr,
                                       const void *src,
                                       size_t len) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write_url_enc(&i, fio_bstr_reallocate, src, len);
  return fio_bstr___len_set(i.buf, i.len);
}

/** Writes decoded URL data to String. */
FIO_IFUNC char *fio_bstr_write_url_dec(char *bstr,
                                       const void *src,
                                       size_t len) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write_url_dec(&i, fio_bstr_reallocate, src, len);
  return fio_bstr___len_set(i.buf, i.len);
}

/** Writes HTML escaped data to a String. */
FIO_IFUNC char *fio_bstr_write_html_escape(char *bstr,
                                           const void *src,
                                           size_t len) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write_html_escape(&i, fio_bstr_reallocate, src, len);
  return fio_bstr___len_set(i.buf, i.len);
}
/** Writes HTML un-escaped data to a String - incomplete and minimal. */
FIO_IFUNC char *fio_bstr_write_html_unescape(char *bstr,
                                             const void *src,
                                             size_t len) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_write_html_unescape(&i, fio_bstr_reallocate, src, len);
  return fio_bstr___len_set(i.buf, i.len);
}

FIO_IFUNC FIO___PRINTF_STYLE(2, 0) char *fio_bstr_printf(char *bstr,
                                                         const char *format,
                                                         ...) {
  va_list argv;
  va_start(argv, format);
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_vprintf(&i, fio_bstr_reallocate, format, argv);
  va_end(argv);
  return fio_bstr___len_set(i.buf, i.len);
}

/** Writes to the String from a regular file `fd`. */
FIO_IFUNC char *fio_bstr_readfd(char *bstr,
                                int fd,
                                intptr_t start_at,
                                intptr_t limit) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_readfd(&i, fio_bstr_reallocate, fd, start_at, limit);
  return fio_bstr___len_set(i.buf, i.len);
}
/** Writes to the String from a regular file named `filename`. */
FIO_IFUNC char *fio_bstr_readfile(char *bstr,
                                  const char *filename,
                                  intptr_t start_at,
                                  intptr_t limit) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_readfile(&i, fio_bstr_reallocate, filename, start_at, limit);
  return fio_bstr___len_set(i.buf, i.len);
}

/** Writes to the String from a regular file named `filename`. */
FIO_IFUNC char *fio_bstr_getdelim_file(char *bstr,
                                       const char *filename,
                                       intptr_t start_at,
                                       char delim,
                                       size_t limit) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_getdelim_file(&i,
                           fio_bstr_reallocate,
                           filename,
                           start_at,
                           delim,
                           limit);
  return fio_bstr___len_set(i.buf, i.len);
}

/** Writes to the String from a regular file `fd`. */
FIO_IFUNC char *fio_bstr_getdelim_fd(char *bstr,
                                     int fd,
                                     intptr_t start_at,
                                     char delim,
                                     size_t limit) {
  fio_str_info_s i = fio_bstr_info(bstr);
  fio_string_getdelim_fd(&i, fio_bstr_reallocate, fd, start_at, delim, limit);
  return fio_bstr___len_set(i.buf, i.len);
}

/** Compares to see if fio_bstr a is greater than fio_bstr b (for FIO_SORT). */
FIO_SFUNC int fio_bstr_is_greater(const char *a, const char *b) {
  return fio_string_is_greater_buf(fio_bstr_buf(a), fio_bstr_buf(b));
}

/** Compares to see if fio_bstr a is equal to another String. */
FIO_SFUNC int fio_bstr_is_eq2info(const char *a_, fio_str_info_s b) {
  fio_str_info_s a = fio_bstr_info(a_);
  return FIO_STR_INFO_IS_EQ(a, b);
}
/** Compares to see if fio_bstr a is equal to another String. */
FIO_SFUNC int fio_bstr_is_eq2buf(const char *a_, fio_buf_info_s b) {
  fio_buf_info_s a = fio_bstr_buf(a_);
  return FIO_BUF_INFO_IS_EQ(a, b);
}

/* *****************************************************************************
Key String Type - binary String container for Hash Maps and Arrays
***************************************************************************** */
FIO_LEAK_COUNTER_DEF(fio_keystr_s)

/* key string type implementation */
struct fio_keystr_s {
  uint8_t info;
  uint8_t embd[3];
  uint32_t len;
  const char *buf;
};

/** returns the Key String. */
FIO_IFUNC fio_buf_info_s fio_keystr_buf(fio_keystr_s *str) {
  fio_buf_info_s r;
  if ((str->info + 1) > 1) {
    r = (fio_buf_info_s){.len = str->info, .buf = (char *)str->embd};
    return r;
  }
  r = (fio_buf_info_s){.len = str->len, .buf = (char *)str->buf};
  return r;
}
/** returns the Key String. */
FIO_IFUNC fio_str_info_s fio_keystr_info(fio_keystr_s *str) {
  fio_str_info_s r;
  if ((str->info + 1) > 1) {
    r = (fio_str_info_s){.len = str->info, .buf = (char *)str->embd};
    return r;
  }
  r = (fio_str_info_s){.len = str->len, .buf = (char *)str->buf};
  return r;
}

/** Returns a TEMPORARY `fio_keystr_s` to be used as a key for a hash map. */
FIO_IFUNC fio_keystr_s fio_keystr_tmp(const char *buf, uint32_t len) {
  fio_keystr_s r = {0};
  if (len + 1 < sizeof(r)) { /* always embed small strings in container! */
    r.info = (uint8_t)len;
    FIO_MEMCPY(r.embd, buf, len);
    return r;
  }
  r.info = 0xFF;
  r.len = len;
  r.buf = buf;
  return r;
}

/** Returns a copy of `fio_keystr_s`. */
FIO_SFUNC fio_keystr_s fio_keystr_init(fio_str_info_s str,
                                       void *(*alloc_func)(size_t len)) {
  fio_keystr_s r = {0};
  if (!str.buf || !str.len || (str.len & (~(size_t)0xFFFFFFFF)))
    return r;
  if (str.len + 1 < sizeof(r)) {
    r.info = (uint8_t)str.len;
    FIO_MEMCPY(r.embd, str.buf, str.len);
    return r;
  }
  if (str.capa == FIO_KEYSTR_CONST) {
    r.info = 0xFF;
    r.len = (uint32_t)str.len;
    r.buf = str.buf;
    return r;
  }
  char *buf;
  r.len = (uint32_t)str.len;
  r.buf = buf = (char *)alloc_func(str.len + 1);
  if (!buf)
    goto no_mem;
  FIO_LEAK_COUNTER_ON_ALLOC(fio_keystr_s);
  FIO_MEMCPY(buf, str.buf, str.len);
  buf[str.len] = 0;
  return r;
no_mem:
  FIO_LOG_FATAL("fio_keystr_init allocation failed - results undefined!!!");
  r = fio_keystr_tmp(str.buf, (uint32_t)str.len);
  return r;
}
/** Destroys a copy of `fio_keystr_s` - used internally by the hash map. */
FIO_SFUNC void fio_keystr_destroy(fio_keystr_s *key,
                                  void (*free_func)(void *, size_t)) {
  if (key->info || !key->buf)
    return;
  FIO_LEAK_COUNTER_ON_FREE(fio_keystr_s);
  free_func((void *)key->buf, key->len);
}

/** Compares two Key Strings. */
FIO_IFUNC int fio_keystr_is_eq(fio_keystr_s a_, fio_keystr_s b_) {
  fio_buf_info_s a = fio_keystr_buf(&a_);
  fio_buf_info_s b = fio_keystr_buf(&b_);
  return FIO_BUF_INFO_IS_EQ(a, b);
}

/** Compares a Key String to any String - used internally by the hash map. */
FIO_IFUNC int fio_keystr_is_eq2(fio_keystr_s a_, fio_str_info_s b) {
  fio_str_info_s a = fio_keystr_info(&a_);
  return FIO_STR_INFO_IS_EQ(a, b);
}
/** Compares a Key String to any String - used internally by the hash map. */
FIO_IFUNC int fio_keystr_is_eq3(fio_keystr_s a_, fio_buf_info_s b) {
  fio_buf_info_s a = fio_keystr_buf(&a_);
  return FIO_BUF_INFO_IS_EQ(a, b);
}

/** Returns a good-enough `fio_keystr_s` risky hash. */
FIO_IFUNC uint64_t fio_keystr_hash(fio_keystr_s a_) {
  fio_buf_info_s a = fio_keystr_buf(&a_);
  return fio_risky_hash(a.buf, a.len, (uint64_t)(uintptr_t)fio_string_write2);
}

/* *****************************************************************************
Extern-ed functions
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

FIO_LEAK_COUNTER_DEF(fio_string_default_allocations)
FIO_LEAK_COUNTER_DEF(fio_string_default_key_allocations)
/* *****************************************************************************
Allocation Helpers
***************************************************************************** */

SFUNC int fio_string_sys_reallocate(fio_str_info_s *dest, size_t len) {
  len = fio_string_capa4len(len);
  void *tmp = realloc(dest->buf, dest->capa);
  if (!tmp)
    return -1;
  dest->capa = len;
  dest->buf = (char *)tmp;
  return 0;
}

SFUNC int fio_string_default_reallocate(fio_str_info_s *dest, size_t len) {
  len = fio_string_capa4len(len);
  void *tmp = FIO_MEM_REALLOC_(dest->buf, dest->capa, len, dest->len);
  if (!tmp)
    return -1;
  if (!dest->buf)
    FIO_LEAK_COUNTER_ON_ALLOC(fio_string_default_allocations);
  dest->capa = len;
  dest->buf = (char *)tmp;
  return 0;
}

SFUNC int fio_string_default_allocate_copy(fio_str_info_s *dest, size_t len) {
  len = fio_string_capa4len(len);
  void *tmp = FIO_MEM_REALLOC_(NULL, 0, len, 0);
  if (!tmp)
    return -1;
  FIO_LEAK_COUNTER_ON_ALLOC(fio_string_default_allocations);
  dest->capa = len;
  dest->buf = (char *)tmp;
  if (dest->len)
    FIO_MEMCPY(tmp, dest->buf, dest->len);
  return 0;
}

SFUNC void *fio_string_default_key_alloc(size_t len) {
  return FIO_MEM_REALLOC_(NULL, 0, len, 0);
}

SFUNC void fio_string_default_free(void *ptr) {
  if (ptr) {
    FIO_LEAK_COUNTER_ON_FREE(fio_string_default_allocations);
    FIO_MEM_FREE_(ptr, 0);
  }
}
SFUNC void fio_string_default_free2(fio_str_info_s str) {
  if (str.buf) {
    FIO_LEAK_COUNTER_ON_FREE(fio_string_default_allocations);
    FIO_MEM_FREE_(str.buf, str.capa);
  }
}

/** frees a fio_keystr_s memory that was allocated with the default callback. */
SFUNC void fio_string_default_free_key(void *buf, size_t capa) {
  FIO_MEM_FREE_(buf, capa);
  (void)capa; /* if unused */
}

SFUNC void fio_string_default_free_noop(void *str) { (void)str; }
SFUNC void fio_string_default_free_noop2(fio_str_info_s str) { (void)str; }

/* *****************************************************************************
Numeral Support
***************************************************************************** */

/* fio_string_write_i */
SFUNC int fio_string_write_i(fio_str_info_s *dest,
                             fio_string_realloc_fn reallocate,
                             int64_t i) {
  int r = -1;
  size_t len = 0;
  len = fio_digits10(i);
  if (fio_string___write_validate_len(dest, reallocate, &len))
    return r; /* no writing of partial numbers. */
  r = 0;
  fio_ltoa10(dest->buf + dest->len, i, len);
  dest->len += len;
  return r;
}

/* fio_string_write_u */
SFUNC int fio_string_write_u(fio_str_info_s *dest,
                             fio_string_realloc_fn reallocate,
                             uint64_t i) {
  int r = -1;
  size_t len = fio_digits10u(i);
  if (fio_string___write_validate_len(dest, reallocate, &len))
    return r; /* no writing of partial numbers. */
  r = 0;
  fio_ltoa10u(dest->buf + dest->len, i, len);
  dest->len += len;
  return r;
}

/* fio_string_write_hex */
SFUNC int fio_string_write_hex(fio_str_info_s *dest,
                               fio_string_realloc_fn reallocate,
                               uint64_t i) {
  int r = 0;
  size_t len = fio_digits16u(i);
  if (fio_string___write_validate_len(dest, reallocate, &len))
    return (r = -1); /* no writing of partial numbers. */
  fio_ltoa16u(dest->buf + dest->len, i, len);
  dest->len += len;
  return r;
}

/* fio_string_write_bin */
SFUNC int fio_string_write_bin(fio_str_info_s *dest,
                               fio_string_realloc_fn reallocate,
                               uint64_t i) {
  int r = 0;
  size_t len = fio_digits_bin(i);
  if (fio_string___write_validate_len(dest, reallocate, &len))
    return (r = -1); /* no writing of partial numbers. */
  fio_ltoa_bin(dest->buf + dest->len, i, len);
  dest->len += len;
  return r;
}

/* *****************************************************************************
`printf` Style Support
***************************************************************************** */

/* Similar to fio_string_write, only using vprintf semantics. */
SFUNC int FIO___PRINTF_STYLE(3, 0)
    fio_string_vprintf(fio_str_info_s *dest,
                       fio_string_realloc_fn reallocate,
                       const char *format,
                       va_list argv) {
  int r = 0;
  va_list argv_cpy;
  va_copy(argv_cpy, argv);
  int len_i = vsnprintf(NULL, 0, format, argv_cpy);
  va_end(argv_cpy);
  if (len_i <= 0)
    return -1;
  size_t len = (size_t)len_i;
  r = fio_string___write_validate_len(dest, reallocate, &len);
  if (FIO_UNLIKELY(dest->capa < dest->len + 2))
    return -1;
  if (len)
    vsnprintf(dest->buf + dest->len, len + 1, format, argv);
  dest->len += len;
  dest->buf[dest->len] = 0;
  return r;
}

/** Similar to fio_string_write, only using printf semantics. */
SFUNC int FIO___PRINTF_STYLE(3, 4)
    fio_string_printf(fio_str_info_s *dest,
                      fio_string_realloc_fn reallocate,
                      const char *format,
                      ...) {
  int r = 0;
  va_list argv;
  va_start(argv, format);
  r = fio_string_vprintf(dest, reallocate, format, argv);
  va_end(argv);
  return r;
}

/* *****************************************************************************
UTF-8 Support
***************************************************************************** */

/** Returns 0 if non-UTF-8 or returns 1-4 (UTF-8 if a valid char). */
SFUNC size_t fio_string_utf8_valid_code_point(const void *c, size_t buf_len) {
  size_t l = fio_utf8_char_len((uint8_t *)c);
  l &= 0U - (buf_len >= l);
  return l;
}

/** Returns 1 if the String is UTF-8 valid and 0 if not. */
SFUNC bool fio_string_utf8_valid(fio_str_info_s str) {
  if (!str.len)
    return 1;
  char *const end = str.buf + str.len;
  size_t tmp;
  while ((tmp = fio_utf8_char_len(str.buf)) && ((str.buf += tmp) < end))
    ;
  return str.buf == end;
}

/** Returns the String's length in UTF-8 characters. */
SFUNC size_t fio_string_utf8_len(fio_str_info_s str) {
  if (!str.len)
    return 0;
  char *end = str.buf + str.len;
  size_t utf8len = 0, tmp;
  do {
    tmp = fio_utf8_char_len(str.buf);
    str.buf += tmp;
    ++utf8len;
  } while (tmp && str.buf < end);
  utf8len &= 0U - (str.buf == end);
  return utf8len;
}

/**
 * Takes a UTF-8 character selection information (UTF-8 position and length)
 * and updates the same variables so they reference the raw byte slice
 * information.
 *
 * If the String isn't UTF-8 valid up to the requested selection, than `pos`
 * will be updated to `-1` otherwise values are always positive.
 *
 * The returned `len` value may be shorter than the original if there wasn't
 * enough data left to accommodate the requested length. When a `len` value of
 * `0` is returned, this means that `pos` marks the end of the String.
 *
 * Returns -1 on error and 0 on success.
 */
SFUNC int fio_string_utf8_select(fio_str_info_s str,
                                 intptr_t *pos,
                                 size_t *len) {
  if (!pos || !len)
    return -1;
  const uint8_t *p = (uint8_t *)str.buf;
  const uint8_t *const end = p + str.len;
  size_t start, clen;
  if (!str.len)
    goto at_end;
  if ((*pos) > 0) {
    start = *pos;
    do {
      clen = fio_utf8_char_len(p);
      p += clen;
      --start;
    } while (clen && start && p < end);
    if (!clen || p > end)
      goto error;
    if (p == end)
      goto at_end;
  } else if (*pos < 0) { /* walk backwards */
    p += str.len;
    start = 0 - *pos;
    do {
      const uint8_t *was = p;
      --p;
      while ((*p & 0xC0U) == 0x80U && p > (uint8_t *)str.buf)
        --p;
      if ((size_t)fio_utf8_char_len_unsafe(*p) != (size_t)(was - p))
        goto error;
    } while (--start && p > (uint8_t *)str.buf);
  }
  *pos = p - (uint8_t *)str.buf;

  /* find end */
  start = *len;
  clen = 1;
  while (start && p < end && (clen = fio_utf8_char_len(p))) {
    p += clen;
    --start;
  }
  if (!clen || p > end)
    goto error;
  *len = p - ((uint8_t *)str.buf + (*pos));
  return 0;

at_end:
  *pos = str.len;
  *len = 0;
  return 0;
error:
  *pos = -1;
  *len = 0;
  return -1;
}

/* *****************************************************************************
fio_string_is_greater
***************************************************************************** */

/**
 * Compares two `fio_buf_info_s`, returning 1 if data in a is bigger than b.
 *
 * Note: returns 0 if data in b is bigger than or equal(!).
 */
SFUNC int fio_string_is_greater_buf(fio_buf_info_s a, fio_buf_info_s b) {
  const int a_len_is_bigger = a.len > b.len;
  size_t len = a_len_is_bigger ? b.len : a.len; /* shared length */
  if (a.buf == b.buf)
    return a_len_is_bigger;
  uint64_t ua[4] FIO_ALIGN(16) = {0};
  uint64_t ub[4] FIO_ALIGN(16) = {0};
  uint64_t flag = 0;
  if (len < 32)
    goto mini_cmp;

  len -= 32;
  for (;;) {
    for (size_t i = 0; i < 4; ++i) {
      fio_memcpy8(ua + i, a.buf);
      fio_memcpy8(ub + i, b.buf);
      flag |= (ua[i] ^ ub[i]);
      a.buf += 8;
      b.buf += 8;
    }
    if (flag)
      goto review_diff;
    if (len > 31) {
      len -= 32;
      continue;
    }
    if (!len)
      return a_len_is_bigger;
    a.buf -= 32;
    b.buf -= 32;
    a.buf += len & 31;
    b.buf += len & 31;
    len = 0;
  }

review_diff:
  if (ua[2] != ub[2]) {
    ua[3] = ua[2];
    ub[3] = ub[2];
  }
  if (ua[1] != ub[1]) {
    ua[3] = ua[1];
    ub[3] = ub[1];
  }
  if (ua[0] != ub[0]) {
    ua[3] = ua[0];
    ub[3] = ub[0];
  }
review_diff8:
  ua[3] = fio_lton64(ua[3]); /* comparison requires network byte order */
  ub[3] = fio_lton64(ub[3]);
  return ua[3] > ub[3];

mini_cmp:
  if (len > 7) {
    len -= 8;
    for (;;) {
      fio_memcpy8(ua + 3, a.buf);
      fio_memcpy8(ub + 3, b.buf);
      if (ua[3] != ub[3])
        goto review_diff8;
      if (len > 7) {
        a.buf += 8;
        b.buf += 8;
        len -= 8;
        continue;
      }
      if (!len)
        return a_len_is_bigger;
      a.buf += len & 7;
      b.buf += len & 7;
      len = 0;
    }
  }
  while (len--) {
    if (a.buf[0] != b.buf[0])
      return a.buf[0] > b.buf[0];
    ++a.buf;
    ++b.buf;
  }
  return a_len_is_bigger;
}

/* *****************************************************************************
Insert / Write2
***************************************************************************** */

/* fio_string_replace */
SFUNC int fio_string_replace(fio_str_info_s *dest,
                             fio_string_realloc_fn reallocate,
                             intptr_t start_pos,
                             size_t overwrite_len,
                             const void *src,
                             size_t len) {
  int r = 0;
  if (start_pos < 0) {
    start_pos = dest->len + start_pos + 1;
    if (start_pos < 0)
      start_pos = 0;
  }
  if (dest->len < (size_t)start_pos + overwrite_len + 1) {
    if ((size_t)start_pos < dest->len)
      dest->len = start_pos;
    return fio_string_write(dest, reallocate, src, len);
  }

  size_t move_start = start_pos + overwrite_len;
  size_t move_len = dest->len - (start_pos + overwrite_len);
  if (overwrite_len < len) {
    /* adjust for possible memory expansion */
    const size_t extra = len - overwrite_len;
    if (dest->capa < dest->len + extra + 1) {
      r = -1; /* in case reallocate is NULL */
      if (!reallocate ||
          FIO_UNLIKELY(
              (r = reallocate(dest, fio_string_capa4len(dest->len + extra))))) {
        move_len -= (dest->len + extra + 1) - dest->capa;
        if (dest->capa < start_pos + len + 1) {
          move_len = 0;
          len = dest->capa - start_pos - 1;
        }
      }
    }
  }
  if (move_len)
    FIO_MEMMOVE(dest->buf + start_pos + len, dest->buf + move_start, move_len);
  if (len)
    FIO_MEMCPY(dest->buf + start_pos, src, len);
  dest->len = start_pos + len + move_len;
  dest->buf[dest->len] = 0;
  return r;
}

/* IDE marker */
void fio_string_write2____(void);
/* the fio_string_write2 is a printf alternative. */
SFUNC int fio_string_write2 FIO_NOOP(fio_str_info_s *restrict dest,
                                     fio_string_realloc_fn reallocate,
                                     const fio_string_write_s srcs[]) {
  int r = 0;
  const fio_string_write_s *pos = srcs;
  size_t len = 0;

  while (pos->klass) {
    switch (pos->klass) { /* use more memory rather then calculate twice. */
    case 2: /* number */ len += fio_digits10(pos->info.i); break;
    case 3: /* unsigned */ len += fio_digits10u(pos->info.u); break;
    case 4: /* hex */ len += fio_digits16u(pos->info.u); break;
    case 5: /* binary */ len += fio_digits_bin(pos->info.u); break;
    case 6: /* float */ len += 18; break;
    default: len += pos->info.str.len;
    }
    ++pos;
  }
  if (!len)
    return r;
  pos = srcs;
  if (fio_string___write_validate_len(dest, reallocate, &len))
    goto truncate;
  while (pos->klass) {
    switch (pos->klass) {
    case 2: fio_string_write_i(dest, NULL, pos->info.i); break;   /* number */
    case 3: fio_string_write_u(dest, NULL, pos->info.u); break;   /* unsigned */
    case 4: fio_string_write_hex(dest, NULL, pos->info.u); break; /* hex */
    case 5: fio_string_write_bin(dest, NULL, pos->info.u); break; /* binary */
    case 6:                                                       /* float */
      dest->len += snprintf(dest->buf + dest->len, 19, "%.15g", pos->info.f);
      break;
    default:
      FIO_MEMCPY(&dest->buf[dest->len], pos->info.str.buf, pos->info.str.len);
      dest->len += pos->info.str.len;
    }
    ++pos;
  }
finish:
  dest->buf[dest->len] = 0;
  return r;
truncate:
  r = -1;
  while (pos->klass) {
    switch (pos->klass) {
    case 2:
      if (fio_string_write_i(dest, NULL, pos->info.i))
        goto finish;
      break; /* number */
    case 3:
      if (fio_string_write_u(dest, NULL, pos->info.u))
        goto finish;
      break; /* unsigned */
    case 4:
      if (fio_string_write_hex(dest, NULL, pos->info.u))
        goto finish;
      break; /* hex */
    case 5:
      if (fio_string_write_bin(dest, NULL, pos->info.u))
        goto finish;
      break; /* binary */
    case 6:  /* float */
      len = snprintf(dest->buf + dest->len, 19, "%.15g", pos->info.f);
      if (dest->capa < dest->len + len + 2)
        goto finish;
      dest->len += len;
      break;
    default:
      if (fio_string_write(dest, NULL, pos->info.str.buf, pos->info.str.len))
        goto finish;
    }
    ++pos;
  }
  goto finish;
}

/* *****************************************************************************
Escaping / Un-Escaping Primitives (not for encoding)
***************************************************************************** */

typedef struct {
  fio_str_info_s *restrict dest;
  fio_string_realloc_fn reallocate;
  const void *restrict src;
  const size_t len;
  /* moves to the next character (or character sequence) to alter. */
  const uint8_t *(*next)(const uint8_t *restrict s, const uint8_t *restrict e);
  /*
   * `dest` will be NULL when calculating length to be written.
   *
   * `*s` is the source data.
   *
   * `e` is the end-of-bounds position (src + len).
   *
   * Returns the number of characters that would have been written.
   *
   * Note: must update `s` to point to the next character after the altered
   * sequence.
   */
  size_t (*diff)(uint8_t *restrict dest,
                 const uint8_t *restrict *restrict s,
                 const uint8_t *restrict e);
  /*
   * Writes (un)escaped data to `dest`.
   *
   * Behaves the same as `diff` only writes data to `dest`.
   *
   * `dest` is the same number of bytes as reported by `diff` (or more).
   */
  size_t (*write)(uint8_t *restrict dest,
                  const uint8_t *restrict *restrict s,
                  const uint8_t *restrict e);
  /* If `len` of `src` is less then `skip_diff_len`, skips the test. */
  uint32_t skip_diff_len;
  /* If set, will not allow a partial write when memory allocation fails. */
  uint32_t refuse_partial;
} fio___string_altering_args_s;

/**
 * Writes an escaped data into the string after un-escaping the data.
 */
FIO_IFUNC int fio___string_altering_cycle(
    const fio___string_altering_args_s args) {
  int r = 0;
  if (((long long)args.len < 1) | !args.src | !args.dest)
    return r;
  const uint8_t *s = (const uint8_t *)args.src;
  const uint8_t *e = s + args.len;
  const uint8_t *p = s;
  fio_str_info_s d = *args.dest;
  size_t first_stop = 0;
  size_t updater = 0;
  /* we need to allocate memory - limit to result's length */
  if (d.len + args.len >= d.capa) {
    updater = (args.len > args.skip_diff_len);
    size_t written_length = args.len;
    if (updater) { /* skip memory reduction for small strings */
      written_length = 0;
      p = s;
      for (;;) {
        const uint8_t *p2 = args.next(p, e);
        if (!p2)
          break;
        written_length += p2 - p;
        p = p2;
        first_stop |= (0ULL - updater) & ((p - s) + 1);
        updater = 0;
        written_length += args.diff(NULL, &p, e);
        if (p + 1 > e)
          break;
      }
    }
    written_length += e - p;
    /* allocate extra required space. */
    FIO_ASSERT_DEBUG(written_length > 0, "string (un)escape reduced too much");
    if (d.len + written_length >= d.capa &&
        fio_string___write_validate_len(&d, args.reallocate, &written_length)) {
      r = -1;
      if (args.refuse_partial)
        goto finish;
      e = (const uint8_t *)d.capa - (d.len + 1);
    }
  }

  /* copy unescaped head of string (if it's worth our time), saves one memchr */
  if (((!first_stop) & updater) | (first_stop > 16)) {
    if (!first_stop)
      first_stop = (e - s) + 1;
    --first_stop;
    FIO_MEMMOVE(d.buf + d.len, s, first_stop);
    d.len += first_stop;
    s += first_stop;
  }
  p = s;

  /* start copying and un-escaping as needed */
  while (p < e) {
    const uint8_t *p2 = args.next(p, e);
    if (!p2)
      break;
    if (p2 - p) {
      updater = p2 - p;
      FIO_MEMMOVE(d.buf + d.len, p, updater);
      d.len += updater;
    }
    p = p2;
    d.len += args.write((uint8_t *)d.buf + d.len, &p, e);
  }
  if (p < e) {
    updater = e - p;
    FIO_MEMCPY(d.buf + d.len, p, updater);
    d.len += updater;
  }

finish:
  d.buf[d.len] = 0;
  *args.dest = d;
  return r;
}

/* *****************************************************************************
String C / JSON escaping
***************************************************************************** */

/**
 * Writes data at the end of the String, escaping the data using JSON semantics.
 *
 * The JSON semantic are common to many programming languages, promising a UTF-8
 * String while making it easy to read and copy the string during debugging.
 */
SFUNC int fio_string_write_escape(fio_str_info_s *restrict dest,
                                  fio_string_realloc_fn reallocate,
                                  const void *restrict src,
                                  size_t len) {
  /* Escaping map, test if bit 64 is set or not. Created using Ruby Script:
  map = []; 256.times { |i| map << ((i > 126 || i < 35) ? 48.chr : 64.chr)  };
  map[' '.ord] = 64.chr; map['!'.ord] = 64.chr;
  ["\b","\f","\n","\r","\t",'\\','"'].each {|c| map[c.ord] = 49.chr };
  str = map.join(''); puts "static const uint8_t escape_map[256]= " +
          "\"#{str.slice(0,64)}\"" +
          "\"#{str.slice(64,64)}\"" +
          "\"#{str.slice(128,64)}\"" +
          "\"#{str.slice(192,64)}\";"
   */
  static const uint8_t escape_map[256] =
      "00000000111011000000000000000000@@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
      "@@@@@@@@@@@@@@@@@@@@@@@@@@@@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@0"
      "0000000000000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000000000000000";
  int r = 0;
  if ((!len | !src | !dest))
    return r;
  size_t extra_space = 0;
  size_t first_stop = 0;
  size_t updater = 1;
  const uint8_t *s = (const uint8_t *)src;
  const uint8_t *e = s + len;
  const uint8_t *p = s;

  /* test memory length requirements – unlikely to be avoided (len * 5) */
  for (; (p < e); ++p) {
    if ((escape_map[*p] & 64)) /* hope for compiler magic */
      continue;
    size_t valid_utf8_len = fio_utf8_char_len(p);
    if (valid_utf8_len > 1) {
      p += valid_utf8_len - 1;
      continue;
    }
    first_stop |= (0ULL - updater) & (p - s);
    updater = 0;
    /* count extra bytes */
    ++extra_space; /* the '\' character followed by escape sequence */
    /* constant-time "if" (bit mask) – known escape or \xFF / \uFFFF escaping */
    extra_space += (escape_map[*p] - 1) & (3 + ((*p < 127) << 1));
  }

  /* reserve space and copy any valid first_stop */
  /* the + 3 adds room for the likely use case of JSON: "\",\"" */
  if ((dest->capa < dest->len + extra_space + len + 1) &&
      (!reallocate ||
       reallocate(dest,
                  fio_string_capa4len(dest->len + extra_space + len + 3)))) {
    r = -1;
    len = dest->capa - (dest->len + 6);
    if (dest->capa < len + 6)
      return r;
  }

  /* copy unescaped head of string (if it's worth our time) */
  if (((!first_stop) & updater & (escape_map[*s] == 64)) || first_stop > 16) {
    if (!first_stop)
      first_stop = len;
    FIO_MEMMOVE(dest->buf + dest->len, s, first_stop);
    dest->len += first_stop;
    s += first_stop;
  }
  p = s;

  /* start copying and escaping as needed */
  for (;;) {
    if ((escape_map[*p] & 64)) {
      for (s = p; (s < e) && (escape_map[*s] & 64); ++s)
        ; /* hope for compiler magic */
      updater = s - p;
      FIO_MEMMOVE(dest->buf + dest->len, p, updater);
      dest->len += updater;
      p = s;
    }
    if (p >= e)
      break;
    size_t valid_utf8_len = fio_utf8_char_len(p);
    size_t limit = e - p;
    if (valid_utf8_len > limit)
      valid_utf8_len = limit;
    switch (valid_utf8_len) {
    case 4: dest->buf[dest->len++] = *p++; /* fall through */
    case 3: dest->buf[dest->len++] = *p++; /* fall through */
    case 2:
      dest->buf[dest->len++] = *p++; /* fall through */
      dest->buf[dest->len++] = *p++; /* fall through */
      continue;
    default: break;
    }
    // FIO_ASSERT(valid_utf8_len < 2, "valid_utf8_len error!");
    dest->buf[dest->len++] = '\\';
    uint8_t ec = *p++;
    switch (ec) {
    case '\b': dest->buf[dest->len++] = 'b'; continue;
    case '\f': dest->buf[dest->len++] = 'f'; continue;
    case '\n': dest->buf[dest->len++] = 'n'; continue;
    case '\r': dest->buf[dest->len++] = 'r'; continue;
    case '\t': dest->buf[dest->len++] = 't'; continue;
    case '\\': dest->buf[dest->len++] = '\\'; continue;
    case ' ': dest->buf[dest->len++] = ' '; continue;
    case '"': dest->buf[dest->len++] = '"'; continue;
    default:
      /* pass through character */
      first_stop = (ec > 34);
      dest->buf[dest->len - first_stop] = ec;
      /* escaping all control characters and non-UTF-8 characters */
      first_stop = (ec < 127);
      const char in_hex[2] = {(char)fio_i2c(ec >> 4), (char)fio_i2c(ec & 15)};
      dest->buf[dest->len] = 'u'; /* UTF-8 encoding (remains valid) */
      dest->buf[dest->len += first_stop] = '0';
      dest->buf[dest->len += first_stop] = '0';
      dest->buf[dest->len += first_stop] = in_hex[0];
      dest->buf[dest->len += first_stop] = in_hex[1];
      dest->len += first_stop;
    }
  }
  dest->buf[dest->len] = 0;
  return r;
}

FIO_SFUNC const uint8_t *fio___string_write_unescape_next(
    const uint8_t *restrict s,
    const uint8_t *restrict e) {
  if (*s == '\\')
    return s;
  return (const uint8_t *)FIO_MEMCHR(s, '\\', e - s);
}

FIO_SFUNC size_t
fio___string_write_unescape_diff(uint8_t *restrict dest,
                                 const uint8_t *restrict *restrict ps,
                                 const uint8_t *restrict e) {
  size_t r = 1;
  unsigned step = 1;
  const uint8_t *s = *ps;
  ++s;
  unsigned peek = ((*s == 'x') & (e - s > 2));
  peek &= (unsigned)(fio_c2i(s[peek]) < 16) & (fio_c2i(s[peek + peek]) < 16);
  step |= (peek << 1);
  // peek &= (fio_c2i(s[peek]) > 7);
  r += peek; /* assumes \xFF is unescaped as UTF-8, up to 2 bytes */

  peek = ((*s == 'u') & (e - s > 4));
  peek &= (unsigned)(fio_c2i(s[peek]) < 16) & (fio_c2i(s[peek + peek]) < 16) &
          (fio_c2i(s[peek + peek + peek]) < 16) &
          (fio_c2i(s[peek + peek + peek + peek]) < 16);
  r |= (peek << 1); /* assumes \uFFFF in maximum length, ignores UTF-16 pairs */
  step |= (peek << 2);

  s += step;
  *ps = s;
  return r;
  (void)dest;
}
FIO_IFUNC size_t
fio___string_write_unescape_write(uint8_t *restrict dest,
                                  const uint8_t *restrict *restrict ps,
                                  const uint8_t *restrict e) {
  unsigned r = 1;
  const uint8_t *restrict s = *ps;
  s += ((s + 1) < e); /* skip '\\' byte */
  switch (*s) {
  case 'b':
    *dest = '\b';
    ++s;
    break; /* from switch */
  case 'f':
    *dest = '\f';
    ++s;
    break; /* from switch */
  case 'n':
    *dest = '\n';
    ++s;
    break; /* from switch */
  case 'r':
    *dest = '\r';
    ++s;
    break; /* from switch */
  case 't':
    *dest = '\t';
    ++s;
    break; /* from switch */
  case 'u': {
    /* test UTF-8 notation */
    if ((s + 4 < e) && ((unsigned)(fio_c2i(s[1]) < 16) & (fio_c2i(s[2]) < 16) &
                        (fio_c2i(s[3]) < 16) & (fio_c2i(s[4]) < 16))) {
      uint32_t u = (((fio_c2i(s[1]) << 4) | fio_c2i(s[2])) << 8) |
                   ((fio_c2i(s[3]) << 4) | fio_c2i(s[4]));
      if ((s + 10 < e) &&
          (((fio_c2i(s[1]) << 4) | fio_c2i(s[2])) == 0xD8U && s[5] == '\\' &&
           s[6] == 'u' &&
           ((unsigned)(fio_c2i(s[7]) < 16) & (fio_c2i(s[8]) < 16) &
            (fio_c2i(s[9]) < 16) & (fio_c2i(s[10]) < 16)))) {
        /* surrogate-pair (high/low code points) */
        u = (u & 0x03FF) << 10;
        u |= (((((fio_c2i(s[7]) << 4) | fio_c2i(s[8])) << 8) |
               ((fio_c2i(s[9]) << 4) | fio_c2i(s[10]))) &
              0x03FF);
        u += 0x10000;
        s += 6;
      }
      r = fio_utf8_write(dest, u);
      s += 5;
      break; /* from switch */
    } else
      goto invalid_escape;
  }
  case 'x': { /* test for hex notation */
    if (fio_c2i(s[1]) < 16 && fio_c2i(s[2]) < 16) {
      *dest = (fio_c2i(s[1]) << 4) | fio_c2i(s[2]);
      s += 3;
      break; /* from switch */
    } else
      goto invalid_escape;
  }
  case '0':
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7': { /* test for octal notation */
    if (s[0] >= '0' && s[0] <= '7' && s[1] >= '0' && s[1] <= '7') {
      *dest = ((s[0] - '0') << 3) | (s[1] - '0');
      s += 2;
      break; /* from switch */
    } else
      goto invalid_escape;
  }
  case '"':
  case '\\':
  case '/':
  /* fall through */
  default:
  invalid_escape:
    *dest = *s++;
  }
  *ps = s;
  return r;
}
FIO_IFUNC int fio_string_write_unescape(fio_str_info_s *restrict dest,
                                        fio_string_realloc_fn alloc,
                                        const void *src,
                                        size_t len) {
  return fio___string_altering_cycle((fio___string_altering_args_s){
      .dest = dest,
      .reallocate = alloc,
      .src = src,
      .len = len,
      .next = fio___string_write_unescape_next,
      .diff = fio___string_write_unescape_diff,
      .write = fio___string_write_unescape_write,
      .skip_diff_len = 127,
      .refuse_partial = 1,
  });
}

/* *****************************************************************************
String Base32 support
***************************************************************************** */

/** Writes data to String using base64 encoding. */
SFUNC int fio_string_write_base32enc(fio_str_info_s *dest,
                                     fio_string_realloc_fn reallocate,
                                     const void *raw,
                                     size_t raw_len) {
  static const uint8_t base32ecncode[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
  int r = 0;
  size_t expected = ((raw_len * 8) / 5) + 1;
  if (fio_string___write_validate_len(dest, reallocate, &expected)) {
    return (r = -1); /* no partial encoding. */
  }
  expected = dest->len;
  size_t bits = 0, store = 0;
  for (size_t i = 0; i < raw_len; ++i) {
    store = (store << 8) | (size_t)((uint8_t *)raw)[i];
    bits += 8;
    if (bits < 25)
      continue;
    while (bits > 4) {
      uint8_t val = base32ecncode[(31U & (store >> (bits - 5)))];
      dest->buf[dest->len++] = val;
      bits -= 5;
    }
  }
  while (bits > 4) {
    uint8_t val = base32ecncode[(31U & (store >> (bits - 5)))];
    dest->buf[dest->len++] = val;
    bits -= 5;
  }
  if (bits) {
    // dest->buf[dest->len++] = base32ecncode[store & ((1U << bits) - 1)];
    dest->buf[dest->len++] = base32ecncode[31U & (store << (5 - bits))];
    dest->buf[dest->len] = '=';
    dest->len += !!((dest->len - expected) % 5);
  }
  dest->buf[dest->len] = 0;
  return r;
}

/** Writes decoded base64 data to String. */
SFUNC int fio_string_write_base32dec(fio_str_info_s *dest,
                                     fio_string_realloc_fn reallocate,
                                     const void *encoded,
                                     size_t encoded_len) {
  /* ABCDEF6HIJK3MN6PQRSTUV6XYZ234567
 a = [];
 256.times { a << 255 }
 b = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567".bytes
 b.length.times {|i| a[b[i]] = i }
 b = "abcdefghijklmnopqrstuvwxyz234567".bytes
 b.length.times {|i| a[b[i]] = i }
 b = " \r\n\t\b".bytes
 b.length.times {|i| a[b[i]] = 32 }
 a.map! {|n| n.to_s 10 }
 puts "const static uint8_t base32decode[256] = { #{a.join(", ") } }; "
*/
  static const uint8_t base32decode[256] = {
      255, 255, 255, 255, 255, 255, 255, 255, 32,  32,  32,  255, 255, 32,  255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 32,  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 26,  27,  28,  29,  30,  31,  255, 255, 255, 255,
      255, 255, 255, 255, 255, 0,   1,   2,   3,   4,   5,   6,   7,   8,   9,
      10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,
      25,  255, 255, 255, 255, 255, 255, 0,   1,   2,   3,   4,   5,   6,   7,
      8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,
      23,  24,  25,  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
      255};
  int r = 0;
  size_t expected = ((encoded_len * 5) / 8) + 1;
  if (fio_string___write_validate_len(dest, reallocate, &expected)) {
    return (r = -1); /* no partial encoding. */
  }
  size_t val = 0;
  size_t bits = 0;
  uint8_t *s = (uint8_t *)dest->buf + dest->len;
  for (size_t i = 0; i < encoded_len; ++i) {
    size_t dec = (size_t)base32decode[((uint8_t *)encoded)[i]];
    if (dec == 32)
      continue;
    if (dec > 31)
      break;
    bits += 5;
    val = (val << 5) | dec;
    if (bits < 40)
      continue;
    do {
      *s++ = (0xFF & (val >> (bits - 8)));
      bits -= 8;
    } while (bits > 7);
  }
  while (bits > 7) {
    *s++ = (0xFF & (val >> (bits - 8)));
    bits -= 8;
  }
  if (bits) { /* letfover bits considered padding */
    // *s++ = 0xFF & (val << (8 - bits));
  }
  dest->len = (size_t)(s - (uint8_t *)dest->buf);
  dest->buf[dest->len] = 0;
  return r;
}

/* *****************************************************************************
String Base64 support
***************************************************************************** */

/** Writes data to String using Base64 encoding. */
SFUNC int fio_string_write_base64enc(fio_str_info_s *dest,
                                     fio_string_realloc_fn reallocate,
                                     const void *data,
                                     size_t len,
                                     uint8_t url_encoded) {
  int r = 0;
  if (!dest || !data || !len)
    return r;
  static const char *encmap[2] = {
      /* Regular, URL encoding*/
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
  };

  /* the base64 encoding array */
  const char *encoding = encmap[!!url_encoded];

  /* base64 length and padding information */
  size_t groups = len / 3;
  const size_t mod = len - (groups * 3);
  size_t target_size = (groups + (mod != 0)) * 4;

  if (fio_string___write_validate_len(dest, reallocate, &target_size)) {
    return (r = -1); /* no partial encoding. */
  }
  char *writer = dest->buf + dest->len;
  const unsigned char *reader = (const unsigned char *)data;
  dest->len += target_size;
  /* write encoded data */
  while (groups) {
    --groups;
    const unsigned char tmp1 = *(reader++);
    const unsigned char tmp2 = *(reader++);
    const unsigned char tmp3 = *(reader++);

    *(writer++) = encoding[(tmp1 >> 2) & 63];
    *(writer++) = encoding[(((tmp1 & 3) << 4) | ((tmp2 >> 4) & 15))];
    *(writer++) = encoding[((tmp2 & 15) << 2) | ((tmp3 >> 6) & 3)];
    *(writer++) = encoding[tmp3 & 63];
  }

  /* write padding / ending */
  switch (mod) {
  case 2: {
    const unsigned char tmp1 = *(reader++);
    const unsigned char tmp2 = *(reader++);

    *(writer++) = encoding[(tmp1 >> 2) & 63];
    *(writer++) = encoding[((tmp1 & 3) << 4) | ((tmp2 >> 4) & 15)];
    *(writer++) = encoding[((tmp2 & 15) << 2)];
    *(writer++) = '=';
  } break;
  case 1: {
    const unsigned char tmp1 = *(reader++);

    *(writer++) = encoding[(tmp1 >> 2) & 63];
    *(writer++) = encoding[(tmp1 & 3) << 4];
    *(writer++) = '=';
    *(writer++) = '=';
  } break;
  }
  dest->buf[dest->len] = 0;
  return r;
}

/** Writes decoded base64 data to String. */
SFUNC int fio_string_write_base64dec(fio_str_info_s *dest,
                                     fio_string_realloc_fn reallocate,
                                     const void *encoded_,
                                     size_t len) {
  /* Base64 decoding array. Generation script (Ruby):
s = ["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
     "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_="]
valid = []; (0..255).each {|i| valid[i] = 0 };
decoder = []; (0..127).each {|i| decoder[i] = 0 };
s.each {|d| d.bytes.each_with_index { |b, i| decoder[b] = i; valid[b] = 1 } };
p valid; p decoder; nil
  */
  static const uint8_t base64_valid[256] = {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  };
  static const uint8_t base64_decodes[128] = {
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  62, 0,  62, 0,  63,
      52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0,  0,  0,  64, 0,  0,
      0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14,
      15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0,  0,  0,  0,  63,
      0,  26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
      41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0,  0,  0,  0,  0,
  };
  int r = 0;
  if (!dest || !encoded_ || !len)
    return r;
  const uint8_t *encoded = (const uint8_t *)encoded_;
  /* skip unknown data at end */
  while (len && !base64_valid[encoded[len - 1]]) {
    len--;
  }
  if (!len)
    return (r = -1);

  /* reserve memory space */
  {
    size_t required_len = (((len >> 2) * 3) + 3);
    if (fio_string___write_validate_len(dest, reallocate, &required_len)) {
      return (r = -1); /* no partial decoding. */
    };
  }

  /* decoded and count actual length */
  size_t pos = 0;
  uint8_t b64wrd[4];
  const uint8_t *stop = encoded + len;
  uint8_t *writer = (uint8_t *)dest->buf + dest->len;
  for (;;) {
    if (base64_valid[encoded[0]])
      b64wrd[pos++] = base64_decodes[encoded[0]];
    else if (!isspace(encoded[0]))
      break;
    ++encoded;
    if (pos == 4) {
      writer[0] = (b64wrd[0] << 2) | (b64wrd[1] >> 4);
      writer[1] = (b64wrd[1] << 4) | (b64wrd[2] >> 2);
      writer[2] = (b64wrd[2] << 6) | b64wrd[3];
      pos = 0;
      writer += 3;
    }
    if (encoded == stop)
      break;
  }
  switch (pos) {
  case 1: b64wrd[1] = 0; /* fall through */
  case 2: b64wrd[2] = 0; /* fall through */
  case 3: b64wrd[3] = 0; /* fall through */
  case 4:
    writer[0] = (b64wrd[0] << 2) | (b64wrd[1] >> 4);
    writer[1] = (b64wrd[1] << 4) | (b64wrd[2] >> 2);
    writer[2] = (b64wrd[2] << 6) | b64wrd[3];
    writer += 3;
  }
  writer -= (encoded[-1] == '=') + (encoded[-2] == '=');
  if (writer < ((uint8_t *)dest->buf + dest->len))
    writer = ((uint8_t *)dest->buf + dest->len);
  dest->len = (size_t)(writer - (uint8_t *)dest->buf);
  dest->buf[dest->len] = 0;
  return r;
}

/* *****************************************************************************
String URL Encoding support
***************************************************************************** */

/** Writes data to String using URL encoding (a.k.a., percent encoding). */
SFUNC int fio_string_write_url_enc(fio_str_info_s *dest,
                                   fio_string_realloc_fn reallocate,
                                   const void *data,
                                   size_t data_len) {
  static const uint8_t url_enc_map[256] = {
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0,
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2};
  int r = 0;
  /* reserve memory space */
  {
    size_t required_len = data_len;
    for (size_t i = 0; i < data_len; ++i) {
      required_len += url_enc_map[((uint8_t *)data)[i]];
    }
    if (fio_string___write_validate_len(dest, reallocate, &required_len)) {
      return (r = -1); /* no partial encoding. */
    };
  }
  for (size_t i = 0; i < data_len; ++i) {
    if (!url_enc_map[((uint8_t *)data)[i]]) {
      dest->buf[dest->len++] = ((uint8_t *)data)[i];
      continue;
    }
    dest->buf[dest->len++] = '%';
    dest->buf[dest->len++] = fio_i2c(((uint8_t *)data)[i] >> 4);
    dest->buf[dest->len++] = fio_i2c(((uint8_t *)data)[i] & 15);
  }
  dest->buf[dest->len] = 0;
  return r;
}

/** Writes decoded URL data to String. */
FIO_IFUNC int fio_string_write_url_dec_internal(
    fio_str_info_s *dest,
    fio_string_realloc_fn reallocate,
    const void *encoded,
    size_t encoded_len,
    _Bool plus_is_included) {
  int r = 0;
  if (!dest || !encoded || !encoded_len)
    return r;
  uint8_t *pr = (uint8_t *)encoded;
  uint8_t *last = pr;
  uint8_t *end = pr + encoded_len;
  if (dest->len + encoded_len >= dest->capa) { /* reserve only what we need */
    size_t act_len = 0;
    while (end > pr && (pr = (uint8_t *)FIO_MEMCHR(pr, '%', end - pr))) {
      act_len += pr - last;
      last = pr + 1;
      if (end - last > 1 && fio_c2i(last[0]) < 16 && fio_c2i(last[1]) < 16)
        last += 2;
      else if (end - last > 4 && (last[0] | 32) == 'u' &&
               fio_c2i(last[1]) < 16 && fio_c2i(last[2]) < 16 &&
               fio_c2i(last[3]) < 16 && fio_c2i(last[4]) < 16) {
        last += 5;
        act_len += 3; /* uXXXX length maxes out at 4 ... I think */
      }
      pr = last;
    }
    act_len += end - last;
    if (fio_string___write_validate_len(dest, reallocate, &act_len)) {
      return (r = -1); /* no partial decoding. */
    };
  }
  /* copy and un-encode data */
  pr = (uint8_t *)encoded;
  last = pr;
  end = pr + encoded_len;
  while (end > pr && (pr = (uint8_t *)FIO_MEMCHR(pr, '%', end - pr))) {
    const size_t slice_len = pr - last;
    if (slice_len) {
      FIO_MEMCPY(dest->buf + dest->len, last, slice_len);
      /* test for '+' in the slice that has no % characters */
      if (plus_is_included) {
        uint8_t *start_plus = (uint8_t *)dest->buf + dest->len;
        uint8_t *end_plus = start_plus + slice_len;
        while (
            start_plus && start_plus < end_plus &&
            (start_plus =
                 (uint8_t *)FIO_MEMCHR(start_plus, '+', end_plus - start_plus)))
          *(start_plus++) = ' ';
      }
    }
    dest->len += slice_len;
    last = pr + 1;
    if (end - last > 1 && fio_c2i(last[0]) < 16 && fio_c2i(last[1]) < 16) {
      dest->buf[dest->len++] = (fio_c2i(last[0]) << 4) | fio_c2i(last[1]);
      last += 2;
    } else if (end - last > 4 && (last[0] | 32) == 'u' &&
               fio_c2i(last[1]) < 16 && fio_c2i(last[2]) < 16 &&
               fio_c2i(last[3]) < 16 && fio_c2i(last[4]) < 16) {
      uint32_t u = (((fio_c2i(last[1]) << 4) | fio_c2i(last[2])) << 8) |
                   ((fio_c2i(last[3]) << 4) | fio_c2i(last[4]));
      if (end - last > 9 &&
          ((fio_c2i(last[1]) << 4) | fio_c2i(last[2])) == 0xD8U &&
          last[5] == '%' && last[6] == 'u' && fio_c2i(last[7]) < 16 &&
          fio_c2i(last[8]) < 16 && fio_c2i(last[9]) < 16 &&
          fio_c2i(last[10]) < 16) {
        /* surrogate-pair (high/low code points) */
        u = (u & 0x03FF) << 10;
        u |= (((((fio_c2i(last[7]) << 4) | fio_c2i(last[8])) << 8) |
               ((fio_c2i(last[9]) << 4) | fio_c2i(last[10]))) &
              0x03FF);
        u += 0x10000;
        last += 6;
      }
      dest->len += fio_utf8_write((uint8_t *)dest->buf + dest->len, u);
      last += 5;
    } else {
      dest->buf[dest->len++] = '%';
    }
    pr = last;
  }
  if (end > last) {
    const size_t slice_len = end - last;
    FIO_MEMCPY(dest->buf + dest->len, last, slice_len);
    /* test for '+' in the slice that has no % characters */
    if (plus_is_included) {
      uint8_t *start_plus = (uint8_t *)dest->buf + dest->len;
      uint8_t *end_plus = start_plus + slice_len;
      while (
          start_plus && start_plus < end_plus &&
          (start_plus =
               (uint8_t *)FIO_MEMCHR(start_plus, '+', end_plus - start_plus)))
        *(start_plus++) = ' ';
    }
    dest->len += slice_len;
  }
  dest->buf[dest->len] = 0;
  return r;
}

/** Writes decoded URL data to String. */
SFUNC int fio_string_write_url_dec(fio_str_info_s *dest,
                                   fio_string_realloc_fn reallocate,
                                   const void *encoded,
                                   size_t encoded_len) {
  return fio_string_write_url_dec_internal(dest,
                                           reallocate,
                                           encoded,
                                           encoded_len,
                                           1);
}

/** Writes decoded URL data to String. */
SFUNC int fio_string_write_path_dec(fio_str_info_s *dest,
                                    fio_string_realloc_fn reallocate,
                                    const void *encoded,
                                    size_t encoded_len) {
  return fio_string_write_url_dec_internal(dest,
                                           reallocate,
                                           encoded,
                                           encoded_len,
                                           0);
}

/* *****************************************************************************
String HTML escaping support
***************************************************************************** */

/** Writes HTML escaped data to a String. */
SFUNC int fio_string_write_html_escape(fio_str_info_s *dest,
                                       fio_string_realloc_fn reallocate,
                                       const void *data,
                                       size_t data_len) {
  /* produced using the following Ruby script:
    a = (0..255).to_a.map {|i| "&#x#{i.to_s(16)};" }
    must_escape = ['&', '<', '>', '"', "'", '`', '!', '@', '$', '%',
                   '(', ')', '=', '+', '{', '}', '[', ']'] # space?
    ["\b","\f","\n","\r","\t",'\\'].each {|i| a[i.ord] = i }
    (32..123).each {|i| a[i] = i.chr unless must_escape.include?(i.chr) }
    {'<': "&lt;", '>': "&gt;", '"': "&qout;", '&': "&amp;"}.each {|k,v|
       a[k.to_s.ord] = v
    }
    b = a.map {|s| s.length }
    puts "static const uint8_t html_escape_len[] = {", b.to_s.slice(1..-2), "};"
  */
  static const uint8_t html_escape_len[] = {
      5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 5, 1, 1, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6,
      6, 6, 6, 6, 6, 6, 6, 6, 1, 6, 6, 1, 6, 6, 5, 6, 6, 6, 1, 6, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 6, 4, 1, 6, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 6, 1, 1,
      6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
      6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
      6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
      6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
      6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
      6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6};
  int r = 0;
  size_t start = 0;
  size_t pos = 0;
  if (!data_len || !data || !dest)
    return r;
  { /* reserve memory space */
    size_t required_len = data_len;
    for (size_t i = 0; i < data_len; ++i) {
      required_len += html_escape_len[((uint8_t *)data)[i]];
    }
    if (fio_string___write_validate_len(dest, reallocate, &required_len)) {
      return (r = -1); /* no partial encoding. */
    };
  }
  for (;;) { /* copy and encode data */
    while (pos < data_len && html_escape_len[((uint8_t *)data)[pos]] == 1)
      ++pos;
    /* don't escape valid UTF-8 */
    if (pos < data_len)
      switch (
          fio_string_utf8_valid_code_point((void *)(((uint8_t *)data) + pos),
                                           data_len - pos)) {
      case 4: ++pos; /* fall through */
      case 3: ++pos; /* fall through */
      case 2: pos += 2; continue;
      }
    /* copy valid segment before escaping */
    if (pos != start) {
      const size_t len = pos - start;
      FIO_MEMCPY(dest->buf + dest->len, (uint8_t *)data + start, len);
      dest->len += len;
      start = pos;
    }
    if (pos == data_len)
      break;
    /* escape data */
    dest->buf[dest->len++] = '&';
    switch (((uint8_t *)data)[pos]) {
    case '<':
      dest->buf[dest->len++] = 'l';
      dest->buf[dest->len++] = 't';
      break;
    case '>':
      dest->buf[dest->len++] = 'g';
      dest->buf[dest->len++] = 't';
      break;
    case '"':
      dest->buf[dest->len++] = 'q';
      dest->buf[dest->len++] = 'u';
      dest->buf[dest->len++] = 'o';
      dest->buf[dest->len++] = 't';
      break;
    case '&':
      dest->buf[dest->len++] = 'a';
      dest->buf[dest->len++] = 'm';
      dest->buf[dest->len++] = 'p';
      break;
    default:
      dest->buf[dest->len++] = '#';
      dest->buf[dest->len++] = 'x';
      dest->len += ((dest->buf[dest->len] =
                         fio_i2c(((uint8_t *)data)[pos] >> 4)) != '0');
      dest->buf[dest->len++] = fio_i2c(((uint8_t *)data)[pos] & 15);
    }
    dest->buf[dest->len++] = ';';
    ++pos;
    start = pos;
  }
  dest->buf[dest->len] = 0;
  return r;
}

/** Writes HTML un-escaped data to a String - incomplete and minimal. */
SFUNC int fio_string_write_html_unescape(fio_str_info_s *dest,
                                         fio_string_realloc_fn reallocate,
                                         const void *data,
                                         size_t data_len) {
  int r = 0;
  struct {
    uint64_t code;
    uint32_t clen;
    uint8_t r[4];
  } html_named_codes[] = {
#define FIO___STRING_HTML_CODE_POINT(named_code, result)                       \
  {.code = *(uint64_t *)(named_code "\0\0\0\0\0\0\0\0"),                       \
   .clen = (uint32_t)(sizeof(named_code) - 1),                                 \
   .r = result}
      FIO___STRING_HTML_CODE_POINT("lt", "<"),
      FIO___STRING_HTML_CODE_POINT("gt", ">"),
      FIO___STRING_HTML_CODE_POINT("amp", "&"),
      FIO___STRING_HTML_CODE_POINT("apos", "'"),
      FIO___STRING_HTML_CODE_POINT("quot", "\""),
      FIO___STRING_HTML_CODE_POINT("nbsp", "\xC2\xA0"),
      FIO___STRING_HTML_CODE_POINT("tab", "\t"),
      FIO___STRING_HTML_CODE_POINT("ge", "≥"),
      FIO___STRING_HTML_CODE_POINT("le", "≤"),
      FIO___STRING_HTML_CODE_POINT("ne", "≠"),
      FIO___STRING_HTML_CODE_POINT("copy", "©"),
      FIO___STRING_HTML_CODE_POINT("raquo", "»"),
      FIO___STRING_HTML_CODE_POINT("laquo", "«"),
      FIO___STRING_HTML_CODE_POINT("rdquo", "”"),
      FIO___STRING_HTML_CODE_POINT("ldquo", "“"),
      FIO___STRING_HTML_CODE_POINT("reg", "®"),
      FIO___STRING_HTML_CODE_POINT("asymp", "≈"),
      FIO___STRING_HTML_CODE_POINT("bdquo", "„"),
      FIO___STRING_HTML_CODE_POINT("bull", "•"),
      FIO___STRING_HTML_CODE_POINT("cent", "¢"),
      FIO___STRING_HTML_CODE_POINT("euro", "€"),
      FIO___STRING_HTML_CODE_POINT("dagger", "†"),
      FIO___STRING_HTML_CODE_POINT("deg", "°"),
      FIO___STRING_HTML_CODE_POINT("frac14", "¼"),
      FIO___STRING_HTML_CODE_POINT("frac12", "½"),
      FIO___STRING_HTML_CODE_POINT("frac34", "¾"),
      FIO___STRING_HTML_CODE_POINT("hellip", "…"),
      FIO___STRING_HTML_CODE_POINT("lsquo", "‘"),
      FIO___STRING_HTML_CODE_POINT("mdash", "—"),
      FIO___STRING_HTML_CODE_POINT("middot", "·"),
      FIO___STRING_HTML_CODE_POINT("ndash", "–"),
      FIO___STRING_HTML_CODE_POINT("para", "¶"),
      FIO___STRING_HTML_CODE_POINT("plusmn", "±"),
      FIO___STRING_HTML_CODE_POINT("pound", "£"),
      FIO___STRING_HTML_CODE_POINT("prime", "′"),
      FIO___STRING_HTML_CODE_POINT("rsquo", "’"),
      FIO___STRING_HTML_CODE_POINT("sbquo", "‚"),
      FIO___STRING_HTML_CODE_POINT("sect", "§"),
      FIO___STRING_HTML_CODE_POINT("trade", "™"),
      FIO___STRING_HTML_CODE_POINT("yen", "¥"),
  };
  if (!dest || !data || !data_len)
    return r;
  size_t reduced = data_len + dest->len;
  uint8_t *start = (uint8_t *)data;
  uint8_t *const end = start + data_len;
  if (dest->len + data_len >= dest->capa) { /* reserve only what we need */
    reduced = data_len;
    uint8_t *del = start;
    while (end > del && (del = (uint8_t *)FIO_MEMCHR(del, '&', end - del))) {
      uint8_t *tmp = del++;
      /* note that in some cases the `;` might be dropped (history) */
      if (del[0] == '#') {
        ++del;
        del += (del[0] == 'x');
        uint64_t num =
            (del[-1] == 'x' ? fio_atol16u : fio_atol10u)((char **)&del);
        if (del >= end || num > 65535) /* untrusted result */
          continue;
        del += (*del == ';');
        reduced -= (del - tmp);
        reduced += fio_utf8_code_len((uint32_t)num);
        continue;
      }
      union {
        uint64_t u64;
        uint8_t u8[8];
      } u;
      for (size_t i = 0;
           i < sizeof(html_named_codes) / sizeof(html_named_codes[0]);
           ++i) {
        u.u64 = 0;
        for (size_t p = 0; p < html_named_codes[i].clen; ++p)
          u.u8[p] = del[p] | 32;
        if (u.u64 != html_named_codes[i].code)
          continue;
        del += html_named_codes[i].clen;
        if (del > end)
          break;
        del += (del < end && del[0] == ';');
        reduced -= (del - tmp);
        for (size_t j = 0; html_named_codes[i].r[j]; ++j)
          ++reduced;
        break;
      }
    }
    if (fio_string___write_validate_len(dest, reallocate, &reduced)) {
      return (r = -1); /* no partial decoding. */
    }
    reduced += dest->len;
  }
  { /* copy and unescape data */
    uint8_t *del = start = (uint8_t *)data;
    while (end > (start = del) &&
           (del = (uint8_t *)FIO_MEMCHR(del, '&', end - del))) {
      if (start != del) {
        const size_t len = del - start;
        FIO_MEMCPY(dest->buf + dest->len, start, len);
        dest->len += len;
        start = del;
      }
      ++del;
      if (del == end)
        break;
      if (del[0] == '#') {
        ++del;
        if (del + 2 > end)
          break;
        del += (del[0] == 'x');
        uint64_t num =
            (del[-1] == 'x' ? fio_atol16u : fio_atol10u)((char **)&del);
        if (*del != ';' || num > 65535)
          goto untrusted_no_encode;
        dest->len +=
            fio_utf8_write((uint8_t *)dest->buf + dest->len, (uint32_t)num);
        del += (del < end && del[0] == ';');
        continue;
      }
      /* note that in some cases the `;` might be dropped (history) */
      for (size_t i = 0;
           i < sizeof(html_named_codes) / sizeof(html_named_codes[0]);
           ++i) {
        union {
          uint64_t u64;
          uint8_t u8[8];
        } u = {0};
        for (size_t p = 0; p < html_named_codes[i].clen; ++p)
          u.u8[p] = del[p] | 32;
        if (u.u64 != html_named_codes[i].code)
          continue;
        del += html_named_codes[i].clen;
        del += (del < end && del[0] == ';');
        start = del;
        for (size_t j = 0; html_named_codes[i].r[j]; ++j) {
          dest->buf[dest->len++] = html_named_codes[i].r[j];
        }
        break;
      }
      if (start == del)
        continue;
    untrusted_no_encode: /* untrusted, don't decode */
      del += (del < end && del[0] == ';');
      FIO_MEMCPY(dest->buf + dest->len, start, del - start);
      dest->len += del - start;
    }
  }
  if (start < end) {
    const size_t len = end - start;
    FIO_MEMCPY(dest->buf + dest->len, start, len);
    dest->len += len;
  }
  dest->buf[dest->len] = 0;
  FIO_ASSERT_DEBUG(dest->len < reduced + 1,
                   "string HTML unescape reduced calculation error");
  return r;
}

/* *****************************************************************************
String File Reading support
***************************************************************************** */

FIO_IFUNC intptr_t fio___string_fd_normalise_offset(intptr_t i,
                                                    size_t file_len) {
  if (i < 0) {
    i += (intptr_t)file_len + 1;
    if (i < 0)
      i = 0;
  }
  return i;
}

/**
 * Writes up to `limit` bytes from `fd` into `dest`, starting at `start_at`.
 *
 * If `limit` is 0 (or less than 0) data will be written until EOF.
 *
 * If `start_at` is negative, position will be calculated from the end of the
 * file where `-1 == EOF`.
 *
 * Note: this will fail unless used on actual files (not sockets, not pipes).
 * */
SFUNC int fio_string_readfd(fio_str_info_s *dest,
                            fio_string_realloc_fn reallocate,
                            int fd,
                            intptr_t start_at,
                            size_t limit) {
  int r = 0;
  if (!dest) {
    return r;
  }
  size_t file_len = fio_fd_size(fd);
  start_at = fio___string_fd_normalise_offset(start_at, file_len);
  if (!limit || file_len < (size_t)(limit + start_at)) {
    limit = (intptr_t)file_len - start_at;
  }
  if (!file_len || !limit || (size_t)start_at >= file_len) {
    return (r = -1);
  }
  r = fio_string___write_validate_len(dest, reallocate, &limit);
  size_t added = fio_fd_read(fd, dest->buf + dest->len, limit, (off_t)start_at);
  dest->len += added;
  dest->buf[dest->len] = 0;
  return r;
}

/**
 * Opens the file `filename` and pastes it's contents (or a slice ot it) at
 * the end of the String. If `limit == 0`, than the data will be read until
 * EOF.
 *
 * If the file can't be located, opened or read, or if `start_at` is beyond
 * the EOF position, NULL is returned in the state's `data` field.
 */
SFUNC int fio_string_readfile(fio_str_info_s *dest,
                              fio_string_realloc_fn reallocate,
                              const char *filename,
                              intptr_t start_at,
                              size_t limit) {
  int r = -1;
  int fd = fio_filename_open(filename, O_RDONLY);
  if (fd == -1)
    return r;
  r = fio_string_readfd(dest, reallocate, fd, start_at, limit);
  close(fd);
  return r;
}

/**
 * Writes up to `limit` bytes from `fd` into `dest`, starting at `start_at`
 * and ending at the first occurrence of `token`.
 *
 * If `limit` is 0 (or less than 0) as much data as may be required will be
 * written.
 *
 * If `start_at` is negative, position will be calculated from the end of the
 * file where `-1 == EOF`.
 *
 * Note: this will fail unless used on actual seekable files (not sockets, not
 * pipes).
 * */
SFUNC int fio_string_getdelim_fd(fio_str_info_s *dest,
                                 fio_string_realloc_fn reallocate,
                                 int fd,
                                 intptr_t start_at,
                                 char delim,
                                 size_t limit) {
  int r = -1;
  if (!dest || fd == -1)
    return (r = 0);
  size_t file_len = fio_fd_size(fd);
  if (!file_len)
    return r;
  start_at = fio___string_fd_normalise_offset(start_at, file_len);
  if ((size_t)start_at >= file_len)
    return r;
  size_t index = fio_fd_find_next(fd, delim, (size_t)start_at);
  if (index == FIO_FD_FIND_EOF)
    return r;
  if (limit < 1 || limit > (index - start_at) + 1) {
    limit = (index - start_at) + 1;
  }

  r = fio_string___write_validate_len(dest, reallocate, &limit);
  size_t added = fio_fd_read(fd, dest->buf + dest->len, limit, (off_t)start_at);
  dest->len += added;
  dest->buf[dest->len] = 0;
  return r;
}

/**
 * Opens the file `filename`, calls `fio_string_getdelim_fd` and closes the
 * file.
 */
SFUNC int fio_string_getdelim_file(fio_str_info_s *dest,
                                   fio_string_realloc_fn reallocate,
                                   const char *filename,
                                   intptr_t start_at,
                                   char delim,
                                   size_t limit) {
  int r = -1;
  int fd = fio_filename_open(filename, O_RDONLY);
  if (fd == -1)
    return r;
  r = fio_string_getdelim_fd(dest, reallocate, fd, start_at, delim, limit);
  close(fd);
  return r;
}

/* *****************************************************************************
Binary String Type - Embedded Strings
***************************************************************************** */
/** default reallocation callback implementation */
SFUNC int fio_bstr_reallocate(fio_str_info_s *dest, size_t len) {
  fio___bstr_meta_s *bstr_m = NULL;
  size_t new_capa = fio_string_capa4len(len + sizeof(bstr_m[0]));
  if (FIO_UNLIKELY(new_capa > (size_t)0xFFFFFFFFULL))
    new_capa = (size_t)0x0FFFFFFFFULL + sizeof(bstr_m[0]);
  if (dest->capa < fio_string_capa4len(sizeof(bstr_m[0])))
    goto copy_the_string;
  bstr_m = (fio___bstr_meta_s *)FIO_MEM_REALLOC_(
      ((fio___bstr_meta_s *)dest->buf - 1),
      sizeof(bstr_m[0]) + dest->capa,
      new_capa,
      FIO___BSTR_META(dest->buf)->len + sizeof(bstr_m[0]));
  if (!bstr_m)
    return -1;
update_metadata:
  dest->buf = (char *)(bstr_m + 1);
  dest->capa = new_capa - sizeof(bstr_m[0]);
  bstr_m->capa = (uint32_t)dest->capa;
  return 0;

copy_the_string:
  bstr_m = (fio___bstr_meta_s *)FIO_MEM_REALLOC_(NULL, 0, new_capa, 0);
  if (!bstr_m)
    return -1;
  if (!FIO_MEM_REALLOC_IS_SAFE_)
    *bstr_m = (fio___bstr_meta_s){0};
  FIO_LEAK_COUNTER_ON_ALLOC(fio_bstr_s);
  if (dest->len) {
    FIO_MEMCPY((bstr_m + 1), dest->buf, dest->len + 1);
    bstr_m->len = (uint32_t)dest->len;
  }
  if (dest->capa)
    fio_bstr_free(dest->buf);
  goto update_metadata;
}

/* *****************************************************************************
String Core Cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_STR
#endif /* H__FIO_STR__H */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_MUSTACHE module    /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        Mustache-ish Template Engine




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_MUSTACHE) && !defined(FIO___RECURSIVE_INCLUDE) &&              \
    !defined(H___FIO_MUSTACHE___H)
#define H___FIO_MUSTACHE___H

/* *****************************************************************************
Settings
***************************************************************************** */

#ifndef FIO_MUSTACHE_MAX_DEPTH
/** The maximum depth of a template's context */
#define FIO_MUSTACHE_MAX_DEPTH 128
#endif

#ifndef FIO_MUSTACHE_PRESERVE_PADDING
/** Preserves padding for stand-alone variables and partial templates */
#define FIO_MUSTACHE_PRESERVE_PADDING 0
#endif
#ifndef FIO_MUSTACHE_LAMBDA_SUPPORT
/** Supports raw text for lambda style languages. */
#define FIO_MUSTACHE_LAMBDA_SUPPORT 0
#endif
#ifndef FIO_MUSTACHE_ISOLATE_PARTIALS
/** Limits the scope of partial templates to the context of their section. */
#define FIO_MUSTACHE_ISOLATE_PARTIALS 1
#endif

/* *****************************************************************************
Mustache Parser / Builder API
***************************************************************************** */

typedef struct fio_mustache_s fio_mustache_s;
typedef struct fio_mustache_bargs_s fio_mustache_bargs_s;

typedef struct {
  /** The file's content (if pre-loaded) */
  fio_buf_info_s data;
  /** The file's name (even if preloaded, used for partials load paths) */
  fio_buf_info_s filename;
  /** Loads the file's content, returning a `fio_buf_info_s` structure. */
  fio_buf_info_s (*load_file_data)(fio_buf_info_s filename, void *udata);
  /** Frees the file's content from its `fio_buf_info_s` structure. */
  void (*free_file_data)(fio_buf_info_s file_data, void *udata);
  /** Called when YAML front matter data was found. */
  void (*on_yaml_front_matter)(fio_buf_info_s yaml_front_matter, void *udata);
  /** Opaque user data. */
  void *udata;
} fio_mustache_load_args_s;

/* Allocates a new object on the heap and initializes it's memory. */
SFUNC fio_mustache_s *fio_mustache_load(fio_mustache_load_args_s settings);
/* Allocates a new object on the heap and initializes it's memory. */
#define fio_mustache_load(...)                                                 \
  fio_mustache_load((fio_mustache_load_args_s){__VA_ARGS__})

/* Frees the mustache template object (or reduces it's reference count). */
SFUNC void fio_mustache_free(fio_mustache_s *m);

/** Increases the mustache template's reference count. */
SFUNC fio_mustache_s *fio_mustache_dup(fio_mustache_s *m);

struct fio_mustache_bargs_s {
  /* callback should write `txt` to output and return updated `udata.` */
  void *(*write_text)(void *udata, fio_buf_info_s txt);
  /* same as `write_text`, but should also  HTML escape (sanitize) data. */
  void *(*write_text_escaped)(void *udata, fio_buf_info_s raw);
  /* callback should return a new context pointer with the value of `name`. */
  void *(*get_var)(void *ctx, fio_buf_info_s name);
  /* if context is an Array, should return its length. */
  size_t (*array_length)(void *ctx);
  /* if context is an Array, should return a context pointer @ index. */
  void *(*get_var_index)(void *ctx, size_t index);
  /* should return the String value of context `var` as a `fio_buf_info_s`. */
  fio_buf_info_s (*var2str)(void *var);
  /* should return non-zero if the context pointer refers to a valid value. */
  int (*var_is_truthful)(void *ctx);
  /* callback signals that the `ctx` context pointer is no longer in use. */
  void (*release_var)(void *ctx);
  /* returns non-zero if `ctx` is a lambda and handles section manually. */
  int (*is_lambda)(void **udata,
                   void *ctx,
                   fio_buf_info_s raw_template_section);
  /* the root context for finding named values. */
  void *ctx;
  /* opaque user data (settable as well as readable), the final return value. */
  void *udata;
};

/** Builds the template, returning the final value of `udata` (or NULL). */
SFUNC void *fio_mustache_build(fio_mustache_s *m, fio_mustache_bargs_s);
#define fio_mustache_build(m, ...)                                             \
  fio_mustache_build((m), ((fio_mustache_bargs_s){__VA_ARGS__}))

/* *****************************************************************************
Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)
FIO_LEAK_COUNTER_DEF(fio_mustache_s)

/* *****************************************************************************
Instructions (relative state)

All instructions are 1 byte long with optional extra data.

Instruction refer to offsets rather than absolute values.
***************************************************************************** */
/* for ease of use, instructions are always a 1 byte numeral, */
typedef enum {
  FIO___MUSTACHE_I_STACK_POP,    /* 0 extra data (marks end of array / list)? */
  FIO___MUSTACHE_I_STACK_PUSH,   /* 32 bit extra data (goes to position) */
  FIO___MUSTACHE_I_GOTO_PUSH,    /* 32 bit extra data (goes to position) */
  FIO___MUSTACHE_I_TXT,          /* 16 bits length + data */
  FIO___MUSTACHE_I_VAR,          /* 16 bits length + data */
  FIO___MUSTACHE_I_VAR_RAW,      /* 16 bits length + data */
  FIO___MUSTACHE_I_ARY,          /* 16 bits length + 32 bit skip-pos + data */
  FIO___MUSTACHE_I_MISSING,      /* 16 bits length + 32 bit skip-pos + data */
  FIO___MUSTACHE_I_PADDING_PUSH, /* 16 bits length + data */
  FIO___MUSTACHE_I_PADDING_POP,  /* 0 extra data */
#if FIO_MUSTACHE_PRESERVE_PADDING
  FIO___MUSTACHE_I_VAR_PADDED,
  FIO___MUSTACHE_I_VAR_RAW_PADDED,
#endif
#if FIO_MUSTACHE_LAMBDA_SUPPORT
  FIO___MUSTACHE_I_METADATA, /* raw text data, written for lambda support */
#endif
} fio___mustache_inst_e;
/* *****************************************************************************
Instructions - Main processor
***************************************************************************** */

typedef struct fio___mustache_bldr_s {
  char *root;
  struct fio___mustache_bldr_s *prev;
  void *ctx;
  fio_buf_info_s padding;
  fio_mustache_bargs_s *args;
#if FIO_MUSTACHE_ISOLATE_PARTIALS
  uint32_t stop;
#endif
} fio___mustache_bldr_s;

FIO_SFUNC char *fio___mustache_i_stack_pop(char *p, fio___mustache_bldr_s *);
FIO_SFUNC char *fio___mustache_i_stack_push(char *p, fio___mustache_bldr_s *);
FIO_SFUNC char *fio___mustache_i_goto_push(char *p, fio___mustache_bldr_s *);
FIO_SFUNC char *fio___mustache_i_txt(char *p, fio___mustache_bldr_s *);
FIO_SFUNC char *fio___mustache_i_var(char *p, fio___mustache_bldr_s *);
FIO_SFUNC char *fio___mustache_i_var_raw(char *p, fio___mustache_bldr_s *);
FIO_SFUNC char *fio___mustache_i_ary(char *p, fio___mustache_bldr_s *);
FIO_SFUNC char *fio___mustache_i_missing(char *p, fio___mustache_bldr_s *);
FIO_SFUNC char *fio___mustache_i_padding_push(char *p, fio___mustache_bldr_s *);
FIO_SFUNC char *fio___mustache_i_padding_pop(char *p, fio___mustache_bldr_s *);
#if FIO_MUSTACHE_PRESERVE_PADDING
FIO_SFUNC char *fio___mustache_i_var_padded(char *p, fio___mustache_bldr_s *);
FIO_SFUNC char *fio___mustache_i_var_raw_padded(char *,
                                                fio___mustache_bldr_s *);
#endif
#if FIO_MUSTACHE_LAMBDA_SUPPORT
FIO_SFUNC char *fio___mustache_i_metadata(char *p, fio___mustache_bldr_s *);
#endif

FIO_SFUNC void *fio___mustache_build_section(char *p, fio___mustache_bldr_s a) {
  static char *(*map[])(char *, fio___mustache_bldr_s *) = {
    [FIO___MUSTACHE_I_STACK_POP] = fio___mustache_i_stack_pop,
    [FIO___MUSTACHE_I_STACK_PUSH] = fio___mustache_i_stack_push,
    [FIO___MUSTACHE_I_GOTO_PUSH] = fio___mustache_i_goto_push,
    [FIO___MUSTACHE_I_TXT] = fio___mustache_i_txt,
    [FIO___MUSTACHE_I_VAR] = fio___mustache_i_var,
    [FIO___MUSTACHE_I_VAR_RAW] = fio___mustache_i_var_raw,
    [FIO___MUSTACHE_I_ARY] = fio___mustache_i_ary,
    [FIO___MUSTACHE_I_MISSING] = fio___mustache_i_missing,
    [FIO___MUSTACHE_I_PADDING_PUSH] = fio___mustache_i_padding_push,
    [FIO___MUSTACHE_I_PADDING_POP] = fio___mustache_i_padding_pop,
#if FIO_MUSTACHE_PRESERVE_PADDING
    [FIO___MUSTACHE_I_VAR_PADDED] = fio___mustache_i_var_padded,
    [FIO___MUSTACHE_I_VAR_RAW_PADDED] = fio___mustache_i_var_raw_padded,
#endif
#if FIO_MUSTACHE_LAMBDA_SUPPORT
    [FIO___MUSTACHE_I_METADATA] = fio___mustache_i_metadata,
#endif

  };
  while (p)
    p = map[(uint8_t)(p[0])](p, &a);
  return a.args->udata;
}

/* *****************************************************************************
Instructions - Helpers
***************************************************************************** */

/* consumes `val_name`, in whole or in part, returning the variable found.
 * sets `val_name` to the unconsumed partial remaining.
 */
FIO_IFUNC void *fio___mustache_get_var_in_context(fio_mustache_bargs_s *a,
                                                  void *ctx,
                                                  fio_buf_info_s *val_name) {
  void *v = ctx;
  v = a->get_var(ctx, *val_name);
  if (v) {
    val_name->len = 0;
    return v;
  }
  char *s = val_name->buf;
  char *end = val_name->buf + val_name->len;
  for (;;) {
    if (s == end)
      return v;
    s = (char *)FIO_MEMCHR(s, '.', (size_t)(end - s));
    if (!s)
      return v;
    v = a->get_var(ctx,
                   FIO_BUF_INFO2(val_name->buf, (size_t)(s - val_name->buf)));
    ++s;
    if (!v)
      continue;
    val_name->buf = s;
    val_name->len = (size_t)(end - s);
    return v;
  }
}

FIO_IFUNC void *fio___mustache_get_var(fio___mustache_bldr_s *b,
                                       fio_buf_info_s val_name) {
  void *v = b->ctx;
  if (val_name.len == 1 && val_name.buf[0] == '.')
    return v;
  for (;;) {
    if (b->ctx)
      v = fio___mustache_get_var_in_context(b->args, b->ctx, &val_name);
    if (v)
      break;
#if FIO_MUSTACHE_ISOLATE_PARTIALS
    if (b->stop)
      return v;
#endif
    b = b->prev;
    if (!b)
      return v;
  }
  while (val_name.len && v)
    v = fio___mustache_get_var_in_context(b->args, v, &val_name);
  return v;
}

FIO_SFUNC void fio___mustache_write_padding(fio___mustache_bldr_s *b) {
  while (b && b->padding.len) {
    if (b->padding.buf) {
      b->args->udata = b->args->write_text(b->args->udata, b->padding);
    }
    b = b->prev;
  }
}

FIO_SFUNC void fio___mustache_write_text_simple(
    fio___mustache_bldr_s *b,
    fio_buf_info_s txt,
    void *(*writer)(void *, fio_buf_info_s txt)) {
  b->args->udata = writer(b->args->udata, txt);
}

FIO_SFUNC void fio___mustache_write_text_complex(
    fio___mustache_bldr_s *b,
    fio_buf_info_s txt,
    void *(*writer)(void *, fio_buf_info_s txt)) {
  const char *end = txt.buf + txt.len;
  for (;;) {
    char *pos = (char *)FIO_MEMCHR(txt.buf, '\n', (size_t)(end - txt.buf));
    if (!pos)
      break;
    ++pos;
    if (txt.buf[0] != '\n' || (size_t)(pos - txt.buf) > 1)
      fio___mustache_write_padding(b);
    b->args->udata =
        writer(b->args->udata, FIO_BUF_INFO2(txt.buf, (size_t)(pos - txt.buf)));
    txt.buf = pos;
    if (pos < end)
      continue;
    return;
  }
  if (txt.buf < end) {
    fio___mustache_write_padding(b);
    b->args->udata =
        writer(b->args->udata, FIO_BUF_INFO2(txt.buf, (size_t)(end - txt.buf)));
  }
}

FIO_IFUNC void fio___mustache_writer_route(
    fio___mustache_bldr_s *b,
    fio_buf_info_s txt,
    void *(*writer)(void *, fio_buf_info_s txt)) {
  void (*router[2])(fio___mustache_bldr_s *,
                    fio_buf_info_s txt,
                    void *(*writer)(void *, fio_buf_info_s txt)) = {
      fio___mustache_write_text_complex,
      fio___mustache_write_text_simple};
  router[!(b->padding.len)](b, txt, writer);
}

/* *****************************************************************************
Instruction Implementations
***************************************************************************** */

FIO_SFUNC char *fio___mustache_i_stack_pop(char *p, fio___mustache_bldr_s *b) {
  return NULL;
  (void)p, (void)b;
}
FIO_SFUNC char *fio___mustache_i_stack_push(char *p, fio___mustache_bldr_s *b) {
  char *npos = p + 5;
  p = b->root + fio_buf2u32u(p + 1);
  fio___mustache_bldr_s builder = {
    .root = b->root,
    .prev = b,
#if FIO_MUSTACHE_ISOLATE_PARTIALS
    .ctx = b->ctx,
#endif
    .padding = FIO_BUF_INFO2(NULL, b->padding.len),
    .args = b->args,
#if FIO_MUSTACHE_ISOLATE_PARTIALS
    .stop = 1,
#endif
  };
  fio___mustache_build_section(npos, builder);
  return p;
}
FIO_SFUNC char *fio___mustache_i_goto_push(char *p, fio___mustache_bldr_s *b) {
  char *npos = b->root + fio_buf2u32u(p + 1);
  fio___mustache_bldr_s builder = {
    .root = b->root,
    .prev = b,
#if FIO_MUSTACHE_ISOLATE_PARTIALS
    .ctx = b->ctx,
#endif
    .padding = FIO_BUF_INFO2(NULL, b->padding.len),
    .args = b->args,
#if FIO_MUSTACHE_ISOLATE_PARTIALS
    .stop = 1,
#endif
  };
  fio___mustache_build_section(npos, builder);
  p += 5;
  return p;
}
FIO_SFUNC char *fio___mustache_i_txt(char *p, fio___mustache_bldr_s *b) {
  fio_buf_info_s txt = FIO_BUF_INFO2(p + 3, fio_buf2u16u(p + 1));
  p = txt.buf + txt.len;
  fio___mustache_writer_route(b, txt, b->args->write_text);
  return p;
}

FIO_IFUNC char *fio___mustache_i_var_internal(
    char *p,
    fio___mustache_bldr_s *b,
    void *(*writer)(void *, fio_buf_info_s txt)) {
  fio_buf_info_s var = FIO_BUF_INFO2(p + 3, fio_buf2u16u(p + 1));
  p = var.buf + var.len;
  void *v = fio___mustache_get_var(b, var);
  if (!v)
    return p;
  var = b->args->var2str(v);
  b->args->release_var(v);
#if FIO_MUSTACHE_PRESERVE_PADDING
  fio___mustache_writer_route(b, var, writer);
#else
  fio___mustache_write_padding(b);
  b->args->udata = writer(b->args->udata, var);
#endif
  return p;
}
FIO_SFUNC char *fio___mustache_i_var(char *p, fio___mustache_bldr_s *b) {
  return fio___mustache_i_var_internal(p, b, b->args->write_text_escaped);
}
FIO_SFUNC char *fio___mustache_i_var_raw(char *p, fio___mustache_bldr_s *b) {
  return fio___mustache_i_var_internal(p, b, b->args->write_text);
}

FIO_SFUNC char *fio___mustache_i_ary(char *p, fio___mustache_bldr_s *b) {
  fio_buf_info_s var = FIO_BUF_INFO2(p + 7, fio_buf2u16u(p + 1));
  uint32_t skip_pos = fio_buf2u32u(p + 3);
  p = b->root + skip_pos;
#if FIO_MUSTACHE_LAMBDA_SUPPORT
  fio_buf_info_s section_raw_txt = FIO_BUF_INFO2(NULL, 0);
  if (p[0] == FIO___MUSTACHE_I_METADATA) {
    section_raw_txt = FIO_BUF_INFO2(p + 3, fio_buf2u16u(p + 1));
    p = section_raw_txt.buf + section_raw_txt.len;
  }
#else
  const fio_buf_info_s section_raw_txt = FIO_BUF_INFO2(NULL, 0);
#endif

  void *v = fio___mustache_get_var(b, var);
  if (!(b->args->var_is_truthful(v)))
    return p;
  size_t index = 0;
  const size_t ary_len = b->args->array_length(v);
  void *nctx = v;
  if (ary_len)
    nctx = b->args->get_var_index(v, index);
  for (;;) {
    ++index;
    fio___mustache_bldr_s builder = {
        .root = b->root,
        .prev = b,
        .ctx = nctx,
        .padding = FIO_BUF_INFO2(NULL, b->padding.len),
        .args = b->args,
    };
    if (!b->args->is_lambda(&(b->args->udata), nctx, section_raw_txt)) {
      fio___mustache_build_section(var.buf + var.len, builder);
    }
    b->args->release_var(nctx);
    if (index >= ary_len) {
      if (nctx != v)
        b->args->release_var(v);
      return p;
    }
    nctx = b->args->get_var_index(v, index);
  }
}
FIO_SFUNC char *fio___mustache_i_missing(char *p, fio___mustache_bldr_s *b) {
  fio_buf_info_s var = FIO_BUF_INFO2(p + 7, fio_buf2u16u(p + 1));
  uint32_t skip_pos = fio_buf2u32u(p + 3);
  p = b->root + skip_pos;

  void *v = fio___mustache_get_var(b, var);
  if (b->args->var_is_truthful(v)) {
    b->args->release_var(v);
    return p;
  }

  fio___mustache_bldr_s builder = {
      .root = b->root,
      .prev = b,
      .padding = FIO_BUF_INFO2(NULL, b->padding.len),
      .args = b->args,
  };
  fio___mustache_build_section(var.buf + var.len, builder);
  return p;
}

FIO_SFUNC char *fio___mustache_i_padding_push(char *p,
                                              fio___mustache_bldr_s *b) {
  b->padding = FIO_BUF_INFO2(p + 3, fio_buf2u16u(p + 1));
  return p + 3 + b->padding.len;
}
FIO_SFUNC char *fio___mustache_i_padding_pop(char *p,
                                             fio___mustache_bldr_s *b) {
  b->padding = FIO_BUF_INFO2(NULL, 0);
  if (b->prev)
    b->padding.len = b->prev->padding.len;
  return p + 1;
}

#if FIO_MUSTACHE_PRESERVE_PADDING

FIO_SFUNC char *fio___mustache_i_var_padded(char *p, fio___mustache_bldr_s *b) {
  fio_buf_info_s var = FIO_BUF_INFO2(p + 5, fio_buf2u16u(p + 1));
  fio_buf_info_s padding = FIO_BUF_INFO2(p + 5 + var.len, fio_buf2u16u(p + 3));
  p = padding.buf + padding.len;
  void *v = fio___mustache_get_var(b, var);
  if (!v)
    return p;
  var = b->args->var2str(v);
  if (!var.len)
    goto done;
  fio___mustache_bldr_s b2 = *b;
  b2.padding = padding;
  fio___mustache_writer_route(&b2, var, b->args->write_text_escaped);
done:
  b->args->release_var(v);
  return p;
}
FIO_SFUNC char *fio___mustache_i_var_raw_padded(char *p,
                                                fio___mustache_bldr_s *b) {
  fio_buf_info_s var = FIO_BUF_INFO2(p + 5, fio_buf2u16u(p + 1));
  fio_buf_info_s padding = FIO_BUF_INFO2(p + 5 + var.len, fio_buf2u16u(p + 3));
  p = padding.buf + padding.len;
  void *v = fio___mustache_get_var(b, var);
  if (!v)
    return p;
  var = b->args->var2str(v);
  if (!var.len)
    goto done;
  fio___mustache_bldr_s b2 = *b;
  b2.padding = padding;
  fio___mustache_writer_route(&b2, var, b->args->write_text);
  b->args->release_var(v);
  return p;
}

#endif

#if FIO_MUSTACHE_LAMBDA_SUPPORT
FIO_SFUNC char *fio___mustache_i_metadata(char *p, fio___mustache_bldr_s *b) {
  uint32_t len = fio_buf2u16u(p + 1);
  return p + 3 + len;
  (void)b;
}
#endif

/* *****************************************************************************
Mustache delimiter testing
***************************************************************************** */
FIO_SFUNC _Bool fio___mustache_delcmp1(const char *restrict a,
                                       const char *restrict b) {
  return 1;
  (void)a, (void)b;
}
FIO_SFUNC _Bool fio___mustache_delcmp2(const char *restrict a,
                                       const char *restrict b) {
  return a[1] == b[1];
}
FIO_SFUNC _Bool fio___mustache_delcmp3(const char *restrict a,
                                       const char *restrict b) {
  return a[1] == b[1] && a[2] == b[2];
}
FIO_SFUNC _Bool fio___mustache_delcmp4(const char *restrict a,
                                       const char *restrict b) {
  return a[1] == b[1] && a[2] == b[2] && a[3] == b[3];
}

typedef struct fio___mustache_delimiter_s {
  struct {
    _Bool (*cmp)(const char *restrict, const char *restrict);
    uint32_t len;
    char buf[4];
  } in, out;
} fio___mustache_delimiter_s;

FIO_IFUNC fio___mustache_delimiter_s fio___mustache_delimiter_init(void) {
  fio___mustache_delimiter_s r = {
      .in = {.cmp = fio___mustache_delcmp2, .len = 2, .buf = {'{', '{'}},
      .out = {.cmp = fio___mustache_delcmp2, .len = 2, .buf = {'}', '}'}},
  };
  return r;
}

/* *****************************************************************************
Parser type & helpers
***************************************************************************** */

typedef struct fio___mustache_parser_s {
  char *root;
  struct fio___mustache_parser_s *prev;
  fio_mustache_load_args_s *args;
  fio___mustache_delimiter_s delim;
  fio_buf_info_s fname;
  fio_buf_info_s path;
  fio_buf_info_s backwards;
  fio_buf_info_s forwards;
  uint32_t starts_at;
  uint32_t depth;
  uint32_t dirty;
} fio___mustache_parser_s;

/* *****************************************************************************
Template file loading
***************************************************************************** */
FIO_SFUNC fio_buf_info_s
fio___mustache_load_template(fio___mustache_parser_s *p, fio_buf_info_s fname) {
  /* Attempt to load templates in the following order:
   * 1. Calling template folder
   * 2. Parent calling folder (recursively)?
   * 3. Working folder.
   */
  fio_buf_info_s r = {0};
  fio_buf_info_s const extensions[] = {FIO_BUF_INFO1((char *)".mustache"),
                                       FIO_BUF_INFO1((char *)".html"),
                                       FIO_BUF_INFO2((char *)"", 0),
                                       {0}};
  FIO_STR_INFO_TMP_VAR(fn, (PATH_MAX | 2094));
  if (FIO_UNLIKELY(!fname.len || fname.len > (PATH_MAX - 1)))
    return r;
  fio___mustache_parser_s *tp = p;
  /* TODO: iterate file names to test for a match... */
  if (fname.buf[0] != FIO_FOLDER_SEPARATOR && fname.buf[0] != '/') {
    for (;;) { /* test and load file with a possible relative base path... */
      /* test if file was previously loaded (with this base-path) */
      for (;;) {
        if (FIO_BUF_INFO_IS_EQ(tp->fname, fname))
          goto already_exists;
        if (tp->path.buf)
          break; /* we arrived at current relative path root */
        tp = tp->prev;
        if (!tp)
          goto absolute_path_or_cwd;
      }
      /* test current relative path with each filename & extension combo */
      if (tp->path.len + fname.len + 32 < ((PATH_MAX | 2094) - 1)) {
        for (size_t i = 0; extensions[i].buf; ++i) {
          fn.len = 0;
          fio_string_write2(
              &fn,
              NULL,
              FIO_STRING_WRITE_STR2(tp->path.buf, tp->path.len),
              FIO_STRING_WRITE_STR2(fname.buf, fname.len),
              FIO_STRING_WRITE_STR2(extensions[i].buf, extensions[i].len));
          r = p->args->load_file_data(FIO_STR2BUF_INFO(fn), p->args->udata);
          if (r.len)
            goto file_loaded_successfully;
        }
      }
      tp = tp->prev;
      if (!tp)
        goto absolute_path_or_cwd;
    }
  }

absolute_path_or_cwd:
  /* possibly full-path specified + fallback to working folder */
  for (size_t i = 0; extensions[i].buf; ++i) {
    fn.len = 0;
    fio_string_write2(
        &fn,
        NULL,
        FIO_STRING_WRITE_STR2(fname.buf, fname.len),
        FIO_STRING_WRITE_STR2(extensions[i].buf, extensions[i].len));
    r = p->args->load_file_data(FIO_STR2BUF_INFO(fn), p->args->udata);
    if (r.len)
      goto file_loaded_successfully;
  }

file_loaded_successfully:
  return r;

already_exists:
  fn.len = 5; /* TODO: fixme? */
  fn.buf[0] = FIO___MUSTACHE_I_GOTO_PUSH;
  fio_u2buf32u(fn.buf + 1, tp->starts_at);
  p->root = fio_bstr_write(p->root, fn.buf, fn.len);
  return r;
}

FIO_SFUNC void fio___mustache_free_template(fio___mustache_parser_s *p,
                                            fio_buf_info_s d) {
  p->args->free_file_data(d, p->args->udata);
}

/* *****************************************************************************
Tag Helpers
***************************************************************************** */

/* forward declaration, implemented later */
FIO_SFUNC int fio___mustache_parse_block(fio___mustache_parser_s *p);
FIO_SFUNC int fio___mustache_parse_template_file(fio___mustache_parser_s *p);

FIO_IFUNC void fio___mustache_stand_alone_skip_eol(fio___mustache_parser_s *p) {
  size_t offset =
      !p->dirty && p->forwards.buf[0] == '\r' && p->forwards.buf[1] == '\n';
  p->forwards.buf += offset;
  p->forwards.len -= offset;
  offset = !p->dirty && p->forwards.buf[0] == '\n';
  p->forwards.buf += offset;
  p->forwards.len -= offset;
}

FIO_IFUNC int fio___mustache_parse_add_text(fio___mustache_parser_s *p,
                                            fio_buf_info_s txt) {
  union {
    uint64_t u64[1];
    char u8[8];
  } buf;
  buf.u8[0] = FIO___MUSTACHE_I_TXT;
  FIO_ASSERT_DEBUG(txt.len < (1 << 16),
                   "(mustache) text instruction overflow!");
  fio_u2buf16u(buf.u8 + 1, txt.len);
  p->root = fio_bstr_write2(p->root,
                            FIO_STRING_WRITE_STR2(buf.u8, 3),
                            FIO_STRING_WRITE_STR2(txt.buf, txt.len));
  return 0;
}

FIO_IFUNC int fio___mustache_parse_comment(fio___mustache_parser_s *p,
                                           fio_buf_info_s comment) {
  fio___mustache_stand_alone_skip_eol(p);
  return 0;
  (void)comment;
}

FIO_IFUNC int fio___mustache_parse_section_end(fio___mustache_parser_s *p,
                                               fio_buf_info_s var) {
  union {
    uint64_t u64[1];
    char u8[8];
  } buf;
  char *prev = NULL;
  fio_buf_info_s old_var_name;
  buf.u8[0] = FIO___MUSTACHE_I_STACK_POP;
  if (!p->prev)
    goto section_not_open;
  prev = p->root + p->starts_at;
  if (*prev != FIO___MUSTACHE_I_ARY && *prev != FIO___MUSTACHE_I_MISSING)
    goto section_not_open;
  old_var_name = FIO_BUF_INFO2(prev + 7, (size_t)fio_buf2u16u(prev + 1));
  if (!FIO_BUF_INFO_IS_EQ(old_var_name, var))
    goto value_name_mismatch;

  fio_u2buf32u(prev + 3, (uint32_t)(fio_bstr_len(p->root) + 1));
  fio___mustache_stand_alone_skip_eol(p);

#if FIO_MUSTACHE_LAMBDA_SUPPORT
  old_var_name =
      FIO_BUF_INFO2(p->prev->forwards.buf,
                    (size_t)(p->backwards.buf - p->prev->forwards.buf));
  old_var_name.len -= (old_var_name.len && old_var_name.buf[-1] == '\n');
  old_var_name.len -= (old_var_name.len && old_var_name.buf[-1] == '\r');
  if (old_var_name.len && old_var_name.len < (1U << 16)) {
    buf.u8[1] = FIO___MUSTACHE_I_METADATA;
    fio_u2buf16u(buf.u8 + 2, old_var_name.len);
    p->root = fio_bstr_write2(
        p->root,
        FIO_STRING_WRITE_STR2(buf.u8, 4),
        FIO_STRING_WRITE_STR2(old_var_name.buf, old_var_name.len));
  } else
#endif
    p->root = fio_bstr_write(p->root, buf.u8, 1);
  return -2;

value_name_mismatch:
  FIO_LOG_ERROR(
      "(mustache) template section end tag doesn't match section start:"
      "\n\t\t%.*s != %.*s",
      (int)var.len,
      var.buf,
      (int)old_var_name.len,
      old_var_name.buf);
  return -1;

section_not_open:
  FIO_LOG_ERROR("(mustache) section end tag with no section opening tag?"
                "\n\t\t%.*s",
                (int)var.len,
                var.buf);
  return -1;
}

FIO_IFUNC int fio___mustache_parse_section_start(fio___mustache_parser_s *p,
                                                 fio_buf_info_s var,
                                                 size_t inverted) {
  if (p->depth == FIO_MUSTACHE_MAX_DEPTH)
    return -1;
  fio___mustache_stand_alone_skip_eol(p);

  fio___mustache_parser_s new_section = {
      .root = p->root,
      .prev = p,
      .args = p->args,
      .delim = p->delim,
      .forwards = p->forwards,
      .starts_at = (uint32_t)fio_bstr_len(p->root),
      .depth = p->depth + 1,
      .dirty = p->dirty,
  };
  union {
    uint64_t u64[1];
    char u8[8];
  } buf;
  buf.u8[0] = FIO___MUSTACHE_I_ARY + inverted;
  fio_u2buf16u(buf.u8 + 1, var.len);
  /* + 32 bit value to be filled by closure. */
  new_section.root = fio_bstr_write2(new_section.root,
                                     FIO_STRING_WRITE_STR2(buf.u8, 7),
                                     FIO_STRING_WRITE_STR2(var.buf, var.len));
#if FIO_MUSTACHE_PRESERVE_PADDING
  if (!p->dirty && p->backwards.len) {
    buf.u8[0] = FIO___MUSTACHE_I_PADDING_PUSH;
    fio_u2buf16u(buf.u8 + 1, p->backwards.len);
    new_section.root = fio_bstr_write2(
        new_section.root,
        FIO_STRING_WRITE_STR2(buf.u8, 3),
        FIO_STRING_WRITE_STR2(p->backwards.buf, p->backwards.len));
  }
#endif
  int r = fio___mustache_parse_block(&new_section);
  p->root = new_section.root;
  p->forwards = new_section.forwards;
  return r;
}

FIO_IFUNC int fio___mustache_parse_partial(fio___mustache_parser_s *p,
                                           fio_buf_info_s filename) {
  if (p->depth == FIO_MUSTACHE_MAX_DEPTH)
    return -1;

  fio___mustache_stand_alone_skip_eol(p);

  fio_buf_info_s file_content = fio___mustache_load_template(p, filename);
  if (!file_content.len)
    return 0;

  union {
    uint64_t u64[1];
    char u8[8];
  } buf;

  buf.u8[0] = FIO___MUSTACHE_I_STACK_PUSH;
  size_t ipos = fio_bstr_len(p->root) + 1;
  p->root = fio_bstr_write(p->root, buf.u8, 5);

  if (!p->dirty && p->backwards.len) {
    buf.u8[0] = FIO___MUSTACHE_I_PADDING_PUSH;
    fio_u2buf16u(buf.u8 + 1, p->backwards.len);
    p->root = fio_bstr_write2(
        p->root,
        FIO_STRING_WRITE_STR2(buf.u8, 3),
        FIO_STRING_WRITE_STR2(p->backwards.buf, p->backwards.len));
  }

  fio___mustache_parser_s new_section = {
      .root = p->root,
      .prev = p,
      .args = p->args,
      .delim = fio___mustache_delimiter_init(),
      .fname = filename,
      .path = fio_filename_parse2(filename.buf, filename.len).folder,
      .forwards = file_content,
      .starts_at = (uint32_t)fio_bstr_len(p->root),
      .depth = p->depth + 1,
      .dirty = 0,
  };

  int r = fio___mustache_parse_template_file(&new_section);
  buf.u8[0] = FIO___MUSTACHE_I_STACK_POP;
  p->root = fio_bstr_write(new_section.root, buf.u8, 1);
  fio_u2buf32u(p->root + ipos, (uint32_t)fio_bstr_len(p->root));
  fio___mustache_free_template(p, file_content);
  return r;
}

FIO_IFUNC int fio___mustache_parse_set_delim(fio___mustache_parser_s *p,
                                             fio_buf_info_s buf) {
  struct {
    uint32_t len;
    void *(*cpy)(void *a, const void *b);
    _Bool (*cmp)(const char *restrict, const char *restrict);
  } const len_map[] = {
      {0},
      {1, fio_memcpy1, fio___mustache_delcmp1},
      {2, fio_memcpy2, fio___mustache_delcmp2},
      {3, fio_memcpy3, fio___mustache_delcmp3},
      {4, fio_memcpy4, fio___mustache_delcmp4},
  };

  fio___mustache_stand_alone_skip_eol(p);

  char *end = buf.buf + buf.len;
  char *pos = buf.buf;
  while (pos < end && *pos != ' ' && *pos != '\t')
    ++pos;
  if (pos == end)
    goto delim_tag_error;
  buf.len = (size_t)(pos - buf.buf);
  while (*pos == ' ' || *pos == '\t')
    ++pos;
  if (pos >= end)
    goto delim_tag_error;

  if ((size_t)(end - pos) > 4UL || !(size_t)(end - pos) || !buf.len ||
      buf.len > 4UL)
    goto delim_tag_error;
  len_map[buf.len].cpy(p->delim.in.buf, buf.buf);
  len_map[(size_t)(end - pos)].cpy(p->delim.out.buf, pos);
  p->delim.in.cmp = len_map[buf.len].cmp;
  p->delim.out.cmp = len_map[(size_t)(end - pos)].cmp;
  p->delim.in.len = len_map[buf.len].len;
  p->delim.out.len = len_map[(size_t)(end - pos)].len;
  return 0;

delim_tag_error:
  FIO_LOG_ERROR("(mustache) delimiter tag error: %.*s",
                (int)(end - buf.buf),
                buf.buf);
  return -1;
}

FIO_IFUNC int fio___mustache_parse_var_name(fio___mustache_parser_s *p,
                                            fio_buf_info_s var,
                                            size_t raw) {
  union {
    uint64_t u64[1];
    char u8[8];
  } buf;
  if (p->backwards.len > ((1 << 16) - 1))
    p->backwards.len = 0;

#if FIO_MUSTACHE_PRESERVE_PADDING
  if (p->backwards.len)
    goto padded;
#else
  fio___mustache_parse_add_text(p, p->backwards);
#endif
  buf.u8[0] = (char)(FIO___MUSTACHE_I_VAR + raw);
  fio_u2buf16u(buf.u8 + 1, var.len);
  p->root = fio_bstr_write2(p->root,
                            FIO_STRING_WRITE_STR2(buf.u8, 3),
                            FIO_STRING_WRITE_STR2(var.buf, var.len));
  return 0;
#if FIO_MUSTACHE_PRESERVE_PADDING
padded:
  /* TODO: fixme (what if padding value is already used?) */
  buf.u8[0] = (char)(FIO___MUSTACHE_I_VAR_PADDED + raw);
  fio_u2buf16u(buf.u8 + 1, var.len);
  fio_u2buf16u(buf.u8 + 3, p->backwards.len);
  p->root = fio_bstr_write2(
      p->root,
      FIO_STRING_WRITE_STR2(buf.u8, 5),
      FIO_STRING_WRITE_STR2(var.buf, var.len),
      FIO_STRING_WRITE_STR2(p->backwards.buf, p->backwards.len));
  return 0;
#endif
}

/* *****************************************************************************
Tag Consumer
***************************************************************************** */

FIO_SFUNC int fio___mustache_parse_consume_tag(fio___mustache_parser_s *p,
                                               fio_buf_info_s buf) {
  /* remove white-space from name */
  for (; buf.len &&
         (buf.buf[buf.len - 1] == ' ' || buf.buf[buf.len - 1] == '\t');)
    --buf.len;
  if (!buf.len) {
    FIO_LOG_ERROR("(mustache) template tags must contain a value!");
    return -1;
  }

  while (buf.buf[0] == ' ' || buf.buf[0] == '\t') {
    ++buf.buf;
    --buf.len;
  }
  char id = buf.buf[0];
  if (!(id == '/' || id == '#' || id == '^' || id == '>' || id == '!' ||
        id == '&' || (id == '=' && buf.buf[buf.len - 1] == '=') ||
        (id == '{' && buf.buf[buf.len - 1] == '}')))
    return fio___mustache_parse_var_name(p, buf, 0); /* escaped var */

  /* tag starts with a marker, seek new tag starting point */
  do {
    ++buf.buf;
    --buf.len;
    if (buf.len)
      continue;
    FIO_LOG_ERROR("(mustache) template tags must contain a value!");
    return -1;
  } while (buf.buf[0] == ' ' || buf.buf[0] == '\t');
  /* test for tag type and route to handler */
  switch (id) {
  case '/': return fio___mustache_parse_section_end(p, buf);
  case '#': return fio___mustache_parse_section_start(p, buf, 0);
  case '^': return fio___mustache_parse_section_start(p, buf, 1);
  case '>': return fio___mustache_parse_partial(p, buf);
  case '!': return fio___mustache_parse_comment(p, buf);
  case '=': /* fall through */
  case '{':
    do /* it is known that (buf.buf ends as '=' or '}')*/
      --buf.len;
    while (buf.buf[buf.len - 1] == ' ' || buf.buf[buf.len - 1] == '\t');

    if (id == '=')
      return fio___mustache_parse_set_delim(p, buf); /* fall through */
  default: /* raw var */ return fio___mustache_parse_var_name(p, buf, 1);
  }
}

/* *****************************************************************************
File Consumer parser
***************************************************************************** */

FIO_SFUNC int fio___mustache_parse_block(fio___mustache_parser_s *p) {
  int r = 0;
  const char *end = p->forwards.buf + p->forwards.len;
  fio_buf_info_s tag;
  p->backwards = FIO_BUF_INFO2(p->forwards.buf, 0);
  p->root = fio_bstr_reserve(p->root, p->forwards.len);
  /* consume each line (in case it's a stand alone line) */
  for (;;) {
    p->backwards.len = (size_t)(p->forwards.buf - p->backwards.buf);
    if (p->forwards.buf >= end)
      break;
    if (FIO_UNLIKELY(*p->forwards.buf == p->delim.in.buf[0] &&
                     p->delim.in.cmp(p->forwards.buf, p->delim.in.buf))) {
      /* tag started */
      p->forwards.buf += p->delim.in.len;
      tag = FIO_BUF_INFO2(p->forwards.buf, 0);
      for (;;) {
        if (p->forwards.buf + p->delim.out.len > end)
          goto incomplete_tag_error;
        if (p->forwards.buf[0] == p->delim.out.buf[0] &&
            p->delim.out.cmp(p->forwards.buf, p->delim.out.buf))
          break;
        ++(p->forwards.buf);
      }
      /* advance tag ending when triple mustache is detected. */
      p->forwards.buf +=
          ((p->forwards.buf + p->delim.out.len) < end &&
           p->forwards.buf[0] == '}' &&
           p->delim.out.cmp(p->forwards.buf + 1, p->delim.out.buf));
      /* finalize tag */
      tag.len = p->forwards.buf - tag.buf;
      if (!tag.len)
        goto empty_tag_error;
      p->forwards.buf += p->delim.out.len;
      p->forwards.len = (size_t)(end - p->forwards.buf);
      p->dirty |= (unsigned)(p->forwards.buf[0] && p->forwards.buf[0] != '\r' &&
                             p->forwards.buf[0] != '\n');
      if (p->dirty && p->backwards.len) { /* not stand-alone, add txt */
        fio___mustache_parse_add_text(p, p->backwards);
        p->backwards = FIO_BUF_INFO2((p->backwards.buf + p->backwards.len), 0);
      }
      if ((r = fio___mustache_parse_consume_tag(p, tag)))
        goto done;
      p->backwards = FIO_BUF_INFO2(p->forwards.buf, 0);
      continue;
    }
    p->dirty = (unsigned)(p->forwards.buf[0] != '\n') &
               (p->dirty | (unsigned)(p->forwards.buf[0] != ' ' &&
                                      p->forwards.buf[0] != '\t'));
    ++p->forwards.buf;
    if (p->backwards.len == ((1 << 16) - 2) || p->forwards.buf[-1] == '\n') {
      p->backwards.len = p->forwards.buf - p->backwards.buf;
      fio___mustache_parse_add_text(p, p->backwards);
      p->backwards.buf = p->forwards.buf;
    }
  }
  /* print leftover text? */
  if (p->backwards.len)
    fio___mustache_parse_add_text(p, p->backwards);

done:
  r += ((r == -2) << 1); /* end-tag stop shouldn't propagate onward. */
  return r;
incomplete_tag_error:
  FIO_LOG_ERROR("(mustache) template error, un-terminated {{tag}}:\n\t%.*s",
                (int)(end - (p->backwards.buf + p->backwards.len) > 32
                          ? (int)32
                          : (int)(end - (p->backwards.buf + p->backwards.len))),
                (p->backwards.buf + p->backwards.len));
  return (r = -1);
empty_tag_error:
  FIO_LOG_ERROR("(mustache) template error, empty {{tag}}:\n\t%.*s",
                (int)(end - (p->backwards.buf + p->backwards.len) > 32
                          ? (int)32
                          : (int)(end - (p->backwards.buf + p->backwards.len))),
                (p->backwards.buf + p->backwards.len));
  return (r = -1);
}

FIO_SFUNC int fio___mustache_parse_template_file(fio___mustache_parser_s *p) {
  /* remove (possible) filename comment line */
  if (p->forwards.buf[0] == '@' && p->forwards.buf[1] == ':') {
    char *pos = (char *)FIO_MEMCHR(p->forwards.buf, '\n', p->forwards.len);
    if (!pos)
      return 0; /* done with file... though nothing happened. */
  }
  /* consume (possible) YAML front matter */
  if (p->forwards.buf[0] == '-' && p->forwards.buf[1] == '-' &&
      p->forwards.buf[2] == '-' &&
      (p->forwards.buf[3] == '\n' || p->forwards.buf[3] == '\r')) {
    const char *end = p->forwards.buf + p->forwards.len;
    const char *pos = p->forwards.buf;
    for (;;) {
      pos = (const char *)FIO_MEMCHR(pos, '\n', end - pos);
      if (!pos)
        return 0; /* done with file... though nothing happened. */
      ++pos;
      if (pos[0] == '-' && pos[1] == '-' && pos[2] == '-' &&
          (pos[3] == '\n' || pos[3] == '\r' || !pos[3])) {
        pos += 4;
        pos += pos[0] == '\n';
        break;
      }
    }
    p->args->on_yaml_front_matter(
        FIO_BUF_INFO2(p->forwards.buf, (size_t)(pos - p->forwards.buf)),
        p->args->udata);
    p->forwards.len = (size_t)(pos - p->forwards.buf);
    p->forwards.buf = (char *)pos;
  }
  return fio___mustache_parse_block(p);
}

/* *****************************************************************************
Default functions
***************************************************************************** */
FIO_SFUNC fio_buf_info_s fio___mustache_dflt_load_file_data(fio_buf_info_s fn,
                                                            void *udata) {
  char *data = fio_bstr_readfile(NULL, fn.buf, 0, 0);
  return fio_bstr_buf(data);
  (void)udata;
}

FIO_SFUNC void fio___mustache_dflt_free_file_data(fio_buf_info_s d,
                                                  void *udata) {
  fio_bstr_free(d.buf);
  (void)udata;
}

FIO_SFUNC void fio___mustache_dflt_on_yaml_front_matter(fio_buf_info_s y,
                                                        void *udata) {
  (void)y, (void)udata;
}

FIO_SFUNC void *fio___mustache_dflt_write_text(void *u, fio_buf_info_s txt) {
  return (void *)fio_bstr_write((char *)u, txt.buf, txt.len);
}

FIO_SFUNC void *fio___mustache_dflt_write_text_escaped(void *u,
                                                       fio_buf_info_s raw) {
  return (void *)fio_bstr_write_html_escape((char *)u, raw.buf, raw.len);
}

/* callback should return a new context pointer with the value of `name`. */
FIO_SFUNC void *fio___mustache_dflt_get_var(void *ctx, fio_buf_info_s name) {
  return NULL;
  (void)ctx, (void)name;
}

/* if context is an Array, should return its length. */
FIO_SFUNC size_t fio___mustache_dflt_array_length(void *ctx) {
  return 0;
  (void)ctx;
}

/* if context is an Array, should return a context pointer @ index. */
FIO_SFUNC void *fio___mustache_dflt_get_var_index(void *ctx, size_t index) {
  return NULL;
  (void)ctx, (void)index;
}
/* should return the String value of context `var` as a `fio_buf_info_s`. */
FIO_SFUNC fio_buf_info_s fio___mustache_dflt_var2str(void *var) {
  return FIO_BUF_INFO2(NULL, 0);
  (void)var;
}

FIO_SFUNC int fio___mustache_dflt_var_is_truthful(void *v) { return !!v; }

FIO_IFUNC void fio___mustache_dflt_release_var(void *ctx) { (void)ctx; }

/* returns non-zero if `ctx` is a lambda and handles section manually. */
FIO_SFUNC int fio___mustache_dflt_is_lambda(
    void **udata,
    void *ctx,
    fio_buf_info_s raw_template_section) {
  return 0;
  (void)raw_template_section, (void)ctx, (void)udata;
}

/* *****************************************************************************
Public API
***************************************************************************** */

void fio_mustache_load___(void); /* IDE Marker */
/* Allocates a new object on the heap and initializes it's memory. */
SFUNC fio_mustache_s *fio_mustache_load FIO_NOOP(fio_mustache_load_args_s a) {
  uint8_t should_free_data = 0;
  fio_buf_info_s base_path = {0};
  fio___mustache_parser_s parser = {0};
  if (!a.load_file_data && !a.free_file_data) {
    a.load_file_data = fio___mustache_dflt_load_file_data;
    a.free_file_data = fio___mustache_dflt_free_file_data;
  }
  if (!a.filename.buf && !a.data.buf)
    return NULL;
  if (!a.on_yaml_front_matter)
    a.on_yaml_front_matter = fio___mustache_dflt_on_yaml_front_matter;
  if (a.filename.buf) {
    fio_filename_s pathname;
    FIO_STR_INFO_TMP_VAR(fn, (PATH_MAX | 2096));
    if (!a.filename.len)
      a.filename.len = FIO_STRLEN(a.filename.buf);
    if (a.filename.buf[a.filename.len])
      fio_string_write(&fn, NULL, a.filename.buf, a.filename.len);
    else
      fn = FIO_BUF2STR_INFO(a.filename);
    if (!a.data.buf && fn.buf) {
      a.data = a.load_file_data(FIO_STR2BUF_INFO(fn), a.udata);
      if (!a.data.buf)
        return NULL;
      should_free_data = 1;
    }
    pathname = fio_filename_parse2(a.filename.buf, a.filename.len);
    base_path = pathname.folder;
  }
  parser.args = &a;
  parser.root = NULL;
  parser.delim = fio___mustache_delimiter_init();
  parser.depth = 0;
  parser.fname = a.filename;
  parser.forwards = a.data;
  parser.path = base_path;
  if (fio___mustache_parse_template_file(&parser)) { /* parser failed(!) */
    fio_bstr_free(parser.root);
    parser.root = NULL;
  }
  /* No need to write FIO___MUSTACHE_I_STACK_POP, as the string ends with NUL */
  if (should_free_data)
    a.free_file_data(a.data, a.udata);
  if (parser.root)
    FIO_LEAK_COUNTER_ON_ALLOC(fio_mustache_s);
  return (fio_mustache_s *)parser.root;
}

/* Frees the mustache template object (or reduces it's reference count). */
SFUNC void fio_mustache_free(fio_mustache_s *m) {
  if (!m)
    return;
  FIO_LEAK_COUNTER_ON_FREE(fio_mustache_s);
  fio_bstr_free((char *)m);
}

/** Increases the mustache template's reference count. */
SFUNC fio_mustache_s *fio_mustache_dup(fio_mustache_s *m) {
  if (!m)
    return m;
  FIO_LEAK_COUNTER_ON_ALLOC(fio_mustache_s);
  return (fio_mustache_s *)fio_bstr_copy((char *)m);
}

void fio_mustache_build___(void); /* IDE marker */
/** Builds the template, returning the final value of `udata` (or NULL). */
SFUNC void *fio_mustache_build FIO_NOOP(fio_mustache_s *m,
                                        fio_mustache_bargs_s args) {
  if (!m)
    return args.udata;
  if (!args.write_text && !args.write_text_escaped) {
    args.write_text = fio___mustache_dflt_write_text;
    args.write_text_escaped = fio___mustache_dflt_write_text_escaped;
  }
  FIO_ASSERT(args.write_text_escaped && args.write_text,
             "(mustache) fio_mustache_build requires both writer "
             "callbacks!\n\t\t(or none, for a fio_bstr_s return)");
  if (!args.get_var)
    args.get_var = fio___mustache_dflt_get_var;
  if (!args.array_length)
    args.array_length = fio___mustache_dflt_array_length;
  if (!args.get_var_index)
    args.get_var_index = fio___mustache_dflt_get_var_index;
  if (!args.var2str)
    args.var2str = fio___mustache_dflt_var2str;
  if (!args.var_is_truthful)
    args.var_is_truthful = fio___mustache_dflt_var_is_truthful;
  if (!args.release_var)
    args.release_var = fio___mustache_dflt_release_var;
  if (!args.is_lambda)
    args.is_lambda = fio___mustache_dflt_is_lambda;

  fio___mustache_bldr_s builder = {
      .root = (char *)m,
      .ctx = args.ctx,
      .args = &args,
  };
  return fio___mustache_build_section((char *)m, builder);
}

/* *****************************************************************************
Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_MODULE_PTR
#undef FIO_MUSTACHE
#undef FIO___UNTAG_T
#endif /* FIO_MUSTACHE */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_CRYPTO_CORE        /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                  A Template for New Types / Modules




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_CRYPTO_CORE) && !defined(H___FIO_CRYPTO_CORE___H)
#define H___FIO_CRYPTO_CORE___H

/* *****************************************************************************
Module Implementation - inlined functions
***************************************************************************** */

/* *****************************************************************************
Module Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* *****************************************************************************
Module Cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_CRYPTO_CORE
#endif /* FIO_CRYPTO_CORE */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_CHACHA             /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                              ChaCha20 & Poly1305



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_CHACHA) && !defined(H___FIO_CHACHA___H)
#define H___FIO_CHACHA___H 1

/* *****************************************************************************
ChaCha20Poly1305 API
***************************************************************************** */

/**
 * Performs an in-place encryption of `data` using ChaCha20 with additional
 * data, producing a 16 byte message authentication code (MAC) using Poly1305.
 *
 * * `key`    MUST point to a 256 bit long memory address (32 Bytes).
 * * `nonce` MUST point to a  96 bit long memory address (12 Bytes).
 * * `ad`     MAY be omitted, will NOT be encrypted.
 * * `data`   MAY be omitted, WILL be encrypted.
 * * `mac`    MUST point to a buffer with (at least) 16 available bytes.
 */
SFUNC void fio_chacha20_poly1305_enc(void *restrict mac,
                                     void *restrict data,
                                     size_t len,
                                     const void *ad, /* additional data */
                                     size_t adlen,
                                     const void *key,
                                     const void *nonce);

/**
 * Performs an in-place decryption of `data` using ChaCha20 after authenticating
 * the message authentication code (MAC) using Poly1305.
 *
 * * `key`    MUST point to a 256 bit long memory address (32 Bytes).
 * * `nonce` MUST point to a  96 bit long memory address (12 Bytes).
 * * `ad`     MAY be omitted ONLY IF originally omitted.
 * * `data`   MAY be omitted, WILL be decrypted.
 * * `mac`    MUST point to a buffer where the 16 byte MAC is placed.
 *
 * Returns `-1` on error (authentication failed).
 */
SFUNC int fio_chacha20_poly1305_dec(void *restrict mac,
                                    void *restrict data,
                                    size_t len,
                                    const void *ad, /* additional data */
                                    size_t adlen,
                                    const void *key,
                                    const void *nonce);

/* *****************************************************************************
Using ChaCha20 and Poly1305 separately
***************************************************************************** */

/**
 * Performs an in-place encryption/decryption of `data` using ChaCha20.
 *
 * * `key`    MUST point to a 256 bit long memory address (32 Bytes).
 * * `nonce` MUST point to a  96 bit long memory address (12 Bytes).
 * * `counter` is the block counter, usually 1 unless `data` is mid-cyphertext.
 */
SFUNC void fio_chacha20(void *restrict data,
                        size_t len,
                        const void *key,
                        const void *nonce,
                        uint32_t counter);

/**
 * Given a Poly1305 256bit (32 byte) key, writes the authentication code for the
 * poly message and additional data into `mac_dest`.
 *
 * * `key`    MUST point to a 256 bit long memory address (32 Bytes).
 */
SFUNC void fio_poly1305_auth(void *restrict mac_dest,
                             const void *key256bits,
                             void *restrict message,
                             size_t len,
                             const void *additional_data,
                             size_t additional_data_len);

/* *****************************************************************************
ChaCha20Poly1305 Implementation
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* *****************************************************************************
Poly1305 (authentication)
Prime 2^130-5   = 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB
The math is mostly copied from: https://github.com/floodyberry/poly1305-donna
***************************************************************************** */
/*
 * Math copied from https://github.com/floodyberry/poly1305-donna
 *
 * With thanks to Andrew Moon.
 */
typedef struct {
  /* r (cycle key addition) is 128 bits */
  uint64_t r[3];
  /* s (final key addition) is 128 bits */
  uint64_t s[2];
  /* Accumulator should not exceed 131 bits at the end of every cycle. */
  uint64_t a[3];
} FIO_ALIGN(16) fio___poly_s;

FIO_IFUNC fio___poly_s fio___poly_init(const void *key256b) {
  static const uint64_t defkey[4] = {0};
  if (!key256b)
    key256b = (const void *)defkey;
  uint64_t t0, t1;
  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  t0 = fio_buf2u64_le((uint8_t *)key256b + 0);
  t1 = fio_buf2u64_le((uint8_t *)key256b + 8);
  fio___poly_s pl = {
      .r =
          {
              ((t0)&0xffc0fffffff),
              (((t0 >> 44) | (t1 << 20)) & 0xfffffc0ffff),
              (((t1 >> 24)) & 0x00ffffffc0f),
          },
      .s =
          {
              fio_buf2u64_le(((uint8_t *)key256b + 16)),
              fio_buf2u64_le(((uint8_t *)key256b + 24)),
          },
  };
  return pl;
}
FIO_IFUNC void fio___poly_consume128bit(fio___poly_s *pl,
                                        const void *msg,
                                        uint64_t is_full) {
  uint64_t r0, r1, r2;
  uint64_t s1, s2;
  uint64_t a0, a1, a2;
  uint64_t c;
  uint64_t d0[2], d1[2], d2[2], d[2];

  r0 = pl->r[0];
  r1 = pl->r[1];
  r2 = pl->r[2];

  a0 = pl->a[0];
  a1 = pl->a[1];
  a2 = pl->a[2];

  s1 = r1 * (5 << 2);
  s2 = r2 * (5 << 2);

  {
    uint64_t t0, t1;
    t0 = fio_buf2u64_le(msg);
    t1 = fio_buf2u64_le(((uint8_t *)msg + 8));
    /* a += msg */
    a0 += ((t0)&0xFFFFFFFFFFF);
    a1 += (((t0 >> 44) | (t1 << 20)) & 0xFFFFFFFFFFF);
    a2 += (((t1 >> 24)) & 0x3FFFFFFFFFF) | (is_full << 40);
  }

  /* a *= r */
  d0[0] = fio_math_mulc64(a0, r0, d0 + 1);
  d[0] = fio_math_mulc64(a1, s2, d + 1);
  d0[0] = fio_math_addc64(d0[0], d[0], 0, &c);
  d0[1] += d[1] + c;

  d[0] = fio_math_mulc64(a2, s1, d + 1);
  d0[0] = fio_math_addc64(d0[0], d[0], 0, &c);
  d0[1] += d[1] + c;

  d1[0] = fio_math_mulc64(a0, r1, d1 + 1);
  d[0] = fio_math_mulc64(a1, r0, d + 1);
  d1[0] = fio_math_addc64(d1[0], d[0], 0, &c);
  d1[1] += d[1] + c;

  d[0] = fio_math_mulc64(a2, s2, d + 1);
  d1[0] = fio_math_addc64(d1[0], d[0], 0, &c);
  d1[1] += d[1] + c;

  d2[0] = fio_math_mulc64(a0, r2, d2 + 1);
  d[0] = fio_math_mulc64(a1, r1, d + 1);
  d2[0] = fio_math_addc64(d2[0], d[0], 0, &c);
  d2[1] += d[1] + c;

  d[0] = fio_math_mulc64(a2, r0, d + 1);
  d2[0] = fio_math_addc64(d2[0], d[0], 0, &c);
  d2[1] += d[1] + c;

  /* (partial) a %= p */
  c = (d0[0] >> 44) | (d0[1] << 20);
  a0 = d0[0] & 0xfffffffffff;
  d1[0] = fio_math_addc64(d1[0], c, 0, &c);
  d1[1] += c;

  c = (d1[0] >> 44) | (d1[1] << 20);
  a1 = d1[0] & 0xfffffffffff;
  d2[0] = fio_math_addc64(d2[0], c, 0, &c);
  d2[1] += c;

  c = (d2[0] >> 42) | (d2[1] << 22);
  a2 = d2[0] & 0x3ffffffffff;
  a0 += c * 5;
  c = a0 >> 44;
  a0 = a0 & 0xfffffffffff;
  a1 += c;

  pl->a[0] = a0;
  pl->a[1] = a1;
  pl->a[2] = a2;
}

FIO_IFUNC void fio___poly_finilize(fio___poly_s *pl) {
  uint64_t a0, a1, a2, c;
  uint64_t g0, g1, g2;
  uint64_t t0, t1;

  /* fully carry a */
  a0 = pl->a[0];
  a1 = pl->a[1];
  a2 = pl->a[2];

  c = (a1 >> 44);
  a1 &= 0xFFFFFFFFFFF;
  a2 += c;
  c = (a2 >> 42);
  a2 &= 0x3FFFFFFFFFF;
  a0 += c * 5;
  c = (a0 >> 44);
  a0 &= 0xFFFFFFFFFFF;
  a1 += c;
  c = (a1 >> 44);
  a1 &= 0xFFFFFFFFFFF;
  a2 += c;
  c = (a2 >> 42);
  a2 &= 0x3FFFFFFFFFF;
  a0 += c * 5;
  c = (a0 >> 44);
  a0 &= 0xFFFFFFFFFFF;
  a1 += c;

  /* compute a + -p */
  g0 = a0 + 5;
  c = (g0 >> 44);
  g0 &= 0xFFFFFFFFFFF;
  g1 = a1 + c;
  c = (g1 >> 44);
  g1 &= 0xFFFFFFFFFFF;
  g2 = a2 + c - ((uint64_t)1 << 42);

  /* select h if h < p, or h + -p if h >= p */
  c = (g2 >> ((sizeof(uint64_t) * 8) - 1)) - 1;
  g0 &= c;
  g1 &= c;
  g2 &= c;
  c = ~c;
  a0 = (a0 & c) | g0;
  a1 = (a1 & c) | g1;
  a2 = (a2 & c) | g2;

  /* a = (a + Poly S key) */
  t0 = pl->s[0];
  t1 = pl->s[1];

  a0 += ((t0)&0xFFFFFFFFFFF);
  c = (a0 >> 44);
  a0 &= 0xFFFFFFFFFFF;
  a1 += (((t0 >> 44) | (t1 << 20)) & 0xFFFFFFFFFFF) + c;
  c = (a1 >> 44);
  a1 &= 0xFFFFFFFFFFF;
  a2 += (((t1 >> 24)) & 0x3FFFFFFFFFF) + c;
  a2 &= 0x3FFFFFFFFFF;

  /* mac = a % (2^128) */
  a0 = ((a0) | (a1 << 44));
  a1 = ((a1 >> 20) | (a2 << 24));
  pl->a[0] = a0;
  pl->a[1] = a1;
}

FIO_IFUNC void fio___poly_consume_msg(fio___poly_s *pl,
                                      uint8_t *msg,
                                      size_t len) {
  /* read 16 byte blocks */
  uint64_t n[2];
  for (size_t i = 31; i < len; i += 32) {
    fio___poly_consume128bit(pl, msg, 1);
    fio___poly_consume128bit(pl, msg + 16, 1);
    msg += 32;
  }
  if ((len & 16)) {
    fio___poly_consume128bit(pl, msg, 1);
    msg += 16;
  }
  if ((len & 15)) {
    n[0] = 0;
    n[1] = 0;
    fio_memcpy15x(n, msg, len);
    n[0] = fio_ltole64(n[0]);
    n[1] = fio_ltole64(n[1]);
    ((uint8_t *)n)[len & 15] = 0x01;
    fio___poly_consume128bit(pl, (void *)n, 0);
  }
}

/* Given a Poly1305 key, writes a MAC into `mac_dest`. */
SFUNC void fio_poly1305_auth(void *restrict mac,
                             const void *key,
                             void *restrict msg,
                             size_t len,
                             const void *ad,
                             size_t ad_len) {
  fio___poly_s pl = fio___poly_init(key);
  fio___poly_consume_msg(&pl, (uint8_t *)ad, ad_len);
  fio___poly_consume_msg(&pl, (uint8_t *)msg, len);
  fio___poly_finilize(&pl);
  fio_u2buf64_le(mac, pl.a[0]);
  fio_u2buf64_le(&((char *)mac)[8], pl.a[1]);
}

/* *****************************************************************************
ChaCha20 (encryption)
***************************************************************************** */

#define FIO___CHACHA_VROUND(count, a, b, c, d)                                 \
  for (size_t i = 0; i < count; ++i) {                                         \
    a[i] += b[i];                                                              \
    d[i] ^= a[i];                                                              \
    d[i] = (d[i] << 16) | (d[i] >> (32 - 16));                                 \
    c[i] += d[i];                                                              \
    b[i] ^= c[i];                                                              \
    b[i] = (b[i] << 12) | (b[i] >> (32 - 12));                                 \
    a[i] += b[i];                                                              \
    d[i] ^= a[i];                                                              \
    d[i] = (d[i] << 8) | (d[i] >> (32 - 8));                                   \
    c[i] += d[i];                                                              \
    b[i] ^= c[i];                                                              \
    b[i] = (b[i] << 7) | (b[i] >> (32 - 7));                                   \
  }

FIO_IFUNC fio_u512 fio___chacha_init(const void *key,
                                     const void *nonce,
                                     uint32_t counter) {
  fio_u512 o = {
      .u32 =
          {
              // clang-format off
              0x61707865, 0x3320646e, 0x79622d32, 0x6b206574,
              fio_buf2u32_le(key),
              fio_buf2u32_le((uint8_t *)key + 4),
              fio_buf2u32_le((uint8_t *)key + 8),
              fio_buf2u32_le((uint8_t *)key + 12),
              fio_buf2u32_le((uint8_t *)key + 16),
              fio_buf2u32_le((uint8_t *)key + 20),
              fio_buf2u32_le((uint8_t *)key + 24),
              fio_buf2u32_le((uint8_t *)key + 28),
              counter,
              fio_buf2u32_le(nonce),
              fio_buf2u32_le((uint8_t *)nonce + 4),
              fio_buf2u32_le((uint8_t *)nonce + 8),
          }, // clang-format on
  };
  return o;
}

FIO_SFUNC void fio___chacha_vround20(const fio_u512 c, uint8_t *restrict data) {
  uint32_t v[16];
  for (size_t i = 0; i < 16; ++i) {
    v[i] = c.u32[i];
  }
  for (size_t round__ = 0; round__ < 10; ++round__) { /* 2 rounds per loop */
    FIO___CHACHA_VROUND(4, v, (v + 4), (v + 8), (v + 12));
    fio_u32x4_reshuffle((v + 4), 1, 2, 3, 0);
    fio_u32x4_reshuffle((v + 8), 2, 3, 0, 1);
    fio_u32x4_reshuffle((v + 12), 3, 0, 1, 2);
    FIO___CHACHA_VROUND(4, v, (v + 4), (v + 8), (v + 12));
    fio_u32x4_reshuffle((v + 4), 3, 0, 1, 2);
    fio_u32x4_reshuffle((v + 8), 2, 3, 0, 1);
    fio_u32x4_reshuffle((v + 12), 1, 2, 3, 0);
  }
  for (size_t i = 0; i < 16; ++i) {
    v[i] += c.u32[i];
  }

#if __BIG_ENDIAN__
  for (size_t i = 0; i < 16; ++i) {
    v[i] = fio_bswap32(v[i]);
  }
#endif
  {
    uint32_t d[16];
    fio_memcpy64(d, data);
    for (size_t i = 0; i < 16; ++i) {
      d[i] ^= v[i];
    }
    fio_memcpy64(data, d);
  }
}

FIO_SFUNC void fio___chacha_vround20x2(fio_u512 c, uint8_t *restrict data) {
  uint32_t v[32];
  for (size_t i = 0; i < 16; ++i) {
    v[i + (i & (4 | 8))] = c.u32[i];
    v[i + 4 + (i & (4 | 8))] = c.u32[i];
  }
  ++v[28];
  for (size_t round__ = 0; round__ < 10; ++round__) { /* 2 rounds per loop */
    FIO___CHACHA_VROUND(8, v, (v + 8), (v + 16), (v + 24));
    fio_u32x8_reshuffle((v + 8), 1, 2, 3, 0, 5, 6, 7, 4);
    fio_u32x8_reshuffle((v + 16), 2, 3, 0, 1, 6, 7, 4, 5);
    fio_u32x8_reshuffle((v + 24), 3, 0, 1, 2, 7, 4, 5, 6);
    FIO___CHACHA_VROUND(8, v, (v + 8), (v + 16), (v + 24));
    fio_u32x8_reshuffle((v + 8), 3, 0, 1, 2, 7, 4, 5, 6);
    fio_u32x8_reshuffle((v + 16), 2, 3, 0, 1, 6, 7, 4, 5);
    fio_u32x8_reshuffle((v + 24), 1, 2, 3, 0, 5, 6, 7, 4);
  }
  for (size_t i = 0; i < 16; ++i) {
    v[i + (i & (4 | 8))] += c.u32[i];
    v[i + 4 + (i & (4 | 8))] += c.u32[i];
  }
  ++v[28];

#if __BIG_ENDIAN__
  for (size_t i = 0; i < 32; ++i) {
    v[i] = fio_bswap32(v[i]);
  }
#endif
  {
    fio_u32x8_reshuffle((v + 4), 4, 5, 6, 7, 0, 1, 2, 3);
    fio_u32x8_reshuffle((v + 20), 4, 5, 6, 7, 0, 1, 2, 3);
    uint32_t d[8];
    fio_memcpy32(d, data);
    for (size_t i = 0; i < 8; ++i) {
      d[i] ^= v[i];
    }
    fio_memcpy32(data, d);

    fio_memcpy32(d, data + 32);
    for (size_t i = 0; i < 8; ++i) {
      d[i] ^= v[16 + i];
    }
    fio_memcpy32(data + 32, d);

    fio_memcpy32(d, data + 64);
    for (size_t i = 0; i < 8; ++i) {
      d[i] ^= v[8 + i];
    }
    fio_memcpy32(data + 64, d);

    fio_memcpy32(d, data + 96);
    for (size_t i = 0; i < 8; ++i) {
      d[i] ^= v[24 + i];
    }
    fio_memcpy32(data + 96, d);
  }
}

SFUNC void fio_chacha20(void *restrict data,
                        size_t len,
                        const void *key,
                        const void *nonce,
                        uint32_t counter) {
  fio_u512 c = fio___chacha_init(key, nonce, counter);
  for (size_t pos = 127; pos < len; pos += 128) {
    fio___chacha_vround20x2(c, (uint8_t *)data);
    c.u32[12] += 2; /* block counter */
    data = (void *)((uint8_t *)data + 128);
  }
  if ((len & 64)) {
    fio___chacha_vround20(c, (uint8_t *)data);
    data = (void *)((uint8_t *)data + 64);
    ++c.u32[12];
  }
  if ((len & 63)) {
    fio_u512 dest; /* no need to initialize, junk data disregarded. */
    fio_memcpy63x(dest.u64, data, len);
    fio___chacha_vround20(c, dest.u8);
    fio_memcpy63x(data, dest.u64, len);
  }
}

/* *****************************************************************************
ChaCha20Poly1305 Encryption with Authentication
***************************************************************************** */

FIO_IFUNC fio_u512 fio___chacha20_mixround(fio_u512 c) {
  fio_u512 k = {.u64 = {0}};
  fio___chacha_vround20(c, k.u8);
  return k;
}
SFUNC void fio_chacha20_poly1305_enc(void *restrict mac,
                                     void *restrict data,
                                     size_t len,
                                     const void *ad, /* additional data */
                                     size_t adlen,
                                     const void *key,
                                     const void *nonce) {
  fio_u512 c = fio___chacha_init(key, nonce, 0);
  fio___poly_s pl;
  {
    fio_u512 c2 = fio___chacha20_mixround(c);
    pl = fio___poly_init(&c2);
  }
  ++c.u32[12]; /* block counter */
  for (size_t i = 31; i < adlen; i += 32) {
    fio___poly_consume128bit(&pl, (uint8_t *)ad, 1);
    fio___poly_consume128bit(&pl, (uint8_t *)ad + 16, 1);
    ad = (void *)((uint8_t *)ad + 32);
  }
  if (adlen & 16) {
    fio___poly_consume128bit(&pl, (uint8_t *)ad, 1);
    ad = (void *)((uint8_t *)ad + 16);
  }
  if (adlen & 15) {
    uint64_t tmp[2] = {0}; /* 16 byte pad */
    fio_memcpy15x(tmp, ad, adlen);
    fio___poly_consume128bit(&pl, (uint8_t *)tmp, 1);
  }
  for (size_t i = 127; i < len; i += 128) {
    fio___chacha_vround20x2(c, (uint8_t *)data);
    fio___poly_consume128bit(&pl, data, 1);
    fio___poly_consume128bit(&pl, (void *)((uint8_t *)data + 16), 1);
    fio___poly_consume128bit(&pl, (void *)((uint8_t *)data + 32), 1);
    fio___poly_consume128bit(&pl, (void *)((uint8_t *)data + 48), 1);
    fio___poly_consume128bit(&pl, (void *)((uint8_t *)data + 64), 1);
    fio___poly_consume128bit(&pl, (void *)((uint8_t *)data + 80), 1);
    fio___poly_consume128bit(&pl, (void *)((uint8_t *)data + 96), 1);
    fio___poly_consume128bit(&pl, (void *)((uint8_t *)data + 112), 1);
    c.u32[12] += 2; /* block counter */
    data = (void *)((uint8_t *)data + 128);
  }
  if ((len & 64)) {
    fio___chacha_vround20(c, (uint8_t *)data);
    fio___poly_consume128bit(&pl, data, 1);
    fio___poly_consume128bit(&pl, (void *)((uint8_t *)data + 16), 1);
    fio___poly_consume128bit(&pl, (void *)((uint8_t *)data + 32), 1);
    fio___poly_consume128bit(&pl, (void *)((uint8_t *)data + 48), 1);
    ++c.u32[12]; /* block counter */
    data = (void *)((uint8_t *)data + 64);
  }
  if ((len & 63)) {
    fio_u512 dest;
    fio_memcpy63x(dest.u8, data, len);
    fio___chacha_vround20(c, dest.u8);
    fio_memcpy63x(data, dest.u8, len);
    uint8_t *p = dest.u8;
    if ((len & 32)) {
      fio___poly_consume128bit(&pl, p, 1);
      fio___poly_consume128bit(&pl, (p + 16), 1);
      p += 32;
    }
    if ((len & 16)) {
      fio___poly_consume128bit(&pl, p, 1);
      p += 16;
    }
    if ((len & 15)) {
      /* zero out poly padding */
      for (size_t i = (len & 15UL); i < 16; i++)
        p[i] = 0;
      fio___poly_consume128bit(&pl, p, 1);
    }
  }
  {
    uint64_t mac_data[2] = {fio_ltole64(adlen), fio_ltole64(len)};
    fio___poly_consume128bit(&pl, (uint8_t *)mac_data, 1);
  }
  fio___poly_finilize(&pl);
  fio_u2buf64_le(mac, pl.a[0]);
  fio_u2buf64_le(&((char *)mac)[8], pl.a[1]);
}

SFUNC void fio_chacha20_poly1305_auth(void *restrict mac,
                                      void *restrict data,
                                      size_t len,
                                      const void *ad, /* additional data */
                                      size_t adlen,
                                      const void *key,
                                      const void *nonce) {
  fio___poly_s pl;
  {
    fio_u512 c = fio___chacha_init(key, nonce, 0);
    c = fio___chacha20_mixround(c); /* computes poly1305 key */
    pl = fio___poly_init(&c);
  }
  for (size_t i = 31; i < adlen; i += 32) {
    fio___poly_consume128bit(&pl, (uint8_t *)ad, 1);
    fio___poly_consume128bit(&pl, (uint8_t *)ad + 16, 1);
    ad = (void *)((uint8_t *)ad + 32);
  }
  if (adlen & 16) {
    fio___poly_consume128bit(&pl, (uint8_t *)ad, 1);
    ad = (void *)((uint8_t *)ad + 16);
  }
  if (adlen & 15) {
    uint64_t tmp[2] = {0}; /* 16 byte pad */
    fio_memcpy15x(tmp, ad, adlen);
    fio___poly_consume128bit(&pl, (uint8_t *)tmp, 1);
  }
  fio___poly_consume_msg(&pl, (uint8_t *)data, (len & (~15ULL)));
  if ((len & 15)) {
    fio_u128 dest = {0}; /* 16 byte pad */
    fio_memcpy15x(dest.u64, (uint8_t *)data + (len & (~15ULL)), len);
    fio___poly_consume128bit(&pl, (uint8_t *)(dest.u64), 1);
  }
  {
    uint64_t mac_data[2] = {fio_ltole64(adlen), fio_ltole64(len)};
    fio___poly_consume128bit(&pl, (uint8_t *)mac_data, 1);
  }
  fio___poly_finilize(&pl);
  fio_u2buf64_le(mac, pl.a[0]);
  fio_u2buf64_le(&((char *)mac)[8], pl.a[1]);
}

SFUNC int fio_chacha20_poly1305_dec(void *restrict mac,
                                    void *restrict data,
                                    size_t len,
                                    const void *ad, /* additional data */
                                    size_t adlen,
                                    const void *key,
                                    const void *nonce) {
  uint64_t auth[2];
  fio_chacha20_poly1305_auth(&auth, data, len, ad, adlen, key, nonce);
  if (((auth[0] ^ fio_buf2u64u(mac)) |
       (auth[1] ^ fio_buf2u64u(((char *)mac + 8)))))
    return -1;
  fio_chacha20(data, len, key, nonce, 1);
  return 0;
}
/* *****************************************************************************
Module Cleanup
*****************************************************************************
*/

#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_CHACHA
#endif /* FIO_CHACHA */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_SHA1               /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                                    SHA 1



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_SHA1) && !defined(H___FIO_SHA1___H)
#define H___FIO_SHA1___H
/* *****************************************************************************
SHA 1
***************************************************************************** */

/** The data type containing the SHA1 digest (result). */
typedef union {
#ifdef __SIZEOF_INT128__
  __uint128_t align__;
#else
  uint64_t align__;
#endif
  uint32_t v[5];
  uint8_t digest[20];
} fio_sha1_s;

/**
 * A simple, non streaming, implementation of the SHA1 hashing algorithm.
 *
 * Do NOT use - SHA1 is broken... but for some reason some protocols still
 * require it's use (i.e., WebSockets), so it's here for your convenience.
 */
SFUNC fio_sha1_s fio_sha1(const void *data, uint64_t len);

/** Returns the digest length of SHA1 in bytes (20 bytes) */
FIO_IFUNC size_t fio_sha1_len(void);

/** Returns the 20 Byte long digest of a SHA1 object. */
FIO_IFUNC uint8_t *fio_sha1_digest(fio_sha1_s *s);

/* *****************************************************************************
SHA 1 Implementation - inlined static functions
***************************************************************************** */

/** returns the digest length of SHA1 in bytes */
FIO_IFUNC size_t fio_sha1_len(void) { return 20; }

/** returns the digest of a SHA1 object. */
FIO_IFUNC uint8_t *fio_sha1_digest(fio_sha1_s *s) { return s->digest; }

/* *****************************************************************************
Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

FIO_IFUNC void fio___sha1_round512(uint32_t *old, /* state */
                                   uint32_t *w /* 16 words */) {
#if FIO___HAS_ARM_INTRIN
  /* Code adjusted from:
   * https://github.com/noloader/SHA-Intrinsics/blob/master/sha1-arm.c
   * Credit to Jeffrey Walton.
   */
  uint32x4_t w0, w1, w2, w3;
  uint32x4_t t0, t1, v0, v_old;
  uint32_t e0, e1, e_old;
  e0 = e_old = old[4];
  v_old = vld1q_u32(old);
  v0 = v_old;

  /* load to vectors */
  w0 = vld1q_u32(w);
  w1 = vld1q_u32(w + 4);
  w2 = vld1q_u32(w + 8);
  w3 = vld1q_u32(w + 12);
  /* make little endian */
  w0 = vreinterpretq_u32_u8(vrev32q_u8(vreinterpretq_u8_u32(w0)));
  w1 = vreinterpretq_u32_u8(vrev32q_u8(vreinterpretq_u8_u32(w1)));
  w2 = vreinterpretq_u32_u8(vrev32q_u8(vreinterpretq_u8_u32(w2)));
  w3 = vreinterpretq_u32_u8(vrev32q_u8(vreinterpretq_u8_u32(w3)));

  t0 = vaddq_u32(w0, vdupq_n_u32(0x5A827999));
  t1 = vaddq_u32(w1, vdupq_n_u32(0x5A827999));

  /* round: 0-3 */
  e1 = vsha1h_u32(vgetq_lane_u32(v0, 0));
  v0 = vsha1cq_u32(v0, e0, t0);
  t0 = vaddq_u32(w2, vdupq_n_u32(0x5A827999));
  w0 = vsha1su0q_u32(w0, w1, w2);

  /* round: 4-7 */
  e0 = vsha1h_u32(vgetq_lane_u32(v0, 0));
  v0 = vsha1cq_u32(v0, e1, t1);
  t1 = vaddq_u32(w3, vdupq_n_u32(0x5A827999));
  w0 = vsha1su1q_u32(w0, w3);
  w1 = vsha1su0q_u32(w1, w2, w3);

  /* round: 8-11 */
  e1 = vsha1h_u32(vgetq_lane_u32(v0, 0));
  v0 = vsha1cq_u32(v0, e0, t0);
  t0 = vaddq_u32(w0, vdupq_n_u32(0x5A827999));
  w1 = vsha1su1q_u32(w1, w0);
  w2 = vsha1su0q_u32(w2, w3, w0);

#define FIO_SHA1_ROUND_(K, rn_fn, n, ni, n0, n1, n2, n3)                       \
  e##n = vsha1h_u32(vgetq_lane_u32(v0, 0));                                    \
  v0 = rn_fn(v0, e##ni, t##ni);                                                \
  t##ni = vaddq_u32(w##n1, vdupq_n_u32(K));                                    \
  w##n2 = vsha1su1q_u32(w##n2, w##n1);                                         \
  w##n3 = vsha1su0q_u32(w##n3, w##n0, w##n1);
  FIO_SHA1_ROUND_(0x6ED9EBA1, vsha1cq_u32, 0, 1, 0, 1, 2, 3)
  FIO_SHA1_ROUND_(0x6ED9EBA1, vsha1cq_u32, 1, 0, 1, 2, 3, 0)
  FIO_SHA1_ROUND_(0x6ED9EBA1, vsha1pq_u32, 0, 1, 2, 3, 0, 1)
  FIO_SHA1_ROUND_(0x6ED9EBA1, vsha1pq_u32, 1, 0, 3, 0, 1, 2)
  FIO_SHA1_ROUND_(0x6ED9EBA1, vsha1pq_u32, 0, 1, 0, 1, 2, 3)

  FIO_SHA1_ROUND_(0x8F1BBCDC, vsha1pq_u32, 1, 0, 1, 2, 3, 0)
  FIO_SHA1_ROUND_(0x8F1BBCDC, vsha1pq_u32, 0, 1, 2, 3, 0, 1)
  FIO_SHA1_ROUND_(0x8F1BBCDC, vsha1mq_u32, 1, 0, 3, 0, 1, 2)
  FIO_SHA1_ROUND_(0x8F1BBCDC, vsha1mq_u32, 0, 1, 0, 1, 2, 3)
  FIO_SHA1_ROUND_(0x8F1BBCDC, vsha1mq_u32, 1, 0, 1, 2, 3, 0)

  FIO_SHA1_ROUND_(0xCA62C1D6, vsha1mq_u32, 0, 1, 2, 3, 0, 1)
  FIO_SHA1_ROUND_(0xCA62C1D6, vsha1mq_u32, 1, 0, 3, 0, 1, 2)
  FIO_SHA1_ROUND_(0xCA62C1D6, vsha1pq_u32, 0, 1, 0, 1, 2, 3)
  FIO_SHA1_ROUND_(0xCA62C1D6, vsha1pq_u32, 1, 0, 1, 2, 3, 0)
#undef FIO_SHA1_ROUND_
  /* round: 68-71 */
  e0 = vsha1h_u32(vgetq_lane_u32(v0, 0));
  v0 = vsha1pq_u32(v0, e1, t1);
  t1 = vaddq_u32(w3, vdupq_n_u32(0xCA62C1D6));
  w0 = vsha1su1q_u32(w0, w3);

  /* round: 72-75 */
  e1 = vsha1h_u32(vgetq_lane_u32(v0, 0));
  v0 = vsha1pq_u32(v0, e0, t0);

  /* round: 76-79 */
  e0 = vsha1h_u32(vgetq_lane_u32(v0, 0));
  v0 = vsha1pq_u32(v0, e1, t1);

  /* combine and store */
  e0 += e_old;
  v0 = vaddq_u32(v_old, v0);
  vst1q_u32(old, v0);
  old[4] = e0;

#else /* !FIO___HAS_ARM_INTRIN portable implementation */

  uint32_t v[8] = {0}; /* copy old state to new + reserve registers (8 not 6) */
  for (size_t i = 0; i < 5; ++i)
    v[i] = old[i];

  for (size_t i = 0; i < 16; ++i) /* convert read buffer to Big Endian */
    w[i] = fio_ntol32(w[i]);

#define FIO___SHA1_ROUND4(K, F, i)                                             \
  FIO___SHA1_ROUND((K), (F), i);                                               \
  FIO___SHA1_ROUND((K), (F), i + 1);                                           \
  FIO___SHA1_ROUND((K), (F), i + 2);                                           \
  FIO___SHA1_ROUND((K), (F), i + 3);
#define FIO___SHA1_ROUND16(K, F, i)                                            \
  FIO___SHA1_ROUND4((K), (F), i);                                              \
  FIO___SHA1_ROUND4((K), (F), i + 4);                                          \
  FIO___SHA1_ROUND4((K), (F), i + 8);                                          \
  FIO___SHA1_ROUND4((K), (F), i + 12);
#define FIO___SHA1_ROUND20(K, F, i)                                            \
  FIO___SHA1_ROUND16(K, F, i);                                                 \
  FIO___SHA1_ROUND4((K), (F), i + 16);

#define FIO___SHA1_ROTATE_OLD(K, F, i)                                         \
  v[5] = fio_lrot32(v[0], 5) + v[4] + F + (uint32_t)K + w[(i)&15];             \
  v[4] = v[3];                                                                 \
  v[3] = v[2];                                                                 \
  v[2] = fio_lrot32(v[1], 30);                                                 \
  v[1] = v[0];                                                                 \
  v[0] = v[5];

#define FIO___SHA1_ROTATE(K, F, i)                                             \
  v[5] = fio_lrot32(v[0], 5) + v[4] + F + (uint32_t)K + w[(i)&15];             \
  v[1] = fio_lrot32(v[1], 30);                                                 \
  fio_u32x8_reshuffle(v, 5, 0, 1, 2, 3, 5, 6, 7);

#define FIO___SHA1_CALC_WORD(i)                                                \
  fio_lrot32(                                                                  \
      (w[(i + 13) & 15] ^ w[(i + 8) & 15] ^ w[(i + 2) & 15] ^ w[(i)&15]),      \
      1);

#define FIO___SHA1_ROUND(K, F, i) FIO___SHA1_ROTATE(K, F, i);
  /* perform first 16 rounds with simple words as copied from data */
  FIO___SHA1_ROUND16(0x5A827999, ((v[1] & v[2]) | ((~v[1]) & (v[3]))), 0);

/* change round definition so now we compute the word's value per round */
#undef FIO___SHA1_ROUND
#define FIO___SHA1_ROUND(K, F, i)                                              \
  w[(i)&15] = FIO___SHA1_CALC_WORD(i);                                         \
  FIO___SHA1_ROTATE(K, F, i);

  /* complete last 4 round from the first 20 round group */
  FIO___SHA1_ROUND4(0x5A827999, ((v[1] & v[2]) | ((~v[1]) & (v[3]))), 16);

  /* remaining 20 round groups */
  FIO___SHA1_ROUND20(0x6ED9EBA1, (v[1] ^ v[2] ^ v[3]), 20);
  FIO___SHA1_ROUND20(0x8F1BBCDC, ((v[1] & (v[2] | v[3])) | (v[2] & v[3])), 40);
  FIO___SHA1_ROUND20(0xCA62C1D6, (v[1] ^ v[2] ^ v[3]), 60);
  /* sum and store */
  for (size_t i = 0; i < 5; ++i)
    old[i] += v[i];

#undef FIO___SHA1_ROTATE
#undef FIO___SHA1_ROTATE_OLD
#undef FIO___SHA1_CALC_WORD
#undef FIO___SHA1_ROUND
#undef FIO___SHA1_ROUND4
#undef FIO___SHA1_ROUND16
#undef FIO___SHA1_ROUND20
#endif /* FIO___HAS_ARM_INTRIN */
}
/**
 * A simple, non streaming, implementation of the SHA1 hashing algorithm.
 *
 * Do NOT use - SHA1 is broken... but for some reason some protocols still
 * require it's use (i.e., WebSockets), so it's here for your convinience.
 */
SFUNC fio_sha1_s fio_sha1(const void *data, uint64_t len) {
  fio_sha1_s s FIO_ALIGN(16) = {.v = {
                                    0x67452301,
                                    0xEFCDAB89,
                                    0x98BADCFE,
                                    0x10325476,
                                    0xC3D2E1F0,
                                }};
  uint32_t vec[16] FIO_ALIGN(16);

  const uint8_t *buf = (const uint8_t *)data;

  for (size_t i = 63; i < len; i += 64) {
    fio_memcpy64(vec, buf);
    fio___sha1_round512(s.v, vec);
    buf += 64;
  }
  for (size_t i = 0; i < 16; ++i) {
    vec[i] = 0;
  }
  if ((len & 63)) {
    uint32_t tbuf[16] = {0};
    fio_memcpy63x(tbuf, buf, len);
    fio_memcpy64(vec, tbuf);
  }
  ((uint8_t *)vec)[(len & 63)] = 0x80;

  if ((len & 63) > 55) {
    fio___sha1_round512(s.v, vec);
    for (size_t i = 0; i < 16; ++i) {
      vec[i] = 0;
    }
  }
  len <<= 3;
  len = fio_lton64(len);
  vec[14] = (uint32_t)(len & 0xFFFFFFFF);
  vec[15] = (uint32_t)(len >> 32);
  fio___sha1_round512(s.v, vec);
  for (size_t i = 0; i < 5; ++i) {
    s.v[i] = fio_ntol32(s.v[i]);
  }
  return s;
}

/** HMAC-SHA1, resulting in a 20 byte authentication code. */
SFUNC fio_sha1_s fio_sha1_hmac(const void *key,
                               uint64_t key_len,
                               const void *msg,
                               uint64_t msg_len) {
  fio_sha1_s inner FIO_ALIGN(16) = {.v =
                                        {
                                            0x67452301,
                                            0xEFCDAB89,
                                            0x98BADCFE,
                                            0x10325476,
                                            0xC3D2E1F0,
                                        }},
                   outer FIO_ALIGN(16) = {.v = {
                                              0x67452301,
                                              0xEFCDAB89,
                                              0x98BADCFE,
                                              0x10325476,
                                              0xC3D2E1F0,
                                          }};
  fio_u512 v = fio_u512_init64(0), k = fio_u512_init64(0);
  const uint8_t *buf = (const uint8_t *)msg;

  /* copy key */
  if (key_len > 64)
    goto key_too_long;
  if (key_len == 64)
    fio_memcpy64(k.u8, key);
  else
    fio_memcpy63x(k.u8, key, key_len);
  /* prepare inner key */
  for (size_t i = 0; i < 8; ++i)
    k.u64[i] ^= (uint64_t)0x3636363636363636ULL;

  /* hash inner key block */
  fio___sha1_round512(inner.v, k.u32);
  /* consume data */
  for (size_t i = 63; i < msg_len; i += 64) {
    fio_memcpy64(v.u8, buf);
    fio___sha1_round512(inner.v, v.u32);
    buf += 64;
  }
  /* finalize temporary hash */
  if ((msg_len & 63)) {
    v = fio_u512_init64(0);
    fio_memcpy63x(v.u8, buf, msg_len);
  }
  v.u8[(msg_len & 63)] = 0x80;
  if ((msg_len & 63) > 55) {
    fio___sha1_round512(inner.v, v.u32);
    v = fio_u512_init64(0);
  }
  msg_len += 64; /* add the 64 byte inner key to the length count */
  msg_len <<= 3;
  msg_len = fio_lton64(msg_len);
  v.u32[14] = (uint32_t)(msg_len & 0xFFFFFFFFUL);
  v.u32[15] = (uint32_t)(msg_len >> 32);
  fio___sha1_round512(inner.v, v.u32);
  for (size_t i = 0; i < 5; ++i)
    inner.v[i] = fio_ntol32(inner.v[i]);

  /* switch key to outer key */
  for (size_t i = 0; i < 8; ++i)
    k.u64[i] ^=
        ((uint64_t)0x3636363636363636ULL ^ (uint64_t)0x5C5C5C5C5C5C5C5CULL);

  /* hash outer key block */
  fio___sha1_round512(outer.v, k.u32);
  /* hash inner (temporary) hash result and finalize */
  v = fio_u512_init64(0);
  for (size_t i = 0; i < 5; ++i)
    v.u32[i] = inner.v[i];
  v.u8[20] = 0x80;
  msg_len = ((64U + 20U) << 3);
  msg_len = fio_lton64(msg_len);
  v.u32[14] = (uint32_t)(msg_len & 0xFFFFFFFF);
  v.u32[15] = (uint32_t)(msg_len >> 32);
  fio___sha1_round512(outer.v, v.u32);
  for (size_t i = 0; i < 5; ++i)
    outer.v[i] = fio_ntol32(outer.v[i]);

  return outer;

key_too_long:
  inner = fio_sha1(key, key_len);
  return fio_sha1_hmac(inner.digest, 20, msg, msg_len);
}
/* *****************************************************************************
Module Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#endif /* FIO_SHA1 */
#undef FIO_SHA1
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_SHA2               /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                                    SHA 2
                        SHA-256 / SHA-512 and variations



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_SHA2) && !defined(H___FIO_SHA2___H)
#define H___FIO_SHA2___H
/* *****************************************************************************
SHA 2 API
***************************************************************************** */

/** Streaming SHA-256 type. */
typedef struct {
  fio_u256 hash;
  fio_u512 cache;
  uint64_t total_len;
} fio_sha256_s;

/** A simple, non streaming, implementation of the SHA-256 hashing algorithm. */
FIO_IFUNC fio_u256 fio_sha256(const void *data, uint64_t len);

/** initializes a fio_u256 so the hash can consume streaming data. */
FIO_IFUNC fio_sha256_s fio_sha256_init(void);
/** Feed data into the hash */
SFUNC void fio_sha256_consume(fio_sha256_s *h, const void *data, uint64_t len);
/** finalizes a fio_u256 with the SHA 256 hash. */
SFUNC fio_u256 fio_sha256_finalize(fio_sha256_s *h);

/** Streaming SHA-512 type. */
typedef struct {
  fio_u512 hash;
  fio_u1024 cache;
  uint64_t total_len;
} fio_sha512_s;

/** A simple, non streaming, implementation of the SHA-512 hashing algorithm. */
FIO_IFUNC fio_u512 fio_sha512(const void *data, uint64_t len);

/** initializes a fio_u512 so the hash can consume streaming data. */
FIO_IFUNC fio_sha512_s fio_sha512_init(void);
/** Feed data into the hash */
SFUNC void fio_sha512_consume(fio_sha512_s *h, const void *data, uint64_t len);
/** finalizes a fio_u512 with the SHA 512 hash. */
SFUNC fio_u512 fio_sha512_finalize(fio_sha512_s *h);

/* *****************************************************************************
Implementation - static / inline functions.
***************************************************************************** */

/** initializes a fio_u256 so the hash can be consumed. */
FIO_IFUNC fio_sha256_s fio_sha256_init(void) {
  fio_sha256_s h = {.hash.u32 = {0x6A09E667ULL,
                                 0xBB67AE85ULL,
                                 0x3C6EF372ULL,
                                 0xA54FF53AULL,
                                 0x510E527FULL,
                                 0x9B05688CULL,
                                 0x1F83D9ABULL,
                                 0x5BE0CD19ULL}};
  return h;
}

/** A simple, non streaming, implementation of the SHA-256 hashing algorithm. */
FIO_IFUNC fio_u256 fio_sha256(const void *data, uint64_t len) {
  fio_sha256_s h = fio_sha256_init();
  fio_sha256_consume(&h, data, len);
  return fio_sha256_finalize(&h);
}

/** initializes a fio_u256 so the hash can be consumed. */
FIO_IFUNC fio_sha512_s fio_sha512_init(void) {
  fio_sha512_s h = {.hash.u64 = {0x6A09E667F3BCC908ULL,
                                 0xBB67AE8584CAA73BULL,
                                 0x3C6EF372FE94F82BULL,
                                 0xA54FF53A5F1D36F1ULL,
                                 0x510E527FADE682D1ULL,
                                 0x9B05688C2B3E6C1FULL,
                                 0x1F83D9ABFB41BD6BULL,
                                 0x5BE0CD19137E2179ULL}};
  return h;
}

/** A simple, non streaming, implementation of the SHA-256 hashing algorithm. */
FIO_IFUNC fio_u512 fio_sha512(const void *data, uint64_t len) {
  fio_sha512_s h = fio_sha512_init();
  fio_sha512_consume(&h, data, len);
  return fio_sha512_finalize(&h);
}

/* *****************************************************************************
Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* *****************************************************************************
Implementation - SHA-256
***************************************************************************** */

FIO_IFUNC void fio___sha256_round(fio_u256 *h, const uint8_t *block) {
  const uint32_t sha256_consts[64] = {
      0x428A2F98ULL, 0x71374491ULL, 0xB5C0FBCFULL, 0xE9B5DBA5ULL, 0x3956C25BULL,
      0x59F111F1ULL, 0x923F82A4ULL, 0xAB1C5ED5ULL, 0xD807AA98ULL, 0x12835B01ULL,
      0x243185BEULL, 0x550C7DC3ULL, 0x72BE5D74ULL, 0x80DEB1FEULL, 0x9BDC06A7ULL,
      0xC19BF174ULL, 0xE49B69C1ULL, 0xEFBE4786ULL, 0x0FC19DC6ULL, 0x240CA1CCULL,
      0x2DE92C6FULL, 0x4A7484AAULL, 0x5CB0A9DCULL, 0x76F988DAULL, 0x983E5152ULL,
      0xA831C66DULL, 0xB00327C8ULL, 0xBF597FC7ULL, 0xC6E00BF3ULL, 0xD5A79147ULL,
      0x06CA6351ULL, 0x14292967ULL, 0x27B70A85ULL, 0x2E1B2138ULL, 0x4D2C6DFCULL,
      0x53380D13ULL, 0x650A7354ULL, 0x766A0ABBULL, 0x81C2C92EULL, 0x92722C85ULL,
      0xA2BFE8A1ULL, 0xA81A664BULL, 0xC24B8B70ULL, 0xC76C51A3ULL, 0xD192E819ULL,
      0xD6990624ULL, 0xF40E3585ULL, 0x106AA070ULL, 0x19A4C116ULL, 0x1E376C08ULL,
      0x2748774CULL, 0x34B0BCB5ULL, 0x391C0CB3ULL, 0x4ED8AA4AULL, 0x5B9CCA4FULL,
      0x682E6FF3ULL, 0x748F82EEULL, 0x78A5636FULL, 0x84C87814ULL, 0x8CC70208ULL,
      0x90BEFFFAULL, 0xA4506CEBULL, 0xBEF9A3F7ULL, 0xC67178F2ULL};

  uint32_t v[8];
  for (size_t i = 0; i < 8; ++i) {
    v[i] = h->u32[i];
  }
  /* read data as an array of 16 big endian 32 bit integers. */
  uint32_t w[16] FIO_ALIGN(16);
  fio_memcpy64(w, block);
  for (size_t i = 0; i < 16; ++i) {
    w[i] = fio_lton32(w[i]); /* no-op on big endien systems */
  }

#define FIO___SHA256_ROUND_INNER_COMMON()                                      \
  uint32_t t2 =                                                                \
      ((v[0] & v[1]) ^ (v[0] & v[2]) ^ (v[1] & v[2])) +                        \
      (fio_rrot32(v[0], 2) ^ fio_rrot32(v[0], 13) ^ fio_rrot32(v[0], 22));     \
  fio_u32x8_reshuffle(v, 7, 0, 1, 2, 3, 4, 5, 6);                              \
  v[4] += t1;                                                                  \
  v[0] = t1 + t2;

  for (size_t i = 0; i < 16; ++i) {
    const uint32_t t1 =
        v[7] + sha256_consts[i] + w[i] + ((v[4] & v[5]) ^ ((~v[4]) & v[6])) +
        (fio_rrot32(v[4], 6) ^ fio_rrot32(v[4], 11) ^ fio_rrot32(v[4], 25));
    FIO___SHA256_ROUND_INNER_COMMON();
  }
  for (size_t i = 0; i < 48; ++i) { /* expand block */
    w[(i & 15)] =
        (fio_rrot32(w[((i + 14) & 15)], 17) ^
         fio_rrot32(w[((i + 14) & 15)], 19) ^ (w[((i + 14) & 15)] >> 10)) +
        w[((i + 9) & 15)] + w[(i & 15)] +
        (fio_rrot32(w[((i + 1) & 15)], 7) ^ fio_rrot32(w[((i + 1) & 15)], 18) ^
         (w[((i + 1) & 15)] >> 3));
    const uint32_t t1 =
        v[7] + sha256_consts[i + 16] + w[(i & 15)] +
        ((v[4] & v[5]) ^ ((~v[4]) & v[6])) +
        (fio_rrot32(v[4], 6) ^ fio_rrot32(v[4], 11) ^ fio_rrot32(v[4], 25));
    FIO___SHA256_ROUND_INNER_COMMON();
  }
  for (size_t i = 0; i < 8; ++i)
    h->u32[i] += v[i]; /* compress block with previous state */

#undef FIO___SHA256_ROUND_INNER_COMMON
}

/** consume data and feed it to hash. */
SFUNC void fio_sha256_consume(fio_sha256_s *h, const void *data, uint64_t len) {
  const uint8_t *r = (const uint8_t *)data;
  const size_t old_total = h->total_len;
  const size_t new_total = len + h->total_len;
  h->total_len = new_total;
  /* manage cache */
  if (old_total & 63) {
    const size_t offset = (old_total & 63);
    if (len + offset < 64) { /* not enough - copy to cache */
      fio_memcpy63x((h->cache.u8 + offset), r, len);
      return;
    }
    /* consume cache */
    const size_t byte2copy = 64UL - offset;
    fio_memcpy63x(h->cache.u8 + offset, r, byte2copy);
    fio___sha256_round(&h->hash, h->cache.u8);
    FIO_MEMSET(h->cache.u8, 0, 64);
    r += byte2copy;
    len -= byte2copy;
  }
  const uint8_t *end = r + (len & (~(uint64_t)63ULL));
  while ((uintptr_t)r < (uintptr_t)end) {
    fio___sha256_round(&h->hash, r);
    r += 64;
  }
  fio_memcpy63x(h->cache.u64, r, len);
}

SFUNC fio_u256 fio_sha256_finalize(fio_sha256_s *h) {
  if (h->total_len == ((uint64_t)0ULL - 1ULL))
    return h->hash;
  const size_t total = h->total_len;
  const size_t remainder = total & 63;
  h->cache.u8[remainder] = 0x80U; /* set the 1 bit at the left most position */
  if ((remainder) > 47) { /* make sure there's room to attach `total_len` */
    fio___sha256_round(&h->hash, h->cache.u8);
    FIO_MEMSET(h->cache.u8, 0, 64);
  }
  h->cache.u64[7] = fio_lton64((total << 3));
  fio___sha256_round(&h->hash, h->cache.u8);
  for (size_t i = 0; i < 8; ++i)
    h->hash.u32[i] = fio_ntol32(h->hash.u32[i]); /* back to big endien */
  h->total_len = ((uint64_t)0ULL - 1ULL);
  return h->hash;
}

/* *****************************************************************************
Implementation - SHA-512
***************************************************************************** */

FIO_IFUNC void fio___sha512_round(fio_u512 *h, const uint8_t *block) {
  const uint64_t sha512_consts[80] = {
      0x428A2F98D728AE22, 0x7137449123EF65CD, 0xB5C0FBCFEC4D3B2F,
      0xE9B5DBA58189DBBC, 0x3956C25BF348B538, 0x59F111F1B605D019,
      0x923F82A4AF194F9B, 0xAB1C5ED5DA6D8118, 0xD807AA98A3030242,
      0x12835B0145706FBE, 0x243185BE4EE4B28C, 0x550C7DC3D5FFB4E2,
      0x72BE5D74F27B896F, 0x80DEB1FE3B1696B1, 0x9BDC06A725C71235,
      0xC19BF174CF692694, 0xE49B69C19EF14AD2, 0xEFBE4786384F25E3,
      0x0FC19DC68B8CD5B5, 0x240CA1CC77AC9C65, 0x2DE92C6F592B0275,
      0x4A7484AA6EA6E483, 0x5CB0A9DCBD41FBD4, 0x76F988DA831153B5,
      0x983E5152EE66DFAB, 0xA831C66D2DB43210, 0xB00327C898FB213F,
      0xBF597FC7BEEF0EE4, 0xC6E00BF33DA88FC2, 0xD5A79147930AA725,
      0x06CA6351E003826F, 0x142929670A0E6E70, 0x27B70A8546D22FFC,
      0x2E1B21385C26C926, 0x4D2C6DFC5AC42AED, 0x53380D139D95B3DF,
      0x650A73548BAF63DE, 0x766A0ABB3C77B2A8, 0x81C2C92E47EDAEE6,
      0x92722C851482353B, 0xA2BFE8A14CF10364, 0xA81A664BBC423001,
      0xC24B8B70D0F89791, 0xC76C51A30654BE30, 0xD192E819D6EF5218,
      0xD69906245565A910, 0xF40E35855771202A, 0x106AA07032BBD1B8,
      0x19A4C116B8D2D0C8, 0x1E376C085141AB53, 0x2748774CDF8EEB99,
      0x34B0BCB5E19B48A8, 0x391C0CB3C5C95A63, 0x4ED8AA4AE3418ACB,
      0x5B9CCA4F7763E373, 0x682E6FF3D6B2B8A3, 0x748F82EE5DEFB2FC,
      0x78A5636F43172F60, 0x84C87814A1F0AB72, 0x8CC702081A6439EC,
      0x90BEFFFA23631E28, 0xA4506CEBDE82BDE9, 0xBEF9A3F7B2C67915,
      0xC67178F2E372532B, 0xCA273ECEEA26619C, 0xD186B8C721C0C207,
      0xEADA7DD6CDE0EB1E, 0xF57D4F7FEE6ED178, 0x06F067AA72176FBA,
      0x0A637DC5A2C898A6, 0x113F9804BEF90DAE, 0x1B710B35131C471B,
      0x28DB77F523047D84, 0x32CAAB7B40C72493, 0x3C9EBE0A15C9BEBC,
      0x431D67C49C100D4C, 0x4CC5D4BECB3E42B6, 0x597F299CFC657E2A,
      0x5FCB6FAB3AD6FAEC, 0x6C44198C4A475817};

  uint64_t t1, t2; /* used often... */
  /* copy original state */
  uint64_t v[8] FIO_ALIGN(16);
  for (size_t i = 0; i < 8; ++i)
    v[i] = h->u64[i];

  /* read data as an array of 16 big endian 64 bit integers. */
  uint64_t w[16] FIO_ALIGN(16);
  fio_memcpy128(w, block);
  for (size_t i = 0; i < 16; ++i)
    w[i] = fio_lton64(w[i]); /* no-op on big endien systems */

#define FIO___SHA512_ROUND_UNROLL(s)                                           \
  t1 = v[(7 - s) & 7] + sha512_consts[i + s] + w[(i + s) & 15] +               \
       (fio_rrot64(v[(4 - s) & 7], 14) ^ fio_rrot64(v[(4 - s) & 7], 18) ^      \
        fio_rrot64(v[(4 - s) & 7], 41)) +                                      \
       ((v[(4 - s) & 7] & v[(5 - s) & 7]) ^                                    \
        ((~v[(4 - s) & 7]) & v[(6 - s) & 7]));                                 \
  t2 =                                                                         \
      (fio_rrot64(v[(0 - s) & 7], 28) ^ fio_rrot64(v[(0 - s) & 7], 34) ^       \
       fio_rrot64(v[(0 - s) & 7], 39)) +                                       \
      ((v[(0 - s) & 7] & v[(1 - s) & 7]) ^ (v[(0 - s) & 7] & v[(2 - s) & 7]) ^ \
       (v[(1 - s) & 7] & v[(2 - s) & 7]));                                     \
  v[(3 - s) & 7] += t1;                                                        \
  v[(7 - s) & 7] = t1 + t2

  /* perform 80 "shuffle" rounds */
  for (size_t i = 0; i < 16; i += 8) {
    FIO___SHA512_ROUND_UNROLL(0);
    FIO___SHA512_ROUND_UNROLL(1);
    FIO___SHA512_ROUND_UNROLL(2);
    FIO___SHA512_ROUND_UNROLL(3);
    FIO___SHA512_ROUND_UNROLL(4);
    FIO___SHA512_ROUND_UNROLL(5);
    FIO___SHA512_ROUND_UNROLL(6);
    FIO___SHA512_ROUND_UNROLL(7);
  }
#undef FIO___SHA512_ROUND_UNROLL
#define FIO___SHA512_ROUND_UNROLL(s)                                           \
  t1 = (i + s + 14) & 15;                                                      \
  t2 = (i + s + 1) & 15;                                                       \
  t1 = fio_rrot64(w[t1], 19) ^ fio_rrot64(w[t1], 61) ^ (w[t1] >> 6);           \
  t2 = fio_rrot64(w[t2], 1) ^ fio_rrot64(w[t2], 8) ^ (w[t2] >> 7);             \
  w[(i + s) & 15] = t1 + t2 + w[(i + s + 9) & 15] + w[(i + s) & 15];           \
  t1 = v[(7 - s) & 7] + sha512_consts[i + s] + w[(i + s) & 15] +               \
       (fio_rrot64(v[(4 - s) & 7], 14) ^ fio_rrot64(v[(4 - s) & 7], 18) ^      \
        fio_rrot64(v[(4 - s) & 7], 41)) +                                      \
       ((v[(4 - s) & 7] & v[(5 - s) & 7]) ^                                    \
        ((~v[(4 - s) & 7]) & v[(6 - s) & 7]));                                 \
  t2 =                                                                         \
      (fio_rrot64(v[(0 - s) & 7], 28) ^ fio_rrot64(v[(0 - s) & 7], 34) ^       \
       fio_rrot64(v[(0 - s) & 7], 39)) +                                       \
      ((v[(0 - s) & 7] & v[(1 - s) & 7]) ^ (v[(0 - s) & 7] & v[(2 - s) & 7]) ^ \
       (v[(1 - s) & 7] & v[(2 - s) & 7]));                                     \
  v[(3 - s) & 7] += t1;                                                        \
  v[(7 - s) & 7] = t1 + t2

  for (size_t i = 16; i < 80; i += 8) {
    FIO___SHA512_ROUND_UNROLL(0);
    FIO___SHA512_ROUND_UNROLL(1);
    FIO___SHA512_ROUND_UNROLL(2);
    FIO___SHA512_ROUND_UNROLL(3);
    FIO___SHA512_ROUND_UNROLL(4);
    FIO___SHA512_ROUND_UNROLL(5);
    FIO___SHA512_ROUND_UNROLL(6);
    FIO___SHA512_ROUND_UNROLL(7);
  }
  /* sum/store state */
  for (size_t i = 0; i < 8; ++i)
    h->u64[i] += v[i];
}

/** Feed data into the hash */
SFUNC void fio_sha512_consume(fio_sha512_s *restrict h,
                              const void *restrict data,
                              uint64_t len) {
  const uint8_t *r = (const uint8_t *)data;
  const size_t old_total = h->total_len;
  const size_t new_total = len + h->total_len;
  h->total_len = new_total;
  /* manage cache */
  if (old_total & 127) {
    const size_t offset = (old_total & 127);
    if (len + offset < 128) { /* not enough - copy to cache */
      fio_memcpy127x((h->cache.u8 + offset), r, len);
      return;
    }
    /* consume cache */
    const size_t byte2copy = 128UL - offset;
    fio_memcpy127x(h->cache.u8 + offset, r, byte2copy);
    fio___sha512_round(&h->hash, h->cache.u8);
    FIO_MEMSET(h->cache.u8, 0, 128);
    r += byte2copy;
    len -= byte2copy;
  }
  const uint8_t *end = r + (len & (~(uint64_t)127ULL));
  while ((uintptr_t)r < (uintptr_t)end) {
    fio___sha512_round(&h->hash, r);
    r += 128;
  }
  fio_memcpy127x(h->cache.u64, r, len);
}

/** finalizes a fio_u512 with the SHA 512 hash. */
SFUNC fio_u512 fio_sha512_finalize(fio_sha512_s *h) {
  if (h->total_len == ((uint64_t)0ULL - 1ULL))
    return h->hash;
  const size_t total = h->total_len;
  const size_t remainder = total & 127;
  h->cache.u8[remainder] = 0x80U; /* set the 1 bit at the left most position */
  if ((remainder) > 112) { /* make sure there's room to attach `total_len` */
    fio___sha512_round(&h->hash, h->cache.u8);
    FIO_MEMSET(h->cache.u8, 0, 128);
  }
  h->cache.u64[15] = fio_lton64((total << 3));
  fio___sha512_round(&h->hash, h->cache.u8);
  for (size_t i = 0; i < 8; ++i)
    h->hash.u64[i] = fio_ntol64(h->hash.u64[i]); /* back to/from big endien */
  h->total_len = ((uint64_t)0ULL - 1ULL);
  return h->hash;
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */
#endif /* FIO_SHA2 */
#undef FIO_SHA2
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_ED25519            /* Development inclusion - ignore line */
#define FIO_SHA2               /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                          Elliptic Curve ED25519 (WIP)




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if 0 && defined(FIO_ED25519) && !defined(H___FIO_ED25519___H)
#define H___FIO_ED25519___H

/* *****************************************************************************
TODO: ED 25519

ED-25519 key generation, key exchange and signatures are crucial to complete the
minimal building blocks that would allow to secure inter-machine communication
in mostly secure environments. Of course the use of a tested cryptographic
library (where accessible) might be preferred, but some security is better than
none.
***************************************************************************** */

/* *****************************************************************************
ED25519 API
***************************************************************************** */

/** ED25519 Key Pair */
typedef struct {
  fio_u512 private_key; /* Private key (with extra internal storage?) */
  fio_u256 public_key;  /* Public key */
} fio_ed25519_s;

/* Generates a random ED25519 keypair. */
SFUNC void fio_ed25519_keypair(fio_ed25519_s *keypair);

/* Sign a message using ED25519 */
SFUNC void fio_ed25519_sign(uint8_t *signature,
                            const fio_buf_info_s message,
                            const fio_ed25519_s *keypair);

/* Verify an ED25519 signature */
SFUNC int fio_ed25519_verify(const uint8_t *signature,
                             const fio_buf_info_s message,
                             const fio_u256 *public_key);

/* *****************************************************************************
Implementation - inlined static functions
***************************************************************************** */

/* *****************************************************************************
Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* prevent ED25519 keys from having a small period (cyclic value). */
FIO_IFUNC void fio___ed25519_clamp_on_key(uint8_t *k) {
  k[0] &= 0xF8U;  /* zero out 3 least significant bits (emulate mul by 8) */
  k[31] &= 0x7FU; /* unset most significant bit (constant time fix) */
  k[31] |= 0x40U; /* set the 255th bit (making sure the value is big) */
}

static fio_u256 FIO___ED25519_PRIME = fio_u256_init64(0x7FFFFFFFFFFFFFFF,
                                                      0xFFFFFFFFFFFFFFFF,
                                                      0xFFFFFFFFFFFFFFFF,
                                                      0xFFFFFFFFFFFFFFED);
/* Obfuscate or recover ED25519 keys to prevent easy memory scraping */
FIO_IFUNC void fio___ed25519_flip(fio_ed25519_s *k) {
  /* Generate a deterministic mask */
  uint64_t msk =
      k->public_key.u64[3] + (uint64_t)(uintptr_t)(void *)&fio_ed25519_keypair;
  /* XOR mask the private key */
  fio_u512_cxor64(&k->private_key, &k->private_key, msk);
  /* XOR mask the first 192 bits of the public key */
  k->public_key.u64[0] ^= msk;
  k->public_key.u64[1] ^= msk;
  k->public_key.u64[2] ^= msk;
}

/* Elliptic Curve Point Addition for Ed25519 */
FIO_IFUNC void fio___ed25519_point_add(fio_u1024 *R, const fio_u1024 *P) {
  /* Extract coordinates for P1 and P2 (R and P) */
  fio_u256 X1 = R->u256[0], Y1 = R->u256[1], Z1 = R->u256[2], T1 = R->u256[3];
  fio_u256 X2 = P->u256[0], Y2 = P->u256[1], Z2 = P->u256[2], T2 = P->u256[3];

  fio_u256 A, B, C, D, X3, Y3, Z3, T3;

  /* A = (Y1 - X1) * (Y2 - X2) */
  fio_u256 Y1_minus_X1 = fio_u256_sub(Y1, X1);
  fio_u256 Y2_minus_X2 = fio_u256_sub(Y2, X2);
  A = fio_u256_mul(Y1_minus_X1, Y2_minus_X2);

  /* B = (Y1 + X1) * (Y2 + X2) */
  fio_u256 Y1_plus_X1 = fio_u256_add(Y1, X1);
  fio_u256 Y2_plus_X2 = fio_u256_add(Y2, X2);
  B = fio_u256_mul(Y1_plus_X1, Y2_plus_X2);

  /* C = 2 * T1 * T2 * d */
  C = fio_u256_mul(fio_u256_mul(T1, T2), ED25519_D);

  /* D = 2 * Z1 * Z2 */
  D = fio_u256_mul(fio_u256_mul(Z1, Z2), fio_u256_two());

  /* X3 = (B - A) * (D - C) */
  X3 = fio_u256_mul(fio_u256_sub(B, A), fio_u256_sub(D, C));

  /* Y3 = (B + A) * (D + C) */
  Y3 = fio_u256_mul(fio_u256_add(B, A), fio_u256_add(D, C));

  /* Z3 = D * C */
  Z3 = fio_u256_mul(D, C);

  /* T3 = (B - A) * (B + A) */
  T3 = fio_u256_mul(fio_u256_sub(B, A), fio_u256_add(B, A));

  /* Update R with the result */
  R->u256[0] = X3; /* X */
  R->u256[1] = Y3; /* Y */
  R->u256[2] = Z3; /* Z */
  R->u256[3] = T3; /* T */
}

/* Helper function: Scalar multiplication on the elliptic curve */
FIO_IFUNC void fio___ed25519_mul(fio_u512 *result,
                                 const fio_u512 *scalar,
                                 const fio_u512 *point) {
  /* Start with the point */
  fio_u512 R[2] = {{0}, point[0]}; /* Identity point */

  /* Step 2: Perform the Montgomery ladder scalar multiplication */
  for (int i = 255; i >= 0; --i) {
    uint64_t bit = (scalar->u64[i >> 6] >> (i & 63)) & 1U;
    /* Elliptic curve point addition and doubling */
    fio___ed25519_point_add(R, R + 1);
    fio___ed25519_point_double(R + bit);
  }

  /* Step 3: The final result is stored in R0 */
  *result = R[0];
}

/* Helper function: Modular reduction for Ed25519 */
FIO_IFUNC void fio___ed25519_mod_reduce(fio_u256 *s) {
  /* TODO: Implement modular reduction for Ed25519 scalar */
}

/* ED25519 Base Point (G) */
const fio_u512 FIO___ED25519_BASEPOINT = {
    .u64 =
        {
            0x216936D3CD6E53FEULL, /* x-coordinate (lower 64 bits) */
            0xC0A4E231FDD6DC5CULL, /* x-coordinate (upper 64 bits) */
            0x6666666666666666ULL, /* y-coordinate (lower 64 bits) */
            0x6666666666666666ULL  /* y-coordinate (upper 64 bits) */
        },
};

/* Generate ED25519 keypair */
SFUNC fio_ed25519_s fio_ed25519_keypair(void) {
  fio_ed25519_s keypair;
  /* Generate the 512-bit (clamped) private key */
  keypair.private_key.u64[0] = fio_rand64();
  keypair.private_key.u64[1] = fio_rand64();
  keypair.private_key.u64[2] = fio_rand64();
  keypair.private_key.u64[3] = fio_rand64();
  keypair.private_key = fio_sha512(keypair.private_key.u8, 32);
  fio___ed25519_clamp_on_key(keypair.private_key.u8);
  /* TODO: Derive the public key */
  fio_u256_mul(fio_u512 * result, const fio_u256 *a, const fio_u256 *b)
      fio___ed25519_mul(&keypair.public_key,
                        &keypair.private_key,
                        &FIO___ED25519_BASEPOINT);
  /* Maybe... */

  /* Mask data, so it's harder to scrape in case of a memory dump. */
  fio___ed25519_flip(&keypair);
  return keypair;
}

/* Sign a message using ED25519 */
SFUNC void fio_ed25519_sign(uint8_t *signature,
                            const fio_buf_info_s message,
                            const fio_ed25519_s *keypair) {
  fio_sha512_s sha;
  fio_u512 r, h;
  fio_u256 R;

  /* Step 1: Hash the private key and message */
  sha = fio_sha512_init();
  fio_sha512_consume(&sha,
                     keypair->private_key.u8 + 32,
                     32); /* Hash private key second part */
  fio_sha512_consume(&sha, message.buf, message.len); /* Hash the message */
  r = fio_sha512_finalize(&sha);                      /* Finalize the hash */

  /* Step 2: Clamp and scalar multiply */
  fio___ed25519_clamp_on_key(r.u8);
  fio___ed25519_mul((fio_ed25519_s *)&R, &r, &FIO___ED25519_BASEPOINT);

  /* Step 3: Compute 's' */
  sha = fio_sha512_init();
  fio_sha512_consume(&sha, R.u8, 32);                 /* Hash R */
  fio_sha512_consume(&sha, message.buf, message.len); /* Hash message */
  h = fio_sha512_finalize(&sha);  /* Compute H(R || message) */
  fio___ed25519_mod_reduce(h.u8); /* Modular reduction of the hash */

  /* Step 4: Create the signature */
  memcpy(signature, R.u8, 32);      /* Copy R to the signature */
  memcpy(signature + 32, h.u8, 32); /* Copy the reduced hash 's' */
}

/* Verify an ED25519 signature */
SFUNC int fio_ed25519_verify(const uint8_t *signature,
                             const fio_buf_info_s message,
                             const fio_u256 *public_key) {
  fio_sha512_s sha;
  fio_u512 r, h;
  uint8_t calculated_R[32];

  /* Step 1: Recalculate R */
  sha = fio_sha512_init();
  fio_sha512_consume(&sha, public_key->u8, 32);       /* Hash the public key */
  fio_sha512_consume(&sha, message.buf, message.len); /* Hash the message */
  r = fio_sha512_finalize(&sha);                      /* Finalize the hash */

  fio___ed25519_mul((fio_ed25519_s *)calculated_R, &r, &public_key->u8);

  /* Step 2: Compare calculated R with signature R using FIO_MEMCMP */
  return FIO_MEMCMP(calculated_R, signature, 32) == 0;
}

/* *****************************************************************************
Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_ED25519
#endif /* FIO_ED25519 */
/* ************************************************************************** */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_STR_NAME fio       /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        Dynamic Strings (binary safe)



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#ifdef FIO_STR_SMALL
#ifndef FIO_STR_NAME
#define FIO_STR_NAME FIO_STR_SMALL
#endif
#ifndef FIO_STR_OPTIMIZE4IMMUTABILITY
#define FIO_STR_OPTIMIZE4IMMUTABILITY 1
#endif
#endif /* FIO_STR_SMALL */

#if defined(FIO_STR_NAME)

#ifndef FIO_STR_OPTIMIZE_EMBEDDED
/**
 * For each unit (0 by default), adds `sizeof(char *)` bytes to the type size,
 * increasing the amount of strings that could be embedded within the type
 * without additional memory allocation.
 *
 * For example, when using a reference counter wrapper on a 64bit system, it
 * would make sense to set this value to 1 - allowing the type size to fully
 * utilize a 16 byte memory allocation alignment.
 */
#define FIO_STR_OPTIMIZE_EMBEDDED 0
#endif

#ifndef FIO_STR_OPTIMIZE4IMMUTABILITY
/**
 * Minimizes the struct size, storing only string length and pointer.
 *
 * By avoiding extra (mutable related) data, such as the allocated memory's
 * capacity, strings require less memory. However, this does introduce a
 * performance penalty when editing the string data.
 */
#define FIO_STR_OPTIMIZE4IMMUTABILITY 0
#endif

#if FIO_STR_OPTIMIZE4IMMUTABILITY
/* enforce limit after which FIO_STR_OPTIMIZE4IMMUTABILITY makes no sense */
#if FIO_STR_OPTIMIZE_EMBEDDED > 1
#undef FIO_STR_OPTIMIZE_EMBEDDED
#define FIO_STR_OPTIMIZE_EMBEDDED 1
#endif
#else
/* enforce limit due to 6 bit embedded string length limit (assumes 64 bit) */
#if FIO_STR_OPTIMIZE_EMBEDDED > 4
#undef FIO_STR_OPTIMIZE_EMBEDDED
#define FIO_STR_OPTIMIZE_EMBEDDED 4
#endif
#endif /* FIO_STR_OPTIMIZE4IMMUTABILITY*/

/* *****************************************************************************
String API - Initialization and Destruction
***************************************************************************** */

/**
 * The `fio_str_s` type should be considered opaque.
 *
 * The type's attributes should be accessed ONLY through the accessor
 * functions: `fio_str2cstr`, `fio_str_len`, `fio_str2ptr`, `fio_str_capa`,
 * etc'.
 *
 * Note: when the `small` flag is present, the structure is ignored and used
 * as raw memory for a small String (no additional allocation). This changes
 * the String's behavior drastically and requires that the accessor functions
 * be used.
 */
typedef struct {
  /* String flags:
   *
   * bit 1: small string.
   * bit 2: frozen string.
   * bit 3: static (non allocated) string (big strings only).
   * bit 3-8: small string length (up to 64 bytes).
   */
  uint8_t special;
  uint8_t reserved[(sizeof(void *) * (1 + FIO_STR_OPTIMIZE_EMBEDDED)) -
                   (sizeof(uint8_t))]; /* padding length */
#if !FIO_STR_OPTIMIZE4IMMUTABILITY
  size_t capa; /* known capacity for longer Strings */
  size_t len;  /* String length for longer Strings */
#endif         /* FIO_STR_OPTIMIZE4IMMUTABILITY */
  char *buf;   /* pointer for longer Strings */
} FIO_NAME(FIO_STR_NAME, s);

#ifdef FIO_PTR_TAG_TYPE
#define FIO_STR_PTR FIO_PTR_TAG_TYPE
#else
#define FIO_STR_PTR FIO_NAME(FIO_STR_NAME, s) *
#endif

#ifndef FIO_STR_INIT
/**
 * This value should be used for initialization. For example:
 *
 *      // on the stack
 *      fio_str_s str = FIO_STR_INIT;
 *
 *      // or on the heap
 *      fio_str_s *str = malloc(sizeof(*str));
 *      *str = FIO_STR_INIT;
 *
 * Remember to cleanup:
 *
 *      // on the stack
 *      fio_str_destroy(&str);
 *
 *      // or on the heap
 *      fio_str_free(str);
 *      free(str);
 */
#define FIO_STR_INIT                                                           \
  { .special = 0 }

/**
 * This macro allows the container to be initialized with existing data, as long
 * as it's memory was allocated with the same allocator (`malloc` /
 * `fio_malloc`).
 *
 * The `capacity` value should exclude the NUL character (if exists).
 *
 * NOTE: This macro isn't valid for FIO_STR_SMALL (or strings with the
 * FIO_STR_OPTIMIZE4IMMUTABILITY optimization)
 */
#define FIO_STR_INIT_EXISTING(buffer, length, capacity)                        \
  { .capa = (capacity), .len = (length), .buf = (buffer) }

/**
 * This macro allows the container to be initialized with existing static data,
 * that shouldn't be freed.
 *
 * NOTE: This macro isn't valid for FIO_STR_SMALL (or strings with the
 * FIO_STR_OPTIMIZE4IMMUTABILITY optimization)
 */
#define FIO_STR_INIT_STATIC(buffer)                                            \
  {                                                                            \
    .special = 4, .capa = FIO_STRLEN((buffer)), .len = FIO_STRLEN((buffer)),   \
    .buf = (char *)(buffer)                                                    \
  }

/**
 * This macro allows the container to be initialized with existing static data,
 * that shouldn't be freed.
 *
 * NOTE: This macro isn't valid for FIO_STR_SMALL (or strings with the
 * FIO_STR_OPTIMIZE4IMMUTABILITY optimization)
 */
#define FIO_STR_INIT_STATIC2(buffer, length)                                   \
  { .special = 4, .capa = (length), .len = (length), .buf = (char *)(buffer) }

#endif /* FIO_STR_INIT */

#ifndef FIO_REF_CONSTRUCTOR_ONLY
/** Allocates a new String object on the heap. */
FIO_IFUNC FIO_STR_PTR FIO_NAME(FIO_STR_NAME, new)(void);

/**
 * Destroys the string and frees the container (if allocated with `new`).
 */
FIO_IFUNC void FIO_NAME(FIO_STR_NAME, free)(FIO_STR_PTR s);
#endif /* FIO_REF_CONSTRUCTOR_ONLY */

/**
 * Initializes the container with the provided static / constant string.
 *
 * The string will be copied to the container **only** if it will fit in the
 * container itself. Otherwise, the supplied pointer will be used as is and it
 * should remain valid until the string is destroyed.
 *
 * The final string can be safely be destroyed (using the `destroy` function).
 */
FIO_IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, init_const)(FIO_STR_PTR s,
                                                            const char *str,
                                                            size_t len);

/**
 * Initializes the container with a copy of the provided dynamic string.
 *
 * The string is always copied and the final string must be destroyed (using the
 * `destroy` function).
 */
FIO_IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, init_copy)(FIO_STR_PTR s,
                                                           const char *str,
                                                           size_t len);

/**
 * Initializes the container with a copy of an existing String object.
 *
 * The string is always copied and the final string must be destroyed (using the
 * `destroy` function).
 */
FIO_IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, init_copy2)(FIO_STR_PTR dest,
                                                            FIO_STR_PTR src);

/**
 * Frees the String's resources and re-initializes the container.
 *
 * Note: if the container isn't allocated on the stack, it should be freed
 * separately using the appropriate `free` function.
 */
FIO_IFUNC void FIO_NAME(FIO_STR_NAME, destroy)(FIO_STR_PTR s);

/**
 * Returns a C string with the existing data, re-initializing the String.
 *
 * Note: the String data is removed from the container, but the container
 * isn't freed.
 *
 * Returns NULL if there's no String data.
 *
 * NOTE: Returned string is ALWAYS dynamically allocated. Remember to free.
 */
FIO_IFUNC char *FIO_NAME(FIO_STR_NAME, detach)(FIO_STR_PTR s);

/** Frees the pointer returned by `detach`. */
FIO_IFUNC void FIO_NAME(FIO_STR_NAME, dealloc)(void *ptr);

/* *****************************************************************************
String API - String state (data pointers, length, capacity, etc')
***************************************************************************** */

/** Returns the String's complete state (capacity, length and pointer).  */
FIO_IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, info)(const FIO_STR_PTR s);

/** Returns the String's partial state (length and pointer).  */
FIO_IFUNC fio_buf_info_s FIO_NAME(FIO_STR_NAME, buf)(const FIO_STR_PTR s);

/** Returns a pointer (`char *`) to the String's content. */
FIO_IFUNC char *FIO_NAME(FIO_STR_NAME, ptr)(FIO_STR_PTR s);

/** Returns the String's length in bytes. */
FIO_IFUNC size_t FIO_NAME(FIO_STR_NAME, len)(FIO_STR_PTR s);

/** Returns the String's existing capacity (total used & available memory). */
FIO_IFUNC size_t FIO_NAME(FIO_STR_NAME, capa)(FIO_STR_PTR s);

/** Prevents further manipulations to the String's content. */
FIO_IFUNC void FIO_NAME(FIO_STR_NAME, freeze)(FIO_STR_PTR s);

/** Returns true if the string is frozen. */
FIO_IFUNC uint8_t FIO_NAME_BL(FIO_STR_NAME, frozen)(FIO_STR_PTR s);

/** Returns 1 if memory was allocated (and the String must be destroyed). */
FIO_IFUNC int FIO_NAME_BL(FIO_STR_NAME, allocated)(const FIO_STR_PTR s);

/** Binary comparison returns `1` if both strings are equal and `0` if not. */
FIO_IFUNC int FIO_NAME_BL(FIO_STR_NAME, eq)(const FIO_STR_PTR str1,
                                            const FIO_STR_PTR str2);

/**
 * Returns the string's Risky Hash value.
 *
 * Note: Hash algorithm might change without notice.
 */
FIO_IFUNC uint64_t FIO_NAME(FIO_STR_NAME, hash)(const FIO_STR_PTR s,
                                                uint64_t seed);

/* *****************************************************************************
String API - Memory management
***************************************************************************** */

/**
 * Sets the new String size without reallocating any memory (limited by
 * existing capacity).
 *
 * Returns the updated state of the String.
 *
 * Note: When shrinking, any existing data beyond the new size may be
 * corrupted.
 */
FIO_IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, resize)(FIO_STR_PTR s,
                                                        size_t size);

/**
 * Performs a best attempt at minimizing memory consumption.
 *
 * Actual effects depend on the underlying memory allocator and it's
 * implementation. Not all allocators will free any memory.
 */
FIO_IFUNC void FIO_NAME(FIO_STR_NAME, compact)(FIO_STR_PTR s);

#if !FIO_STR_OPTIMIZE4IMMUTABILITY
/**
 * Reserves (at least) `amount` of bytes for the string's data.
 *
 * The reserved count includes used data. If `amount` is less than the current
 * string length, the string will be truncated(!).
 *
 * Note: When optimized for immutability (`FIO_STR_SMALL`), this may corrupt the
 * string length data.
 *
 * Make sure to call `resize` with the updated information once the editing is
 * done.
 *
 * Returns the updated state of the String.
 */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, reserve)(FIO_STR_PTR s,
                                                     size_t amount);
#define FIO_STR_RESERVE_NAME reserve
#else
/** INTERNAL - DO NOT USE! */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, __reserve)(FIO_STR_PTR s,
                                                       size_t amount);
#define FIO_STR_RESERVE_NAME __reserve
#endif
/* *****************************************************************************
String API - UTF-8 State
***************************************************************************** */

/** Returns 1 if the String is UTF-8 valid and 0 if not. */
SFUNC size_t FIO_NAME(FIO_STR_NAME, utf8_valid)(FIO_STR_PTR s);

/** Returns the String's length in UTF-8 characters. */
SFUNC size_t FIO_NAME(FIO_STR_NAME, utf8_len)(FIO_STR_PTR s);

/**
 * Takes a UTF-8 character selection information (UTF-8 position and length)
 * and updates the same variables so they reference the raw byte slice
 * information.
 *
 * If the String isn't UTF-8 valid up to the requested selection, than `pos`
 * will be updated to `-1` otherwise values are always positive.
 *
 * The returned `len` value may be shorter than the original if there wasn't
 * enough data left to accommodate the requested length. When a `len` value of
 * `0` is returned, this means that `pos` marks the end of the String.
 *
 * Returns -1 on error and 0 on success.
 */
SFUNC int FIO_NAME(FIO_STR_NAME,
                   utf8_select)(FIO_STR_PTR s, intptr_t *pos, size_t *len);

/* *****************************************************************************
String API - Content Manipulation and Review
***************************************************************************** */

/** Writes data at the end of the String. */
FIO_IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write)(FIO_STR_PTR s,
                                                       const void *src,
                                                       size_t src_len);

/**
 * Appends the `src` String to the end of the `dest` String.
 *
 * If `dest` is empty, the resulting Strings will be equal.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, concat)(FIO_STR_PTR dest,
                                                    FIO_STR_PTR const src);

/** Alias for fio_str_concat */
FIO_IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, join)(FIO_STR_PTR dest,
                                                      FIO_STR_PTR const src) {
  return FIO_NAME(FIO_STR_NAME, concat)(dest, src);
}

/**
 * Replaces the data in the String - replacing `old_len` bytes starting at
 * `start_pos`, with the data at `src` (`src_len` bytes long).
 *
 * Negative `start_pos` values are calculated backwards, `-1` == end of
 * String.
 *
 * When `old_len` is zero, the function will insert the data at `start_pos`.
 *
 * If `src_len == 0` than `src` will be ignored and the data marked for
 * replacement will be erased.
 */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, replace)(FIO_STR_PTR s,
                                                     intptr_t start_pos,
                                                     size_t old_len,
                                                     const void *src,
                                                     size_t src_len);

/** Writes data at the end of the String. See `fio_string_write2`. */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME,
                              __write2)(FIO_STR_PTR s,
                                        const fio_string_write_s srcs[]);

#ifndef FIO_STR_WRITE2
#define FIO_STR_WRITE2(str_name, dest, ...)                                    \
  FIO_NAME(str_name, __write2)(dest, (fio_string_write_s[]){__VA_ARGS__, {0}})
#endif
/* *****************************************************************************
String API - Numerals
***************************************************************************** */

/** Writes a number at the end of the String using normal base 10 notation. */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write_i)(FIO_STR_PTR s,
                                                     int64_t num);

/** Writes a number at the end of the String using Hex (base 16) notation. */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write_hex)(FIO_STR_PTR s,
                                                       int64_t num);

/* Writes a binary representation of `i` to the String */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write_bin)(FIO_STR_PTR s,
                                                       int64_t num);

/* *****************************************************************************
String API - printf style support
***************************************************************************** */

/**
 * Writes to the String using a vprintf like interface.
 *
 * Data is written to the end of the String.
 */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, vprintf)(FIO_STR_PTR s,
                                                     const char *format,
                                                     va_list argv);

/**
 * Writes to the String using a printf like interface.
 *
 * Data is written to the end of the String.
 */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME,
                              printf)(FIO_STR_PTR s, const char *format, ...);

/* *****************************************************************************
String API - C / JSON escaping
***************************************************************************** */

/**
 * Writes data at the end of the String, escaping the data using JSON semantics.
 *
 * The JSON semantic are common to many programming languages, promising a UTF-8
 * String while making it easy to read and copy the string during debugging.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write_escape)(FIO_STR_PTR s,
                                                          const void *data,
                                                          size_t data_len);

/**
 * Writes an escaped data into the string after unescaping the data.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write_unescape)(FIO_STR_PTR s,
                                                            const void *escaped,
                                                            size_t len);

/* *****************************************************************************
String API - Base64 support
***************************************************************************** */

/**
 * Writes data at the end of the String, encoding the data as Base64 encoded
 * data.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME,
                              write_base64enc)(FIO_STR_PTR s,
                                               const void *data,
                                               size_t data_len,
                                               uint8_t url_encoded);

/**
 * Writes decoded base64 data to the end of the String.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME,
                              write_base64dec)(FIO_STR_PTR s,
                                               const void *encoded,
                                               size_t encoded_len);

/* *****************************************************************************
String API - HTML escaping support
***************************************************************************** */

/** Writes HTML escaped data to a String. */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write_html_escape)(FIO_STR_PTR s,
                                                               const void *raw,
                                                               size_t len);

/** Writes HTML un-escaped data to a String - incomplete and minimal. */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME,
                              write_html_unescape)(FIO_STR_PTR s,
                                                   const void *escaped,
                                                   size_t len);

/* *****************************************************************************
String API - writing data from files to the String
***************************************************************************** */

/**
 * Reads data from a file descriptor `fd` at offset `start_at` and pastes it's
 * contents (or a slice of it) at the end of the String. If `limit == 0`, than
 * the data will be read until EOF.
 *
 * The file should be a regular file or the operation might fail (can't be used
 * for sockets).
 *
 * The file descriptor will remain open and should be closed manually.
 */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, readfd)(FIO_STR_PTR s,
                                                    int fd,
                                                    intptr_t start_at,
                                                    intptr_t limit);
/**
 * Opens the file `filename` and pastes it's contents (or a slice ot it) at
 * the end of the String. If `limit == 0`, than the data will be read until
 * EOF.
 *
 * If the file can't be located, opened or read, or if `start_at` is beyond
 * the EOF position, NULL is returned in the state's `data` field.
 */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, readfile)(FIO_STR_PTR s,
                                                      const char *filename,
                                                      intptr_t start_at,
                                                      intptr_t limit);
/* *****************************************************************************
String API - Testing
***************************************************************************** */
#ifdef FIO_STR_WRITE_TEST_FUNC
/**
 * Tests the fio_str functionality.
 */
SFUNC void FIO_NAME_TEST(stl, FIO_STR_NAME)(void);
#endif
/* *****************************************************************************


                             String Implementation

                           IMPLEMENTATION - INLINED


***************************************************************************** */

/* used here, but declared later (reference counter is static / global). */

SFUNC FIO_NAME(FIO_STR_NAME, s) * FIO_NAME(FIO_STR_NAME, __object_new)(void);
SFUNC void FIO_NAME(FIO_STR_NAME, __object_free)(FIO_NAME(FIO_STR_NAME, s) * s);
SFUNC int FIO_NAME(FIO_STR_NAME, __default_reallocate)(fio_str_info_s *dest,
                                                       size_t new_capa);
SFUNC int FIO_NAME(FIO_STR_NAME,
                   __default_copy_and_reallocate)(fio_str_info_s *dest,
                                                  size_t new_capa);
SFUNC void FIO_NAME(FIO_STR_NAME, __default_free)(void *ptr, size_t capa);

/* *****************************************************************************
String Macro Helpers
***************************************************************************** */

#define FIO_STR_IS_SMALL(s)  ((((s)->special & 1) | !(s)->buf))
#define FIO_STR_SMALL_LEN(s) ((size_t)((s)->special >> 2))
#define FIO_STR_SMALL_LEN_SET(s, l)                                            \
  ((s)->special = (((s)->special & 2) | ((uint8_t)(l) << 2) | 1))
#define FIO_STR_SMALL_CAPA(s) ((sizeof(*(s)) - 2) & 63)
#define FIO_STR_SMALL_DATA(s) ((char *)((s)->reserved))

#define FIO_STR_BIG_DATA(s)       ((s)->buf)
#define FIO_STR_BIG_IS_DYNAMIC(s) (!((s)->special & 4))
#define FIO_STR_BIG_SET_STATIC(s) ((s)->special |= 4)
#define FIO_STR_BIG_FREE_BUF(s)                                                \
  (FIO_NAME(FIO_STR_NAME, __default_free)((s)->buf, FIO_STR_BIG_CAPA((s))))

#define FIO_STR_IS_FROZEN(s) ((s)->special & 2)
#define FIO_STR_FREEZE_(s)   ((s)->special |= 2)
#define FIO_STR_THAW_(s)     ((s)->special ^= (uint8_t)2)

#if FIO_STR_OPTIMIZE4IMMUTABILITY

#define FIO_STR_BIG_LEN(s)                                                     \
  ((sizeof(void *) == 4)                                                       \
       ? (((uint32_t)(s)->reserved[0]) | ((uint32_t)(s)->reserved[1] << 8) |   \
          ((uint32_t)(s)->reserved[2] << 16))                                  \
       : (((uint64_t)(s)->reserved[0]) | ((uint64_t)(s)->reserved[1] << 8) |   \
          ((uint64_t)(s)->reserved[2] << 16) |                                 \
          ((uint64_t)(s)->reserved[3] << 24) |                                 \
          ((uint64_t)(s)->reserved[4] << 32) |                                 \
          ((uint64_t)(s)->reserved[5] << 40) |                                 \
          ((uint64_t)(s)->reserved[6] << 48)))
#define FIO_STR_BIG_LEN_SET(s, l)                                              \
  do {                                                                         \
    if (sizeof(void *) == 4) {                                                 \
      if (!((l) & ((~(uint32_t)0) << 24))) {                                   \
        (s)->reserved[0] = (l)&0xFF;                                           \
        (s)->reserved[1] = ((uint32_t)(l) >> 8) & 0xFF;                        \
        (s)->reserved[2] = ((uint32_t)(l) >> 16) & 0xFF;                       \
      } else {                                                                 \
        FIO_LOG_ERROR("facil.io small string length error - too long");        \
        (s)->reserved[0] = 0xFF;                                               \
        (s)->reserved[1] = 0xFF;                                               \
        (s)->reserved[2] = 0xFF;                                               \
      }                                                                        \
    } else {                                                                   \
      if (!((l) & ((~(uint64_t)0) << 56))) {                                   \
        (s)->reserved[0] = (l)&0xFF;                                           \
        (s)->reserved[1] = ((uint64_t)(l) >> 8) & 0xFF;                        \
        (s)->reserved[2] = ((uint64_t)(l) >> 16) & 0xFF;                       \
        (s)->reserved[3] = ((uint64_t)(l) >> 24) & 0xFF;                       \
        (s)->reserved[4] = ((uint64_t)(l) >> 32) & 0xFF;                       \
        (s)->reserved[5] = ((uint64_t)(l) >> 40) & 0xFF;                       \
        (s)->reserved[6] = ((uint64_t)(l) >> 48) & 0xFF;                       \
      } else {                                                                 \
        FIO_LOG_ERROR("facil.io small string length error - too long");        \
        (s)->reserved[0] = 0xFF;                                               \
        (s)->reserved[1] = 0xFF;                                               \
        (s)->reserved[2] = 0xFF;                                               \
        (s)->reserved[3] = 0xFF;                                               \
        (s)->reserved[4] = 0xFF;                                               \
        (s)->reserved[5] = 0xFF;                                               \
        (s)->reserved[6] = 0xFF;                                               \
      }                                                                        \
    }                                                                          \
  } while (0)
#define FIO_STR_BIG_CAPA(s) fio_string_capa4len(FIO_STR_BIG_LEN((s)))
#define FIO_STR_BIG_CAPA_SET(s, capa)
#else
#define FIO_STR_BIG_LEN(s)            ((s)->len)
#define FIO_STR_BIG_LEN_SET(s, l)     ((s)->len = (l))
#define FIO_STR_BIG_CAPA(s)           ((s)->capa)
#define FIO_STR_BIG_CAPA_SET(s, capa) (FIO_STR_BIG_CAPA(s) = (capa))
#endif

/* *****************************************************************************
String Information Round-tripping
***************************************************************************** */

/** Returns the String's complete state (capacity, length and pointer).  */
FIO_IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, info)(const FIO_STR_PTR s_) {
  fio_str_info_s r = {0};
  FIO_PTR_TAG_VALID_OR_RETURN(s_, r);
  FIO_NAME(FIO_STR_NAME, s) *s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  if (FIO_STR_IS_SMALL(s))
    r = FIO_STR_INFO3(FIO_STR_SMALL_DATA(s),
                      FIO_STR_SMALL_LEN(s),
                      FIO_STR_SMALL_CAPA(s));
  else
    r = FIO_STR_INFO3(FIO_STR_BIG_DATA(s),
                      FIO_STR_BIG_LEN(s),
                      FIO_STR_BIG_CAPA(s));
  r.capa &= ((size_t)0ULL - (!FIO_STR_IS_FROZEN(s)));
  return r;
}

/** Returns the String's partial state (length and pointer).  */
FIO_IFUNC fio_buf_info_s FIO_NAME(FIO_STR_NAME, buf)(const FIO_STR_PTR s_) {
  fio_buf_info_s r = {0};
  FIO_PTR_TAG_VALID_OR_RETURN(s_, r);
  FIO_NAME(FIO_STR_NAME, s) *s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  if (FIO_STR_IS_SMALL(s))
    r = FIO_BUF_INFO2(FIO_STR_SMALL_DATA(s), FIO_STR_SMALL_LEN(s));
  else
    r = FIO_BUF_INFO2(FIO_STR_BIG_DATA(s), FIO_STR_BIG_LEN(s));
  return r;
}

/* Internal(!): updated String data according to `info`.  */
FIO_IFUNC void FIO_NAME(FIO_STR_NAME, __info_update)(const FIO_STR_PTR s_,
                                                     fio_str_info_s info) {
  /* internally used function, tagging already validated. */
  FIO_NAME(FIO_STR_NAME, s) *s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  if (info.buf == FIO_STR_SMALL_DATA(s)) {
    s->special |= 1;
    FIO_STR_SMALL_LEN_SET(s, info.len);
    return;
  }
  s->special = 0;
  FIO_STR_BIG_LEN_SET(s, info.len);
  FIO_STR_BIG_CAPA_SET(s, info.capa);
  s->buf = info.buf;
}

/* Internal(!): updated String data according to `info`.  */
FIO_IFUNC fio_string_realloc_fn FIO_NAME(FIO_STR_NAME,
                                         __realloc_func)(const FIO_STR_PTR s_) {
  fio_string_realloc_fn options[] = {
      FIO_NAME(FIO_STR_NAME, __default_reallocate),
      FIO_NAME(FIO_STR_NAME, __default_copy_and_reallocate),
  };
  /* internally used function, tagging already validated. */
  FIO_NAME(FIO_STR_NAME, s) *s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  return options[FIO_STR_IS_SMALL(s) | !FIO_STR_BIG_IS_DYNAMIC(s)];
}

/* *****************************************************************************
String Constructors (inline)
***************************************************************************** */
#ifndef FIO_REF_CONSTRUCTOR_ONLY

/** Allocates a new String object on the heap. */
FIO_IFUNC FIO_STR_PTR FIO_NAME(FIO_STR_NAME, new)(void) {
  FIO_NAME(FIO_STR_NAME, s) *const s = FIO_NAME(FIO_STR_NAME, __object_new)();
  if (!FIO_MEM_REALLOC_IS_SAFE_ && s) {
    *s = (FIO_NAME(FIO_STR_NAME, s))FIO_STR_INIT;
  }
#ifdef DEBUG
  {
    FIO_NAME(FIO_STR_NAME, s) tmp = {0};
    FIO_ASSERT(!FIO_MEMCMP(&tmp, s, sizeof(tmp)),
               "new " FIO_MACRO2STR(
                   FIO_NAME(FIO_STR_NAME, s)) " object not initialized!");
  }
#endif
  return (FIO_STR_PTR)FIO_PTR_TAG(s);
}

/** Destroys the string and frees the container (if allocated with `new`). */
FIO_IFUNC void FIO_NAME(FIO_STR_NAME, free)(FIO_STR_PTR s_) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(s_);
  FIO_NAME(FIO_STR_NAME, s) *const s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  if (!FIO_STR_IS_SMALL(s) && FIO_STR_BIG_IS_DYNAMIC(s)) {
    FIO_STR_BIG_FREE_BUF(s);
  }
  FIO_NAME(FIO_STR_NAME, __object_free)(s);
}

#endif /* FIO_REF_CONSTRUCTOR_ONLY */

/**
 * Frees the String's resources and reinitializes the container.
 *
 * Note: if the container isn't allocated on the stack, it should be freed
 * separately using the appropriate `free` function.
 */
FIO_IFUNC void FIO_NAME(FIO_STR_NAME, destroy)(FIO_STR_PTR s_) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(s_);
  FIO_NAME(FIO_STR_NAME, s) *const s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  if (!FIO_STR_IS_SMALL(s) && FIO_STR_BIG_IS_DYNAMIC(s)) {
    FIO_STR_BIG_FREE_BUF(s);
  }
  *s = (FIO_NAME(FIO_STR_NAME, s))FIO_STR_INIT;
}

/**
 * Returns a C string with the existing data, re-initializing the String.
 *
 * Note: the String data is removed from the container, but the container
 * isn't freed.
 *
 * Returns NULL if there's no String data.
 */
FIO_IFUNC char *FIO_NAME(FIO_STR_NAME, detach)(FIO_STR_PTR s_) {
  char *data = NULL;
  FIO_PTR_TAG_VALID_OR_RETURN(s_, data);
  FIO_NAME(FIO_STR_NAME, s) *const s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);

  if (FIO_STR_IS_SMALL(s)) {
    if (FIO_STR_SMALL_LEN(s)) { /* keep these ifs apart */
      fio_str_info_s cpy =
          FIO_STR_INFO2(FIO_STR_SMALL_DATA(s), FIO_STR_SMALL_LEN(s));
      FIO_NAME(FIO_STR_NAME, __default_copy_and_reallocate)(&cpy, cpy.len);
      data = cpy.buf;
    }
  } else {
    if (FIO_STR_BIG_IS_DYNAMIC(s)) {
      data = FIO_STR_BIG_DATA(s);
    } else if (FIO_STR_BIG_LEN(s)) {
      fio_str_info_s cpy =
          FIO_STR_INFO2(FIO_STR_BIG_DATA(s), FIO_STR_BIG_LEN(s));
      FIO_NAME(FIO_STR_NAME, __default_copy_and_reallocate)(&cpy, cpy.len);
      data = cpy.buf;
    }
  }
  *s = (FIO_NAME(FIO_STR_NAME, s)){0};
  return data;
}

/**
 * Performs a best attempt at minimizing memory consumption.
 *
 * Actual effects depend on the underlying memory allocator and it's
 * implementation. Not all allocators will free any memory.
 */
FIO_IFUNC void FIO_NAME(FIO_STR_NAME, compact)(FIO_STR_PTR s_) {
#if FIO_STR_OPTIMIZE4IMMUTABILITY
  (void)s_;
#else
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(s_);
  FIO_NAME(FIO_STR_NAME, s) *const s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  if (FIO_STR_IS_SMALL(s) || !FIO_STR_BIG_IS_DYNAMIC(s) ||
      fio_string_capa4len(FIO_NAME(FIO_STR_NAME, len)(s_)) >=
          FIO_NAME(FIO_STR_NAME, capa)(s_))
    return;
  FIO_NAME(FIO_STR_NAME, s) tmp = FIO_STR_INIT;
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  FIO_NAME(FIO_STR_NAME, init_copy)
  ((FIO_STR_PTR)FIO_PTR_TAG(&tmp), i.buf, i.len);
  FIO_NAME(FIO_STR_NAME, destroy)(s_);
  *s = tmp;
#endif
}

/* *****************************************************************************
String Initialization (inline)
***************************************************************************** */

/**
 * Initializes the container with the provided static / constant string.
 *
 * The string will be copied to the container **only** if it will fit in the
 * container itself. Otherwise, the supplied pointer will be used as is and it
 * should remain valid until the string is destroyed.
 *
 * The final string can be safely be destroyed (using the `destroy` function).
 */
FIO_IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, init_const)(FIO_STR_PTR s_,
                                                            const char *str,
                                                            size_t len) {
  fio_str_info_s i = {0};
  FIO_PTR_TAG_VALID_OR_RETURN(s_, i);
  FIO_NAME(FIO_STR_NAME, s) *const s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  *s = (FIO_NAME(FIO_STR_NAME, s)){0};
  if (len < FIO_STR_SMALL_CAPA(s)) {
    FIO_STR_SMALL_LEN_SET(s, len);
    if (len && str)
      FIO_MEMCPY(FIO_STR_SMALL_DATA(s), str, len);
    FIO_STR_SMALL_DATA(s)[len] = 0;

    i = FIO_STR_INFO3(FIO_STR_SMALL_DATA(s), len, FIO_STR_SMALL_CAPA(s));
    return i;
  }
  FIO_STR_BIG_DATA(s) = (char *)str;
  FIO_STR_BIG_LEN_SET(s, len);
  FIO_STR_BIG_CAPA_SET(s, len);
  FIO_STR_BIG_SET_STATIC(s);
  i = FIO_STR_INFO3(FIO_STR_BIG_DATA(s), len, 0);
  return i;
}

/**
 * Initializes the container with the provided dynamic string.
 *
 * The string is always copied and the final string must be destroyed (using the
 * `destroy` function).
 */
FIO_IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, init_copy)(FIO_STR_PTR s_,
                                                           const char *str,
                                                           size_t len) {
  fio_str_info_s i = {0};
  FIO_PTR_TAG_VALID_OR_RETURN(s_, i);
  FIO_NAME(FIO_STR_NAME, s) *const s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  *s = (FIO_NAME(FIO_STR_NAME, s)){0};
  if (len < FIO_STR_SMALL_CAPA(s)) {
    FIO_STR_SMALL_LEN_SET(s, len);
    if (len && str)
      FIO_MEMCPY(FIO_STR_SMALL_DATA(s), str, len);
    FIO_STR_SMALL_DATA(s)[len] = 0;

    i = FIO_STR_INFO3(FIO_STR_SMALL_DATA(s), len, FIO_STR_SMALL_CAPA(s));
    return i;
  }
  i = FIO_STR_INFO2((char *)str, len);
  FIO_NAME(FIO_STR_NAME, __default_copy_and_reallocate)(&i, len);
  FIO_STR_BIG_CAPA_SET(s, i.capa);
  FIO_STR_BIG_DATA(s) = i.buf;
  FIO_STR_BIG_LEN_SET(s, len);
  return i;
}

/**
 * Initializes the container with a copy of an existing String object.
 *
 * The string is always copied and the final string must be destroyed (using the
 * `destroy` function).
 */
FIO_IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, init_copy2)(FIO_STR_PTR dest,
                                                            FIO_STR_PTR src) {
  fio_str_info_s i;
  i = FIO_NAME(FIO_STR_NAME, info)(src);
  i = FIO_NAME(FIO_STR_NAME, init_copy)(dest, i.buf, i.len);
  return i;
}

/* *****************************************************************************
String Information (inline)
***************************************************************************** */

/** Returns a pointer (`char *`) to the String's content. */
FIO_IFUNC char *FIO_NAME(FIO_STR_NAME, ptr)(FIO_STR_PTR s_) {
  FIO_PTR_TAG_VALID_OR_RETURN(s_, NULL);
  FIO_NAME(FIO_STR_NAME, s) *const s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  char *results[] = {(FIO_STR_BIG_DATA(s)), (FIO_STR_SMALL_DATA(s))};
  return results[FIO_STR_IS_SMALL(s)];
}

/** Returns the String's length in bytes. */
FIO_IFUNC size_t FIO_NAME(FIO_STR_NAME, len)(FIO_STR_PTR s_) {
  FIO_PTR_TAG_VALID_OR_RETURN(s_, 0);
  FIO_NAME(FIO_STR_NAME, s) *const s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  size_t results[] = {(FIO_STR_BIG_LEN(s)), (FIO_STR_SMALL_LEN(s))};
  return results[FIO_STR_IS_SMALL(s)];
}

/** Returns the String's existing capacity (total used & available memory). */
FIO_IFUNC size_t FIO_NAME(FIO_STR_NAME, capa)(FIO_STR_PTR s_) {
  FIO_PTR_TAG_VALID_OR_RETURN(s_, 0);
  FIO_NAME(FIO_STR_NAME, s) *const s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  if (FIO_STR_IS_SMALL(s))
    return FIO_STR_SMALL_CAPA(s);
  if (FIO_STR_BIG_IS_DYNAMIC(s))
    return FIO_STR_BIG_CAPA(s);
  return 0;
}

/**
 * Sets the new String size without reallocating any memory (limited by
 * existing capacity).
 */
FIO_IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, resize)(FIO_STR_PTR s_,
                                                        size_t size) {
  fio_str_info_s i = {0};
  FIO_PTR_TAG_VALID_OR_RETURN(s_, i);
  i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa) {
    return i;
  }
  /* resize may be used to reserve memory in advance while setting size  */
  if (i.capa > size) {
    i.len = size;
    i.buf[i.len] = 0;
  } else {
    fio_string_write(&i,
                     FIO_NAME(FIO_STR_NAME, __realloc_func)(s_),
                     NULL,
                     size - i.len);
  }
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);

  return i;
}

/**
 * Prevents further manipulations to the String's content.
 */
FIO_IFUNC void FIO_NAME(FIO_STR_NAME, freeze)(FIO_STR_PTR s_) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(s_);
  FIO_NAME(FIO_STR_NAME, s) *const s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  FIO_STR_FREEZE_(s);
}

/**
 * Returns true if the string is frozen.
 */
FIO_IFUNC uint8_t FIO_NAME_BL(FIO_STR_NAME, frozen)(FIO_STR_PTR s_) {
  FIO_PTR_TAG_VALID_OR_RETURN(s_, 1);
  FIO_NAME(FIO_STR_NAME, s) *const s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  return FIO_STR_IS_FROZEN(s);
}

/** Returns 1 if memory was allocated and (the String must be destroyed). */
FIO_IFUNC int FIO_NAME_BL(FIO_STR_NAME, allocated)(const FIO_STR_PTR s_) {
  FIO_PTR_TAG_VALID_OR_RETURN(s_, 0);
  FIO_NAME(FIO_STR_NAME, s) *const s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  return (!FIO_STR_IS_SMALL(s) & FIO_STR_BIG_IS_DYNAMIC(s));
}

/**
 * Binary comparison returns `1` if both strings are equal and `0` if not.
 */
FIO_IFUNC int FIO_NAME_BL(FIO_STR_NAME, eq)(const FIO_STR_PTR str1_,
                                            const FIO_STR_PTR str2_) {
  if (str1_ == str2_)
    return 1;
  FIO_PTR_TAG_VALID_OR_RETURN(str1_, 0);
  FIO_PTR_TAG_VALID_OR_RETURN(str2_, 0);
  fio_buf_info_s s1 = FIO_NAME(FIO_STR_NAME, buf)(str1_);
  fio_buf_info_s s2 = FIO_NAME(FIO_STR_NAME, buf)(str2_);
  return FIO_BUF_INFO_IS_EQ(s1, s2);
}

/**
 * Returns the string's Risky Hash value.
 *
 * Note: Hash algorithm might change without notice.
 */
FIO_IFUNC uint64_t FIO_NAME(FIO_STR_NAME, hash)(const FIO_STR_PTR s_,
                                                uint64_t seed) {
  fio_buf_info_s i = FIO_NAME(FIO_STR_NAME, buf)(s_);
  return fio_risky_hash((void *)i.buf, i.len, seed);
}

/* *****************************************************************************
String API - Content Manipulation and Review (inline)
***************************************************************************** */

/** Writes data at the end of the String. */
FIO_IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write)(FIO_STR_PTR s_,
                                                       const void *src,
                                                       size_t len) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_write(&i, FIO_NAME(FIO_STR_NAME, __realloc_func)(s_), src, len);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/* *****************************************************************************


                             String Implementation

                               IMPLEMENTATION


***************************************************************************** */

/* *****************************************************************************
External functions
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

FIO_LEAK_COUNTER_DEF(FIO_NAME(FIO_STR_NAME, s))
FIO_LEAK_COUNTER_DEF(FIO_NAME(FIO_STR_NAME, destroy))

/* *****************************************************************************
String Core Callbacks - Memory management
***************************************************************************** */
SFUNC FIO_NAME(FIO_STR_NAME, s) * FIO_NAME(FIO_STR_NAME, __object_new)(void) {
  FIO_NAME(FIO_STR_NAME, s) *r =
      (FIO_NAME(FIO_STR_NAME, s) *)FIO_MEM_REALLOC_(NULL, 0, (sizeof(*r)), 0);
  if (r)
    FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(FIO_STR_NAME, s));
  return r;
}
SFUNC void FIO_NAME(FIO_STR_NAME,
                    __object_free)(FIO_NAME(FIO_STR_NAME, s) * s) {
  if (!s)
    return;
  FIO_LEAK_COUNTER_ON_FREE(FIO_NAME(FIO_STR_NAME, s));
  FIO_MEM_FREE_(s, sizeof(*s));
}

SFUNC int FIO_NAME(FIO_STR_NAME, __default_reallocate)(fio_str_info_s *dest,
                                                       size_t new_capa) {
  new_capa = fio_string_capa4len(new_capa);
  void *tmp = FIO_MEM_REALLOC_(dest->buf, dest->capa, new_capa, dest->len);
  if (!tmp)
    return -1;
  if (!dest->buf)
    FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(FIO_STR_NAME, destroy));
  dest->capa = new_capa;
  dest->buf = (char *)tmp;
  return 0;
}
SFUNC int FIO_NAME(FIO_STR_NAME,
                   __default_copy_and_reallocate)(fio_str_info_s *dest,
                                                  size_t new_capa) {
  if (dest->len && new_capa < dest->len)
    new_capa = dest->len;
  new_capa = fio_string_capa4len(new_capa);
  void *tmp = FIO_MEM_REALLOC_(NULL, 0, new_capa, 0);
  if (!tmp)
    return -1;
  FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(FIO_STR_NAME, destroy));
  if (dest->len)
    FIO_MEMCPY(tmp, dest->buf, dest->len);
  ((char *)tmp)[dest->len] = 0;
  dest->capa = new_capa;
  dest->buf = (char *)tmp;
  return 0;
}
SFUNC void FIO_NAME(FIO_STR_NAME, __default_free)(void *ptr, size_t capa) {
  if (!ptr)
    return;
  FIO_LEAK_COUNTER_ON_FREE(FIO_NAME(FIO_STR_NAME, destroy));
  FIO_MEM_FREE_(ptr, capa);
  (void)capa; /* if unused */
}
SFUNC void FIO_NAME(FIO_STR_NAME, __default_free_noop)(void *str) { (void)str; }
SFUNC void FIO_NAME(FIO_STR_NAME, __default_free_noop2)(fio_str_info_s str) {
  (void)str;
}

/* *****************************************************************************
String Implementation - Memory management
***************************************************************************** */

/** Frees the pointer returned by `detach`. */
SFUNC void FIO_NAME(FIO_STR_NAME, dealloc)(void *ptr) {
  if (!ptr)
    return;
  FIO_LEAK_COUNTER_ON_FREE(FIO_NAME(FIO_STR_NAME, destroy));
  FIO_MEM_FREE_(ptr, -1);
}

/**
 * Reserves at least `amount` of bytes for the string's data.
 *
 * Returns the current state of the String.
 */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME,
                              FIO_STR_RESERVE_NAME)(FIO_STR_PTR s_,
                                                    size_t amount) {
  fio_str_info_s state = {0};
  FIO_PTR_TAG_VALID_OR_RETURN(s_, state);
  FIO_NAME(FIO_STR_NAME, s) *const s =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s_);
  state = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (FIO_STR_IS_FROZEN(s))
    return state;
  amount += state.len;
  if (state.capa <= amount) {
    FIO_NAME(FIO_STR_NAME, __realloc_func)(s_)(&state, amount);
    state.buf[state.len] = 0;
    FIO_NAME(FIO_STR_NAME, __info_update)(s_, state);
  } else if (state.capa > FIO_STR_SMALL_CAPA(s) &&
             amount <= FIO_STR_SMALL_CAPA(s) &&
             state.len <= FIO_STR_SMALL_CAPA(s)) {
    FIO_NAME(FIO_STR_NAME, s) tmp;
    state = FIO_NAME(FIO_STR_NAME, init_copy)((FIO_STR_PTR)FIO_PTR_TAG(&tmp),
                                              state.buf,
                                              state.len);
    FIO_NAME(FIO_STR_NAME, destroy)(s_);
    *s = tmp;
  }
  return state;
}

/* *****************************************************************************
String Implementation - UTF-8 State
***************************************************************************** */

/** Returns 1 if the String is UTF-8 valid and 0 if not. */
SFUNC size_t FIO_NAME(FIO_STR_NAME, utf8_valid)(FIO_STR_PTR s_) {
  FIO_PTR_TAG_VALID_OR_RETURN(s_, 0);
  fio_str_info_s state = FIO_NAME(FIO_STR_NAME, info)(s_);
  return fio_string_utf8_len(state);
}

/** Returns the String's length in UTF-8 characters. */
SFUNC size_t FIO_NAME(FIO_STR_NAME, utf8_len)(FIO_STR_PTR s_) {
  fio_str_info_s state = FIO_NAME(FIO_STR_NAME, info)(s_);
  return fio_string_utf8_len(state);
}

/**
 * Takes a UTF-8 character selection information (UTF-8 position and length)
 * and updates the same variables so they reference the raw byte slice
 * information.
 *
 * If the String isn't UTF-8 valid up to the requested selection, than `pos`
 * will be updated to `-1` otherwise values are always positive.
 *
 * The returned `len` value may be shorter than the original if there wasn't
 * enough data left to accommodate the requested length. When a `len` value of
 * `0` is returned, this means that `pos` marks the end of the String.
 *
 * Returns -1 on error and 0 on success.
 */
SFUNC int FIO_NAME(FIO_STR_NAME,
                   utf8_select)(FIO_STR_PTR s_, intptr_t *pos, size_t *len) {
  FIO_PTR_TAG_VALID_OR_RETURN(s_, -1);
  fio_str_info_s state = FIO_NAME(FIO_STR_NAME, info)(s_);
  return fio_string_utf8_select(state, pos, len);
}

/* *****************************************************************************
String Implementation - Content Manipulation and Review
***************************************************************************** */

/**
 * Writes a number at the end of the String using normal base 10 notation.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write_i)(FIO_STR_PTR s_,
                                                     int64_t num) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_write_i(&i, FIO_NAME(FIO_STR_NAME, __realloc_func)(s_), num);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/**
 * Writes a number at the end of the String using Hex (base 16) notation.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write_hex)(FIO_STR_PTR s_,
                                                       int64_t num) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_write_hex(&i, FIO_NAME(FIO_STR_NAME, __realloc_func)(s_), num);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/**
 * Writes a number at the end of the String using binary notation.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write_bin)(FIO_STR_PTR s_,
                                                       int64_t num) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_write_bin(&i, FIO_NAME(FIO_STR_NAME, __realloc_func)(s_), num);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/**
 * Appends the `src` String to the end of the `dest` String.
 *
 * If `dest` is empty, the resulting Strings will be equal.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, concat)(FIO_STR_PTR dest_,
                                                    FIO_STR_PTR const src_) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(dest_);
  if (!i.capa)
    return i;
  FIO_PTR_TAG_VALID_OR_RETURN(src_, i);
  fio_str_info_s src = FIO_NAME(FIO_STR_NAME, info)(src_);
  if (!src.len)
    return i;
  fio_string_write(&i,
                   FIO_NAME(FIO_STR_NAME, __realloc_func)(dest_),
                   src.buf,
                   src.len);
  FIO_NAME(FIO_STR_NAME, __info_update)(dest_, i);
  return i;
}

/**
 * Replaces the data in the String - replacing `old_len` bytes starting at
 * `start_pos`, with the data at `src` (`src_len` bytes long).
 *
 * Negative `start_pos` values are calculated backwards, `-1` == end of
 * String.
 *
 * When `old_len` is zero, the function will insert the data at `start_pos`.
 *
 * If `src_len == 0` than `src` will be ignored and the data marked for
 * replacement will be erased.
 */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, replace)(FIO_STR_PTR s_,
                                                     intptr_t start_pos,
                                                     size_t old_len,
                                                     const void *src,
                                                     size_t src_len) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_replace(&i,
                     FIO_NAME(FIO_STR_NAME, __realloc_func)(s_),
                     start_pos,
                     old_len,
                     src,
                     src_len);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/**
 * Writes a number at the end of the String using binary notation.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME,
                              __write2)(FIO_STR_PTR s_,
                                        const fio_string_write_s srcs[]) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_write2 FIO_NOOP(&i,
                             FIO_NAME(FIO_STR_NAME, __realloc_func)(s_),
                             srcs);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/**
 * Writes to the String using a vprintf like interface.
 *
 * Data is written to the end of the String.
 */
SFUNC fio_str_info_s FIO___PRINTF_STYLE(2, 0)
    FIO_NAME(FIO_STR_NAME,
             vprintf)(FIO_STR_PTR s_, const char *format, va_list argv) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_vprintf(&i,
                     FIO_NAME(FIO_STR_NAME, __realloc_func)(s_),
                     format,
                     argv);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/**
 * Writes to the String using a printf like interface.
 *
 * Data is written to the end of the String.
 */
SFUNC fio_str_info_s FIO___PRINTF_STYLE(2, 3)
    FIO_NAME(FIO_STR_NAME, printf)(FIO_STR_PTR s_, const char *format, ...) {
  va_list argv;
  va_start(argv, format);
  fio_str_info_s state = FIO_NAME(FIO_STR_NAME, vprintf)(s_, format, argv);
  va_end(argv);
  return state;
}

/* *****************************************************************************
String API - C / JSON escaping
***************************************************************************** */

/**
 * Writes data at the end of the String, escaping the data using JSON semantics.
 *
 * The JSON semantic are common to many programming languages, promising a UTF-8
 * String while making it easy to read and copy the string during debugging.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write_escape)(FIO_STR_PTR s_,
                                                          const void *src,
                                                          size_t len) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_write_escape(&i,
                          FIO_NAME(FIO_STR_NAME, __realloc_func)(s_),
                          src,
                          len);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/**
 * Writes an escaped data into the string after unescaping the data.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write_unescape)(FIO_STR_PTR s_,
                                                            const void *src,
                                                            size_t len) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_write_unescape(&i,
                            FIO_NAME(FIO_STR_NAME, __realloc_func)(s_),
                            src,
                            len);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/* *****************************************************************************
String - Base64 support
***************************************************************************** */

/**
 * Writes data at the end of the String, encoding the data as Base64 encoded
 * data.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME,
                              write_base64enc)(FIO_STR_PTR s_,
                                               const void *data,
                                               size_t len,
                                               uint8_t url_encoded) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_write_base64enc(&i,
                             FIO_NAME(FIO_STR_NAME, __realloc_func)(s_),
                             data,
                             len,
                             url_encoded);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/**
 * Writes decoded base64 data to the end of the String.
 */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME,
                              write_base64dec)(FIO_STR_PTR s_,
                                               const void *encoded_,
                                               size_t len) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_write_base64dec(&i,
                             FIO_NAME(FIO_STR_NAME, __realloc_func)(s_),
                             encoded_,
                             len);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/* *****************************************************************************
String API - HTML escaping support
***************************************************************************** */

/** Writes HTML escaped data to a String. */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, write_html_escape)(FIO_STR_PTR s_,
                                                               const void *data,
                                                               size_t len) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_write_html_escape(&i,
                               FIO_NAME(FIO_STR_NAME, __realloc_func)(s_),
                               data,
                               len);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/** Writes HTML un-escaped data to a String - incomplete and minimal. */
IFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME,
                              write_html_unescape)(FIO_STR_PTR s_,
                                                   const void *data,
                                                   size_t len) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_write_html_unescape(&i,
                                 FIO_NAME(FIO_STR_NAME, __realloc_func)(s_),
                                 data,
                                 len);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/* *****************************************************************************
String - read file
***************************************************************************** */

/**
 * Reads data from a file descriptor `fd` at offset `start_at` and pastes it's
 * contents (or a slice of it) at the end of the String. If `limit == 0`, than
 * the data will be read until EOF.
 *
 * The file should be a regular file or the operation might fail (can't be used
 * for sockets).
 *
 * The file descriptor will remain open and should be closed manually.
 */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, readfd)(FIO_STR_PTR s_,
                                                    int fd,
                                                    intptr_t start_at,
                                                    intptr_t limit) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_readfd(&i,
                    FIO_NAME(FIO_STR_NAME, __realloc_func)(s_),
                    fd,
                    start_at,
                    limit);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/**
 * Opens the file `filename` and pastes it's contents (or a slice ot it) at
 * the end of the String. If `limit == 0`, than the data will be read until
 * EOF.
 *
 * If the file can't be located, opened or read, or if `start_at` is beyond
 * the EOF position, NULL is returned in the state's `data` field.
 */
SFUNC fio_str_info_s FIO_NAME(FIO_STR_NAME, readfile)(FIO_STR_PTR s_,
                                                      const char *filename,
                                                      intptr_t start_at,
                                                      intptr_t limit) {
  fio_str_info_s i = FIO_NAME(FIO_STR_NAME, info)(s_);
  if (!i.capa)
    return i;
  fio_string_readfile(&i,
                      FIO_NAME(FIO_STR_NAME, __realloc_func)(s_),
                      filename,
                      start_at,
                      limit);
  FIO_NAME(FIO_STR_NAME, __info_update)(s_, i);
  return i;
}

/* *****************************************************************************


                                    String Test


***************************************************************************** */
#ifdef FIO_STR_WRITE_TEST_FUNC

/**
 * Tests the fio_str functionality.
 */
SFUNC void FIO_NAME_TEST(stl, FIO_STR_NAME)(void) {
  FIO_NAME(FIO_STR_NAME, s) str = {0}; /* test zeroed out memory */
#define FIO__STR_SMALL_CAPA FIO_STR_SMALL_CAPA(&str)
  FIO_STR_PTR pstr = FIO_PTR_TAG((&str));
  fprintf(
      stderr,
      "* Testing core string features for " FIO_MACRO2STR(FIO_STR_NAME) ".\n");
  fprintf(stderr,
          "* String container size (without wrapper): %zu\n",
          sizeof(FIO_NAME(FIO_STR_NAME, s)));
  fprintf(stderr,
          "* Self-contained capacity (FIO_STR_SMALL_CAPA): %zu\n",
          FIO__STR_SMALL_CAPA);
  FIO_ASSERT(!FIO_NAME_BL(FIO_STR_NAME, frozen)(pstr), "new string is frozen");
  FIO_ASSERT(FIO_NAME(FIO_STR_NAME, capa)(pstr) == FIO__STR_SMALL_CAPA,
             "small string capacity returned %zu",
             FIO_NAME(FIO_STR_NAME, capa)(pstr));
  FIO_ASSERT(FIO_NAME(FIO_STR_NAME, len)(pstr) == 0,
             "small string length reporting error!");
  FIO_ASSERT(
      FIO_NAME(FIO_STR_NAME, ptr)(pstr) == ((char *)(&str) + 1),
      "small string pointer reporting error (%zd offset)!",
      (ssize_t)(((char *)(&str) + 1) - FIO_NAME(FIO_STR_NAME, ptr)(pstr)));
  FIO_NAME(FIO_STR_NAME, write)(pstr, "World", 4);
  FIO_ASSERT(FIO_STR_IS_SMALL(&str),
             "small string writing error - not small on small write!");
  FIO_ASSERT(FIO_NAME(FIO_STR_NAME, capa)(pstr) == FIO__STR_SMALL_CAPA,
             "Small string capacity reporting error after write!");
  FIO_ASSERT(FIO_NAME(FIO_STR_NAME, len)(pstr) == 4,
             "small string length reporting error after write!");
  FIO_ASSERT(FIO_NAME(FIO_STR_NAME, ptr)(pstr) == (char *)&str + 1,
             "small string pointer reporting error after write!");
  FIO_ASSERT(!FIO_NAME(FIO_STR_NAME, ptr)(pstr)[4] &&
                 FIO_STRLEN(FIO_NAME(FIO_STR_NAME, ptr)(pstr)) == 4,
             "small string NUL missing after write (%zu)!",
             FIO_STRLEN(FIO_NAME(FIO_STR_NAME, ptr)(pstr)));
  FIO_ASSERT(!strcmp(FIO_NAME(FIO_STR_NAME, ptr)(pstr), "Worl"),
             "small string write error (%s)!",
             FIO_NAME(FIO_STR_NAME, ptr)(pstr));
  FIO_ASSERT(FIO_NAME(FIO_STR_NAME, ptr)(pstr) ==
                 FIO_NAME(FIO_STR_NAME, info)(pstr).buf,
             "small string `data` != `info.buf` (%p != %p)",
             (void *)FIO_NAME(FIO_STR_NAME, ptr)(pstr),
             (void *)FIO_NAME(FIO_STR_NAME, info)(pstr).buf);

  FIO_NAME(FIO_STR_NAME, FIO_STR_RESERVE_NAME)
  (pstr, sizeof(FIO_NAME(FIO_STR_NAME, s)));
  FIO_ASSERT(!FIO_STR_IS_SMALL(&str),
             "Long String reporting as small after capacity update!");
  FIO_ASSERT(FIO_NAME(FIO_STR_NAME, capa)(pstr) >=
                 sizeof(FIO_NAME(FIO_STR_NAME, s)) - 1,
             "Long String capacity update error (%zu != %zu)!",
             FIO_NAME(FIO_STR_NAME, capa)(pstr),
             FIO_STR_SMALL_CAPA(&str));

  FIO_ASSERT(FIO_NAME(FIO_STR_NAME, ptr)(pstr) ==
                 FIO_NAME(FIO_STR_NAME, info)(pstr).buf,
             "Long String `ptr` !>= "
             "`cstr(s).buf` (%p != %p)",
             (void *)FIO_NAME(FIO_STR_NAME, ptr)(pstr),
             (void *)FIO_NAME(FIO_STR_NAME, info)(pstr).buf);

#if FIO_STR_OPTIMIZE4IMMUTABILITY
  /* immutable string length is updated after `reserve` to reflect new capa */
  FIO_NAME(FIO_STR_NAME, resize)(pstr, 4);
#endif
  FIO_ASSERT(
      FIO_NAME(FIO_STR_NAME, len)(pstr) == 4,
      "Long String length changed during conversion from small string (%zu)!",
      FIO_NAME(FIO_STR_NAME, len)(pstr));
  FIO_ASSERT(FIO_NAME(FIO_STR_NAME, ptr)(pstr) == str.buf,
             "Long String pointer reporting error after capacity update!");
  FIO_ASSERT(FIO_STRLEN(FIO_NAME(FIO_STR_NAME, ptr)(pstr)) == 4,
             "Long String NUL missing after capacity update (%zu)!",
             FIO_STRLEN(FIO_NAME(FIO_STR_NAME, ptr)(pstr)));
  FIO_ASSERT(!strcmp(FIO_NAME(FIO_STR_NAME, ptr)(pstr), "Worl"),
             "Long String value changed after capacity update (%s)!",
             FIO_NAME(FIO_STR_NAME, ptr)(pstr));

  FIO_NAME(FIO_STR_NAME, write)(pstr, "d!", 2);
  FIO_ASSERT(!strcmp(FIO_NAME(FIO_STR_NAME, ptr)(pstr), "World!"),
             "Long String `write` error (%s)!",
             FIO_NAME(FIO_STR_NAME, ptr)(pstr));

  FIO_NAME(FIO_STR_NAME, replace)(pstr, 0, 0, "Hello ", 6);
  FIO_ASSERT(!strcmp(FIO_NAME(FIO_STR_NAME, ptr)(pstr), "Hello World!"),
             "Long String `insert` error (%s)!",
             FIO_NAME(FIO_STR_NAME, ptr)(pstr));

  FIO_NAME(FIO_STR_NAME, resize)(pstr, 6);
  FIO_ASSERT(!strcmp(FIO_NAME(FIO_STR_NAME, ptr)(pstr), "Hello "),
             "Long String `resize` clipping error (%s)!",
             FIO_NAME(FIO_STR_NAME, ptr)(pstr));

  FIO_NAME(FIO_STR_NAME, replace)(pstr, 6, 0, "My World!", 9);
  FIO_ASSERT(!strcmp(FIO_NAME(FIO_STR_NAME, ptr)(pstr), "Hello My World!"),
             "Long String `replace` error when testing overflow (%s)!",
             FIO_NAME(FIO_STR_NAME, ptr)(pstr));

  FIO_NAME(FIO_STR_NAME, FIO_STR_RESERVE_NAME)
  (pstr, FIO_NAME(FIO_STR_NAME, len)(pstr)); /* may truncate */

  FIO_NAME(FIO_STR_NAME, replace)(pstr, -10, 2, "Big", 3);
  FIO_ASSERT(!strcmp(FIO_NAME(FIO_STR_NAME, ptr)(pstr), "Hello Big World!"),
             "Long String `replace` error when testing splicing (%s)!",
             FIO_NAME(FIO_STR_NAME, ptr)(pstr));

  FIO_ASSERT(FIO_NAME(FIO_STR_NAME, capa)(pstr) ==
                     fio_string_capa4len(FIO_STRLEN("Hello Big World!")) ||
                 !FIO_NAME_BL(FIO_STR_NAME, allocated)(pstr),
             "Long String `replace` capacity update error "
             "(%zu >=? %zu)!",
             FIO_NAME(FIO_STR_NAME, capa)(pstr),
             fio_string_capa4len(FIO_STRLEN("Hello Big World!")));

  if (FIO_NAME(FIO_STR_NAME, len)(pstr) < (sizeof(str) - 2)) {
    FIO_NAME(FIO_STR_NAME, compact)(pstr);
    FIO_ASSERT(FIO_STR_IS_SMALL(&str),
               "Compacting didn't change String to small!");
    FIO_ASSERT(FIO_NAME(FIO_STR_NAME, len)(pstr) ==
                   FIO_STRLEN("Hello Big World!"),
               "Compacting altered String length! (%zu != %zu)!",
               FIO_NAME(FIO_STR_NAME, len)(pstr),
               FIO_STRLEN("Hello Big World!"));
    FIO_ASSERT(!strcmp(FIO_NAME(FIO_STR_NAME, ptr)(pstr), "Hello Big World!"),
               "Compact data error (%s)!",
               FIO_NAME(FIO_STR_NAME, ptr)(pstr));
    FIO_ASSERT(FIO_NAME(FIO_STR_NAME, capa)(pstr) == sizeof(str) - 2,
               "Compacted String capacity reporting error!");
  } else {
    FIO_LOG_DEBUG2("* Skipped `compact` test (irrelevant for type).");
  }

  {
    FIO_NAME(FIO_STR_NAME, freeze)(pstr);
    FIO_ASSERT(FIO_NAME_BL(FIO_STR_NAME, frozen)(pstr),
               "Frozen String not flagged as frozen.");
    fio_str_info_s old_state = FIO_NAME(FIO_STR_NAME, info)(pstr);
    FIO_NAME(FIO_STR_NAME, write)(pstr, "more data to be written here", 28);
    FIO_NAME(FIO_STR_NAME, replace)
    (pstr, 2, 1, "more data to be written here", 28);
    fio_str_info_s new_state = FIO_NAME(FIO_STR_NAME, info)(pstr);
    FIO_ASSERT(old_state.len == new_state.len, "Frozen String length changed!");
    FIO_ASSERT(old_state.buf == new_state.buf,
               "Frozen String pointer changed!");
    FIO_ASSERT(
        old_state.capa == new_state.capa,
        "Frozen String capacity changed (allowed, but shouldn't happen)!");
    FIO_STR_THAW_(&str);
  }
  FIO_NAME(FIO_STR_NAME, printf)(pstr, " %u", 42);
  FIO_ASSERT(!strcmp(FIO_NAME(FIO_STR_NAME, ptr)(pstr), "Hello Big World! 42"),
             "`printf` data error (%s)!",
             FIO_NAME(FIO_STR_NAME, ptr)(pstr));

  {
    FIO_NAME(FIO_STR_NAME, s) str2 = FIO_STR_INIT;
    FIO_STR_PTR pstr2 = FIO_PTR_TAG(&str2);
    FIO_NAME(FIO_STR_NAME, concat)(pstr2, pstr);
    FIO_ASSERT(FIO_NAME_BL(FIO_STR_NAME, eq)(pstr, pstr2),
               "`concat` error, strings not equal (%s != %s)!",
               FIO_NAME(FIO_STR_NAME, ptr)(pstr),
               FIO_NAME(FIO_STR_NAME, ptr)(pstr2));
    FIO_NAME(FIO_STR_NAME, write)(pstr2, ":extra data", 11);
    FIO_ASSERT(!FIO_NAME_BL(FIO_STR_NAME, eq)(pstr, pstr2),
               "`write` error after copy, strings equal "
               "((%zu)%s == (%zu)%s)!",
               FIO_NAME(FIO_STR_NAME, len)(pstr),
               FIO_NAME(FIO_STR_NAME, ptr)(pstr),
               FIO_NAME(FIO_STR_NAME, len)(pstr2),
               FIO_NAME(FIO_STR_NAME, ptr)(pstr2));

    FIO_NAME(FIO_STR_NAME, destroy)(pstr2);
  }

  FIO_NAME(FIO_STR_NAME, destroy)(pstr);

  FIO_NAME(FIO_STR_NAME, write_i)(pstr, -42);
  FIO_ASSERT(FIO_NAME(FIO_STR_NAME, len)(pstr) == 3 &&
                 !memcmp("-42", FIO_NAME(FIO_STR_NAME, ptr)(pstr), 3),
             "write_i output error ((%zu) %s != -42)",
             FIO_NAME(FIO_STR_NAME, len)(pstr),
             FIO_NAME(FIO_STR_NAME, ptr)(pstr));
  FIO_NAME(FIO_STR_NAME, destroy)(pstr);
  {
    fprintf(stderr, "* Testing string `readfile`.\n");
    FIO_NAME(FIO_STR_NAME, s) *s = FIO_NAME(FIO_STR_NAME, new)();
    FIO_ASSERT(FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_STR_NAME, s), s),
               "error, string not allocated (%p)!",
               (void *)s);
    fio_str_info_s state = FIO_NAME(FIO_STR_NAME, readfile)(s, __FILE__, 0, 0);

    FIO_ASSERT(state.len && state.buf,
               "error, no data was read for file %s!",
               __FILE__);
#if defined(H___FIO_CSTL_COMBINED___H)
    FIO_ASSERT(!memcmp(state.buf,
                       "/* "
                       "******************************************************"
                       "***********************",
                       80),
               "content error, header mismatch!\n %s",
               state.buf);
#endif /* H___FIO_CSTL_COMBINED___H */
    fprintf(stderr, "* Testing UTF-8 validation and length.\n");
    FIO_ASSERT(FIO_NAME(FIO_STR_NAME, utf8_valid)(s),
               "`utf8_valid` error, code in this file "
               "should be valid!");
    FIO_ASSERT(FIO_NAME(FIO_STR_NAME, utf8_len)(s) &&
                   (FIO_NAME(FIO_STR_NAME, utf8_len)(s) <=
                    FIO_NAME(FIO_STR_NAME, len)(s)) &&
                   (FIO_NAME(FIO_STR_NAME, utf8_len)(s) >=
                    (FIO_NAME(FIO_STR_NAME, len)(s)) >> 1),
               "`utf8_len` error, invalid value (%zu / %zu!",
               FIO_NAME(FIO_STR_NAME, utf8_len)(s),
               FIO_NAME(FIO_STR_NAME, len)(s));

    if (1) {
      /* String content == whole file (this file) */
      intptr_t pos = -10;
      size_t len = 20;
      fprintf(stderr, "* Testing UTF-8 positioning.\n");

      FIO_ASSERT(FIO_NAME(FIO_STR_NAME, utf8_select)(s, &pos, &len) == 0,
                 "`select` returned error for negative "
                 "pos! (%zd, %zu)",
                 (ssize_t)pos,
                 len);
      FIO_ASSERT(pos ==
                     (intptr_t)state.len - 10, /* no UTF-8 bytes in this file */
                 "`utf8_select` error, negative position "
                 "invalid! (%zd)",
                 (ssize_t)pos);
      FIO_ASSERT(len == 10,
                 "`utf8_select` error, trancated length "
                 "invalid! (%zd)",
                 (ssize_t)len);
      pos = 10;
      len = 20;
      FIO_ASSERT(FIO_NAME(FIO_STR_NAME, utf8_select)(s, &pos, &len) == 0,
                 "`utf8_select` returned error! (%zd, %zu)",
                 (ssize_t)pos,
                 len);
      FIO_ASSERT(pos == 10,
                 "`utf8_select` error, position invalid! (%zd)",
                 (ssize_t)pos);
      FIO_ASSERT(len == 20,
                 "`utf8_select` error, length invalid! (%zd)",
                 (ssize_t)len);
    }
    FIO_NAME(FIO_STR_NAME, free)(s);
  }
  FIO_NAME(FIO_STR_NAME, destroy)(pstr);
  if (1) {
    /* Testing Static initialization and writing */
#if FIO_STR_OPTIMIZE4IMMUTABILITY
    FIO_NAME(FIO_STR_NAME, init_const)(pstr, "Welcome", 7);
#else
    str = (FIO_NAME(FIO_STR_NAME, s))FIO_STR_INIT_STATIC("Welcome");
#endif
    FIO_ASSERT(FIO_NAME(FIO_STR_NAME, capa)(pstr) == 0 ||
                   FIO_STR_IS_SMALL(&str),
               "Static string capacity non-zero.");
    FIO_ASSERT(FIO_NAME(FIO_STR_NAME, len)(pstr) > 0,
               "Static string length should be automatically calculated.");
    FIO_ASSERT(!FIO_NAME_BL(FIO_STR_NAME, allocated)(pstr),
               "Static strings shouldn't be dynamic.");
    FIO_NAME(FIO_STR_NAME, destroy)(pstr);

#if FIO_STR_OPTIMIZE4IMMUTABILITY
    FIO_NAME(FIO_STR_NAME, init_const)
    (pstr,
     "Welcome to a very long static string that should not fit within a "
     "containing struct... hopefuly",
     95);
#else
    str = (FIO_NAME(FIO_STR_NAME, s))FIO_STR_INIT_STATIC(
        "Welcome to a very long static string that should not fit within a "
        "containing struct... hopefuly");
#endif
    FIO_ASSERT(FIO_NAME(FIO_STR_NAME, capa)(pstr) == 0 ||
                   FIO_STR_IS_SMALL(&str),
               "Static string capacity non-zero.");
    FIO_ASSERT(FIO_NAME(FIO_STR_NAME, len)(pstr) > 0,
               "Static string length should be automatically calculated.");
    FIO_ASSERT(!FIO_NAME_BL(FIO_STR_NAME, allocated)(pstr),
               "Static strings shouldn't be dynamic.");
    FIO_NAME(FIO_STR_NAME, destroy)(pstr);

#if FIO_STR_OPTIMIZE4IMMUTABILITY
    FIO_NAME(FIO_STR_NAME, init_const)(pstr, "Welcome", 7);
#else
    str = (FIO_NAME(FIO_STR_NAME, s))FIO_STR_INIT_STATIC("Welcome");
#endif
    fio_str_info_s state = FIO_NAME(FIO_STR_NAME, write)(pstr, " Home", 5);
    FIO_ASSERT(state.capa > 0, "Static string not converted to non-static.");
    FIO_ASSERT(FIO_NAME_BL(FIO_STR_NAME, allocated)(pstr) ||
                   FIO_STR_IS_SMALL(&str),
               "String should be dynamic after `write`.");

    char *cstr = FIO_NAME(FIO_STR_NAME, detach)(pstr);
    FIO_ASSERT(cstr, "`detach` returned NULL");
    FIO_ASSERT(!memcmp(cstr, "Welcome Home\0", 13),
               "`detach` string error: %s",
               cstr);
    FIO_ASSERT(FIO_NAME(FIO_STR_NAME, len)(pstr) == 0,
               "`detach` data wasn't cleared.");
    FIO_NAME(FIO_STR_NAME, destroy)(pstr); /*not really needed... detached... */
    FIO_NAME(FIO_STR_NAME, dealloc)(cstr);
  }
  {
    fprintf(stderr, "* Testing Base64 encoding / decoding.\n");
    FIO_NAME(FIO_STR_NAME, destroy)(pstr); /* does nothing, but why not... */

    FIO_NAME(FIO_STR_NAME, s) b64message = FIO_STR_INIT;
    fio_str_info_s b64i = FIO_NAME(FIO_STR_NAME, write)(
        FIO_PTR_TAG(&b64message),
        "Hello World, this is the voice of peace:)",
        41);
    for (int i = 0; i < 256; ++i) {
      uint8_t c = i;
      b64i = FIO_NAME(FIO_STR_NAME, write)(FIO_PTR_TAG(&b64message), &c, 1);
      FIO_ASSERT(FIO_NAME(FIO_STR_NAME, len)(FIO_PTR_TAG(&b64message)) ==
                     (size_t)(42 + i),
                 "Base64 message length error (%zu != %zu)",
                 FIO_NAME(FIO_STR_NAME, len)(FIO_PTR_TAG(&b64message)),
                 (size_t)(42 + i));
      FIO_ASSERT(FIO_NAME(FIO_STR_NAME,
                          ptr)(FIO_PTR_TAG(&b64message))[41 + i] == (char)c,
                 "Base64 message data error");
    }
    fio_str_info_s encoded =
        FIO_NAME(FIO_STR_NAME, write_base64enc)(pstr, b64i.buf, b64i.len, 1);
    /* prevent encoded data from being deallocated during unencoding */
    encoded = FIO_NAME(FIO_STR_NAME, FIO_STR_RESERVE_NAME)(
        pstr,
        encoded.len + ((encoded.len >> 2) * 3) + 8);
    fio_str_info_s decoded;
    {
      FIO_NAME(FIO_STR_NAME, s) tmps;
      FIO_NAME(FIO_STR_NAME, init_copy2)(FIO_PTR_TAG(&tmps), pstr);
      decoded = FIO_NAME(FIO_STR_NAME, write_base64dec)(
          pstr,
          FIO_NAME(FIO_STR_NAME, ptr)(FIO_PTR_TAG(&tmps)),
          FIO_NAME(FIO_STR_NAME, len)(FIO_PTR_TAG(&tmps)));
      FIO_NAME(FIO_STR_NAME, destroy)(FIO_PTR_TAG(&tmps));
      encoded.buf = decoded.buf;
    }
    FIO_ASSERT(encoded.len, "Base64 encoding failed");
    FIO_ASSERT(decoded.len > encoded.len,
               "Base64 decoding failed:\n%s",
               encoded.buf);
    FIO_ASSERT(b64i.len == decoded.len - encoded.len,
               "Base 64 roundtrip length error, %zu != %zu (%zu - %zu):\n %s",
               b64i.len,
               decoded.len - encoded.len,
               decoded.len,
               encoded.len,
               decoded.buf);

    FIO_ASSERT(!memcmp(b64i.buf, decoded.buf + encoded.len, b64i.len),
               "Base 64 roundtrip failed:\n %s",
               decoded.buf);
    FIO_NAME(FIO_STR_NAME, destroy)(FIO_PTR_TAG(&b64message));
    FIO_NAME(FIO_STR_NAME, destroy)(pstr);
  }
  {
    fprintf(stderr, "* Testing JSON style character escaping / unescaping.\n");
    FIO_NAME(FIO_STR_NAME, s) unescaped = FIO_STR_INIT;
    fio_str_info_s ue;
    const char *utf8_sample = /* three hearts, small-big-small*/
        "\xf0\x9f\x92\x95\xe2\x9d\xa4\xef\xb8\x8f\xf0\x9f\x92\x95";
    FIO_NAME(FIO_STR_NAME, write)
    (FIO_PTR_TAG(&unescaped), utf8_sample, FIO_STRLEN(utf8_sample));
    for (int i = 0; i < 256; ++i) {
      uint8_t c = i;
      ue = FIO_NAME(FIO_STR_NAME, write)(FIO_PTR_TAG(&unescaped), &c, 1);
    }
    fio_str_info_s encoded =
        FIO_NAME(FIO_STR_NAME, write_escape)(pstr, ue.buf, ue.len);
    // fprintf(stderr, "* %s\n", encoded.buf);
    fio_str_info_s decoded;
    {
      FIO_NAME(FIO_STR_NAME, s) tmps;
      FIO_NAME(FIO_STR_NAME, init_copy2)(&tmps, pstr);
      decoded = FIO_NAME(FIO_STR_NAME,
                         write_unescape)(pstr,
                                         FIO_NAME(FIO_STR_NAME, ptr)(&tmps),
                                         FIO_NAME(FIO_STR_NAME, len)(&tmps));
      FIO_NAME(FIO_STR_NAME, destroy)(&tmps);
      encoded.buf = decoded.buf;
    }
    FIO_ASSERT(!memcmp(encoded.buf, utf8_sample, FIO_STRLEN(utf8_sample)),
               "valid UTF-8 data shouldn't be escaped:\n%.*s\n%s",
               (int)encoded.len,
               encoded.buf,
               decoded.buf);
    FIO_ASSERT(encoded.len, "JSON encoding failed");
    FIO_ASSERT(decoded.len > encoded.len,
               "JSON decoding failed:\n%s",
               encoded.buf);
    FIO_ASSERT(ue.len == decoded.len - encoded.len,
               "JSON roundtrip length error, %zu != %zu (%zu - %zu):\n %s",
               ue.len,
               decoded.len - encoded.len,
               decoded.len,
               encoded.len,
               decoded.buf);

    FIO_ASSERT(!memcmp(ue.buf, decoded.buf + encoded.len, ue.len),
               "JSON roundtrip failed:\n %s",
               decoded.buf);
    FIO_NAME(FIO_STR_NAME, destroy)(FIO_PTR_TAG(&unescaped));
    FIO_NAME(FIO_STR_NAME, destroy)(pstr);
  }
}
#undef FIO__STR_SMALL_CAPA
#undef FIO_STR_WRITE_TEST_FUNC
#endif /* FIO_STR_WRITE_TEST_FUNC */

/* *****************************************************************************
String Cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */

#undef FIO_STR_SMALL
#undef FIO_STR_SMALL_CAPA
#undef FIO_STR_SMALL_DATA
#undef FIO_STR_SMALL_LEN
#undef FIO_STR_SMALL_LEN_SET

#undef FIO_STR_BIG_CAPA
#undef FIO_STR_BIG_CAPA_SET
#undef FIO_STR_BIG_DATA
#undef FIO_STR_BIG_FREE_BUF
#undef FIO_STR_BIG_IS_DYNAMIC
#undef FIO_STR_BIG_LEN
#undef FIO_STR_BIG_LEN_SET
#undef FIO_STR_BIG_SET_STATIC

#undef FIO_STR_FREEZE_

#undef FIO_STR_IS_FROZEN
#undef FIO_STR_IS_SMALL
#undef FIO_STR_NAME

#undef FIO_STR_OPTIMIZE4IMMUTABILITY
#undef FIO_STR_OPTIMIZE_EMBEDDED
#undef FIO_STR_PTR
#undef FIO_STR_THAW_
#undef FIO_STR_RESERVE_NAME

#endif /* FIO_STR_NAME */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_ARRAY_NAME ary     /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                            Dynamic Arrays



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#ifdef FIO_ARRAY_NAME

#ifndef FIO_ARRAY_NOT_FOUND
#define FIO_ARRAY_NOT_FOUND ((uint32_t)-1)
#endif

#ifdef FIO_ARRAY_TYPE_STR
#ifndef FIO_ARRAY_TYPE
#define FIO_ARRAY_TYPE fio_keystr_s
#endif
#ifndef FIO_ARRAY_TYPE_COPY
#define FIO_ARRAY_TYPE_COPY(dest, src) ((dest) = fio_keystr_init((src)))
#endif
#ifndef FIO_ARRAY_TYPE_DESTROY
#define FIO_ARRAY_TYPE_DESTROY(obj) fio_keystr_destroy(&(obj));
#endif
#ifndef FIO_ARRAY_TYPE_CMP
#define FIO_ARRAY_TYPE_CMP(a, b) fio_keystr_is_eq((a), (b))
#endif
#undef FIO_ARRAY_DESTROY_AFTER_COPY
#define FIO_ARRAY_DESTROY_AFTER_COPY 1
#endif

#ifndef FIO_ARRAY_TYPE
/** The type for array elements (an array of FIO_ARRAY_TYPE) */
#define FIO_ARRAY_TYPE void *
/** An invalid value for that type (if any). */
#define FIO_ARRAY_TYPE_INVALID        NULL
#define FIO_ARRAY_TYPE_INVALID_SIMPLE 1
#else
#ifndef FIO_ARRAY_TYPE_INVALID
/** An invalid value for that type (if any). */
#define FIO_ARRAY_TYPE_INVALID        ((FIO_ARRAY_TYPE){0})
/* internal flag - do not set */
#define FIO_ARRAY_TYPE_INVALID_SIMPLE 1
#endif
#endif

#ifndef FIO_ARRAY_TYPE_INVALID_SIMPLE
/** Is the FIO_ARRAY_TYPE_INVALID object memory is all zero? (yes = 1) */
#define FIO_ARRAY_TYPE_INVALID_SIMPLE 0
#endif

#ifndef FIO_ARRAY_TYPE_COPY
/** Handles a copy operation for an array's element. */
#define FIO_ARRAY_TYPE_COPY(dest, src) (dest) = (src)
/* internal flag - do not set */
#define FIO_ARRAY_TYPE_COPY_SIMPLE 1
#endif

#ifndef FIO_ARRAY_TYPE_DESTROY
/** Handles a destroy / free operation for an array's element. */
#define FIO_ARRAY_TYPE_DESTROY(obj)
/* internal flag - do not set */
#define FIO_ARRAY_TYPE_DESTROY_SIMPLE 1
#endif

#ifndef FIO_ARRAY_TYPE_CMP
/** Handles a comparison operation for an array's element. */
#define FIO_ARRAY_TYPE_CMP(a, b) (a) == (b)
/* internal flag - do not set */
#define FIO_ARRAY_TYPE_CMP_SIMPLE 1
#endif

#ifndef FIO_ARRAY_TYPE_CONCAT_COPY
#define FIO_ARRAY_TYPE_CONCAT_COPY        FIO_ARRAY_TYPE_COPY
#define FIO_ARRAY_TYPE_CONCAT_COPY_SIMPLE FIO_ARRAY_TYPE_COPY_SIMPLE
#endif
/**
 * The FIO_ARRAY_DESTROY_AFTER_COPY macro should be set if
 * FIO_ARRAY_TYPE_DESTROY should be called after FIO_ARRAY_TYPE_COPY when an
 * object is removed from the array after being copied to an external container
 * (an `old` pointer)
 */
#ifndef FIO_ARRAY_DESTROY_AFTER_COPY
#if !FIO_ARRAY_TYPE_DESTROY_SIMPLE && !FIO_ARRAY_TYPE_COPY_SIMPLE
#define FIO_ARRAY_DESTROY_AFTER_COPY 1
#else
#define FIO_ARRAY_DESTROY_AFTER_COPY 0
#endif
#endif

/* Extra empty slots when allocating memory. */
#ifndef FIO_ARRAY_PADDING
#define FIO_ARRAY_PADDING 4
#endif

/*
 * Uses the array structure to embed object, if there's space for them.
 *
 * This optimizes small arrays and specifically touplets. For `void *` type
 * arrays this allows for 2 objects to be embedded, resulting in faster access
 * due to cache locality and reduced pointer redirection.
 *
 * For large arrays, it is better to disable this feature.
 *
 * Note: values larger than 1 add a memory allocation cost to the array
 * container, adding enough room for at least `FIO_ARRAY_ENABLE_EMBEDDED - 1`
 * items.
 */
#ifndef FIO_ARRAY_ENABLE_EMBEDDED
#define FIO_ARRAY_ENABLE_EMBEDDED 1
#endif

/* Sets memory growth to exponentially increase. Consumes more memory. */
#ifndef FIO_ARRAY_EXPONENTIAL
#define FIO_ARRAY_EXPONENTIAL 0
#endif

#undef FIO_ARRAY_SIZE2WORDS
#define FIO_ARRAY_SIZE2WORDS(size)                                             \
  ((sizeof(FIO_ARRAY_TYPE) & 1)   ? (((size) & (~15)) + 16)                    \
   : (sizeof(FIO_ARRAY_TYPE) & 2) ? (((size) & (~7)) + 8)                      \
   : (sizeof(FIO_ARRAY_TYPE) & 4) ? (((size) & (~3)) + 4)                      \
   : (sizeof(FIO_ARRAY_TYPE) & 8) ? (((size) & (~1)) + 2)                      \
                                  : (size))

/* *****************************************************************************
Dynamic Arrays - type
***************************************************************************** */

/** an Array type. */
typedef struct FIO_NAME(FIO_ARRAY_NAME, s) {
  /* start common header (with embedded array type) */
  /** the offset to the first item. */
  uint32_t start;
  /** The offset to the first empty location the array. */
  uint32_t end;
  /* end common header (with embedded array type) */
  /** The array's capacity - limited to 32bits, but we use the extra padding. */
  uint32_t capa;
  /** a pointer to the array's memory (if not embedded) */
  FIO_ARRAY_TYPE *ary;
#if FIO_ARRAY_ENABLE_EMBEDDED > 1
  /** Do we wanted larger small-array optimizations? */
  FIO_ARRAY_TYPE
  extra_memory_for_embedded_arrays[(FIO_ARRAY_ENABLE_EMBEDDED - 1)]
#endif
} FIO_NAME(FIO_ARRAY_NAME, s);

#ifdef FIO_PTR_TAG_TYPE
#define FIO_ARRAY_PTR FIO_PTR_TAG_TYPE
#else
#define FIO_ARRAY_PTR FIO_NAME(FIO_ARRAY_NAME, s) *
#endif

/* *****************************************************************************
Dynamic Arrays - API
***************************************************************************** */

#ifndef FIO_ARRAY_INIT
/* Initialization macro. */
#define FIO_ARRAY_INIT                                                         \
  { 0 }
#endif

#ifndef FIO_REF_CONSTRUCTOR_ONLY

/* Allocates a new array object on the heap and initializes it's memory. */
SFUNC FIO_ARRAY_PTR FIO_NAME(FIO_ARRAY_NAME, new)(void);

/* Frees an array's internal data AND it's container! */
SFUNC void FIO_NAME(FIO_ARRAY_NAME, free)(FIO_ARRAY_PTR ary);

#endif /* FIO_REF_CONSTRUCTOR_ONLY */

/* Destroys any objects stored in the array and frees the internal state. */
SFUNC void FIO_NAME(FIO_ARRAY_NAME, destroy)(FIO_ARRAY_PTR ary);

/** Returns the number of elements in the Array. */
FIO_IFUNC uint32_t FIO_NAME(FIO_ARRAY_NAME, count)(FIO_ARRAY_PTR ary);

/** Returns the current, temporary, array capacity (it's dynamic). */
FIO_IFUNC uint32_t FIO_NAME(FIO_ARRAY_NAME, capa)(FIO_ARRAY_PTR ary);

/**
 * Returns 1 if the array is embedded, 0 if it has memory allocated and -1 on an
 * error.
 */
FIO_IFUNC int FIO_NAME_BL(FIO_ARRAY_NAME, embedded)(FIO_ARRAY_PTR ary);

/**
 * Returns a pointer to the C array containing the objects.
 */
FIO_IFUNC FIO_ARRAY_TYPE *FIO_NAME2(FIO_ARRAY_NAME, ptr)(FIO_ARRAY_PTR ary);

/**
 * Reserves a minimal capacity for additional elements to be added to the array.
 *
 * If `capa` is negative, new memory will be allocated at the beginning of the
 * array rather then it's end.
 *
 * Returns the array's new capacity.
 */
SFUNC uint32_t FIO_NAME(FIO_ARRAY_NAME, reserve)(FIO_ARRAY_PTR ary,
                                                 int64_t capa);

/**
 * Adds all the items in the `src` Array to the end of the `dest` Array.
 *
 * The `src` Array remain untouched.
 *
 * Always returns the destination array (`dest`).
 */
SFUNC FIO_ARRAY_PTR FIO_NAME(FIO_ARRAY_NAME, concat)(FIO_ARRAY_PTR dest,
                                                     FIO_ARRAY_PTR src);

/**
 * Sets `index` to the value in `data`.
 *
 * If `index` is negative, it will be counted from the end of the Array (-1 ==
 * last element).
 *
 * If `old` isn't NULL, the existing data will be copied to the location pointed
 * to by `old` before the copy in the Array is destroyed.
 *
 * Returns a pointer to the new object, or NULL on error.
 */
SFUNC FIO_ARRAY_TYPE *FIO_NAME(FIO_ARRAY_NAME, set)(FIO_ARRAY_PTR ary,
                                                    int64_t index,
                                                    FIO_ARRAY_TYPE data,
                                                    FIO_ARRAY_TYPE *old);

/**
 * Returns the value located at `index` (no copying is performed).
 *
 * If `index` is negative, it will be counted from the end of the Array (-1 ==
 * last element).
 */
FIO_IFUNC FIO_ARRAY_TYPE FIO_NAME(FIO_ARRAY_NAME, get)(FIO_ARRAY_PTR ary,
                                                       int64_t index);

/**
 * Returns the index of the object or (uint32_t)-1 if the object wasn't found.
 *
 * If `start_at` is negative (i.e., -1), than seeking will be performed in
 * reverse, where -1 == last index (-2 == second to last, etc').
 */
SFUNC uint32_t FIO_NAME(FIO_ARRAY_NAME, find)(FIO_ARRAY_PTR ary,
                                              FIO_ARRAY_TYPE data,
                                              int64_t start_at);

/**
 * Removes an object from the array, MOVING all the other objects to prevent
 * "holes" in the data.
 *
 * If `old` is set, the data is copied to the location pointed to by `old`
 * before the data in the array is destroyed.
 *
 * Returns 0 on success and -1 on error.
 *
 * This action is O(n) where n in the length of the array.
 * It could get expensive.
 */
SFUNC int FIO_NAME(FIO_ARRAY_NAME, remove)(FIO_ARRAY_PTR ary,
                                           int64_t index,
                                           FIO_ARRAY_TYPE *old);

/**
 * Removes all occurrences of an object from the array (if any), MOVING all the
 * existing objects to prevent "holes" in the data.
 *
 * Returns the number of items removed.
 *
 * This action is O(n) where n in the length of the array.
 * It could get expensive.
 */
SFUNC uint32_t FIO_NAME(FIO_ARRAY_NAME, remove2)(FIO_ARRAY_PTR ary,
                                                 FIO_ARRAY_TYPE data);

/** Attempts to lower the array's memory consumption. */
SFUNC void FIO_NAME(FIO_ARRAY_NAME, compact)(FIO_ARRAY_PTR ary);

/**
 * Pushes an object to the end of the Array. Returns a pointer to the new object
 * or NULL on error.
 */
SFUNC FIO_ARRAY_TYPE *FIO_NAME(FIO_ARRAY_NAME, push)(FIO_ARRAY_PTR ary,
                                                     FIO_ARRAY_TYPE data);

/**
 * Removes an object from the end of the Array.
 *
 * If `old` is set, the data is copied to the location pointed to by `old`
 * before the data in the array is destroyed.
 *
 * Returns -1 on error (Array is empty) and 0 on success.
 */
SFUNC int FIO_NAME(FIO_ARRAY_NAME, pop)(FIO_ARRAY_PTR ary, FIO_ARRAY_TYPE *old);

/**
 * Unshifts an object to the beginning of the Array. Returns a pointer to the
 * new object or NULL on error.
 *
 * This could be expensive, causing `memmove`.
 */
SFUNC FIO_ARRAY_TYPE *FIO_NAME(FIO_ARRAY_NAME, unshift)(FIO_ARRAY_PTR ary,
                                                        FIO_ARRAY_TYPE data);

/**
 * Removes an object from the beginning of the Array.
 *
 * If `old` is set, the data is copied to the location pointed to by `old`
 * before the data in the array is destroyed.
 *
 * Returns -1 on error (Array is empty) and 0 on success.
 */
SFUNC int FIO_NAME(FIO_ARRAY_NAME, shift)(FIO_ARRAY_PTR ary,
                                          FIO_ARRAY_TYPE *old);

/** Iteration information structure passed to the callback. */
typedef struct FIO_NAME(FIO_ARRAY_NAME, each_s) {
  /** The array iterated. Once set, cannot be safely changed. */
  FIO_ARRAY_PTR const parent;
  /** The current object's index */
  uint64_t index;
  /** The callback / task called for each index, may be updated mid-cycle. */
  int (*task)(struct FIO_NAME(FIO_ARRAY_NAME, each_s) * info);
  /** Opaque user data. */
  void *udata;
  /** The object / value at the current index. */
  FIO_ARRAY_TYPE value;
  /* memory padding used for FIOBJ */
  uint64_t padding;
} FIO_NAME(FIO_ARRAY_NAME, each_s);

/**
 * Iteration using a callback for each entry in the array.
 *
 * The callback task function must accept an each_s pointer, see above.
 *
 * If the callback returns -1, the loop is broken. Any other value is ignored.
 *
 * Returns the relative "stop" position, i.e., the number of items processed +
 * the starting point.
 */
IFUNC uint32_t FIO_NAME(FIO_ARRAY_NAME,
                        each)(FIO_ARRAY_PTR ary,
                              int (*task)(FIO_NAME(FIO_ARRAY_NAME, each_s) *
                                          info),
                              void *udata,
                              int64_t start_at);

#ifndef FIO_ARRAY_EACH
/**
 * Iterates through the array using a `for` loop.
 *
 * Access the object with the pointer `pos`. The `pos` variable can be named
 * however you please.
 *
 * Avoid editing the array during a FOR loop, although I hope it's possible, I
 * wouldn't count on it.
 *
 * **Note**: this variant supports automatic pointer tagging / untagging.
 */
#define FIO_ARRAY_EACH(array_name, array, pos)                                 \
  for (FIO_NAME(array_name, ____type_t)                                        \
           *first___ai = NULL,                                                 \
           *pos = FIO_NAME(array_name, each_next)((array), &first___ai, NULL); \
       pos;                                                                    \
       pos = FIO_NAME(array_name, each_next)((array), &first___ai, pos))
#endif

/**
 * Returns a pointer to the (next) object in the array.
 *
 * Returns a pointer to the first object if `pos == NULL` and there are objects
 * in the array.
 *
 * The first pointer is automatically set and it allows object insertions and
 * memory effecting functions to be called from within the loop.
 *
 * If the object in `pos` (or an object before it) were removed, consider
 * passing `pos-1` to the function, to avoid skipping any elements while
 * looping.
 *
 * Returns the next object if both `first` and `pos` are valid.
 *
 * Returns NULL if `pos` was the last object or no object exist.
 *
 * Returns the first object if either `first` or `pos` are invalid.
 *
 */
FIO_IFUNC FIO_ARRAY_TYPE *FIO_NAME(FIO_ARRAY_NAME,
                                   each_next)(FIO_ARRAY_PTR ary,
                                              FIO_ARRAY_TYPE **first,
                                              FIO_ARRAY_TYPE *pos);

/* *****************************************************************************
Dynamic Arrays - embedded arrays
***************************************************************************** */
typedef struct {
  /* start common header */
  /** the offset to the first item. */
  uint32_t start;
  /** The offset to the first empty location the array. */
  uint32_t end;
  /* end common header */
  FIO_ARRAY_TYPE embedded[];
} FIO_NAME(FIO_ARRAY_NAME, ___embedded_s);

#define FIO_ARRAY2EMBEDDED(a) ((FIO_NAME(FIO_ARRAY_NAME, ___embedded_s) *)(a))

#if FIO_ARRAY_ENABLE_EMBEDDED
#define FIO_ARRAY_IS_EMBEDDED(a)                                               \
  ((sizeof(FIO_ARRAY_TYPE) +                                                   \
    sizeof(FIO_NAME(FIO_ARRAY_NAME, ___embedded_s))) <=                        \
       sizeof(FIO_NAME(FIO_ARRAY_NAME, s)) &&                                  \
   (((a)->start > (a)->end) || !(a)->ary))
#define FIO_ARRAY_IS_EMBEDDED_PTR(ary, ptr)                                    \
  ((sizeof(FIO_ARRAY_TYPE) +                                                   \
    sizeof(FIO_NAME(FIO_ARRAY_NAME, ___embedded_s))) <=                        \
       sizeof(FIO_NAME(FIO_ARRAY_NAME, s)) &&                                  \
   (uintptr_t)(ptr) > (uintptr_t)(ary) &&                                      \
   (uintptr_t)(ptr) < (uintptr_t)((ary) + 1))
#define FIO_ARRAY_EMBEDDED_CAPA                                                \
  ((sizeof(FIO_ARRAY_TYPE) +                                                   \
    sizeof(FIO_NAME(FIO_ARRAY_NAME, ___embedded_s))) >                         \
           sizeof(FIO_NAME(FIO_ARRAY_NAME, s))                                 \
       ? 0                                                                     \
       : ((sizeof(FIO_NAME(FIO_ARRAY_NAME, s)) -                               \
           sizeof(FIO_NAME(FIO_ARRAY_NAME, ___embedded_s))) /                  \
          sizeof(FIO_ARRAY_TYPE)))

#else
#define FIO_ARRAY_IS_EMBEDDED(a)            0
#define FIO_ARRAY_IS_EMBEDDED_PTR(ary, ptr) 0
#define FIO_ARRAY_EMBEDDED_CAPA             0

#endif /* FIO_ARRAY_ENABLE_EMBEDDED */
/* *****************************************************************************
Inlined functions
***************************************************************************** */
/** Returns the number of elements in the Array. */
FIO_IFUNC uint32_t FIO_NAME(FIO_ARRAY_NAME, count)(FIO_ARRAY_PTR ary_) {
  FIO_PTR_TAG_VALID_OR_RETURN(ary_, 0);
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  switch (FIO_NAME_BL(FIO_ARRAY_NAME, embedded)(ary_)) {
  case 0: return ary->end - ary->start;
  case 1: return ary->start;
  }
  return 0;
}

/** Returns the current, temporary, array capacity (it's dynamic). */
FIO_IFUNC uint32_t FIO_NAME(FIO_ARRAY_NAME, capa)(FIO_ARRAY_PTR ary_) {
  FIO_PTR_TAG_VALID_OR_RETURN(ary_, 0);
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  switch (FIO_NAME_BL(FIO_ARRAY_NAME, embedded)(ary_)) {
  case 0: return (uint32_t)ary->capa;
  case 1: return FIO_ARRAY_EMBEDDED_CAPA;
  }
  return 0;
}

/**
 * Returns a pointer to the C array containing the objects.
 */
FIO_IFUNC FIO_ARRAY_TYPE *FIO_NAME2(FIO_ARRAY_NAME, ptr)(FIO_ARRAY_PTR ary_) {
  FIO_PTR_TAG_VALID_OR_RETURN(ary_, NULL);
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  switch (FIO_NAME_BL(FIO_ARRAY_NAME, embedded)(ary_)) {
  case 0: return ary->ary + ary->start;
  case 1: return FIO_ARRAY2EMBEDDED(ary)->embedded;
  }
  return NULL;
}

/**
 * Returns 1 if the array is embedded, 0 if it has memory allocated and -1 on an
 * error.
 */
FIO_IFUNC int FIO_NAME_BL(FIO_ARRAY_NAME, embedded)(FIO_ARRAY_PTR ary_) {
  FIO_PTR_TAG_VALID_OR_RETURN(ary_, -1);
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  return FIO_ARRAY_IS_EMBEDDED(ary);
  (void)ary; /* if unused (never embedded) */
}

/**
 * Returns the value located at `index` (no copying is performed).
 *
 * If `index` is negative, it will be counted from the end of the Array (-1 ==
 * last element).
 */
FIO_IFUNC FIO_ARRAY_TYPE FIO_NAME(FIO_ARRAY_NAME, get)(FIO_ARRAY_PTR ary_,
                                                       int64_t index) {
  FIO_PTR_TAG_VALID_OR_RETURN(ary_, FIO_ARRAY_TYPE_INVALID);
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  FIO_ARRAY_TYPE *a;
  size_t count;
  switch (FIO_NAME_BL(FIO_ARRAY_NAME, embedded)(ary_)) {
  case 0:
    a = ary->ary + ary->start;
    count = ary->end - ary->start;
    break;
  case 1:
    a = FIO_ARRAY2EMBEDDED(ary)->embedded;
    count = ary->start;
    break;
  default: return FIO_ARRAY_TYPE_INVALID;
  }

  if (index < 0) {
    index += count;
    if (index < 0)
      return FIO_ARRAY_TYPE_INVALID;
  }
  if ((uint32_t)index >= count)
    return FIO_ARRAY_TYPE_INVALID;
  return a[index];
}

/* Returns a pointer to the (next) object in the array. */
FIO_IFUNC FIO_ARRAY_TYPE *FIO_NAME(FIO_ARRAY_NAME,
                                   each_next)(FIO_ARRAY_PTR ary_,
                                              FIO_ARRAY_TYPE **first,
                                              FIO_ARRAY_TYPE *pos) {
  FIO_PTR_TAG_VALID_OR_RETURN(ary_, NULL);
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  int64_t count;
  FIO_ARRAY_TYPE *a;
  switch (FIO_NAME_BL(FIO_ARRAY_NAME, embedded)(ary_)) {
  case 0:
    count = ary->end - ary->start;
    a = ary->ary + ary->start;
    break;
  case 1:
    count = ary->start;
    a = FIO_ARRAY2EMBEDDED(ary)->embedded;
    break;
  default: return NULL;
  }
  intptr_t i;
  if (!count || !first)
    return NULL;
  if (!pos || !(*first) || (*first) > pos) {
    i = -1;
  } else {
    i = (intptr_t)(pos - (*first));
  }
  *first = a;
  ++i;
  if (i >= count)
    return NULL;
  return i + a;
}

/** Used internally for the EACH macro */
typedef FIO_ARRAY_TYPE FIO_NAME(FIO_ARRAY_NAME, ____type_t);

/* *****************************************************************************
Exported functions
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)
/* *****************************************************************************
Helper macros
***************************************************************************** */
#if FIO_ARRAY_EXPONENTIAL
#define FIO_ARRAY_ADD2CAPA(capa) (((capa) << 1) + FIO_ARRAY_PADDING)
#else
#define FIO_ARRAY_ADD2CAPA(capa) ((capa) + FIO_ARRAY_PADDING)
#endif

/* *****************************************************************************
Dynamic Arrays - internal helpers
***************************************************************************** */

#define FIO_ARRAY_POS2ABS(ary, pos)                                            \
  (pos >= 0 ? (ary->start + pos) : (ary->end - pos))

#define FIO_ARRAY_AB_CT(cond, a, b) ((b) ^ ((0 - ((cond)&1)) & ((a) ^ (b))))

FIO_LEAK_COUNTER_DEF(FIO_NAME(FIO_ARRAY_NAME, s))
FIO_LEAK_COUNTER_DEF(FIO_NAME(FIO_ARRAY_NAME, destroy))
/* *****************************************************************************
Dynamic Arrays - implementation
***************************************************************************** */

#ifndef FIO_REF_CONSTRUCTOR_ONLY
/* Allocates a new array object on the heap and initializes it's memory. */
SFUNC FIO_ARRAY_PTR FIO_NAME(FIO_ARRAY_NAME, new)(void) {
  FIO_NAME(FIO_ARRAY_NAME, s) *a =
      (FIO_NAME(FIO_ARRAY_NAME, s) *)FIO_MEM_REALLOC_(NULL, 0, sizeof(*a), 0);
  if (!FIO_MEM_REALLOC_IS_SAFE_ && a) {
    *a = (FIO_NAME(FIO_ARRAY_NAME, s))FIO_ARRAY_INIT;
  }
  FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(FIO_ARRAY_NAME, s));
  return (FIO_ARRAY_PTR)FIO_PTR_TAG(a);
}

/* Frees an array's internal data AND it's container! */
SFUNC void FIO_NAME(FIO_ARRAY_NAME, free)(FIO_ARRAY_PTR ary_) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(ary_);
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  FIO_NAME(FIO_ARRAY_NAME, destroy)(ary_);
  FIO_LEAK_COUNTER_ON_FREE(FIO_NAME(FIO_ARRAY_NAME, s));
  FIO_MEM_FREE_(ary, sizeof(*ary));
}
#endif /* FIO_REF_CONSTRUCTOR_ONLY */

/* Destroys any objects stored in the array and frees the internal state. */
SFUNC void FIO_NAME(FIO_ARRAY_NAME, destroy)(FIO_ARRAY_PTR ary_) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(ary_);
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  union {
    FIO_NAME(FIO_ARRAY_NAME, s) a;
    FIO_NAME(FIO_ARRAY_NAME, ___embedded_s) e;
  } tmp = {.a = *ary};
  *ary = (FIO_NAME(FIO_ARRAY_NAME, s))FIO_ARRAY_INIT;

  switch (
      FIO_NAME_BL(FIO_ARRAY_NAME, embedded)((FIO_ARRAY_PTR)FIO_PTR_TAG(&tmp))) {
  case 0:
#if !FIO_ARRAY_TYPE_DESTROY_SIMPLE
    for (size_t i = tmp.a.start; i < tmp.a.end; ++i) {
      FIO_ARRAY_TYPE_DESTROY(tmp.a.ary[i]);
    }
#endif
    FIO_LEAK_COUNTER_ON_FREE(FIO_NAME(FIO_ARRAY_NAME, destroy));
    FIO_MEM_FREE_(tmp.a.ary, tmp.a.capa * sizeof(*tmp.a.ary));
    return;
  case 1:
#if !FIO_ARRAY_TYPE_DESTROY_SIMPLE
    while (tmp.e.start--) {
      FIO_ARRAY_TYPE_DESTROY((tmp.e.embedded[tmp.e.start]));
    }
#endif
    return;
  }
  return;
}

/** Reserves a minimal capacity for the array. */
SFUNC uint32_t FIO_NAME(FIO_ARRAY_NAME, reserve)(FIO_ARRAY_PTR ary_,
                                                 int64_t capa_) {
  FIO_PTR_TAG_VALID_OR_RETURN(ary_, 0);
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  if (capa_ > UINT32_MAX || capa_ < ((int64_t)0LL - UINT32_MAX))
    return ary->capa;
  uint32_t abs_capa = ((capa_ >= 0) ? (uint32_t)capa_ : (uint32_t)(0 - capa_));
  uint32_t capa;
  FIO_ARRAY_TYPE *tmp;
  switch (FIO_NAME_BL(FIO_ARRAY_NAME, embedded)(ary_)) {
  case 0:
    abs_capa += ary->end - ary->start;
    capa = FIO_ARRAY_SIZE2WORDS((abs_capa));
    if (abs_capa <= ary->capa)
      return (uint32_t)ary->capa;
    /* objects don't move, use only realloc */
    if ((capa_ >= 0) || (capa_ < 0 && ary->start > 0)) {
      tmp = (FIO_ARRAY_TYPE *)FIO_MEM_REALLOC_(ary->ary,
                                               0,
                                               sizeof(*tmp) * capa,
                                               sizeof(*tmp) * ary->end);
      if (!tmp)
        return (uint32_t)ary->capa;
      if (!ary->ary)
        FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(FIO_ARRAY_NAME, destroy));
      ary->capa = capa;
      ary->ary = tmp;
      return capa;
    } else { /* moving objects, starting with a fresh piece of memory */
      tmp = (FIO_ARRAY_TYPE *)FIO_MEM_REALLOC_(NULL, 0, sizeof(*tmp) * capa, 0);
      const uint32_t count = ary->end - ary->start;
      if (!tmp)
        return (uint32_t)ary->capa;
      if (!ary->ary)
        FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(FIO_ARRAY_NAME, destroy));
      if (capa_ >= 0) { /* copy items at beginning of memory stack */
        if (count) {
          FIO_MEMCPY(tmp, ary->ary + ary->start, count * sizeof(*tmp));
        }
        FIO_MEM_FREE_(ary->ary, sizeof(*ary->ary) * ary->capa);
        *ary = (FIO_NAME(FIO_ARRAY_NAME, s)){
            .start = 0,
            .end = count,
            .capa = capa,
            .ary = tmp,
        };
        return capa;
      } else { /* copy items at ending of memory stack */
        if (count) {
          FIO_MEMCPY(tmp + (capa - count),
                     ary->ary + ary->start,
                     count * sizeof(*tmp));
        }
        FIO_MEM_FREE_(ary->ary, sizeof(*ary->ary) * ary->capa);
        *ary = (FIO_NAME(FIO_ARRAY_NAME, s)){
            .start = (capa - count),
            .end = capa,
            .capa = capa,
            .ary = tmp,
        };
      }
    }
    return capa;
  case 1:
    abs_capa += ary->start;
    capa = FIO_ARRAY_SIZE2WORDS((abs_capa));
    if (abs_capa <= FIO_ARRAY_EMBEDDED_CAPA)
      return FIO_ARRAY_EMBEDDED_CAPA;
    tmp = (FIO_ARRAY_TYPE *)FIO_MEM_REALLOC_(NULL, 0, sizeof(*tmp) * capa, 0);
    if (!tmp)
      return FIO_ARRAY_EMBEDDED_CAPA;
    FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(FIO_ARRAY_NAME, destroy));
    if (capa_ >= 0) {
      /* copy items at beginning of memory stack */
      if (ary->start) {
        FIO_MEMCPY(tmp,
                   FIO_ARRAY2EMBEDDED(ary)->embedded,
                   ary->start * sizeof(*tmp));
      }
      *ary = (FIO_NAME(FIO_ARRAY_NAME, s)){
          .start = 0,
          .end = ary->start,
          .capa = capa,
          .ary = tmp,
      };
      return capa;
    }
    /* copy items at ending of memory stack */
    if (ary->start) {
      FIO_MEMCPY(tmp + (capa - ary->start),
                 FIO_ARRAY2EMBEDDED(ary)->embedded,
                 ary->start * sizeof(*tmp));
    }
    *ary = (FIO_NAME(FIO_ARRAY_NAME, s)){
        .start = (capa - ary->start),
        .end = capa,
        .capa = capa,
        .ary = tmp,
    };
    return capa;
  default: return 0;
  }
}

/**
 * Adds all the items in the `src` Array to the end of the `dest` Array.
 *
 * The `src` Array remain untouched.
 *
 * Returns `dest` on success or NULL on error (i.e., no memory).
 */
SFUNC FIO_ARRAY_PTR FIO_NAME(FIO_ARRAY_NAME, concat)(FIO_ARRAY_PTR dest_,
                                                     FIO_ARRAY_PTR src_) {
  FIO_PTR_TAG_VALID_OR_RETURN(dest_, (FIO_ARRAY_PTR)NULL);
  FIO_PTR_TAG_VALID_OR_RETURN(src_, (FIO_ARRAY_PTR)NULL);
  FIO_NAME(FIO_ARRAY_NAME, s) *dest =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), dest_);
  FIO_NAME(FIO_ARRAY_NAME, s) *src =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), src_);
  if (!dest || !src)
    return dest_;
  const uint32_t offset = FIO_NAME(FIO_ARRAY_NAME, count)(dest_);
  const uint32_t added = FIO_NAME(FIO_ARRAY_NAME, count)(src_);
  const uint32_t total = offset + added;
  if (!added)
    return dest_;

  if (total < offset || total + offset < total)
    return NULL; /* item count overflow */

  const uint32_t capa = FIO_NAME(FIO_ARRAY_NAME, reserve)(dest_, added);

  if (!FIO_ARRAY_IS_EMBEDDED(dest) && dest->start + total > capa) {
    /* we need to move the existing items due to the offset */
    FIO_MEMMOVE(dest->ary,
                dest->ary + dest->start,
                (dest->end - dest->start) * sizeof(*dest->ary));
    dest->start = 0;
    dest->end = offset;
  }
#if FIO_ARRAY_TYPE_CONCAT_COPY_SIMPLE
  /* copy data */
  FIO_MEMCPY(FIO_NAME2(FIO_ARRAY_NAME, ptr)(dest_) + offset,
             FIO_NAME2(FIO_ARRAY_NAME, ptr)(src_),
             added);
#else
  {
    FIO_ARRAY_TYPE *const a1 = FIO_NAME2(FIO_ARRAY_NAME, ptr)(dest_);
    FIO_ARRAY_TYPE *const a2 = FIO_NAME2(FIO_ARRAY_NAME, ptr)(src_);
    for (uint32_t i = 0; i < added; ++i) {
      FIO_ARRAY_TYPE_CONCAT_COPY(a1[i + offset], a2[i]);
    }
  }
#endif /* FIO_ARRAY_TYPE_CONCAT_COPY_SIMPLE */
  /* update dest */
  if (!FIO_ARRAY_IS_EMBEDDED(dest)) {
    dest->end += added;
    return dest_;
  } else
    dest->start = total;
  return dest_;
}

/**
 * Sets `index` to the value in `data`.
 *
 * If `index` is negative, it will be counted from the end of the Array (-1 ==
 * last element).
 *
 * If `old` isn't NULL, the existing data will be copied to the location pointed
 * to by `old` before the copy in the Array is destroyed.
 *
 * Returns a pointer to the new object, or NULL on error.
 */
SFUNC FIO_ARRAY_TYPE *FIO_NAME(FIO_ARRAY_NAME, set)(FIO_ARRAY_PTR ary_,
                                                    int64_t index,
                                                    FIO_ARRAY_TYPE data,
                                                    FIO_ARRAY_TYPE *old) {
  FIO_ARRAY_TYPE *a = NULL;
  FIO_NAME(FIO_ARRAY_NAME, s) * ary;
  uint32_t count;
  uint8_t pre_existing = 1;

  FIO_PTR_TAG_VALID_OR_GOTO(ary_, invalid);

  ary = FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  count = FIO_NAME(FIO_ARRAY_NAME, count)(ary_);

  if (index < 0) {
    index += count;
    if (index < 0)
      goto negative_expansion;
  }

  if ((size_t)index > 0xFFFFFFFFULL)
    goto invalid;

  if ((uint32_t)index >= count) {
    if ((uint32_t)index == count)
      FIO_NAME(FIO_ARRAY_NAME, reserve)(ary_, FIO_ARRAY_ADD2CAPA(index));
    else
      FIO_NAME(FIO_ARRAY_NAME, reserve)(ary_, (uint32_t)index + 1);
    if (FIO_ARRAY_IS_EMBEDDED(ary))
      goto expand_embedded;
    goto expansion;
  }

  a = FIO_NAME2(FIO_ARRAY_NAME, ptr)(ary_);

done:

  /* copy / clear object */
  if (pre_existing) {
    if (old) {
      FIO_ARRAY_TYPE_COPY(old[0], a[index]);
#if FIO_ARRAY_DESTROY_AFTER_COPY
      FIO_ARRAY_TYPE_DESTROY(a[index]);
#endif
    } else {
      FIO_ARRAY_TYPE_DESTROY(a[index]);
    }
  } else if (old) {
    FIO_ARRAY_TYPE_COPY(old[0], FIO_ARRAY_TYPE_INVALID);
  }
  FIO_ARRAY_TYPE_COPY(a[index], FIO_ARRAY_TYPE_INVALID);
  FIO_ARRAY_TYPE_COPY(a[index], data);
  return a + index;

expansion:

  pre_existing = 0;
  a = ary->ary;
  {
    uint8_t was_moved = 0;
    /* test if we need to move objects to make room at the end */
    if (ary->start + (uint32_t)index >= ary->capa) {
      FIO_MEMMOVE(ary->ary, ary->ary + ary->start, (count) * sizeof(*ary->ary));
      ary->start = 0;
      ary->end = (uint32_t)index + 1;
      was_moved = 1;
    }
    /* initialize memory in between objects */
    if (was_moved || !FIO_MEM_REALLOC_IS_SAFE_ ||
        !FIO_ARRAY_TYPE_INVALID_SIMPLE) {
#if FIO_ARRAY_TYPE_INVALID_SIMPLE
      FIO_MEMSET(a + count, 0, ((uint32_t)index - count) * sizeof(*ary->ary));
#else
      for (size_t i = count; i <= (size_t)index; ++i) {
        FIO_ARRAY_TYPE_COPY(a[i], FIO_ARRAY_TYPE_INVALID);
      }
#endif
    }
    ary->end = (uint32_t)index + 1;
  }
  goto done;

expand_embedded:
  pre_existing = 0;
  ary->start = (uint32_t)index + 1;
  a = FIO_ARRAY2EMBEDDED(ary)->embedded;
  goto done;

negative_expansion:
  pre_existing = 0;
  FIO_NAME(FIO_ARRAY_NAME, reserve)(ary_, (index - count));
  index = 0 - index;
  if (index > ary->capa)
    goto invalid;
  if ((FIO_ARRAY_IS_EMBEDDED(ary)))
    goto negative_expansion_embedded;
  a = ary->ary;
  if (index > (int32_t)ary->start) {
    FIO_MEMMOVE(a + index, a + ary->start, count * sizeof(*a));
    ary->end = (uint32_t)index + count;
    ary->start = (uint32_t)index;
  }
  index = ary->start - (uint32_t)index;
  if ((uint32_t)(index + 1) < ary->start) {
#if FIO_ARRAY_TYPE_INVALID_SIMPLE
    FIO_MEMSET(a + index, 0, (ary->start - index) * (sizeof(*a)));
#else
    for (size_t i = index; i < (size_t)ary->start; ++i) {
      FIO_ARRAY_TYPE_COPY(a[i], FIO_ARRAY_TYPE_INVALID);
    }
#endif
  }
  ary->start = (uint32_t)index;
  goto done;

negative_expansion_embedded:
  a = FIO_ARRAY2EMBEDDED(ary)->embedded;
  FIO_MEMMOVE(a + index, a, count * count * sizeof(*a));
#if FIO_ARRAY_TYPE_INVALID_SIMPLE
  FIO_MEMSET(a, 0, index * (sizeof(a)));
#else
  for (size_t i = 0; i < (size_t)index; ++i) {
    FIO_ARRAY_TYPE_COPY(a[i], FIO_ARRAY_TYPE_INVALID);
  }
#endif
  index = 0;
  goto done;

invalid:
  FIO_ARRAY_TYPE_DESTROY(data);
  if (old) {
    FIO_ARRAY_TYPE_COPY(old[0], FIO_ARRAY_TYPE_INVALID);
  }

  return a;
}

/**
 * Returns the index of the object or (uint32_t)-1 if the object wasn't found.
 *
 * If `start_at` is negative (i.e., -1), than seeking will be performed in
 * reverse, where -1 == last index (-2 == second to last, etc').
 */
SFUNC uint32_t FIO_NAME(FIO_ARRAY_NAME, find)(FIO_ARRAY_PTR ary_,
                                              FIO_ARRAY_TYPE data,
                                              int64_t start_at) {
  FIO_ARRAY_TYPE *a = FIO_NAME2(FIO_ARRAY_NAME, ptr)(ary_);
  if (!a)
    return -1;
  size_t count = FIO_NAME(FIO_ARRAY_NAME, count)(ary_);
  if (start_at >= 0) {
    /* seek forwards */
    if ((uint32_t)start_at >= count)
      start_at = (int32_t)count;
    while ((uint32_t)start_at < count) {
      if (FIO_ARRAY_TYPE_CMP(a[start_at], data))
        return (uint32_t)start_at;
      ++start_at;
    }
  } else {
    /* seek backwards */
    if (start_at + (int32_t)count < 0)
      return -1;
    count += start_at;
    count += 1;
    while (count--) {
      if (FIO_ARRAY_TYPE_CMP(a[count], data))
        return (uint32_t)count;
    }
  }
  return -1;
}

/**
 * Removes an object from the array, MOVING all the other objects to prevent
 * "holes" in the data.
 *
 * If `old` is set, the data is copied to the location pointed to by `old`
 * before the data in the array is destroyed.
 *
 * Returns 0 on success and -1 on error.
 */
SFUNC int FIO_NAME(FIO_ARRAY_NAME, remove)(FIO_ARRAY_PTR ary_,
                                           int64_t index,
                                           FIO_ARRAY_TYPE *old) {
  FIO_ARRAY_TYPE *a = FIO_NAME2(FIO_ARRAY_NAME, ptr)(ary_);
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  size_t count;
  if (!a)
    goto invalid;
  count = FIO_NAME(FIO_ARRAY_NAME, count)(ary_);

  if (index < 0) {
    index += count;
    if (index < 0) {
      FIO_LOG_WARNING(
          FIO_MACRO2STR(FIO_NAME(FIO_ARRAY_NAME,
                                 remove)) " called with a negative index lower "
                                          "than the element count.");
      goto invalid;
    }
  }
  if ((uint32_t)index >= count)
    goto invalid;
  if (!index) {
    FIO_NAME(FIO_ARRAY_NAME, shift)(ary_, old);
    return 0;
  }
  if ((uint32_t)index + 1 == count) {
    FIO_NAME(FIO_ARRAY_NAME, pop)(ary_, old);
    return 0;
  }

  if (old) {
    FIO_ARRAY_TYPE_COPY(*old, a[index]);
#if FIO_ARRAY_DESTROY_AFTER_COPY
    FIO_ARRAY_TYPE_DESTROY(a[index]);
#endif
  } else {
    FIO_ARRAY_TYPE_DESTROY(a[index]);
  }

  if ((uint32_t)(index + 1) < count) {
    FIO_MEMMOVE(a + index, a + index + 1, (count - (index + 1)) * sizeof(*a));
  }
  FIO_ARRAY_TYPE_COPY((a + (count - 1))[0], FIO_ARRAY_TYPE_INVALID);

  if (FIO_ARRAY_IS_EMBEDDED(ary))
    goto embedded;
  --ary->end;
  return 0;

embedded:
  --ary->start;
  return 0;

invalid:
  if (old) {
    FIO_ARRAY_TYPE_COPY(*old, FIO_ARRAY_TYPE_INVALID);
  }
  return -1;
}

/**
 * Removes all occurrences of an object from the array (if any), MOVING all the
 * existing objects to prevent "holes" in the data.
 *
 * Returns the number of items removed.
 */
SFUNC uint32_t FIO_NAME(FIO_ARRAY_NAME, remove2)(FIO_ARRAY_PTR ary_,
                                                 FIO_ARRAY_TYPE data) {
  size_t c = 0;
  FIO_ARRAY_TYPE *a = FIO_NAME2(FIO_ARRAY_NAME, ptr)(ary_);
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  size_t count;
  if (!a)
    return (uint32_t)c;
  count = FIO_NAME(FIO_ARRAY_NAME, count)(ary_);

  size_t i = 0;
  while ((i + c) < count) {
    if (!(FIO_ARRAY_TYPE_CMP(a[i + c], data))) {
      a[i] = a[i + c];
      ++i;
      continue;
    }
    FIO_ARRAY_TYPE_DESTROY(a[i + c]);
    ++c;
  }
  if (c && FIO_MEM_REALLOC_IS_SAFE_) {
    /* keep memory zeroed out */
    FIO_MEMSET(a + i, 0, sizeof(*a) * c);
  }
  if (!FIO_ARRAY_IS_EMBEDDED_PTR(ary, a)) {
    ary->end = (uint32_t)(ary->start + i);
    return (uint32_t)c;
  }
  ary->start = (uint32_t)i;
  return (uint32_t)c;
}

/** Attempts to lower the array's memory consumption. */
SFUNC void FIO_NAME(FIO_ARRAY_NAME, compact)(FIO_ARRAY_PTR ary_) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(ary_);
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  size_t count = FIO_NAME(FIO_ARRAY_NAME, count)(ary_);
  FIO_ARRAY_TYPE *tmp = NULL;

  if (count <= FIO_ARRAY_EMBEDDED_CAPA)
    goto re_embed;

  tmp = (FIO_ARRAY_TYPE *)
      FIO_MEM_REALLOC_(NULL, 0, (ary->end - ary->start) * sizeof(*tmp), 0);
  if (!tmp)
    return;
  FIO_MEMCPY(tmp, ary->ary + ary->start, count * sizeof(*ary->ary));
  FIO_MEM_FREE_(ary->ary, ary->capa * sizeof(*ary->ary));
  *ary = (FIO_NAME(FIO_ARRAY_NAME, s)){
      .start = 0,
      .end = (ary->end - ary->start),
      .capa = (ary->end - ary->start),
      .ary = tmp,
  };
  return;

re_embed:
  if (!FIO_ARRAY_IS_EMBEDDED(ary)) {
    tmp = ary->ary;
    uint32_t offset = ary->start;
    size_t old_capa = ary->capa;
    *ary = (FIO_NAME(FIO_ARRAY_NAME, s)){
        .start = (uint32_t)count,
    };
    if (count) {
      FIO_MEMCPY(FIO_ARRAY2EMBEDDED(ary)->embedded,
                 tmp + offset,
                 count * sizeof(*tmp));
    }
    if (tmp) {
      FIO_LEAK_COUNTER_ON_FREE(FIO_NAME(FIO_ARRAY_NAME, destroy));
      FIO_MEM_FREE_(tmp, sizeof(*tmp) * old_capa);
      (void)old_capa; /* if unused */
    }
  }
  return;
}
/**
 * Pushes an object to the end of the Array. Returns NULL on error.
 */
SFUNC FIO_ARRAY_TYPE *FIO_NAME(FIO_ARRAY_NAME, push)(FIO_ARRAY_PTR ary_,
                                                     FIO_ARRAY_TYPE data) {
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  switch (FIO_NAME_BL(FIO_ARRAY_NAME, embedded)(ary_)) {
  case 0:
    if (ary->end == ary->capa) {
      if (!ary->start) {
        if (FIO_NAME(FIO_ARRAY_NAME,
                     reserve)(ary_, (uint32_t)FIO_ARRAY_ADD2CAPA(ary->capa)) ==
            ary->end)
          goto invalid;
      } else {
        const uint32_t new_start = (ary->start >> 2);
        const uint32_t count = ary->end - ary->start;
        if (count)
          FIO_MEMMOVE(ary->ary + new_start,
                      ary->ary + ary->start,
                      count * sizeof(*ary->ary));
        ary->end = count + new_start;
        ary->start = new_start;
      }
    }
    FIO_ARRAY_TYPE_COPY(ary->ary[ary->end], data);
    return ary->ary + (ary->end++);

  case 1:
    if (ary->start == FIO_ARRAY_EMBEDDED_CAPA)
      goto needs_memory_embedded;
    FIO_ARRAY_TYPE_COPY(FIO_ARRAY2EMBEDDED(ary)->embedded[ary->start], data);
    return FIO_ARRAY2EMBEDDED(ary)->embedded + (ary->start++);
  }
invalid:
  FIO_ARRAY_TYPE_DESTROY(data);
  return NULL;

needs_memory_embedded:
  if (FIO_NAME(FIO_ARRAY_NAME,
               reserve)(ary_, FIO_ARRAY_ADD2CAPA(FIO_ARRAY_EMBEDDED_CAPA)) ==
      FIO_ARRAY_EMBEDDED_CAPA)
    goto invalid;
  FIO_ARRAY_TYPE_COPY(ary->ary[ary->end], data);
  return ary->ary + (ary->end++);
}

/**
 * Removes an object from the end of the Array.
 *
 * If `old` is set, the data is copied to the location pointed to by `old`
 * before the data in the array is destroyed.
 *
 * Returns -1 on error (Array is empty) and 0 on success.
 */
SFUNC int FIO_NAME(FIO_ARRAY_NAME, pop)(FIO_ARRAY_PTR ary_,
                                        FIO_ARRAY_TYPE *old) {
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  switch (FIO_NAME_BL(FIO_ARRAY_NAME, embedded)(ary_)) {
  case 0:
    if (ary->end == ary->start)
      return -1;
    --ary->end;
    if (old) {
      FIO_ARRAY_TYPE_COPY(*old, ary->ary[ary->end]);
#if FIO_ARRAY_DESTROY_AFTER_COPY
      FIO_ARRAY_TYPE_DESTROY(ary->ary[ary->end]);
#endif
    } else {
      FIO_ARRAY_TYPE_DESTROY(ary->ary[ary->end]);
    }
    return 0;
  case 1:
    if (!ary->start)
      return -1;
    --ary->start;
    if (old) {
      FIO_ARRAY_TYPE_COPY(*old, FIO_ARRAY2EMBEDDED(ary)->embedded[ary->start]);
#if FIO_ARRAY_DESTROY_AFTER_COPY
      FIO_ARRAY_TYPE_DESTROY(FIO_ARRAY2EMBEDDED(ary)->embedded[ary->start]);
#endif
    } else {
      FIO_ARRAY_TYPE_DESTROY(FIO_ARRAY2EMBEDDED(ary)->embedded[ary->start]);
    }
    FIO_MEMSET(FIO_ARRAY2EMBEDDED(ary)->embedded + ary->start,
               0,
               sizeof(*ary->ary));
    return 0;
  }
  if (old)
    FIO_ARRAY_TYPE_COPY(old[0], FIO_ARRAY_TYPE_INVALID);
  return -1;
}

/**
 * Unshifts an object to the beginning of the Array. Returns -1 on error.
 *
 * This could be expensive, causing `memmove`.
 */
SFUNC FIO_ARRAY_TYPE *FIO_NAME(FIO_ARRAY_NAME, unshift)(FIO_ARRAY_PTR ary_,
                                                        FIO_ARRAY_TYPE data) {
  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);
  switch (FIO_NAME_BL(FIO_ARRAY_NAME, embedded)(ary_)) {
  case 0:
    if (!ary->start) {
      if (ary->end == ary->capa) {
        FIO_NAME(FIO_ARRAY_NAME, reserve)
        (ary_, (-1 - (int32_t)FIO_ARRAY_ADD2CAPA(ary->capa)));
        if (!ary->start)
          goto invalid;
      } else {
        const uint32_t new_end =
            (uint32_t)(ary->capa - ((ary->capa - ary->end) >> 2));
        const uint32_t count = (uint32_t)(ary->end - ary->start);
        const uint32_t new_start = (uint32_t)(new_end - count);
        if (count)
          FIO_MEMMOVE(ary->ary + new_start,
                      ary->ary + ary->start,
                      count * sizeof(*ary->ary));
        ary->end = new_end;
        ary->start = new_start;
      }
    }
    FIO_ARRAY_TYPE_COPY(ary->ary[--ary->start], data);
    return ary->ary + ary->start;

  case 1:
    if (ary->start == FIO_ARRAY_EMBEDDED_CAPA)
      goto needs_memory_embed;
    if (ary->start)
      FIO_MEMMOVE(FIO_ARRAY2EMBEDDED(ary)->embedded + 1,
                  FIO_ARRAY2EMBEDDED(ary)->embedded,
                  sizeof(*ary->ary) * ary->start);
    ++ary->start;
    FIO_ARRAY_TYPE_COPY(FIO_ARRAY2EMBEDDED(ary)->embedded[0], data);
    return FIO_ARRAY2EMBEDDED(ary)->embedded;
  }
invalid:
  FIO_ARRAY_TYPE_DESTROY(data);
  return NULL;

needs_memory_embed:
  if (FIO_NAME(FIO_ARRAY_NAME, reserve)(
          ary_,
          (-1 - (int32_t)FIO_ARRAY_ADD2CAPA(FIO_ARRAY_EMBEDDED_CAPA))) ==
      FIO_ARRAY_EMBEDDED_CAPA)
    goto invalid;
  FIO_ARRAY_TYPE_COPY(ary->ary[--ary->start], data);
  return ary->ary + ary->start;
}

/**
 * Removes an object from the beginning of the Array.
 *
 * If `old` is set, the data is copied to the location pointed to by `old`
 * before the data in the array is destroyed.
 *
 * Returns -1 on error (Array is empty) and 0 on success.
 */
SFUNC int FIO_NAME(FIO_ARRAY_NAME, shift)(FIO_ARRAY_PTR ary_,
                                          FIO_ARRAY_TYPE *old) {

  FIO_NAME(FIO_ARRAY_NAME, s) *ary =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_ARRAY_NAME, s), ary_);

  switch (FIO_NAME_BL(FIO_ARRAY_NAME, embedded)(ary_)) {
  case 0:
    if (ary->end == ary->start)
      return -1;
    if (old) {
      FIO_ARRAY_TYPE_COPY(*old, ary->ary[ary->start]);
#if FIO_ARRAY_DESTROY_AFTER_COPY
      FIO_ARRAY_TYPE_DESTROY(ary->ary[ary->start]);
#endif
    } else {
      FIO_ARRAY_TYPE_DESTROY(ary->ary[ary->start]);
    }
    ++ary->start;
    return 0;
  case 1:
    if (!ary->start)
      return -1;
    if (old) {
      FIO_ARRAY_TYPE_COPY(old[0], FIO_ARRAY2EMBEDDED(ary)->embedded[0]);
#if FIO_ARRAY_DESTROY_AFTER_COPY
      FIO_ARRAY_TYPE_DESTROY(FIO_ARRAY2EMBEDDED(ary)->embedded[0]);
#endif
    } else {
      FIO_ARRAY_TYPE_DESTROY(FIO_ARRAY2EMBEDDED(ary)->embedded[0]);
    }
    --ary->start;
    if (ary->start)
      FIO_MEMMOVE(FIO_ARRAY2EMBEDDED(ary)->embedded,
                  FIO_ARRAY2EMBEDDED(ary)->embedded +
                      FIO_ARRAY2EMBEDDED(ary)->start,
                  FIO_ARRAY2EMBEDDED(ary)->start *
                      sizeof(*FIO_ARRAY2EMBEDDED(ary)->embedded));
    FIO_MEMSET(FIO_ARRAY2EMBEDDED(ary)->embedded + ary->start,
               0,
               sizeof(*ary->ary));
    return 0;
  }
  if (old)
    FIO_ARRAY_TYPE_COPY(old[0], FIO_ARRAY_TYPE_INVALID);
  return -1;
}

/**
 * Iteration using a callback for each entry in the array.
 *
 * The callback task function must accept an the entry data as well as an opaque
 * user pointer.
 *
 * If the callback returns -1, the loop is broken. Any other value is ignored.
 *
 * Returns the relative "stop" position, i.e., the number of items processed +
 * the starting point.
 */
IFUNC uint32_t FIO_NAME(FIO_ARRAY_NAME,
                        each)(FIO_ARRAY_PTR ary_,
                              int (*task)(FIO_NAME(FIO_ARRAY_NAME, each_s) *
                                          info),
                              void *udata,
                              int64_t start_at) {
  FIO_ARRAY_TYPE *a = FIO_NAME2(FIO_ARRAY_NAME, ptr)(ary_);
  if (!a)
    return (uint32_t)-1;

  uint32_t count = FIO_NAME(FIO_ARRAY_NAME, count)(ary_);

  if (start_at < 0) {
    start_at = count - start_at;
    if (start_at < 0)
      start_at = 0;
  }

  if (!a || !task)
    return (uint32_t)-1;

  if ((uint32_t)start_at >= count)
    return (uint32_t)count;

  FIO_NAME(FIO_ARRAY_NAME, each_s)
  e = {
      .parent = ary_,
      .index = (uint64_t)start_at,
      .task = task,
      .udata = udata,
  };

  while ((uint32_t)e.index < FIO_NAME(FIO_ARRAY_NAME, count)(ary_)) {
    a = FIO_NAME2(FIO_ARRAY_NAME, ptr)(ary_);
    e.value = a[e.index];
    int r = e.task(&e);
    ++e.index;
    if (r == -1) {
      return (uint32_t)(e.index);
    }
  }
  return (uint32_t)e.index;
}

/* *****************************************************************************
Dynamic Arrays - test
***************************************************************************** */
#ifdef FIO_TEST_ALL

/* make suer the functions are defined for the testing */
#ifdef FIO_REF_CONSTRUCTOR_ONLY
IFUNC FIO_ARRAY_PTR FIO_NAME(FIO_ARRAY_NAME, new)(void);
IFUNC void FIO_NAME(FIO_ARRAY_NAME, free)(FIO_ARRAY_PTR ary);
#endif /* FIO_REF_CONSTRUCTOR_ONLY */

#define FIO_ARRAY_TEST_OBJ_SET(dest, val)                                      \
  FIO_MEMSET(&(dest), (int)(val), sizeof(FIO_ARRAY_TYPE))
#define FIO_ARRAY_TEST_OBJ_IS(val)                                             \
  (!FIO_MEMCMP(&o,                                                             \
               FIO_MEMSET(&v, (int)(val), sizeof(v)),                          \
               sizeof(FIO_ARRAY_TYPE)))

FIO_SFUNC int FIO_NAME_TEST(stl, FIO_NAME(FIO_ARRAY_NAME, test_task))(
    FIO_NAME(FIO_ARRAY_NAME, each_s) * i) {
  struct data_s {
    int i;
    int va[];
  } *d = (struct data_s *)i->udata;
  FIO_ARRAY_TYPE v;

  FIO_ARRAY_TEST_OBJ_SET(v, d->va[d->i]);
  ++d->i;
  if (d->va[d->i + 1])
    return 0;
  return -1;
}

FIO_SFUNC void FIO_NAME_TEST(stl, FIO_ARRAY_NAME)(void) {
  FIO_ARRAY_TYPE o;
  FIO_ARRAY_TYPE v;
  FIO_NAME(FIO_ARRAY_NAME, s) a_on_stack = FIO_ARRAY_INIT;
  FIO_ARRAY_PTR a_array[2];
  a_array[0] = (FIO_ARRAY_PTR)FIO_PTR_TAG((&a_on_stack));
  a_array[1] = FIO_NAME(FIO_ARRAY_NAME, new)();
  FIO_ASSERT_ALLOC(a_array[1]);
  /* perform test twice, once for an array on the stack and once for allocate */
  for (int selector = 0; selector < 2; ++selector) {
    FIO_ARRAY_PTR a = a_array[selector];
    fprintf(stderr,
            "* Testing dynamic arrays on the %s (" FIO_MACRO2STR(
                FIO_NAME(FIO_ARRAY_NAME,
                         s)) ").\n"
                             "  This type supports %zu embedded items\n",
            (selector ? "heap" : "stack"),
            FIO_ARRAY_EMBEDDED_CAPA);
    /* Test start here */

    /* test push */
    for (int i = 0; i < (int)(FIO_ARRAY_EMBEDDED_CAPA) + 3; ++i) {
      FIO_ARRAY_TEST_OBJ_SET(o, (i + 1));
      o = *FIO_NAME(FIO_ARRAY_NAME, push)(a, o);
      FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS(i + 1), "push failed (%d)", i);
      o = FIO_NAME(FIO_ARRAY_NAME, get)(a, i);
      FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS(i + 1), "push-get cycle failed (%d)", i);
      o = FIO_NAME(FIO_ARRAY_NAME, get)(a, -1);
      FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS(i + 1),
                 "get with -1 returned wrong result (%d)",
                 i);
    }
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, count)(a) ==
                   FIO_ARRAY_EMBEDDED_CAPA + 3,
               "push didn't update count correctly (%d != %d)",
               FIO_NAME(FIO_ARRAY_NAME, count)(a),
               (int)(FIO_ARRAY_EMBEDDED_CAPA) + 3);

    /* test pop */
    for (int i = (int)(FIO_ARRAY_EMBEDDED_CAPA) + 3; i--;) {
      FIO_NAME(FIO_ARRAY_NAME, pop)(a, &o);
      FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS((i + 1)),
                 "pop value error failed (%d)",
                 i);
    }
    FIO_ASSERT(!FIO_NAME(FIO_ARRAY_NAME, count)(a),
               "pop didn't pop all elements?");
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, pop)(a, &o),
               "pop for empty array should return an error.");

    /* test compact with zero elements */
    FIO_NAME(FIO_ARRAY_NAME, compact)(a);
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, capa)(a) == FIO_ARRAY_EMBEDDED_CAPA,
               "compact zero elementes didn't make array embedded?");

    /* test unshift */
    for (int i = (int)(FIO_ARRAY_EMBEDDED_CAPA) + 3; i--;) {
      FIO_ARRAY_TEST_OBJ_SET(o, (i + 1));
      o = *FIO_NAME(FIO_ARRAY_NAME, unshift)(a, o);
      FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS(i + 1), "shift failed (%d)", i);
      o = FIO_NAME(FIO_ARRAY_NAME, get)(a, 0);
      FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS(i + 1),
                 "unshift-get cycle failed (%d)",
                 i);
      int64_t negative_index = 0 - (((int)(FIO_ARRAY_EMBEDDED_CAPA) + 3) - i);
      o = FIO_NAME(FIO_ARRAY_NAME, get)(a, negative_index);
      FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS(i + 1),
                 "get with %d returned wrong result.",
                 negative_index);
    }
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, count)(a) ==
                   FIO_ARRAY_EMBEDDED_CAPA + 3,
               "unshift didn't update count correctly (%d != %d)",
               FIO_NAME(FIO_ARRAY_NAME, count)(a),
               (int)(FIO_ARRAY_EMBEDDED_CAPA) + 3);

    /* test shift */
    for (int i = 0; i < (int)(FIO_ARRAY_EMBEDDED_CAPA) + 3; ++i) {
      FIO_NAME(FIO_ARRAY_NAME, shift)(a, &o);
      FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS((i + 1)),
                 "shift value error failed (%d)",
                 i);
    }
    FIO_ASSERT(!FIO_NAME(FIO_ARRAY_NAME, count)(a),
               "shift didn't shift all elements?");
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, shift)(a, &o),
               "shift for empty array should return an error.");

    /* test set from embedded? array */
    FIO_NAME(FIO_ARRAY_NAME, compact)(a);
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, capa)(a) == FIO_ARRAY_EMBEDDED_CAPA,
               "compact zero elementes didn't make array embedded (2)?");
    FIO_ARRAY_TEST_OBJ_SET(o, 1);
    FIO_NAME(FIO_ARRAY_NAME, push)(a, o);
    if (FIO_ARRAY_EMBEDDED_CAPA) {
      FIO_ARRAY_TEST_OBJ_SET(o, 1);
      FIO_NAME(FIO_ARRAY_NAME, set)(a, FIO_ARRAY_EMBEDDED_CAPA, o, &o);
      FIO_ASSERT(FIO_ARRAY_TYPE_CMP(o, FIO_ARRAY_TYPE_INVALID),
                 "set overflow from embedded array should reset `old`");
      FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, count)(a) ==
                     FIO_ARRAY_EMBEDDED_CAPA + 1,
                 "set didn't update count correctly from embedded "
                 "array (%d != %d)",
                 FIO_NAME(FIO_ARRAY_NAME, count)(a),
                 (int)FIO_ARRAY_EMBEDDED_CAPA);
    }

    /* test set from bigger array */
    FIO_ARRAY_TEST_OBJ_SET(o, 1);
    FIO_NAME(FIO_ARRAY_NAME, set)
    (a, ((FIO_ARRAY_EMBEDDED_CAPA + 1) * 4), o, &o);
    FIO_ASSERT(FIO_ARRAY_TYPE_CMP(o, FIO_ARRAY_TYPE_INVALID),
               "set overflow should reset `old`");
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, count)(a) ==
                   ((FIO_ARRAY_EMBEDDED_CAPA + 1) * 4) + 1,
               "set didn't update count correctly (%d != %d)",
               FIO_NAME(FIO_ARRAY_NAME, count)(a),
               (int)((FIO_ARRAY_EMBEDDED_CAPA + 1) * 4));
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, capa)(a) >=
                   ((FIO_ARRAY_EMBEDDED_CAPA + 1) * 4),
               "set capa should be above item count");
    if (FIO_ARRAY_EMBEDDED_CAPA) {
      FIO_ARRAY_TYPE_COPY(o, FIO_ARRAY_TYPE_INVALID);
      FIO_NAME(FIO_ARRAY_NAME, set)(a, FIO_ARRAY_EMBEDDED_CAPA, o, &o);
      FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS(1),
                 "set overflow lost last item while growing.");
    }
    o = FIO_NAME(FIO_ARRAY_NAME, get)(a, (FIO_ARRAY_EMBEDDED_CAPA + 1) * 2);
    FIO_ASSERT(FIO_ARRAY_TYPE_CMP(o, FIO_ARRAY_TYPE_INVALID),
               "set overflow should have memory in the middle set to invalid "
               "objetcs.");
    FIO_ARRAY_TEST_OBJ_SET(o, 2);
    FIO_NAME(FIO_ARRAY_NAME, set)(a, 0, o, &o);
    FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS(1),
               "set should set `old` to previous value");
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, count)(a) ==
                   ((FIO_ARRAY_EMBEDDED_CAPA + 1) * 4) + 1,
               "set item count error");
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, capa)(a) >=
                   ((FIO_ARRAY_EMBEDDED_CAPA + 1) * 4) + 1,
               "set capa should be above item count");

    /* test find TODO: test with uninitialized array */
    FIO_ARRAY_TEST_OBJ_SET(o, 99);
    if (FIO_ARRAY_TYPE_CMP(o, FIO_ARRAY_TYPE_INVALID)) {
      FIO_ARRAY_TEST_OBJ_SET(o, 100);
    }
    uint32_t found = FIO_NAME(FIO_ARRAY_NAME, find)(a, o, 0);
    FIO_ASSERT(found == (uint32_t)-1,
               "seeking for an object that doesn't exist should fail.");
    FIO_ARRAY_TEST_OBJ_SET(o, 1);
    found = FIO_NAME(FIO_ARRAY_NAME, find)(a, o, 1);
    FIO_ASSERT(found == ((FIO_ARRAY_EMBEDDED_CAPA + 1) * 4),
               "seeking for an object returned the wrong index.");
    FIO_ASSERT(found == FIO_NAME(FIO_ARRAY_NAME, find)(a, o, -1),
               "seeking for an object in reverse returned the wrong index.");
    FIO_ARRAY_TEST_OBJ_SET(o, 2);
    FIO_ASSERT(
        !FIO_NAME(FIO_ARRAY_NAME, find)(a, o, -2),
        "seeking for an object in reverse (2) returned the wrong index.");
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, count)(a) ==
                   ((FIO_ARRAY_EMBEDDED_CAPA + 1) * 4) + 1,
               "find should have side-effects - count error");
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, capa)(a) >=
                   ((FIO_ARRAY_EMBEDDED_CAPA + 1) * 4) + 1,
               "find should have side-effects - capa error");

    /* test remove */
    FIO_NAME(FIO_ARRAY_NAME, remove)(a, found, &o);
    FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS(1), "remove didn't copy old data?");
    o = FIO_NAME(FIO_ARRAY_NAME, get)(a, 0);
    FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS(2), "remove removed more?");
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, count)(a) ==
                   ((FIO_ARRAY_EMBEDDED_CAPA + 1) * 4),
               "remove with didn't update count correctly (%d != %s)",
               FIO_NAME(FIO_ARRAY_NAME, count)(a),
               (int)((FIO_ARRAY_EMBEDDED_CAPA + 1) * 4));
    o = FIO_NAME(FIO_ARRAY_NAME, get)(a, -1);

    /* test remove2 */
    FIO_ARRAY_TYPE_COPY(o, FIO_ARRAY_TYPE_INVALID);
    FIO_ASSERT((found = FIO_NAME(FIO_ARRAY_NAME, remove2)(a, o)) ==
                   ((FIO_ARRAY_EMBEDDED_CAPA + 1) * 4) - 1,
               "remove2 result error, %d != %d items.",
               found,
               (int)((FIO_ARRAY_EMBEDDED_CAPA + 1) * 4) - 1);
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, count)(a) == 1,
               "remove2 didn't update count correctly (%d != 1)",
               FIO_NAME(FIO_ARRAY_NAME, count)(a));

    /* hopefuly these will end... or crash on error. */
    while (!FIO_NAME(FIO_ARRAY_NAME, pop)(a, NULL)) {
      ;
    }
    while (!FIO_NAME(FIO_ARRAY_NAME, shift)(a, NULL)) {
      ;
    }

    /* test push / unshift alternate */
    FIO_NAME(FIO_ARRAY_NAME, destroy)(a);
    for (int i = 0; i < 4096; ++i) {
      FIO_ARRAY_TEST_OBJ_SET(o, (i + 1));
      FIO_NAME(FIO_ARRAY_NAME, push)(a, o);
      FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, count)(a) + 1 ==
                     ((uint32_t)(i + 1) << 1),
                 "push-unshift[%d.5] cycle count arror (%d != %d)",
                 i,
                 FIO_NAME(FIO_ARRAY_NAME, count)(a),
                 (((uint32_t)(i + 1) << 1)) - 1);
      FIO_ARRAY_TEST_OBJ_SET(o, (i + 4097));
      FIO_NAME(FIO_ARRAY_NAME, unshift)(a, o);
      FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, count)(a) == ((uint32_t)(i + 1) << 1),
                 "push-unshift[%d] cycle count arror (%d != %d)",
                 i,
                 FIO_NAME(FIO_ARRAY_NAME, count)(a),
                 ((uint32_t)(i + 1) << 1));
      o = FIO_NAME(FIO_ARRAY_NAME, get)(a, 0);
      FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS(i + 4097),
                 "unshift-push cycle failed (%d)",
                 i);
      o = FIO_NAME(FIO_ARRAY_NAME, get)(a, -1);
      FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS(i + 1),
                 "push-shift cycle failed (%d)",
                 i);
    }
    for (int i = 0; i < 4096; ++i) {
      o = FIO_NAME(FIO_ARRAY_NAME, get)(a, i);
      FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS((4096 * 2) - i),
                 "item value error at index %d",
                 i);
    }
    for (int i = 0; i < 4096; ++i) {
      o = FIO_NAME(FIO_ARRAY_NAME, get)(a, i + 4096);
      FIO_ASSERT(FIO_ARRAY_TEST_OBJ_IS((1 + i)),
                 "item value error at index %d",
                 i + 4096);
    }
#if DEBUG
    for (int i = 0; i < 2; ++i) {
      FIO_LOG_DEBUG2(
          "\t- " FIO_MACRO2STR(
              FIO_NAME(FIO_ARRAY_NAME, s)) " after push/unshit cycle%s:\n"
                                           "\t\t- item count: %d items\n"
                                           "\t\t- capacity:   %d items\n"
                                           "\t\t- memory:     %d bytes\n",
          (i ? " after compact" : ""),
          FIO_NAME(FIO_ARRAY_NAME, count)(a),
          FIO_NAME(FIO_ARRAY_NAME, capa)(a),
          FIO_NAME(FIO_ARRAY_NAME, capa)(a) * sizeof(FIO_ARRAY_TYPE));
      FIO_NAME(FIO_ARRAY_NAME, compact)(a);
    }
#endif /* DEBUG */

    FIO_ARRAY_TYPE_COPY(o, FIO_ARRAY_TYPE_INVALID);
/* test set with NULL, hopefully a bug will cause a crash */
#if FIO_ARRAY_TYPE_DESTROY_SIMPLE
    for (int i = 0; i < 4096; ++i) {
      FIO_NAME(FIO_ARRAY_NAME, set)(a, i, o, NULL);
    }
#else
    /*
     * we need to clear the memory to make sure a cleanup actions don't get
     * unexpected values.
     */
    for (int i = 0; i < (4096 * 2); ++i) {
      FIO_ARRAY_TYPE_COPY((FIO_NAME2(FIO_ARRAY_NAME, ptr)(a)[i]),
                          FIO_ARRAY_TYPE_INVALID);
    }

#endif

    /* TODO: test concat */

    /* test each */
    {
      struct data_s {
        int i;
        int va[10];
      } d = {1, {1, 8, 2, 7, 3, 6, 4, 5}};
      FIO_NAME(FIO_ARRAY_NAME, destroy)(a);
      for (int i = 0; d.va[i]; ++i) {
        FIO_ARRAY_TEST_OBJ_SET(o, d.va[i]);
        FIO_NAME(FIO_ARRAY_NAME, push)(a, o);
      }

      int index = FIO_NAME(FIO_ARRAY_NAME, each)(
          a,
          FIO_NAME_TEST(stl, FIO_NAME(FIO_ARRAY_NAME, test_task)),
          (void *)&d,
          d.i);
      FIO_ASSERT(index == d.i,
                 "index rerturned from each should match next object");
      FIO_ASSERT(*(char *)&d.va[d.i],
                 "array each error (didn't stop in time?).");
      FIO_ASSERT(!(*(char *)&d.va[d.i + 1]),
                 "array each error (didn't stop in time?).");
    }
#if FIO_ARRAY_TYPE_DESTROY_SIMPLE
    {
      FIO_NAME(FIO_ARRAY_NAME, destroy)(a);
      size_t max_items = 63;
      FIO_ARRAY_TYPE tmp[64];
      for (size_t i = 0; i < max_items; ++i) {
        FIO_MEMSET(tmp + i, i + 1, sizeof(*tmp));
      }
      for (size_t items = 0; items <= max_items; items = ((items << 1) | 1)) {
        FIO_LOG_DEBUG2("* testing the FIO_ARRAY_EACH macro with %zu items.",
                       items);
        size_t i = 0;
        for (i = 0; i < items; ++i)
          FIO_NAME(FIO_ARRAY_NAME, push)(a, tmp[i]);
        i = 0;
        FIO_ARRAY_EACH(FIO_ARRAY_NAME, a, pos) {
          FIO_ASSERT(!memcmp(tmp + i, pos, sizeof(*pos)),
                     "FIO_ARRAY_EACH pos is at wrong index %zu != %zu",
                     (size_t)(pos - FIO_NAME2(FIO_ARRAY_NAME, ptr)(a)),
                     i);
          ++i;
        }
        FIO_ASSERT(i == items,
                   "FIO_ARRAY_EACH macro count error - didn't review all "
                   "items? %zu != %zu ",
                   i,
                   items);
        FIO_NAME(FIO_ARRAY_NAME, destroy)(a);
      }
    }
#endif
    /* test destroy */
    FIO_NAME(FIO_ARRAY_NAME, destroy)(a);
    FIO_ASSERT(!FIO_NAME(FIO_ARRAY_NAME, count)(a),
               "destroy didn't clear count.");
    FIO_ASSERT(FIO_NAME(FIO_ARRAY_NAME, capa)(a) == FIO_ARRAY_EMBEDDED_CAPA,
               "destroy capa error.");
    /* Test end here */
  }
  FIO_NAME(FIO_ARRAY_NAME, free)(a_array[1]);
}
#undef FIO_ARRAY_TEST_OBJ_SET
#undef FIO_ARRAY_TEST_OBJ_IS

#endif /* FIO_TEST_ALL */
/* *****************************************************************************
Dynamic Arrays - cleanup
***************************************************************************** */
#endif /* FIO_EXTERN_COMPLETE */
#endif /* FIO_ARRAY_NAME */

#undef FIO_ARRAY_NAME
#undef FIO_ARRAY_TYPE
#undef FIO_ARRAY_ENABLE_EMBEDDED
#undef FIO_ARRAY_TYPE_INVALID
#undef FIO_ARRAY_TYPE_INVALID_SIMPLE
#undef FIO_ARRAY_TYPE_COPY
#undef FIO_ARRAY_TYPE_COPY_SIMPLE
#undef FIO_ARRAY_TYPE_CONCAT_COPY
#undef FIO_ARRAY_TYPE_CONCAT_COPY_SIMPLE
#undef FIO_ARRAY_TYPE_DESTROY
#undef FIO_ARRAY_TYPE_DESTROY_SIMPLE
#undef FIO_ARRAY_DESTROY_AFTER_COPY
#undef FIO_ARRAY_TYPE_CMP
#undef FIO_ARRAY_TYPE_CMP_SIMPLE
#undef FIO_ARRAY_PADDING
#undef FIO_ARRAY_SIZE2WORDS
#undef FIO_ARRAY_POS2ABS
#undef FIO_ARRAY_AB_CT
#undef FIO_ARRAY_PTR
#undef FIO_ARRAY_EXPONENTIAL
#undef FIO_ARRAY_ADD2CAPA
#undef FIO_ARRAY_IS_EMBEDDED
#undef FIO_ARRAY_IS_EMBEDDED_PTR
#undef FIO_ARRAY_EMBEDDED_CAPA
#undef FIO_ARRAY2EMBEDDED
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_MAP_NAME map       /* Development inclusion - ignore line */
#define FIO_MAP_KEY  size_t    /* Development inclusion - ignore line */
// #define FIO_MAP_VALUE_BSTR     /* Development inclusion - ignore line */
// #define FIO_MAP_ORDERED        /* Development inclusion - ignore line */
#define FIO_MAP_TEST   /* Development inclusion - ignore line */
#include "./include.h" /* Development inclusion - ignore line */
#endif                 /* Development inclusion - ignore line */
/* *****************************************************************************




                  Unordered/Ordered Map Implementation



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_MAP_NAME)
/* *****************************************************************************
Map Settings - Sets have only keys (value == key) - Hash Maps have values
***************************************************************************** */

/* if FIO_MAP_KEY_KSTR is defined, use fio_keystr_s keys */
#ifdef FIO_MAP_KEY_KSTR
#define FIO_MAP_KEY                  fio_str_info_s
#define FIO_MAP_KEY_INTERNAL         fio_keystr_s
#define FIO_MAP_KEY_FROM_INTERNAL(k) fio_keystr_info(&(k))
#define FIO_MAP_KEY_COPY(dest, src)                                            \
  (dest) = fio_keystr_init((src), FIO_NAME(FIO_MAP_NAME, __key_alloc))
#define FIO_MAP_KEY_CMP(a, b) fio_keystr_is_eq2((a), (b))
#define FIO_MAP_KEY_DESTROY(key)                                               \
  fio_keystr_destroy(&(key), FIO_NAME(FIO_MAP_NAME, __key_free))
#define FIO_MAP_KEY_DISCARD(key)
FIO_SFUNC void *FIO_NAME(FIO_MAP_NAME, __key_alloc)(size_t len) {
  return FIO_MEM_REALLOC_(NULL, 0, len, 0);
}
FIO_SFUNC void FIO_NAME(FIO_MAP_NAME, __key_free)(void *ptr, size_t len) {
  FIO_MEM_FREE_(ptr, len);
  (void)len; /* if unused */
}
#undef FIO_MAP_KEY_KSTR

/* if FIO_MAP_KEY is undefined, assume String keys (using `fio_bstr`). */
#elif !defined(FIO_MAP_KEY) || defined(FIO_MAP_KEY_BSTR)
#define FIO_MAP_KEY                  fio_str_info_s
#define FIO_MAP_KEY_INTERNAL         char *
#define FIO_MAP_KEY_FROM_INTERNAL(k) fio_bstr_info((k))
#define FIO_MAP_KEY_COPY(dest, src)                                            \
  (dest) = fio_bstr_write(NULL, (src).buf, (src).len)
#define FIO_MAP_KEY_CMP(a, b)    fio_bstr_is_eq2info((a), (b))
#define FIO_MAP_KEY_DESTROY(key) fio_bstr_free((key))
#define FIO_MAP_KEY_DISCARD(key)
#endif
#undef FIO_MAP_KEY_BSTR

#ifndef FIO_MAP_KEY_INTERNAL
#define FIO_MAP_KEY_INTERNAL FIO_MAP_KEY
#endif

#ifndef FIO_MAP_KEY_FROM_INTERNAL
#define FIO_MAP_KEY_FROM_INTERNAL(o) o
#endif

#ifndef FIO_MAP_KEY_COPY
#define FIO_MAP_KEY_COPY(dest, src) ((dest) = (src))
#endif

#ifndef FIO_MAP_KEY_CMP
#define FIO_MAP_KEY_CMP(a, b) ((a) == (b))
#endif

#ifndef FIO_MAP_KEY_DESTROY
#define FIO_MAP_KEY_DESTROY(o)
#define FIO_MAP_KEY_DESTROY_SIMPLE 1
#endif

#ifndef FIO_MAP_KEY_DISCARD
#define FIO_MAP_KEY_DISCARD(o)
#endif

/* FIO_MAP_HASH_FN(key) - used instead of providing a hash value. */
#ifndef FIO_MAP_HASH_FN
#undef FIO_MAP_RECALC_HASH
#endif

/* FIO_MAP_RECALC_HASH - if true, hash values won't be cached. */
#ifndef FIO_MAP_RECALC_HASH
#define FIO_MAP_RECALC_HASH 0
#endif

#ifdef FIO_MAP_VALUE_BSTR
#define FIO_MAP_VALUE                  fio_str_info_s
#define FIO_MAP_VALUE_INTERNAL         char *
#define FIO_MAP_VALUE_FROM_INTERNAL(v) fio_bstr_info((v))
#define FIO_MAP_VALUE_COPY(dest, src)                                          \
  (dest) = fio_bstr_write(NULL, (src).buf, (src).len)
#define FIO_MAP_VALUE_DESTROY(v) fio_bstr_free((v))
#define FIO_MAP_VALUE_DISCARD(v)
#endif

#ifdef FIO_MAP_VALUE
#define FIO_MAP_GET_T FIO_MAP_VALUE
#else
#define FIO_MAP_GET_T FIO_MAP_KEY
#endif

#ifndef FIO_MAP_VALUE_INTERNAL
#define FIO_MAP_VALUE_INTERNAL FIO_MAP_VALUE
#endif

#ifndef FIO_MAP_VALUE_FROM_INTERNAL
#ifdef FIO_MAP_VALUE
#define FIO_MAP_VALUE_FROM_INTERNAL(o) o
#else
#define FIO_MAP_VALUE_FROM_INTERNAL(o)
#endif
#endif

#ifndef FIO_MAP_VALUE_COPY
#ifdef FIO_MAP_VALUE
#define FIO_MAP_VALUE_COPY(dest, src) (dest) = (src)
#else
#define FIO_MAP_VALUE_COPY(dest, src)
#endif
#endif

#ifndef FIO_MAP_VALUE_DESTROY
#define FIO_MAP_VALUE_DESTROY(o)
#define FIO_MAP_VALUE_DESTROY_SIMPLE 1
#endif

#ifndef FIO_MAP_VALUE_DISCARD
#define FIO_MAP_VALUE_DISCARD(o)
#endif

#ifdef FIO_MAP_LRU
#undef FIO_MAP_ORDERED
#define FIO_MAP_ORDERED 1 /* required for least recently used order */
#endif

/* test if FIO_MAP_ORDERED was defined as an empty macro */
#if defined(FIO_MAP_ORDERED) && ((0 - FIO_MAP_ORDERED - 1) == 1)
#undef FIO_MAP_ORDERED
#define FIO_MAP_ORDERED 1 /* assume developer's intention */
#endif

#ifndef FIO_MAP_ORDERED
#define FIO_MAP_ORDERED 0
#endif

/* *****************************************************************************
Pointer Tagging Support
***************************************************************************** */

#ifdef FIO_PTR_TAG_TYPE
#define FIO_MAP_PTR FIO_PTR_TAG_TYPE
#else
#define FIO_MAP_PTR FIO_NAME(FIO_MAP_NAME, s) *
#endif
#define FIO_MAP_T FIO_NAME(FIO_MAP_NAME, s)

/* *****************************************************************************
Map Types
***************************************************************************** */

#ifndef FIO_MAP_INIT
/* Initialization macro. */
#define FIO_MAP_INIT                                                           \
  { 0 }
#endif

/** internal object data representation */
typedef struct FIO_NAME(FIO_MAP_NAME, node_s) FIO_NAME(FIO_MAP_NAME, node_s);

/** A Hash Map / Set type */
typedef struct FIO_NAME(FIO_MAP_NAME, s) {
  uint32_t bits;
  uint32_t count;
  FIO_NAME(FIO_MAP_NAME, node_s) * map;
#if FIO_MAP_ORDERED
  FIO_INDEXED_LIST32_HEAD head;
#endif
} FIO_NAME(FIO_MAP_NAME, s);

/** internal object data representation */
struct FIO_NAME(FIO_MAP_NAME, node_s) {
#if !FIO_MAP_RECALC_HASH
  uint64_t hash;
#endif
  FIO_MAP_KEY_INTERNAL key;
#ifdef FIO_MAP_VALUE
  FIO_MAP_VALUE_INTERNAL value;
#endif
#if FIO_MAP_ORDERED
  FIO_INDEXED_LIST32_NODE node;
#endif
};

/** Map iterator type */
typedef struct {
  /** the node in the internal map */
  FIO_NAME(FIO_MAP_NAME, node_s) * node;
  /** the key in the current position */
  FIO_MAP_KEY key;
#ifdef FIO_MAP_VALUE
  /** the value in the current position */
  FIO_MAP_VALUE value;
#endif
#if !FIO_MAP_RECALC_HASH
  /** the hash for the current position */
  uint64_t hash;
#endif
  struct {                   /* internal usage, do not access */
    uint32_t index;          /* the index in the internal map */
    uint32_t pos;            /* the position in the ordering scheme */
    uintptr_t map_validator; /* map mutation guard */
  } private_;
} FIO_NAME(FIO_MAP_NAME, iterator_s);

/* *****************************************************************************
Construction / Deconstruction
***************************************************************************** */

/* do we have a constructor? */
#ifndef FIO_REF_CONSTRUCTOR_ONLY

/* Allocates a new object on the heap and initializes it's memory. */
SFUNC FIO_MAP_PTR FIO_NAME(FIO_MAP_NAME, new)(void);

/* Frees any internal data AND the object's container! */
SFUNC void FIO_NAME(FIO_MAP_NAME, free)(FIO_MAP_PTR map);

#endif /* FIO_REF_CONSTRUCTOR_ONLY */

/** Destroys the object, re-initializing its container. */
SFUNC void FIO_NAME(FIO_MAP_NAME, destroy)(FIO_MAP_PTR map);

/* *****************************************************************************
Map State
***************************************************************************** */

/** Theoretical map capacity. */
FIO_IFUNC uint32_t FIO_NAME(FIO_MAP_NAME, capa)(FIO_MAP_PTR map);

/** The number of objects in the map capacity. */
FIO_IFUNC uint32_t FIO_NAME(FIO_MAP_NAME, count)(FIO_MAP_PTR map);

/** Reserves at minimum the capacity requested. */
SFUNC void FIO_NAME(FIO_MAP_NAME, reserve)(FIO_MAP_PTR map, size_t capa);

/** Returns the key value associated with the node's pointer (see set_ptr). */
FIO_IFUNC FIO_MAP_KEY FIO_NAME(FIO_MAP_NAME,
                               node2key)(FIO_NAME(FIO_MAP_NAME, node_s) * node);

/** Returns the hash value associated with the node's pointer (see set_ptr). */
FIO_IFUNC uint64_t FIO_NAME(FIO_MAP_NAME,
                            node2hash)(FIO_NAME(FIO_MAP_NAME, node_s) * node);

#ifdef FIO_MAP_VALUE
/** Returns the value associated with the node's pointer (see set_ptr). */
FIO_IFUNC FIO_MAP_VALUE FIO_NAME(FIO_MAP_NAME,
                                 node2val)(FIO_NAME(FIO_MAP_NAME, node_s) *
                                           node);
#endif

/** Returns the key value associated with the node's pointer (see set_ptr). */
FIO_IFUNC FIO_MAP_KEY_INTERNAL *FIO_NAME(FIO_MAP_NAME, node2key_ptr)(
    FIO_NAME(FIO_MAP_NAME, node_s) * node);

#ifdef FIO_MAP_VALUE
/** Returns the value associated with the node's pointer (see set_ptr). */
FIO_IFUNC FIO_MAP_VALUE_INTERNAL *FIO_NAME(FIO_MAP_NAME, node2val_ptr)(
    FIO_NAME(FIO_MAP_NAME, node_s) * node);
#endif

/* *****************************************************************************
Adding / Removing Elements from the Map
***************************************************************************** */

/** Removes an object in the map, returning a pointer to the map data. */
SFUNC int FIO_NAME(FIO_MAP_NAME, remove)(FIO_MAP_PTR map,
#if !defined(FIO_MAP_HASH_FN)
                                         uint64_t hash,
#endif
                                         FIO_MAP_KEY key,
#if defined(FIO_MAP_VALUE)
                                         FIO_MAP_VALUE_INTERNAL *old
#else
                                         FIO_MAP_KEY_INTERNAL *old
#endif
);

/** Evicts elements in order least recently used (LRU), FIFO or undefined. */
SFUNC void FIO_NAME(FIO_MAP_NAME, evict)(FIO_MAP_PTR map,
                                         size_t number_of_elements);

/** Removes all objects from the map, without releasing the map's resources. */
SFUNC void FIO_NAME(FIO_MAP_NAME, clear)(FIO_MAP_PTR map);

/** Attempts to minimize memory use. */
SFUNC void FIO_NAME(FIO_MAP_NAME, compact)(FIO_MAP_PTR map);

/** Gets a value from the map, if exists. */
FIO_IFUNC FIO_MAP_GET_T FIO_NAME(FIO_MAP_NAME, get)(FIO_MAP_PTR map,
#if !defined(FIO_MAP_HASH_FN)
                                                    uint64_t hash,
#endif
                                                    FIO_MAP_KEY key);

/** Sets a value in the map, hash maps will overwrite existing data if any. */
FIO_IFUNC FIO_MAP_GET_T FIO_NAME(FIO_MAP_NAME, set)(FIO_MAP_PTR map,
#if !defined(FIO_MAP_HASH_FN)
                                                    uint64_t hash,
#endif
#ifdef FIO_MAP_VALUE
                                                    FIO_MAP_KEY key,
                                                    FIO_MAP_VALUE obj,
                                                    FIO_MAP_VALUE_INTERNAL *old
#else
                                                    FIO_MAP_KEY key
#endif
);

/** Sets a value in the map if not set previously. */
FIO_IFUNC FIO_MAP_GET_T FIO_NAME(FIO_MAP_NAME, set_if_missing)(FIO_MAP_PTR map,
#if !defined(FIO_MAP_HASH_FN)
                                                               uint64_t hash,
#endif
                                                               FIO_MAP_KEY key
#ifdef FIO_MAP_VALUE
                                                               ,
                                                               FIO_MAP_VALUE obj
#endif
);

/**
 * The core set function.
 *
 * This function returns `NULL` on error (errors are logged).
 *
 * If the map is a hash map, overwriting the value (while keeping the key) is
 * possible. In this case the `old` pointer is optional, and if set than the old
 * data will be copied to over during an overwrite.
 *
 * NOTE: the function returns a pointer to the map's internal storage.
 */
SFUNC FIO_NAME(FIO_MAP_NAME, node_s) *
    FIO_NAME(FIO_MAP_NAME, set_ptr)(FIO_MAP_PTR map,
#if !defined(FIO_MAP_HASH_FN)
                                    uint64_t hash,
#endif
#ifdef FIO_MAP_VALUE
                                    FIO_MAP_KEY key,
                                    FIO_MAP_VALUE val,
                                    FIO_MAP_VALUE_INTERNAL *old,
                                    int overwrite
#else
                                    FIO_MAP_KEY key
#endif
    );

/**
 * The core get function. This function returns NULL if item is missing.
 *
 * NOTE: the function returns a pointer to the map's internal storage.
 */
SFUNC FIO_NAME(FIO_MAP_NAME, node_s) *
    FIO_NAME(FIO_MAP_NAME, get_ptr)(FIO_MAP_PTR map,
#if !defined(FIO_MAP_HASH_FN)
                                    uint64_t hash,
#endif
                                    FIO_MAP_KEY key);
/* *****************************************************************************
Map Iteration and Traversal
***************************************************************************** */

/** Iteration information structure passed to the callback. */
typedef struct FIO_NAME(FIO_MAP_NAME, each_s) {
  /** The being iterated. Once set, cannot be safely changed. */
  FIO_MAP_PTR const parent;
  /** The current object's index */
  uint64_t index;
  /** The callback / task called for each index, may be updated mid-cycle. */
  int (*task)(struct FIO_NAME(FIO_MAP_NAME, each_s) * info);
  /** Opaque user data. */
  void *udata;
#ifdef FIO_MAP_VALUE
  /** The object's value at the current index. */
  FIO_MAP_VALUE value;
#endif
  /** The object's key the current index. */
  FIO_MAP_KEY key;
} FIO_NAME(FIO_MAP_NAME, each_s);

/**
 * Iteration using a callback for each element in the map.
 *
 * The callback task function must accept an each_s pointer, see above.
 *
 * If the callback returns -1, the loop is broken. Any other value is ignored.
 *
 * Returns the relative "stop" position, i.e., the number of items processed +
 * the starting point.
 */
SFUNC uint32_t FIO_NAME(FIO_MAP_NAME,
                        each)(FIO_MAP_PTR map,
                              int (*task)(FIO_NAME(FIO_MAP_NAME, each_s) *),
                              void *udata,
                              ssize_t start_at);

/**
 * Returns the next iterator object after `current_pos` or the first if `NULL`.
 *
 * Note that adding objects to the map or rehashing between iterations could
 * incur performance penalties when re-setting and re-seeking the previous
 * iterator position.
 *
 * Adding objects to, or rehashing, an unordered maps could invalidate the
 * iterator object completely as the ordering may have changed and so the "next"
 * object might be any object in the map.
 */
SFUNC FIO_NAME(FIO_MAP_NAME, iterator_s)
    FIO_NAME(FIO_MAP_NAME,
             get_next)(FIO_MAP_PTR map,
                       FIO_NAME(FIO_MAP_NAME, iterator_s) * current_pos);

/**
 * Returns the next iterator object after `current_pos` or the last if `NULL`.
 *
 * See notes in `get_next`.
 */
SFUNC FIO_NAME(FIO_MAP_NAME, iterator_s)
    FIO_NAME(FIO_MAP_NAME,
             get_prev)(FIO_MAP_PTR map,
                       FIO_NAME(FIO_MAP_NAME, iterator_s) * current_pos);

/** Returns 1 if the iterator is out of bounds, otherwise returns 0. */
FIO_IFUNC int FIO_NAME(FIO_MAP_NAME,
                       iterator_is_valid)(FIO_NAME(FIO_MAP_NAME, iterator_s) *
                                          iterator);

/** Returns a pointer to the node object in the internal map. */
FIO_IFUNC FIO_NAME(FIO_MAP_NAME, node_s) *
    FIO_NAME(FIO_MAP_NAME,
             iterator2node)(FIO_MAP_PTR map,
                            FIO_NAME(FIO_MAP_NAME, iterator_s) * iterator);

#ifndef FIO_MAP_EACH

/** Iterates through the map using an iterator object. */
#define FIO_MAP_EACH(map_name, map_ptr, i)                                     \
  for (FIO_NAME(map_name, iterator_s)                                          \
           i = FIO_NAME(map_name, get_next)(map_ptr, NULL);                    \
       FIO_NAME(map_name, iterator_is_valid)(&i);                              \
       i = FIO_NAME(map_name, get_next)(map_ptr, &i))

/** Iterates through the map using an iterator object. */
#define FIO_MAP_EACH_REVERSED(map_name, map_ptr, i)                            \
  for (FIO_NAME(map_name, iterator_s)                                          \
           i = FIO_NAME(map_name, get_prev)(map_ptr, NULL);                    \
       FIO_NAME(map_name, iterator_is_valid)(&i);                              \
       i = FIO_NAME(map_name, get_prev)(map_ptr, &i))

#endif /* FIO_MAP_EACH */

/* *****************************************************************************
Optional Sorting Support - TODO? (convert to array, sort, rehash)
***************************************************************************** */

#if defined(FIO_MAP_KEY_IS_GREATER_THAN) && !defined(FIO_SORT_TYPE) &&         \
    FIO_MAP_ORDERED
#undef FIO_SORT_NAME
#endif

/* *****************************************************************************
Map Implementation - inlined static functions
***************************************************************************** */

#ifndef FIO_MAP_CAPA_BITS_LIMIT
/* Note: cannot be more than 31 bits unless some of the code is rewritten. */
#define FIO_MAP_CAPA_BITS_LIMIT 31
#endif

/* Theoretical map capacity. */
FIO_IFUNC uint32_t FIO_NAME(FIO_MAP_NAME, capa)(FIO_MAP_PTR map) {
  FIO_PTR_TAG_VALID_OR_RETURN(map, 0);
  FIO_MAP_T *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map);
  if (o->map)
    return (uint32_t)((size_t)1ULL << o->bits);
  return 0;
}

/* The number of objects in the map capacity. */
FIO_IFUNC uint32_t FIO_NAME(FIO_MAP_NAME, count)(FIO_MAP_PTR map) {
  FIO_PTR_TAG_VALID_OR_RETURN(map, 0);
  return FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map)->count;
}

/** Returns 1 if the iterator points to a valid object, otherwise returns 0. */
FIO_IFUNC int FIO_NAME(FIO_MAP_NAME,
                       iterator_is_valid)(FIO_NAME(FIO_MAP_NAME, iterator_s) *
                                          iterator) {
  return (iterator && iterator->private_.map_validator);
}

/** Returns the key value associated with the node's pointer. */
FIO_IFUNC FIO_MAP_KEY FIO_NAME(FIO_MAP_NAME,
                               node2key)(FIO_NAME(FIO_MAP_NAME, node_s) *
                                         node) {
  FIO_MAP_KEY r = (FIO_MAP_KEY){0};
  if (!node)
    return r;
  return FIO_MAP_KEY_FROM_INTERNAL(node->key);
}

/** Returns the hash value associated with the node's pointer. */
FIO_IFUNC uint64_t FIO_NAME(FIO_MAP_NAME,
                            node2hash)(FIO_NAME(FIO_MAP_NAME, node_s) * node) {
  uint32_t r = (uint32_t){0};
  if (!node)
    return r;
#if FIO_MAP_RECALC_HASH
  FIO_MAP_KEY k = FIO_MAP_KEY_FROM_INTERNAL(node->key);
  uint64_t hash = FIO_MAP_HASH_FN(k);
  hash += !hash;
  return hash;
#else
  return node->hash;
#endif
}

#ifdef FIO_MAP_VALUE
/** Returns the value associated with the node's pointer. */
FIO_IFUNC FIO_MAP_VALUE FIO_NAME(FIO_MAP_NAME,
                                 node2val)(FIO_NAME(FIO_MAP_NAME, node_s) *
                                           node) {
  FIO_MAP_VALUE r = (FIO_MAP_VALUE){0};
  if (!node)
    return r;
  return FIO_MAP_VALUE_FROM_INTERNAL(node->value);
}
#else
/* If called for a node without a
 * value, returns the key (simplifies
 * stuff). */
FIO_IFUNC FIO_MAP_KEY FIO_NAME(FIO_MAP_NAME,
                               node2val)(FIO_NAME(FIO_MAP_NAME, node_s) *
                                         node) {
  return FIO_NAME(FIO_MAP_NAME, node2key)(node);
}
#endif

/** Returns the key value associated with the node's pointer. */
FIO_IFUNC FIO_MAP_KEY_INTERNAL *FIO_NAME(FIO_MAP_NAME, node2key_ptr)(
    FIO_NAME(FIO_MAP_NAME, node_s) * node) {
  if (!node)
    return NULL;
  return &(node->key);
}

#ifdef FIO_MAP_VALUE
/** Returns the value associated with the node's pointer. */
FIO_IFUNC FIO_MAP_VALUE_INTERNAL *FIO_NAME(FIO_MAP_NAME, node2val_ptr)(
    FIO_NAME(FIO_MAP_NAME, node_s) * node) {
  if (!node)
    return NULL;
  return &(node->value);
}
#else
/* If called for a node without a
 * value, returns the key (simplifies
 * stuff). */
FIO_IFUNC FIO_MAP_KEY_INTERNAL *FIO_NAME(FIO_MAP_NAME, node2val_ptr)(
    FIO_NAME(FIO_MAP_NAME, node_s) * node) {
  return FIO_NAME(FIO_MAP_NAME, node2key_ptr)(node);
}
#endif

/** Gets a value from the map, if exists. */
FIO_IFUNC FIO_MAP_GET_T FIO_NAME(FIO_MAP_NAME, get)(FIO_MAP_PTR map,
#if !defined(FIO_MAP_HASH_FN)
                                                    uint64_t hash,
#endif
                                                    FIO_MAP_KEY key) {
  return FIO_NAME(FIO_MAP_NAME, node2val)(FIO_NAME(FIO_MAP_NAME, get_ptr)(map,
#if !defined(FIO_MAP_HASH_FN)
                                                                          hash,
#endif
                                                                          key));
}

/** Sets a value in the map, hash maps will overwrite existing data if any. */
FIO_IFUNC FIO_MAP_GET_T FIO_NAME(FIO_MAP_NAME, set)(FIO_MAP_PTR map,
#if !defined(FIO_MAP_HASH_FN)
                                                    uint64_t hash,
#endif
#ifdef FIO_MAP_VALUE
                                                    FIO_MAP_KEY key,
                                                    FIO_MAP_VALUE obj,
                                                    FIO_MAP_VALUE_INTERNAL *old
#else
                                                    FIO_MAP_KEY key
#endif
) {
  return FIO_NAME(FIO_MAP_NAME, node2val)(FIO_NAME(FIO_MAP_NAME, set_ptr)(map,
#if !defined(FIO_MAP_HASH_FN)
                                                                          hash,
#endif
                                                                          key
#ifdef FIO_MAP_VALUE
                                                                          ,
                                                                          obj,
                                                                          old,
                                                                          1
#endif
                                                                          ));
}

/** Sets a value in the map if not set previously. */
FIO_IFUNC FIO_MAP_GET_T FIO_NAME(FIO_MAP_NAME, set_if_missing)(FIO_MAP_PTR map,
#if !defined(FIO_MAP_HASH_FN)
                                                               uint64_t hash,
#endif
                                                               FIO_MAP_KEY key
#ifdef FIO_MAP_VALUE
                                                               ,
                                                               FIO_MAP_VALUE obj
#endif
) {
  return FIO_NAME(FIO_MAP_NAME, node2val)(FIO_NAME(FIO_MAP_NAME, set_ptr)(map,
#if !defined(FIO_MAP_HASH_FN)
                                                                          hash,
#endif
                                                                          key
#ifdef FIO_MAP_VALUE
                                                                          ,
                                                                          obj,
                                                                          NULL,
                                                                          0
#endif
                                                                          ));
}

/** Returns a pointer to the node object in the internal map. */
FIO_IFUNC FIO_NAME(FIO_MAP_NAME, node_s) *
    FIO_NAME(FIO_MAP_NAME,
             iterator2node)(FIO_MAP_PTR map,
                            FIO_NAME(FIO_MAP_NAME, iterator_s) * iterator) {
  FIO_NAME(FIO_MAP_NAME, node_s) *node = NULL;
  if (!iterator || !iterator->private_.map_validator)
    return node;
  FIO_PTR_TAG_VALID_OR_RETURN(map, node);
  FIO_NAME(FIO_MAP_NAME, s) *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map);
  node = o->map + iterator->private_.index;
  return node;
}

/* *****************************************************************************
Map Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

FIO_LEAK_COUNTER_DEF(FIO_NAME(FIO_MAP_NAME, destroy))
/* *****************************************************************************
Constructors
***************************************************************************** */

/* do we have a constructor? */
#ifndef FIO_REF_CONSTRUCTOR_ONLY
FIO_LEAK_COUNTER_DEF(FIO_NAME(FIO_MAP_NAME, s))
/* Allocates a new object on the heap and initializes it's memory. */
FIO_IFUNC FIO_MAP_PTR FIO_NAME(FIO_MAP_NAME, new)(void) {
  FIO_NAME(FIO_MAP_NAME, s) *o =
      (FIO_NAME(FIO_MAP_NAME, s) *)FIO_MEM_REALLOC_(NULL, 0, sizeof(*o), 0);
  if (!o)
    return (FIO_MAP_PTR)NULL;
  FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(FIO_MAP_NAME, s));
  *o = (FIO_NAME(FIO_MAP_NAME, s))FIO_MAP_INIT;
  return (FIO_MAP_PTR)FIO_PTR_TAG(o);
}
/* Frees any internal data AND the object's container! */
FIO_IFUNC void FIO_NAME(FIO_MAP_NAME, free)(FIO_MAP_PTR map) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(map);
  FIO_NAME(FIO_MAP_NAME, destroy)(map);
  FIO_NAME(FIO_MAP_NAME, s) *o =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_MAP_NAME, s), map);
  FIO_LEAK_COUNTER_ON_FREE(FIO_NAME(FIO_MAP_NAME, s));
  FIO_MEM_FREE_(o, sizeof(*o));
}
#endif /* FIO_REF_CONSTRUCTOR_ONLY */

/* *****************************************************************************




Internal Helpers (Core)




***************************************************************************** */

/** internal object data representation */
struct FIO_NAME(FIO_MAP_NAME, __imap_s) {
  uint8_t h[64];
};

#ifndef FIO_MAP_ATTACK_LIMIT
#define FIO_MAP_ATTACK_LIMIT 16
#endif
#ifndef FIO_MAP_MINIMAL_BITS
#define FIO_MAP_MINIMAL_BITS 1
#endif
#ifndef FIO_MAP_CUCKOO_STEPS
/* Prime numbers are better */
#define FIO_MAP_CUCKOO_STEPS (0x43F82D0BUL) /* a big high prime */
#endif
#ifndef FIO_MAP_SEEK_LIMIT
#define FIO_MAP_SEEK_LIMIT 13U
#endif
#ifndef FIO_MAP_ARRAY_LOG_LIMIT
#define FIO_MAP_ARRAY_LOG_LIMIT 3
#endif
#ifndef FIO_MAP_CAPA
#define FIO_MAP_CAPA(bits) ((size_t)1ULL << (bits))
#endif

#ifndef FIO_MAP_IS_SPARSE
#define FIO_MAP_IS_SPARSE(map)                                                 \
  (o->bits > FIO_MAP_ARRAY_LOG_LIMIT && ((capa >> 2) > o->count))
#endif

/* Allocates resources for a new (clean) map. */
FIO_IFUNC int FIO_NAME(FIO_MAP_NAME,
                       __allocate_map)(FIO_NAME(FIO_MAP_NAME, s) * o,
                                       uint32_t bits) {
  if (bits < FIO_MAP_MINIMAL_BITS)
    bits = FIO_MAP_MINIMAL_BITS;
  if (bits > FIO_MAP_CAPA_BITS_LIMIT)
    return -1;
  size_t s = (sizeof(o->map[0]) + 1) << bits;
  FIO_NAME(FIO_MAP_NAME, node_s) *n =
      (FIO_NAME(FIO_MAP_NAME, node_s) *)FIO_MEM_REALLOC_(NULL, 0, s, 0);
  if (!n)
    return -1;
  if (!FIO_MEM_REALLOC_IS_SAFE_) /* set only imap to zero */
    FIO_MEMSET((n + (1ULL << bits)), 0, (1ULL << bits));
  *o = (FIO_NAME(FIO_MAP_NAME, s)){.map = n, .bits = bits};
  FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(FIO_MAP_NAME, destroy));
  return 0;
}

/* The number of objects in the map capacity. */
FIO_IFUNC uint8_t *FIO_NAME(FIO_MAP_NAME,
                            __imap)(FIO_NAME(FIO_MAP_NAME, s) const *o) {
  return (uint8_t *)(o->map + FIO_MAP_CAPA(o->bits));
}

FIO_IFUNC uint64_t FIO_NAME(FIO_MAP_NAME, __byte_hash)(uint64_t hash) {
  hash = (hash >> 48) ^ (hash >> 56);
  hash &= 0xFF;
  hash += !(hash);
  hash -= (hash == 255);
  return hash;
}

FIO_IFUNC uint64_t FIO_NAME(FIO_MAP_NAME,
                            __is_eq_hash)(FIO_NAME(FIO_MAP_NAME, node_s) * o,
                                          uint64_t hash) {
#if FIO_MAP_RECALC_HASH && defined(FIO_MAP_HASH_FN)
  uint64_t khash = FIO_MAP_HASH_FN(FIO_MAP_KEY_FROM_INTERNAL(o->key));
  khash += !khash;
#else
  const uint64_t khash = o->hash;
#endif
  return (khash == hash);
}

typedef struct FIO_NAME(FIO_MAP_NAME, __each_node_s) {
  FIO_NAME(FIO_MAP_NAME, s) * map;
  FIO_NAME(FIO_MAP_NAME, node_s) * node;
  int (*fn)(struct FIO_NAME(FIO_MAP_NAME, __each_node_s) *);
  void *udata;
} FIO_NAME(FIO_MAP_NAME, __each_node_s);

/* perform task for each node. */
FIO_IFUNC int FIO_NAME(FIO_MAP_NAME,
                       __each_node)(FIO_NAME(FIO_MAP_NAME, s) * o,
                                    int (*fn)(FIO_NAME(FIO_MAP_NAME,
                                                       __each_node_s) *),
                                    void *udata) {
  FIO_NAME(FIO_MAP_NAME, __each_node_s)
  each = {.map = o, .fn = fn, .udata = udata};
  uint8_t *imap = FIO_NAME(FIO_MAP_NAME, __imap)(o);
  size_t counter = o->count;
  if (!counter)
    return 0;
#if FIO_MAP_ORDERED
  FIO_INDEXED_LIST_EACH(o->map, node, o->head, pos) {
    each.node = o->map + pos;
    if (each.fn(&each))
      return -1;
    --counter;
    if (FIO_UNLIKELY(imap != FIO_NAME(FIO_MAP_NAME, __imap)(o)))
      return -1;
  }
#else
  const size_t len = FIO_MAP_CAPA(o->bits);
  if (FIO_UNLIKELY(o->bits > 5 && (FIO_MAP_CAPA(o->bits) >> 2) > o->count))
    goto sparse_map;
  for (size_t i = 0; counter; ++i) {
    if (!imap[i] || imap[i] == 255)
      continue;
    each.node = o->map + i;
    if (FIO_UNLIKELY(each.fn(&each)))
      return -1;
    --counter;
    if (FIO_UNLIKELY(imap != FIO_NAME(FIO_MAP_NAME, __imap)(o)))
      return -1;
  }
  FIO_ASSERT_DEBUG(
      !counter,
      "detected error while looping over all elements in map (%zu/%zu)",
      counter,
      (size_t)FIO_MAP_CAPA(o->bits));
  return 0;

sparse_map:
  for (size_t i = 0; counter && i < len; i += 64) {
    uint64_t bitmap = 0;
    for (size_t j = 0; j < 64; j += 8) {
      uint64_t tmp = *((uint64_t *)(imap + i + j));
      uint64_t inv = ~tmp;
      tmp = FIO_HAS_FULL_BYTE64(tmp);
      inv = FIO_HAS_FULL_BYTE64(inv);
      tmp |= inv;
      FIO_HAS_BYTE2BITMAP(tmp, 7);
      bitmap |= (tmp << j);
    }
    bitmap = ~bitmap; /* where 1 was a free slot, now it's an occupied one */
    for (size_t j = 0; bitmap; ++j) {
      if ((bitmap & 1)) {
        each.node = o->map + i + j;
        if (each.fn(&each))
          return -1;
        --counter;
        if (imap != FIO_NAME(FIO_MAP_NAME, __imap)(o))
          return -1;
      }
      bitmap >>= 1;
    }
  }
#endif
  FIO_ASSERT_DEBUG(
      !counter,
      "detected error while looping over all elements in map (%zu/%zu)",
      counter,
      (size_t)FIO_MAP_CAPA(o->bits));
  return 0;
}

#if !FIO_MAP_KEY_DESTROY_SIMPLE || !FIO_MAP_VALUE_DESTROY_SIMPLE
static int FIO_NAME(FIO_MAP_NAME,
                    __destroy_map_task)(FIO_NAME(FIO_MAP_NAME, __each_node_s) *
                                        e) {
  FIO_MAP_KEY_DESTROY(e->node->key);
  FIO_MAP_VALUE_DESTROY(e->node->value);
  return 0;
}
#endif

/* Destroys and exsiting map. */
FIO_IFUNC void FIO_NAME(FIO_MAP_NAME,
                        __destroy_map)(FIO_NAME(FIO_MAP_NAME, s) * o,
                                       _Bool should_zero) {
#if !FIO_MAP_KEY_DESTROY_SIMPLE || !FIO_MAP_VALUE_DESTROY_SIMPLE
  FIO_NAME(FIO_MAP_NAME, __each_node)
  (o, FIO_NAME(FIO_MAP_NAME, __destroy_map_task), NULL);
#endif
  if (should_zero) /* set only imap to zero */
    FIO_MEMSET((o->map + (1ULL << o->bits)), 0, (1ULL << o->bits));
  o->count = 0;
}

/* Destroys and exsiting map. */
FIO_IFUNC void FIO_NAME(FIO_MAP_NAME, __free_map)(FIO_NAME(FIO_MAP_NAME, s) * o,
                                                  _Bool should_destroy) {
  if (!o->map)
    return;
  if (should_destroy)
    FIO_NAME(FIO_MAP_NAME, __destroy_map)(o, 0);
  FIO_MEM_FREE_(o->map, ((sizeof(o->map[0]) + 1) << o->bits));
  FIO_LEAK_COUNTER_ON_FREE(FIO_NAME(FIO_MAP_NAME, destroy));
  *o = (FIO_NAME(FIO_MAP_NAME, s)){0};
}

#ifndef H___FIO_MAP_INDEX_TYPE___H
#define H___FIO_MAP_INDEX_TYPE___H
typedef struct {
  uint32_t home;
  uint32_t act;
  uint32_t alt;
  uint32_t bhash;
} fio___map_node_info_s;
#endif

/** internal object data representation */
typedef struct FIO_NAME(FIO_MAP_NAME, __o_node_s) {
  uint64_t hash;
  FIO_MAP_KEY key;
#ifdef FIO_MAP_VALUE
  FIO_MAP_VALUE value;
#endif
} FIO_NAME(FIO_MAP_NAME, __o_node_s);

/* seek a node for very small collections 8 item capacity at most */
FIO_SFUNC fio___map_node_info_s FIO_NAME(FIO_MAP_NAME, __node_info_mini)(
    FIO_NAME(FIO_MAP_NAME, s) * o,
    FIO_NAME(FIO_MAP_NAME, __o_node_s) * node) {
  // FIO_LOG_INFO("seek as linear array for h %llu", node->hash);
  fio___map_node_info_s r = {
      (uint32_t)-1,
      (uint32_t)-1,
      (uint32_t)-1,
      (uint32_t)FIO_NAME(FIO_MAP_NAME, __byte_hash)(node->hash)};
  if (!o->bits)
    return r;
  const uint8_t *imap = FIO_NAME(FIO_MAP_NAME, __imap)(o);
  const uint32_t capa = (uint32_t)FIO_MAP_CAPA(o->bits);
  const uint32_t mask = capa - 1;
  size_t pos = node->hash & 0xFF;
  for (uint32_t i = 0; i < capa; ++i) {
    pos = (pos + i) & mask;
    if (imap[pos] == r.bhash &&
        FIO_NAME(FIO_MAP_NAME, __is_eq_hash)(o->map + pos, node->hash) &&
        FIO_MAP_KEY_CMP(o->map[pos].key, node->key)) {
      r.act = (uint32_t)pos;
      return r;
    } else if (!imap[pos]) {
      r.alt = r.home = (uint32_t)pos;
      return r;
    } else if (imap[pos] == 255U) { /* "home" has been occupied before */
      r.alt = r.home = (uint32_t)pos;
    }
  }
  return r;
}

/* seek a node for medium sized collections, 16-512 item capacity. */
FIO_SFUNC fio___map_node_info_s FIO_NAME(FIO_MAP_NAME, __node_info_med)(
    FIO_NAME(FIO_MAP_NAME, s) * o,
    FIO_NAME(FIO_MAP_NAME, __o_node_s) * node) {
  // FIO_LOG_INFO("seek as linear array for h %llu", node->hash);
  static int guard_print = 0;
  fio___map_node_info_s r = {
      (uint32_t)-1,
      (uint32_t)-1,
      (uint32_t)-1,
      (uint32_t)FIO_NAME(FIO_MAP_NAME, __byte_hash)(node->hash)};
  const uint8_t *imap = FIO_NAME(FIO_MAP_NAME, __imap)(o);
  const uint32_t mask = (uint32_t)(FIO_MAP_CAPA(o->bits) - 1);
  uint32_t guard = FIO_MAP_ATTACK_LIMIT + 1;
  uint32_t pos = r.home = (node->hash & mask);
  uint32_t step = 2;
  uint32_t attempts = (mask < 511) ? ((mask >> 2) | 8) : 127;
  for (; r.alt == (uint32_t)-1 && attempts; --attempts) {
    if (!imap[pos]) {
      r.alt = pos;
      return r;
    } else if (imap[pos] == 255U) { /* "home" has been occupied before */
      r.alt = pos;
    } else if (imap[pos] == r.bhash &&
               FIO_NAME(FIO_MAP_NAME, __is_eq_hash)(o->map + pos, node->hash)) {
      if (FIO_MAP_KEY_CMP(o->map[pos].key, node->key)) {
        r.act = pos;
        return r;
      }
      if (!--guard) {
        r.act = pos;
        goto possible_attack;
      }
    }
    pos = ((pos + (step++)) & mask);
  }
  for (; attempts; --attempts) {
    if (imap[pos] == r.bhash &&
        FIO_NAME(FIO_MAP_NAME, __is_eq_hash)(o->map + pos, node->hash)) {
      if (FIO_MAP_KEY_CMP(o->map[pos].key, node->key)) {
        r.act = pos;
        return r;
      }
      if (!--guard) {
        r.act = pos;
        goto possible_attack;
      }
    }
    if (!imap[pos])
      return r;
    pos = ((pos + (step++)) & mask);
  }
  if (r.alt == (uint32_t)-1)
    r.home = r.alt;
  return r;

possible_attack:
  if (!guard_print) {
    guard_print = 1;
    FIO_LOG_SECURITY("hash map " FIO_MACRO2STR(
        FIO_NAME(FIO_MAP_NAME, s)) " under attack? (full collision guard)");
  }
  return r;
}

/* seek a node for larger collections, where 8 byte grouping is meaningless */
FIO_SFUNC fio___map_node_info_s FIO_NAME(FIO_MAP_NAME, __node_info_full)(
    FIO_NAME(FIO_MAP_NAME, s) * o,
    FIO_NAME(FIO_MAP_NAME, __o_node_s) * node) {
  // FIO_LOG_INFO("seek as linear array for h %llu", node->hash);
  static int guard_print = 0;
  fio___map_node_info_s r = {
      (uint32_t)-1,
      (uint32_t)-1,
      (uint32_t)-1,
      (uint32_t)FIO_NAME(FIO_MAP_NAME, __byte_hash)(node->hash)};
  const uint32_t mask = (FIO_MAP_CAPA(o->bits) - 1) & (~(uint32_t)7ULL);
  const uint8_t *imap = FIO_NAME(FIO_MAP_NAME, __imap)(o);
  const size_t attempt_limit = o->bits + 7;
  const uint64_t mbyte64 = ~(UINT64_C(0x0101010101010101) * (uint64_t)r.bhash);
  uint32_t guard = FIO_MAP_ATTACK_LIMIT + 1;
  uint32_t pos = r.home = (node->hash & mask);
  size_t attempt = 0;
  for (; r.alt == (uint32_t)-1 && attempt < attempt_limit; ++attempt) {
    uint64_t group = fio_buf2u64_le(imap + pos);
    group ^= mbyte64;
    group &= UINT64_C(0x7F7F7F7F7F7F7F7F);
    group += UINT64_C(0x0101010101010101);
    group &= UINT64_C(0x8080808080808080);
    while (group) {
      uint32_t offset = (uint32_t)fio_lsb_index_unsafe(group);
      group ^= (uint64_t)1ULL << offset;
      offset >>= 3;
      offset += pos;
      if (imap[offset] == r.bhash &&
          FIO_NAME(FIO_MAP_NAME, __is_eq_hash)(o->map + offset, node->hash)) {
        if (FIO_MAP_KEY_CMP(o->map[offset].key, node->key)) {
          r.act = offset;
          return r;
        }
        if (!--guard) {
          r.act = offset;
          goto possible_attack;
        }
      }
    }
    group = fio_buf2u64_le(imap + pos);
    group &= UINT64_C(0x7F7F7F7F7F7F7F7F);
    group += UINT64_C(0x0101010101010101);
    group &= UINT64_C(0x8080808080808080);
    while (group) {
      uint32_t offset = (uint32_t)fio_lsb_index_unsafe(group);
      group ^= (uint64_t)1ULL << offset;
      offset >>= 3;
      offset += pos;
      if (imap[offset] == 255U) {
        r.alt = offset;
        break;
      }
    }
    group = ~fio_buf2u64_le(imap + pos);
    group &= UINT64_C(0x7F7F7F7F7F7F7F7F);
    group += UINT64_C(0x0101010101010101);
    group &= UINT64_C(0x8080808080808080);
    while (group) {
      uint32_t offset = (uint32_t)fio_lsb_index_unsafe(group);
      group ^= (uint64_t)1ULL << offset;
      offset >>= 3;
      offset += pos;
      if (!imap[offset]) {
        r.alt = offset;
        return r;
      }
    }
    pos += (attempt + 2) << 3;
    pos &= mask;
  }
  for (; attempt < attempt_limit; ++attempt) {
    uint64_t group = fio_buf2u64_le(imap + pos);
    group ^= mbyte64;
    group &= UINT64_C(0x7F7F7F7F7F7F7F7F);
    group += UINT64_C(0x0101010101010101);
    group &= UINT64_C(0x8080808080808080);
    while (group) {
      uint32_t offset = (uint32_t)fio_lsb_index_unsafe(group);
      group ^= (uint64_t)1ULL << offset;
      offset >>= 3;
      offset += pos;
      if (imap[offset] == r.bhash &&
          FIO_NAME(FIO_MAP_NAME, __is_eq_hash)(o->map + offset, node->hash)) {
        if (FIO_MAP_KEY_CMP(o->map[offset].key, node->key)) {
          r.act = offset;
          return r;
        }
        if (!--guard) {
          r.act = offset;
          goto possible_attack;
        }
      }
    }
    group = ~fio_buf2u64_le(imap + pos);
    group &= UINT64_C(0x7F7F7F7F7F7F7F7F);
    group += UINT64_C(0x0101010101010101);
    group &= UINT64_C(0x8080808080808080);
    while (group) {
      uint32_t offset = (uint32_t)fio_lsb_index_unsafe(group);
      group ^= (uint64_t)1ULL << offset;
      offset >>= 3;
      offset += pos;
      if (!imap[offset]) {
        return r;
      }
    }
    pos += (attempt + 2) << 3;
    pos &= mask;
  }
  if (r.alt == (uint32_t)-1)
    r.home = r.alt;
  return r;
possible_attack:
  if (!guard_print) {
    guard_print = 1;
    FIO_LOG_SECURITY("hash map " FIO_MACRO2STR(
        FIO_NAME(FIO_MAP_NAME, s)) " under attack? (full collision guard)");
  }
  return r;
}

FIO_IFUNC fio___map_node_info_s
FIO_NAME(FIO_MAP_NAME, __node_info)(FIO_NAME(FIO_MAP_NAME, s) * o,
                                    FIO_NAME(FIO_MAP_NAME, __o_node_s) * node) {
#if defined(FIO_MAP_HASH_FN)
  if (!node->hash)
    node->hash = FIO_MAP_HASH_FN(node->key);
#endif
  node->hash += !node->hash;
  if (o->bits < 4)
    return FIO_NAME(FIO_MAP_NAME, __node_info_mini)(o, node);
  else if (o->bits < 9)
    return FIO_NAME(FIO_MAP_NAME, __node_info_med)(o, node);
  else
    return FIO_NAME(FIO_MAP_NAME, __node_info_full)(o, node);
}

#if FIO_MAP_ORDERED
FIO_IFUNC void FIO_NAME(FIO_MAP_NAME,
                        __update_order)(FIO_NAME(FIO_MAP_NAME, s) * o,
                                        uint32_t i) {
  if (o->count == 1) {
    o->head = i;
    o->map[i].node.next = o->map[i].node.prev = i;
  } else {
    FIO_INDEXED_LIST_PUSH(o->map, node, o->head, i);
  }
}
#define FIO___MAP_UPDATE_ORDER(map, at)                                        \
  FIO_NAME(FIO_MAP_NAME, __update_order)(map, at)
#else
#define FIO___MAP_UPDATE_ORDER(map, at)
#endif

static int FIO_NAME(FIO_MAP_NAME,
                    __move2map_task)(FIO_NAME(FIO_MAP_NAME, __each_node_s) *
                                     e) {
  FIO_NAME(FIO_MAP_NAME, s) *dest = (FIO_NAME(FIO_MAP_NAME, s) *)e->udata;
  FIO_NAME(FIO_MAP_NAME, __o_node_s)
  n = {
    .key = FIO_MAP_KEY_FROM_INTERNAL(e->node->key),
#if !FIO_MAP_RECALC_HASH
    .hash = e->node->hash,
#endif
  };
  fio___map_node_info_s i = FIO_NAME(FIO_MAP_NAME, __node_info)(dest, &n);
  if (i.home == (uint32_t)-1) {
    FIO_LOG_ERROR("move2map FAILED (%zu/%zu)!",
                  e->node - e->map->map,
                  FIO_MAP_CAPA(dest->bits));
    return -1;
  }
  uint8_t *imap = FIO_NAME(FIO_MAP_NAME, __imap)(dest);
  ++dest->count;
  /* insert at best position */
  imap[i.alt] = i.bhash;
  dest->map[i.alt] = e->node[0];
  FIO___MAP_UPDATE_ORDER(dest, i.alt);
  return 0;
}

FIO_IFUNC int FIO_NAME(FIO_MAP_NAME,
                       __move2map)(FIO_NAME(FIO_MAP_NAME, s) * dest,
                                   FIO_NAME(FIO_MAP_NAME, s) * src) {
  return FIO_NAME(
      FIO_MAP_NAME,
      __each_node)(src, FIO_NAME(FIO_MAP_NAME, __move2map_task), dest);
}

/* Inserts a node to the map. */
FIO_IFUNC uint32_t FIO_NAME(FIO_MAP_NAME,
                            __node_insert)(FIO_NAME(FIO_MAP_NAME, s) * o,
#ifndef FIO_MAP_HASH_FN
                                           uint64_t hash,
#endif
                                           FIO_MAP_KEY key,
#ifdef FIO_MAP_VALUE
                                           FIO_MAP_VALUE value,
#endif
#ifdef FIO_MAP_VALUE
                                           FIO_MAP_VALUE_INTERNAL *old,
#else
                                           FIO_MAP_KEY_INTERNAL *old,
#endif
                                           _Bool overwrite) {
  static FIO_NAME(FIO_MAP_NAME, s) *last_collision = NULL;
  uint32_t r = -1;
  FIO_NAME(FIO_MAP_NAME, s) tmp;
  FIO_NAME(FIO_MAP_NAME, __o_node_s)
  node = {
      .key = key,
#ifdef FIO_MAP_VALUE
      .value = value,
#endif
#ifndef FIO_MAP_HASH_FN
      .hash = hash,
#endif
  };
  fio___map_node_info_s info;
  info = FIO_NAME(FIO_MAP_NAME, __node_info)(o, &node);
  if (info.act != r)
    goto perform_overwrite;
  if (info.home == r)
    goto reallocate_map;

insert:
  ++o->count;
  r = info.alt;
  FIO_NAME(FIO_MAP_NAME, __imap)(o)[r] = info.bhash;
#if !FIO_MAP_RECALC_HASH
  o->map[r].hash = node.hash,
#endif
  FIO_MAP_KEY_COPY(o->map[r].key, node.key);
  FIO_MAP_VALUE_COPY(o->map[r].value, node.value);
  FIO___MAP_UPDATE_ORDER(o, r);
  return r;

perform_overwrite:
  r = info.act;
  FIO_MAP_KEY_DISCARD(node.key);
  if (!overwrite) {
    FIO_MAP_VALUE_DISCARD(value);
    return r;
  }
#ifdef FIO_MAP_VALUE
  if (old)
    *old = o->map[r].value;
  else {
    FIO_MAP_VALUE_DESTROY(o->map[r].value);
  }
  FIO_MAP_VALUE_COPY(o->map[r].value, node.value);
#else
  (void)old;
#endif
#if FIO_MAP_ORDERED
  if (o->head == r)
    o->head = o->map[o->head].node.prev;
  FIO_INDEXED_LIST_REMOVE(o->map, node, r);
  FIO___MAP_UPDATE_ORDER(o, r);
#endif
  return r;

reallocate_map:
  /* reallocate map */
  if (FIO_NAME(FIO_MAP_NAME, __allocate_map)(&tmp, o->bits + 1))
    goto no_memory;
  if (FIO_NAME(FIO_MAP_NAME, __move2map)(&tmp, o)) {
    FIO_NAME(FIO_MAP_NAME, __free_map)(&tmp, 0);
    goto security_partial;
  }
  info = FIO_NAME(FIO_MAP_NAME, __node_info)(&tmp, &node);
  if (info.home != r) {
    FIO_NAME(FIO_MAP_NAME, __free_map)(o, 0);
    *o = tmp;
    goto insert;
  }
  FIO_NAME(FIO_MAP_NAME, __free_map)(&tmp, 0);
  goto security_partial;

no_memory:
  FIO_MAP_KEY_DISCARD(key);
  FIO_MAP_VALUE_DISCARD(value);
  FIO_LOG_ERROR(
      "unknown error occurred trying to add an entry to the map (capa: %zu)",
      (size_t)FIO_MAP_CAPA(o->bits));
  FIO_ASSERT_DEBUG(0, "these errors shouldn't happen - no memory?");
  return r;

security_partial:
  if (last_collision != o) {
    FIO_LOG_SECURITY(
        "hash map " FIO_MACRO2STR(FIO_NAME(
            FIO_MAP_NAME,
            s)) " under attack? (partial/full collision guard) - capa: %zu.",
        (size_t)FIO_MAP_CAPA(o->bits));
    last_collision = o;
  }
  return r;
}

/* Inserts a node to the map. */
FIO_IFUNC uint32_t FIO_NAME(FIO_MAP_NAME,
                            __node_find)(FIO_NAME(FIO_MAP_NAME, s) * o,
#ifndef FIO_MAP_HASH_FN
                                         uint64_t hash,
#endif
                                         FIO_MAP_KEY key) {
  uint32_t r = -1;
  fio___map_node_info_s info;
  FIO_NAME(FIO_MAP_NAME, __o_node_s)
  node = {
      .key = key,
#ifndef FIO_MAP_HASH_FN
      .hash = hash,
#endif
  };
  if (!o->map)
    return r;
  info = FIO_NAME(FIO_MAP_NAME, __node_info)(o, &node);
  return (r = info.act);
}

/* Deletes a known node from the map. */
FIO_IFUNC void FIO_NAME(FIO_MAP_NAME,
                        __node_delete_at)(FIO_NAME(FIO_MAP_NAME, s) * o,
                                          uint32_t at,
#ifdef FIO_MAP_VALUE
                                          FIO_MAP_VALUE_INTERNAL *old
#else
                                          FIO_MAP_KEY_INTERNAL *old
#endif
) {
  --o->count;
  uint8_t *imap = FIO_NAME(FIO_MAP_NAME, __imap)(o);
  imap[at] = 255U; /* mark as deleted */
  if (old) {
#ifdef FIO_MAP_VALUE
    FIO_MAP_KEY_DESTROY(o->map[at].key);
    *old = o->map[at].value;
#else
    *old = o->map[at].key;
#endif
  } else {
    FIO_MAP_KEY_DESTROY(o->map[at].key);
    FIO_MAP_VALUE_DESTROY(o->map[at].value);
  }

#if FIO_MAP_ORDERED
  if (o->head == at) {
    o->head = (o->count ? o->map[o->head].node.next : 0);
  }
  FIO_INDEXED_LIST_REMOVE(o->map, node, at);
#endif
}

/* Deletes a node from the map. */
FIO_IFUNC uint32_t FIO_NAME(FIO_MAP_NAME,
                            __node_delete)(FIO_NAME(FIO_MAP_NAME, s) * o,
                                           FIO_MAP_KEY key,
#ifndef FIO_MAP_HASH_FN
                                           uint64_t hash,
#endif
#ifdef FIO_MAP_VALUE
                                           FIO_MAP_VALUE_INTERNAL *old
#else
                                           FIO_MAP_KEY_INTERNAL *old
#endif
) {
  uint32_t r = (uint32_t)-1;
  if (!o->map)
    return r;
  fio___map_node_info_s info;
  FIO_NAME(FIO_MAP_NAME, __o_node_s)
  node = {
      .key = key,
#ifndef FIO_MAP_HASH_FN
      .hash = hash,
#endif
  };
  info = FIO_NAME(FIO_MAP_NAME, __node_info)(o, &node);
  if (info.act == r)
    return r;
  r = 0;
  FIO_NAME(FIO_MAP_NAME, __node_delete_at)(o, info.act, old);
  return r;
}

/* *****************************************************************************






Map API






***************************************************************************** */

/** Destroys the object, re-initializing its container. */
SFUNC void FIO_NAME(FIO_MAP_NAME, destroy)(FIO_MAP_PTR map) {
  // FIO_PTR_TAG_VALID_OR_RETURN(map, 0);
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(map);
  FIO_NAME(FIO_MAP_NAME, s) *m = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map);
  FIO_NAME(FIO_MAP_NAME, __free_map)(m, 1);
  *m = (FIO_NAME(FIO_MAP_NAME, s)){0};
}

/** Reserves at minimum the capacity requested. */
SFUNC void FIO_NAME(FIO_MAP_NAME, reserve)(FIO_MAP_PTR map, size_t capa) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(map);
  FIO_NAME(FIO_MAP_NAME, s) *m = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map);
  if (capa <= FIO_MAP_CAPA(m->bits))
    return;
  uint32_t bits = m->bits;
  for (; capa > FIO_MAP_CAPA(bits); ++bits)
    ;
  FIO_NAME(FIO_MAP_NAME, s) tmp;
  if (FIO_NAME(FIO_MAP_NAME, __allocate_map)(&tmp, bits))
    goto no_memory;
  if (m->count && FIO_NAME(FIO_MAP_NAME, __move2map)(&tmp, m)) {
    FIO_NAME(FIO_MAP_NAME, __free_map)(&tmp, 0);
    goto no_memory;
  }
  FIO_NAME(FIO_MAP_NAME, __free_map)(m, 0);
  *m = tmp;
  return;
no_memory:
  FIO_LOG_ERROR("unknown error occurred trying to rehash the map");
  FIO_ASSERT_DEBUG(0, "these errors shouldn't happen - no memory?");
  return;
}

/** Removes an object in the map, returning a pointer to the map data. */
SFUNC int FIO_NAME(FIO_MAP_NAME, remove)(FIO_MAP_PTR map,
#if !defined(FIO_MAP_HASH_FN)
                                         uint64_t hash,
#endif
                                         FIO_MAP_KEY key,
#if defined(FIO_MAP_VALUE)
                                         FIO_MAP_VALUE_INTERNAL *old
#else
                                         FIO_MAP_KEY_INTERNAL *old
#endif
) {
  FIO_PTR_TAG_VALID_OR_RETURN(map, -1);
  FIO_NAME(FIO_MAP_NAME, s) *m = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map);
  if (!m->count)
    return -1;
  return FIO_NAME(FIO_MAP_NAME, __node_delete)(m,
                                               key,
#if !defined(FIO_MAP_HASH_FN)
                                               hash,
#endif
                                               old);
}

FIO_SFUNC int FIO_NAME(FIO_MAP_NAME,
                       __evict_task)(FIO_NAME(FIO_MAP_NAME, __each_node_s) *
                                     e) {
  size_t *counter = (size_t *)e->udata;
  FIO_NAME(FIO_MAP_NAME, __node_delete_at)
  (e->map, (uint32_t)(e->node - e->map->map), NULL);
  if ((counter[0] -= 1))
    return 0;
  return -1;
}
/** Evicts elements in order least recently used (LRU), FIFO or undefined. */
SFUNC void FIO_NAME(FIO_MAP_NAME, evict)(FIO_MAP_PTR map,
                                         size_t number_of_elements) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(map);
  if (!number_of_elements)
    return;
  FIO_NAME(FIO_MAP_NAME, s) *m = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map);
  if (m->count <= number_of_elements) {
    FIO_NAME(FIO_MAP_NAME, __destroy_map)(m, 1);
    return;
  }
  FIO_NAME(FIO_MAP_NAME, __each_node)
  (m, FIO_NAME(FIO_MAP_NAME, __evict_task), &number_of_elements);
}

/** Removes all objects from the map, without releasing the map's resources.
 */
SFUNC void FIO_NAME(FIO_MAP_NAME, clear)(FIO_MAP_PTR map) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(map);
  FIO_NAME(FIO_MAP_NAME, s) *m = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map);
  if (m->map)
    FIO_NAME(FIO_MAP_NAME, __destroy_map)(m, 1);
}

/** Attempts to minimize memory use. */
SFUNC void FIO_NAME(FIO_MAP_NAME, compact)(FIO_MAP_PTR map) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(map);
  FIO_NAME(FIO_MAP_NAME, s) *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map);
  if (!o->map || !o->count)
    return;
  FIO_NAME(FIO_MAP_NAME, s) cpy = {0};
  uint32_t bits = o->bits;
  while (FIO_MAP_CAPA(bits >> 1) > o->count)
    bits >>= 1;
  ++bits;
  if (bits >= o->bits)
    return;
  for (size_t i = 0; i < 2; ++i) {
    if (FIO_NAME(FIO_MAP_NAME, __allocate_map)(&cpy, bits))
      return;
    if (!FIO_NAME(FIO_MAP_NAME, __move2map)(&cpy, o))
      goto finish;
    FIO_NAME(FIO_MAP_NAME, __free_map)(&cpy, 0);
    ++bits;
  }
  return;

finish:
  FIO_NAME(FIO_MAP_NAME, __free_map)(o, 0);
  o[0] = cpy;
  return;
}

SFUNC FIO_NAME(FIO_MAP_NAME, node_s) *
    FIO_NAME(FIO_MAP_NAME, set_ptr)(FIO_MAP_PTR map,
#if !defined(FIO_MAP_HASH_FN)
                                    uint64_t hash,
#endif
#ifdef FIO_MAP_VALUE
                                    FIO_MAP_KEY key,
                                    FIO_MAP_VALUE val,
                                    FIO_MAP_VALUE_INTERNAL *old,
                                    int overwrite
#else
                                    FIO_MAP_KEY key
#endif
    ) {
  FIO_PTR_TAG_VALID_OR_RETURN(map, NULL);
  FIO_NAME(FIO_MAP_NAME, s) *m = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map);
  uint32_t i = FIO_NAME(FIO_MAP_NAME, __node_insert)(m,
#ifndef FIO_MAP_HASH_FN
                                                     hash,
#endif
                                                     key,
#ifdef FIO_MAP_VALUE
                                                     val,
                                                     old,
                                                     overwrite
#else
                                                     NULL,
                                                     1
#endif
  );
  if (i == (uint32_t)-1)
    return NULL;
  return m->map + i;
}

/**
 * The core get function. This function returns NULL if item is missing.
 *
 * NOTE: the function returns a pointer to the map's internal storage.
 */
SFUNC FIO_NAME(FIO_MAP_NAME, node_s) *
    FIO_NAME(FIO_MAP_NAME, get_ptr)(FIO_MAP_PTR map,
#if !defined(FIO_MAP_HASH_FN)
                                    uint64_t hash,
#endif
                                    FIO_MAP_KEY key) {
  FIO_PTR_TAG_VALID_OR_RETURN(map, NULL);
  FIO_NAME(FIO_MAP_NAME, s) *m = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map);
  uint32_t i = FIO_NAME(FIO_MAP_NAME, __node_find)(m,
#ifndef FIO_MAP_HASH_FN
                                                   hash,
#endif
                                                   key);
  if (i == (uint32_t)-1)
    return NULL;
  return m->map + i;
}

/* *****************************************************************************



Map Iterators



***************************************************************************** */

SFUNC FIO_NAME(FIO_MAP_NAME, iterator_s)
    FIO_NAME(FIO_MAP_NAME,
             get_next)(FIO_MAP_PTR map,
                       FIO_NAME(FIO_MAP_NAME, iterator_s) * current_pos) {
  FIO_NAME(FIO_MAP_NAME, iterator_s) r = {0};
  FIO_PTR_TAG_VALID_OR_RETURN(map, r);
  FIO_NAME(FIO_MAP_NAME, s) *m = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map);
  uint8_t *imap = FIO_NAME(FIO_MAP_NAME, __imap)(m);
  if (!m->count)
    return r;
  if (!current_pos)
    goto empty;
  if (current_pos->private_.pos + 1 == m->count)
    return r;
  if (current_pos->private_.map_validator != (uintptr_t)(m->map))
    return r; /* mutation stops iteration */
#if FIO_MAP_ORDERED
  if (current_pos->node->node.next == m->head)
    return r;
  r.node = m->map + current_pos->node->node.next;
#else
  for (size_t i = current_pos->node - m->map + 1; i < FIO_MAP_CAPA(m->bits);
       ++i) {
    if (!imap[i] || imap[i] == 0xFFU)
      continue;
    r.node = m->map + i;
    break;
  }
  if (!r.node)
    return r;
#endif

  r = (FIO_NAME(FIO_MAP_NAME, iterator_s)) {
    .node = r.node, .key = FIO_MAP_KEY_FROM_INTERNAL(r.node->key),
#ifdef FIO_MAP_VALUE
    .value = FIO_MAP_VALUE_FROM_INTERNAL(r.node->value),
#endif
#if !FIO_MAP_RECALC_HASH
    .hash = r.node->hash,
#endif
    .private_ = {.index = (uint32_t)(r.node - m->map),
                 .pos = current_pos->private_.pos + 1,
                 .map_validator = (uintptr_t)m->map},
  };
  return r;
empty:

#if FIO_MAP_ORDERED
  r = (FIO_NAME(FIO_MAP_NAME, iterator_s)) {
    .node = m->map + m->head,
    .key = FIO_MAP_KEY_FROM_INTERNAL(m->map[m->head].key),
#ifdef FIO_MAP_VALUE
    .value = FIO_MAP_VALUE_FROM_INTERNAL(m->map[m->head].value),
#endif
#if !FIO_MAP_RECALC_HASH
    .hash = m->map[m->head].hash,
#endif
    .private_ = {.index = m->head,
                 .pos = 0,
                 .map_validator = (uintptr_t)m->map},
  };
#else
  for (size_t i = 0; i < FIO_MAP_CAPA(m->bits); ++i) {
    if (!imap[i] || imap[i] == 0xFFU)
      continue;
    r.node = m->map + i;
    break;
  }

  r = (FIO_NAME(FIO_MAP_NAME, iterator_s)) {
    .node = r.node, .key = FIO_MAP_KEY_FROM_INTERNAL(r.node->key),
#ifdef FIO_MAP_VALUE
    .value = FIO_MAP_VALUE_FROM_INTERNAL(r.node->value),
#endif
#if !FIO_MAP_RECALC_HASH
    .hash = r.node->hash,
#endif
    .private_ = {.index = (uint32_t)(r.node - m->map),
                 .pos = 0,
                 .map_validator = (uintptr_t)m->map},
  };

#endif
  return r;
  (void)imap; /* if unused */
}

SFUNC FIO_NAME(FIO_MAP_NAME, iterator_s)
    FIO_NAME(FIO_MAP_NAME, get_prev)(FIO_MAP_PTR map,
                                     FIO_NAME(FIO_MAP_NAME, iterator_s) *
                                         current_pos) { // TODO!
  FIO_NAME(FIO_MAP_NAME, iterator_s) r = {0};
  FIO_PTR_TAG_VALID_OR_RETURN(map, r);
  FIO_NAME(FIO_MAP_NAME, s) *m = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map);
#if FIO_MAP_ORDERED
  uint32_t ipos;
#else
  uint8_t *imap = FIO_NAME(FIO_MAP_NAME, __imap)(m);
#endif
  if (!m->count)
    return r;
  if (!current_pos)
    goto empty;
  if (!current_pos->private_.pos)
    return r;
  if (current_pos->private_.map_validator != (uintptr_t)(m->map))
    return r; /* mutation stops iteration */
#if FIO_MAP_ORDERED
  if (current_pos->private_.index == m->head)
    return r;
  r.node = m->map + current_pos->node->node.prev;
#else
  for (size_t i = current_pos->node - m->map; i;) {
    --i;
    if (!imap[i] || imap[i] == 0xFFU)
      continue;
    r.node = m->map + i;
    break;
  }
#endif

  r = (FIO_NAME(FIO_MAP_NAME, iterator_s)) {
    .node = r.node, .key = FIO_MAP_KEY_FROM_INTERNAL(r.node->key),
#ifdef FIO_MAP_VALUE
    .value = FIO_MAP_VALUE_FROM_INTERNAL(r.node->value),
#endif
#if !FIO_MAP_RECALC_HASH
    .hash = r.node->hash,
#endif
    .private_ = {.index = (uint32_t)(r.node - m->map),
                 .pos = current_pos->private_.pos - 1,
                 .map_validator = (uintptr_t)m->map},
  };
  return r;
empty:

#if FIO_MAP_ORDERED

  ipos = m->map[m->head].node.prev;
  r = (FIO_NAME(FIO_MAP_NAME, iterator_s)) {
    .node = m->map + ipos, .key = FIO_MAP_KEY_FROM_INTERNAL(m->map[ipos].key),
#ifdef FIO_MAP_VALUE
    .value = FIO_MAP_VALUE_FROM_INTERNAL(m->map[ipos].value),
#endif
#if !FIO_MAP_RECALC_HASH
    .hash = m->map[ipos].hash,
#endif
    .private_ = {.index = ipos,
                 .pos = m->count - 1,
                 .map_validator = (uintptr_t)m->map},
  };

#else
  for (size_t i = FIO_MAP_CAPA(m->bits); i;) {
    --i;
    if (!imap[i] || imap[i] == 0xFFU)
      continue;
    r.node = m->map + i;
    break;
  }

  r = (FIO_NAME(FIO_MAP_NAME, iterator_s)) {
    .node = r.node, .key = FIO_MAP_KEY_FROM_INTERNAL(r.node->key),
#ifdef FIO_MAP_VALUE
    .value = FIO_MAP_VALUE_FROM_INTERNAL(r.node->value),
#endif
#if !FIO_MAP_RECALC_HASH
    .hash = r.node->hash,
#endif
    .private_ = {.index = (uint32_t)(r.node - m->map),
                 .pos = m->count - 1,
                 .map_validator = (uintptr_t)m->map},
  };

#endif

  return r;
}

/* *****************************************************************************



Map Each



***************************************************************************** */

typedef struct {
  FIO_NAME(FIO_MAP_NAME, each_s) each;
  ssize_t start_at;
} FIO_NAME(FIO_MAP_NAME, __each_info_s);

FIO_SFUNC int FIO_NAME(FIO_MAP_NAME,
                       __each_task)(FIO_NAME(FIO_MAP_NAME, __each_node_s) * e) {
  int r;
  FIO_NAME(FIO_MAP_NAME, __each_info_s) *info =
      (FIO_NAME(FIO_MAP_NAME, __each_info_s) *)e->udata;
  info->each.key = FIO_MAP_KEY_FROM_INTERNAL(e->node->key);
#ifdef FIO_MAP_VALUE
  info->each.value = FIO_MAP_VALUE_FROM_INTERNAL(e->node->value);
#endif
  r = info->each.task(&info->each);
  ++info->each.index;
  return r;
}

FIO_SFUNC int FIO_NAME(FIO_MAP_NAME, __each_task_offset)(
    FIO_NAME(FIO_MAP_NAME, __each_node_s) * e) {
  FIO_NAME(FIO_MAP_NAME, __each_info_s) *info =
      (FIO_NAME(FIO_MAP_NAME, __each_info_s) *)e->udata;
  if (FIO_LIKELY(info->each.index < (uint64_t)info->start_at)) {
    ++info->each.index;
    return 0;
  }
  return (e->fn = FIO_NAME(FIO_MAP_NAME, __each_task))(e);
}

/**
 * Iteration using a callback for each element in the map.
 *
 * The callback task function must accept an each_s pointer, see above.
 *
 * If the callback returns -1, the loop is broken. Any other value is ignored.
 *
 * Returns the relative "stop" position, i.e., the number of items processed +
 * the starting point.
 */
SFUNC uint32_t FIO_NAME(FIO_MAP_NAME,
                        each)(FIO_MAP_PTR map,
                              int (*task)(FIO_NAME(FIO_MAP_NAME, each_s) *),
                              void *udata,
                              ssize_t start_at) {
  uint32_t r = (uint32_t)-1;
  FIO_PTR_TAG_VALID_OR_RETURN(map, r);
  FIO_NAME(FIO_MAP_NAME, s) *m = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP_T, map);
  if (start_at < 0)
    start_at += m->count;
  if (start_at < 0)
    return m->count;
  FIO_NAME(FIO_MAP_NAME, __each_info_s)
  e = {
      .each =
          {
              .parent = map,
              .index = 0,
              .task = task,
              .udata = udata,
          },
      .start_at = start_at,
  };

  FIO_NAME(FIO_MAP_NAME, __each_node)
  (m,
   !start_at ? FIO_NAME(FIO_MAP_NAME, __each_task)
             : FIO_NAME(FIO_MAP_NAME, __each_task_offset),
   &e);
  return (uint32_t)e.each.index;
}

/* *****************************************************************************
Map Testing
***************************************************************************** */
#ifdef FIO_MAP_TEST

#ifdef FIO_MAP_HASH_FN
#define FIO___M_HASH(k)
#else
#define FIO___M_HASH(k) (k),
#endif
#ifdef FIO_MAP_VALUE
#define FIO___M_VAL(v) , (v)
#define FIO___M_OLD    , NULL
#else
#define FIO___M_VAL(v)
#define FIO___M_OLD
#endif

FIO_SFUNC void FIO_NAME_TEST(stl, FIO_MAP_NAME)(void) {
  /* testing only only works with integer external types */
  fprintf(
      stderr,
      "* Testing map " FIO_MACRO2STR(FIO_MAP_NAME) " with key " FIO_MACRO2STR(
          FIO_MAP_KEY) " (=> " FIO_MACRO2STR(FIO_MAP_VALUE) ").\n");
  size_t test_len_limit = (1UL << (FIO_MAP_ARRAY_LOG_LIMIT + 15));
  { /* test set / get overwrite , FIO_MAP_EACH and evict */
    FIO_NAME(FIO_MAP_NAME, s) map = FIO_MAP_INIT;
    for (size_t i = 1; i < test_len_limit; ++i) {
      FIO_NAME(FIO_MAP_NAME, set)
      (&map, FIO___M_HASH(i) i FIO___M_VAL(i) FIO___M_OLD);
      FIO_ASSERT(FIO_NAME(FIO_MAP_NAME, count)(&map) == i,
                 "map `set` failed? %zu != %zu",
                 (size_t)FIO_NAME(FIO_MAP_NAME, count)(&map),
                 i);
      for (size_t j = ((i << 2) + 1); j < i; ++j) { /* effects LRU ordering */
        FIO_ASSERT(FIO_NAME(FIO_MAP_NAME, get_ptr)(&map, FIO___M_HASH(j) j) &&
                       FIO_NAME(FIO_MAP_NAME, node2val)(
                           FIO_NAME(FIO_MAP_NAME,
                                    get_ptr)(&map, FIO___M_HASH(j) j)) == j,
                   "map `get` failed? %zu/%zu (%p)",
                   j,
                   i,
                   FIO_NAME(FIO_MAP_NAME, get_ptr)(&map, FIO___M_HASH(j) j));
        FIO_NAME(FIO_MAP_NAME, set)
        (&map, FIO___M_HASH(j) j FIO___M_VAL(j) FIO___M_OLD);
        FIO_ASSERT(FIO_NAME(FIO_MAP_NAME, count)(&map) == i,
                   "map `set` added an item that already exists? %zu != %zu",
                   (size_t)FIO_NAME(FIO_MAP_NAME, count)(&map),
                   i);
      }
    }
    /* test FIO_MAP_EACH and ordering */
    uint32_t count = FIO_NAME(FIO_MAP_NAME, count)(&map);
    uint32_t loop_test = 0;
    FIO_MAP_EACH(FIO_MAP_NAME, &map, i) {
      /* test ordering */
      ++loop_test;
#ifdef FIO_MAP_LRU
      FIO_ASSERT(i.key == loop_test,
                 "map FIO_MAP_EACH LRU ordering broken? %zu != %zu",
                 (size_t)(i.key),
                 (size_t)(count - loop_test));
#elif FIO_MAP_ORDERED
      FIO_ASSERT(i.key == loop_test,
                 "map FIO_MAP_EACH ordering broken? %zu != %zu",
                 (size_t)(i.key),
                 (size_t)(loop_test));
#else
      FIO_ASSERT(i.key < test_len_limit,
                 "map FIO_MAP_EACH invalid data? %zu !< %zu",
                 (size_t)(i.key),
                 (size_t)(test_len_limit));
#endif
    }
    FIO_ASSERT(loop_test == count,
               "FIO_MAP_EACH failed to iterate all elements? (%zu != %zu",
               (size_t)loop_test != (size_t)count);
    loop_test = 0;
    FIO_MAP_EACH_REVERSED(FIO_MAP_NAME, &map, i) {
      /* test reversed ordering */
      ++loop_test;
#ifdef FIO_MAP_LRU
      FIO_ASSERT(i.key == (count - (loop_test - 1)),
                 "map FIO_MAP_EACH_REVERSED LRU ordering broken? %zu != %zu",
                 (size_t)(i.key),
                 (size_t)(count - loop_test));
#elif FIO_MAP_ORDERED
      FIO_ASSERT(i.key == (count - (loop_test - 1)),
                 "map FIO_MAP_EACH_REVERSED ordering broken? %zu != %zu",
                 (size_t)(i.key),
                 (size_t)(loop_test));
#endif
    }
    FIO_ASSERT(
        loop_test == count,
        "FIO_MAP_EACH_REVERSED failed to iterate all elements? (%zu != %zu",
        (size_t)loop_test != (size_t)count);
    /* test `evict` while we're here */
    FIO_NAME(FIO_MAP_NAME, evict)(&map, (count >> 1));
    FIO_ASSERT(FIO_NAME(FIO_MAP_NAME, count)(&map) == (count - (count >> 1)),
               "map `evict` count error %zu != %zu",
               (size_t)FIO_NAME(FIO_MAP_NAME, count)(&map),
               (size_t)(count - (count >> 1)));
    /* cleanup */
    FIO_NAME(FIO_MAP_NAME, destroy)(&map);
  }
#if !FIO_MAP_RECALC_HASH
  { /* test full collision guard and zero hash*/
    FIO_NAME(FIO_MAP_NAME, s) map = FIO_MAP_INIT;
    fprintf(
        stderr,
        "* Testing full collision guard for " FIO_MACRO2STR(
            FIO_NAME(FIO_MAP_NAME, s)) " - expect SECURITY log messages.\n");
    for (size_t i = 1; i < 4096; ++i) {
      FIO_NAME(FIO_MAP_NAME, set)
      (&map, FIO___M_HASH(0) i FIO___M_VAL(i) FIO___M_OLD);
    }
    FIO_ASSERT(FIO_NAME(FIO_MAP_NAME, count)(&map),
               "zero hash fails insertion?");
    FIO_ASSERT(FIO_NAME(FIO_MAP_NAME, count)(&map) <= FIO_MAP_ATTACK_LIMIT,
               "map attack guard failed? %zu != %zu",
               (size_t)FIO_NAME(FIO_MAP_NAME, count)(&map),
               (size_t)FIO_MAP_ATTACK_LIMIT);
    FIO_NAME(FIO_MAP_NAME, destroy)(&map);
  }
#endif
  { /* test reserve, remove */
    FIO_NAME(FIO_MAP_NAME, s) map = FIO_MAP_INIT;
    FIO_NAME(FIO_MAP_NAME, reserve)(&map, 4096);
    FIO_ASSERT(FIO_NAME(FIO_MAP_NAME, capa)(&map) == 4096,
               "map reserve error? %zu != %zu",
               (size_t)FIO_NAME(FIO_MAP_NAME, capa)(&map),
               4096);
    for (size_t i = 1; i < test_len_limit; ++i) {
      FIO_NAME(FIO_MAP_NAME, set)
      (&map, FIO___M_HASH(i) i FIO___M_VAL(i) FIO___M_OLD);
      FIO_ASSERT(FIO_NAME(FIO_MAP_NAME, count)(&map) == i, "insertion failed?");
    }
    for (size_t i = 1; i < test_len_limit; ++i) {
      FIO_ASSERT(FIO_NAME(FIO_MAP_NAME, get)(&map, FIO___M_HASH(i) i),
                 "key missing?");
      size_t count = FIO_NAME(FIO_MAP_NAME, count)(&map);
      FIO_NAME(FIO_MAP_NAME, remove)
      (&map, FIO___M_HASH(i) i, NULL);
      FIO_ASSERT(!FIO_NAME(FIO_MAP_NAME, get)(&map, FIO___M_HASH(i) i),
                 "map_remove error?");
      FIO_ASSERT(FIO_NAME(FIO_MAP_NAME, count)(&map) == count - 1,
                 "map count error after removal? %zu != %zu",
                 (size_t)FIO_NAME(FIO_MAP_NAME, count)(&map),
                 count - 1);
      /* see if removal produces errors while rehashing */
      FIO_NAME(FIO_MAP_NAME, compact)(&map);
    }
    FIO_NAME(FIO_MAP_NAME, destroy)(&map);
  }
}
#undef FIO___M_HASH
#undef FIO___M_VAL
#undef FIO___M_OLD

#endif /* FIO_MAP_TEST */
/* *****************************************************************************
Map Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */

#undef FIO_MAP_ARRAY_LOG_LIMIT
#undef FIO_MAP_ATTACK_LIMIT
#undef FIO_MAP_CAPA
#undef FIO_MAP_CAPA_BITS_LIMIT
#undef FIO_MAP_CUCKOO_STEPS
#undef FIO_MAP_GET_T
#undef FIO_MAP_HASH_FN
#undef FIO_MAP_IS_SPARSE
#undef FIO_MAP_KEY
#undef FIO_MAP_KEY_CMP
#undef FIO_MAP_KEY_COPY
#undef FIO_MAP_KEY_DESTROY
#undef FIO_MAP_KEY_DESTROY_SIMPLE
#undef FIO_MAP_KEY_DISCARD
#undef FIO_MAP_KEY_FROM_INTERNAL
#undef FIO_MAP_KEY_INTERNAL
#undef FIO_MAP_KEY_IS_GREATER_THAN
#undef FIO_MAP_LRU
#undef FIO_MAP_NAME
#undef FIO_MAP_ORDERED
#undef FIO_MAP_PTR
#undef FIO_MAP_RECALC_HASH
#undef FIO_MAP_SEEK_LIMIT
#undef FIO_MAP_T
#undef FIO_MAP_TEST
#undef FIO_MAP_VALUE
#undef FIO_MAP_VALUE_BSTR
#undef FIO_MAP_VALUE_COPY
#undef FIO_MAP_VALUE_DESTROY
#undef FIO_MAP_VALUE_DESTROY_SIMPLE
#undef FIO_MAP_VALUE_DISCARD
#undef FIO_MAP_VALUE_FROM_INTERNAL
#undef FIO_MAP_VALUE_INTERNAL

#undef FIO_MAP___MAKE_BITMAP
#undef FIO_MAP___STEP_POS
#undef FIO_MAP___TEST_MATCH
#undef FIO___MAP_UPDATE_ORDER
#undef FIO_MAP_ARRAY_LOG_LIMIT
#undef FIO_MAP_ATTACK_LIMIT
#undef FIO_MAP_CAPA
#undef FIO_MAP_CAPA_BITS_LIMIT
#undef FIO_MAP_CUCKOO_STEPS
#undef FIO_MAP_GET_T
#undef FIO_MAP_HASH_FN
#undef FIO_MAP_IS_SPARSE
#undef FIO_MAP_KEY
#undef FIO_MAP_KEY_BSTR
#undef FIO_MAP_KEY_CMP
#undef FIO_MAP_KEY_COPY
#undef FIO_MAP_KEY_DESTROY
#undef FIO_MAP_KEY_DESTROY_SIMPLE
#undef FIO_MAP_KEY_DISCARD
#undef FIO_MAP_KEY_FROM_INTERNAL
#undef FIO_MAP_KEY_INTERNAL
#undef FIO_MAP_KEY_IS_GREATER_THAN
#undef FIO_MAP_KEY_KSTR
#undef FIO_MAP_LRU
#undef FIO_MAP_MINIMAL_BITS
#undef FIO_MAP_NAME
#undef FIO_MAP_ORDERED
#undef FIO_MAP_PTR
#undef FIO_MAP_RECALC_HASH
#undef FIO_MAP_SEEK_LIMIT
#undef FIO_MAP_T
#undef FIO_MAP_TEST
#undef FIO_MAP_VALUE
#undef FIO_MAP_VALUE_BSTR
#undef FIO_MAP_VALUE_COPY
#undef FIO_MAP_VALUE_DESTROY
#undef FIO_MAP_VALUE_DESTROY_SIMPLE
#undef FIO_MAP_VALUE_DISCARD
#undef FIO_MAP_VALUE_FROM_INTERNAL
#undef FIO_MAP_VALUE_INTERNAL

#undef FIO_OMAP_NAME
#undef FIO_UMAP_NAME

#endif /* FIO_MAP_NAME */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_MAP2_NAME map      /* Development inclusion - ignore line */
#define FIO_MAP2_TEST          /* Development inclusion - ignore line */
#define FIO_MAP2_KEY  size_t   /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                  Unordered/Ordered Map Implementation



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_MAP2_NAME)
/* *****************************************************************************
Map Settings - Sets have only keys (value == key) - Hash Maps have values
***************************************************************************** */

/* if FIO_MAP2_KEY_KSTR is defined, use fio_keystr_s keys */
#ifdef FIO_MAP2_KEY_KSTR
#define FIO_MAP2_KEY                  fio_str_info_s
#define FIO_MAP2_KEY_INTERNAL         fio_keystr_s
#define FIO_MAP2_KEY_FROM_INTERNAL(k) fio_keystr_info(&(k))
#define FIO_MAP2_KEY_COPY(dest, src)                                           \
  (dest) = fio_keystr_init((src), FIO_NAME(FIO_MAP2_NAME, __key_alloc))
#define FIO_MAP2_KEY_CMP(a, b) fio_keystr_is_eq2((a), (b))
#define FIO_MAP2_KEY_DESTROY(key)                                              \
  fio_keystr_destroy(&(key), FIO_NAME(FIO_MAP2_NAME, __key_free))
#define FIO_MAP2_KEY_DISCARD(key)
FIO_SFUNC void *FIO_NAME(FIO_MAP2_NAME, __key_alloc)(size_t len) {
  return FIO_MEM_REALLOC_(NULL, 0, len, 0);
}
FIO_SFUNC void FIO_NAME(FIO_MAP2_NAME, __key_free)(void *ptr, size_t len) {
  FIO_MEM_FREE_(ptr, len);
  (void)len; /* if unused */
}
#undef FIO_MAP2_KEY_KSTR

/* if FIO_MAP2_KEY is undefined, assume String keys (using `fio_bstr`). */
#elif !defined(FIO_MAP2_KEY) || defined(FIO_MAP2_KEY_BSTR)
#define FIO_MAP2_KEY                  fio_str_info_s
#define FIO_MAP2_KEY_INTERNAL         char *
#define FIO_MAP2_KEY_FROM_INTERNAL(k) fio_bstr_info((k))
#define FIO_MAP2_KEY_COPY(dest, src)                                           \
  (dest) = fio_bstr_write(NULL, (src).buf, (src).len)
#define FIO_MAP2_KEY_CMP(a, b)    fio_bstr_is_eq2info((a), (b))
#define FIO_MAP2_KEY_DESTROY(key) fio_bstr_free((key))
#define FIO_MAP2_KEY_DISCARD(key)
#endif
#undef FIO_MAP2_KEY_BSTR

#ifndef FIO_MAP2_KEY_INTERNAL
#define FIO_MAP2_KEY_INTERNAL FIO_MAP2_KEY
#endif

#ifndef FIO_MAP2_KEY_FROM_INTERNAL
#define FIO_MAP2_KEY_FROM_INTERNAL(o) o
#endif

#ifndef FIO_MAP2_KEY_COPY
#define FIO_MAP2_KEY_COPY(dest, src) ((dest) = (src))
#endif

#ifndef FIO_MAP2_KEY_CMP
#define FIO_MAP2_KEY_CMP(a, b) ((a) == (b))
#endif

#ifndef FIO_MAP2_KEY_DESTROY
#define FIO_MAP2_KEY_DESTROY(o)
#define FIO_MAP2_KEY_DESTROY_SIMPLE 1
#endif

#ifndef FIO_MAP2_KEY_DISCARD
#define FIO_MAP2_KEY_DISCARD(o)
#endif

/* FIO_MAP2_HASH_FN(key) - used instead of providing a hash value. */
#ifndef FIO_MAP2_HASH_FN
#undef FIO_MAP2_RECALC_HASH
#endif

/* FIO_MAP2_RECALC_HASH - if true, hash values won't be cached. */
#ifndef FIO_MAP2_RECALC_HASH
#define FIO_MAP2_RECALC_HASH 0
#endif

#ifdef FIO_MAP2_VALUE_BSTR
#define FIO_MAP2_VALUE                  fio_str_info_s
#define FIO_MAP2_VALUE_INTERNAL         char *
#define FIO_MAP2_VALUE_FROM_INTERNAL(v) fio_bstr_info((v))
#define FIO_MAP2_VALUE_COPY(dest, src)                                         \
  (dest) = fio_bstr_write(NULL, (src).buf, (src).len)
#define FIO_MAP2_VALUE_DESTROY(v) fio_bstr_free((v))
#define FIO_MAP2_VALUE_DISCARD(v)
#endif

#ifdef FIO_MAP2_VALUE
#define FIO_MAP2_GET_T FIO_MAP2_VALUE
#else
#define FIO_MAP2_GET_T FIO_MAP2_KEY
#endif

#ifndef FIO_MAP2_VALUE_INTERNAL
#define FIO_MAP2_VALUE_INTERNAL FIO_MAP2_VALUE
#endif

#ifndef FIO_MAP2_VALUE_FROM_INTERNAL
#ifdef FIO_MAP2_VALUE
#define FIO_MAP2_VALUE_FROM_INTERNAL(o) o
#else
#define FIO_MAP2_VALUE_FROM_INTERNAL(o)
#endif
#endif

#ifndef FIO_MAP2_VALUE_COPY
#ifdef FIO_MAP2_VALUE
#define FIO_MAP2_VALUE_COPY(dest, src) (dest) = (src)
#else
#define FIO_MAP2_VALUE_COPY(dest, src)
#endif
#endif

#ifndef FIO_MAP2_VALUE_DESTROY
#define FIO_MAP2_VALUE_DESTROY(o)
#define FIO_MAP2_VALUE_DESTROY_SIMPLE 1
#endif

#ifndef FIO_MAP2_VALUE_DISCARD
#define FIO_MAP2_VALUE_DISCARD(o)
#endif

#ifdef FIO_MAP2_LRU
#undef FIO_MAP2_ORDERED
#define FIO_MAP2_ORDERED 1 /* required for least recently used order */
#endif

/* test if FIO_MAP2_ORDERED was defined as an empty macro */
#if defined(FIO_MAP2_ORDERED) && ((0 - FIO_MAP2_ORDERED - 1) == 1)
#undef FIO_MAP2_ORDERED
#define FIO_MAP2_ORDERED 1 /* assume developer's intention */
#endif

#ifndef FIO_MAP2_ORDERED
#define FIO_MAP2_ORDERED 0
#endif

/* *****************************************************************************
Pointer Tagging Support
***************************************************************************** */

#ifdef FIO_PTR_TAG_TYPE
#define FIO_MAP2_PTR FIO_PTR_TAG_TYPE
#else
#define FIO_MAP2_PTR FIO_NAME(FIO_MAP2_NAME, s) *
#endif
#define FIO_MAP2_T FIO_NAME(FIO_MAP2_NAME, s)

/* *****************************************************************************
Map Types
***************************************************************************** */

/** internal object data representation */
typedef struct FIO_NAME(FIO_MAP2_NAME, node_s) FIO_NAME(FIO_MAP2_NAME, node_s);

/** A Hash Map / Set type */
typedef struct FIO_NAME(FIO_MAP2_NAME, s) {
  uint32_t bits;
  uint32_t count;
  FIO_NAME(FIO_MAP2_NAME, node_s) * map;
#if FIO_MAP2_ORDERED
  FIO_INDEXED_LIST32_HEAD head;
#endif
} FIO_NAME(FIO_MAP2_NAME, s);

/** internal object data representation */
struct FIO_NAME(FIO_MAP2_NAME, node_s) {
#if !FIO_MAP2_RECALC_HASH
  uint64_t hash;
#endif
  FIO_MAP2_KEY_INTERNAL key;
#ifdef FIO_MAP2_VALUE
  FIO_MAP2_VALUE_INTERNAL value;
#endif
#if FIO_MAP2_ORDERED
  FIO_INDEXED_LIST32_NODE node;
#endif
};

/** Map iterator type */
typedef struct {
  /** the node in the internal map */
  FIO_NAME(FIO_MAP2_NAME, node_s) * node;
  /** the key in the current position */
  FIO_MAP2_KEY key;
#ifdef FIO_MAP2_VALUE
  /** the value in the current position */
  FIO_MAP2_VALUE value;
#endif
#if !FIO_MAP2_RECALC_HASH
  /** the hash for the current position */
  uint64_t hash;
#endif
  struct {                   /* internal usage, do not access */
    uint32_t index;          /* the index in the internal map */
    uint32_t pos;            /* the position in the ordering scheme */
    uintptr_t map_validator; /* map mutation guard */
  } private_;
} FIO_NAME(FIO_MAP2_NAME, iterator_s);

#ifndef FIO_MAP2_INIT
/* Initialization macro. */
#define FIO_MAP2_INIT                                                          \
  { 0 }
#endif

/* *****************************************************************************
Construction / Deconstruction
***************************************************************************** */

/* do we have a constructor? */
#ifndef FIO_REF_CONSTRUCTOR_ONLY

/* Allocates a new object on the heap and initializes it's memory. */
SFUNC FIO_MAP2_PTR FIO_NAME(FIO_MAP2_NAME, new)(void);

/* Frees any internal data AND the object's container! */
SFUNC void FIO_NAME(FIO_MAP2_NAME, free)(FIO_MAP2_PTR map);

#endif /* FIO_REF_CONSTRUCTOR_ONLY */

/** Destroys the object, reinitializing its container. */
SFUNC void FIO_NAME(FIO_MAP2_NAME, destroy)(FIO_MAP2_PTR map);

/* *****************************************************************************
Map State
***************************************************************************** */

/** Theoretical map capacity. */
FIO_IFUNC uint32_t FIO_NAME(FIO_MAP2_NAME, capa)(FIO_MAP2_PTR map);

/** The number of objects in the map capacity. */
FIO_IFUNC uint32_t FIO_NAME(FIO_MAP2_NAME, count)(FIO_MAP2_PTR map);

/** Reserves at minimum the capacity requested. */
SFUNC void FIO_NAME(FIO_MAP2_NAME, reserve)(FIO_MAP2_PTR map, size_t capa);

/** Returns the key value associated with the node's pointer (see set_ptr). */
FIO_IFUNC FIO_MAP2_KEY FIO_NAME(FIO_MAP2_NAME,
                                node2key)(FIO_NAME(FIO_MAP2_NAME, node_s) *
                                          node);

/** Returns the hash value associated with the node's pointer (see set_ptr). */
FIO_IFUNC uint64_t FIO_NAME(FIO_MAP2_NAME,
                            node2hash)(FIO_NAME(FIO_MAP2_NAME, node_s) * node);

#ifdef FIO_MAP2_VALUE
/** Returns the value associated with the node's pointer (see set_ptr). */
FIO_IFUNC FIO_MAP2_VALUE FIO_NAME(FIO_MAP2_NAME,
                                  node2val)(FIO_NAME(FIO_MAP2_NAME, node_s) *
                                            node);
#endif

/** Returns the key value associated with the node's pointer (see set_ptr). */
FIO_IFUNC FIO_MAP2_KEY_INTERNAL *FIO_NAME(FIO_MAP2_NAME, node2key_ptr)(
    FIO_NAME(FIO_MAP2_NAME, node_s) * node);

#ifdef FIO_MAP2_VALUE
/** Returns the value associated with the node's pointer (see set_ptr). */
FIO_IFUNC FIO_MAP2_VALUE_INTERNAL *FIO_NAME(FIO_MAP2_NAME, node2val_ptr)(
    FIO_NAME(FIO_MAP2_NAME, node_s) * node);
#endif

/* *****************************************************************************
Adding / Removing Elements from the Map
***************************************************************************** */

/** Removes an object in the map, returning a pointer to the map data. */
SFUNC int FIO_NAME(FIO_MAP2_NAME, remove)(FIO_MAP2_PTR map,
#if !defined(FIO_MAP2_HASH_FN)
                                          uint64_t hash,
#endif
                                          FIO_MAP2_KEY key,
#ifdef FIO_MAP2_VALUE
                                          FIO_MAP2_VALUE_INTERNAL *old
#else
                                          FIO_MAP2_KEY_INTERNAL *old
#endif
);

/** Evicts elements in order least recently used (LRU), FIFO or undefined. */
SFUNC void FIO_NAME(FIO_MAP2_NAME, evict)(FIO_MAP2_PTR map,
                                          size_t number_of_elements);

/** Removes all objects from the map, without releasing the map's resources. */
SFUNC void FIO_NAME(FIO_MAP2_NAME, clear)(FIO_MAP2_PTR map);

/** Attempts to minimize memory use. */
SFUNC void FIO_NAME(FIO_MAP2_NAME, compact)(FIO_MAP2_PTR map);

/** Gets a value from the map, if exists. */
FIO_IFUNC FIO_MAP2_GET_T FIO_NAME(FIO_MAP2_NAME, get)(FIO_MAP2_PTR map,
#if !defined(FIO_MAP2_HASH_FN)
                                                      uint64_t hash,
#endif
                                                      FIO_MAP2_KEY key);

/** Sets a value in the map, hash maps will overwrite existing data if any. */
FIO_IFUNC FIO_MAP2_GET_T FIO_NAME(FIO_MAP2_NAME,
                                  set)(FIO_MAP2_PTR map,
#if !defined(FIO_MAP2_HASH_FN)
                                       uint64_t hash,
#endif
#ifdef FIO_MAP2_VALUE
                                       FIO_MAP2_KEY key,
                                       FIO_MAP2_VALUE obj,
                                       FIO_MAP2_VALUE_INTERNAL *old
#else
                                       FIO_MAP2_KEY key
#endif
);

/** Sets a value in the map if not set previously. */
FIO_IFUNC FIO_MAP2_GET_T FIO_NAME(FIO_MAP2_NAME,
                                  set_if_missing)(FIO_MAP2_PTR map,
#if !defined(FIO_MAP2_HASH_FN)
                                                  uint64_t hash,
#endif
                                                  FIO_MAP2_KEY key
#ifdef FIO_MAP2_VALUE
                                                  ,
                                                  FIO_MAP2_VALUE obj
#endif
);

/**
 * The core set function.
 *
 * This function returns `NULL` on error (errors are logged).
 *
 * If the map is a hash map, overwriting the value (while keeping the key) is
 * possible. In this case the `old` pointer is optional, and if set than the old
 * data will be copied to over during an overwrite.
 *
 * NOTE: the function returns a pointer to the map's internal storage.
 */
SFUNC FIO_NAME(FIO_MAP2_NAME, node_s) *
    FIO_NAME(FIO_MAP2_NAME, set_ptr)(FIO_MAP2_PTR map,
#if !defined(FIO_MAP2_HASH_FN)
                                     uint64_t hash,
#endif
#ifdef FIO_MAP2_VALUE
                                     FIO_MAP2_KEY key,
                                     FIO_MAP2_VALUE val,
                                     FIO_MAP2_VALUE_INTERNAL *old,
                                     int overwrite
#else
                                     FIO_MAP2_KEY key
#endif
    );

/**
 * The core get function. This function returns NULL if item is missing.
 *
 * NOTE: the function returns a pointer to the map's internal storage.
 */
SFUNC FIO_NAME(FIO_MAP2_NAME, node_s) *
    FIO_NAME(FIO_MAP2_NAME, get_ptr)(FIO_MAP2_PTR map,
#if !defined(FIO_MAP2_HASH_FN)
                                     uint64_t hash,
#endif
                                     FIO_MAP2_KEY key);
/* *****************************************************************************
Map Iteration and Traversal
***************************************************************************** */

/**
 * Returns the next iterator object after `current_pos` or the first if `NULL`.
 *
 * Note that adding objects to the map or rehashing between iterations could
 * incur performance penalties when re-setting and re-seeking the previous
 * iterator position.
 *
 * Adding objects to, or rehashing, an unordered maps could invalidate the
 * iterator object completely as the ordering may have changed and so the "next"
 * object might be any object in the map.
 */
SFUNC FIO_NAME(FIO_MAP2_NAME, iterator_s)
    FIO_NAME(FIO_MAP2_NAME,
             get_next)(FIO_MAP2_PTR map,
                       FIO_NAME(FIO_MAP2_NAME, iterator_s) * current_pos);

/**
 * Returns the next iterator object after `current_pos` or the last if `NULL`.
 *
 * See notes in `get_next`.
 */
SFUNC FIO_NAME(FIO_MAP2_NAME, iterator_s)
    FIO_NAME(FIO_MAP2_NAME,
             get_prev)(FIO_MAP2_PTR map,
                       FIO_NAME(FIO_MAP2_NAME, iterator_s) * current_pos);

/** Returns 1 if the iterator is out of bounds, otherwise returns 0. */
FIO_IFUNC int FIO_NAME(FIO_MAP2_NAME,
                       iterator_is_valid)(FIO_NAME(FIO_MAP2_NAME, iterator_s) *
                                          iterator);

/** Returns a pointer to the node object in the internal map. */
FIO_IFUNC FIO_NAME(FIO_MAP2_NAME, node_s) *
    FIO_NAME(FIO_MAP2_NAME,
             iterator2node)(FIO_MAP2_PTR map,
                            FIO_NAME(FIO_MAP2_NAME, iterator_s) * iterator);

#ifndef FIO_MAP2_EACH
/** Iterates through the map using an iterator object. */
#define FIO_MAP2_EACH(map_name, map_ptr, i)                                    \
  for (FIO_NAME(map_name, iterator_s)                                          \
           i = FIO_NAME(map_name, get_next)(map_ptr, NULL);                    \
       FIO_NAME(map_name, iterator_is_valid)(&i);                              \
       i = FIO_NAME(map_name, get_next)(map_ptr, &i))
/** Iterates through the map using an iterator object. */
#define FIO_MAP2_EACH_REVERSED(map_name, map_ptr, i)                           \
  for (FIO_NAME(map_name, iterator_s)                                          \
           i = FIO_NAME(map_name, get_prev)(map_ptr, NULL);                    \
       FIO_NAME(map_name, iterator_is_valid)(&i);                              \
       i = FIO_NAME(map_name, get_prev)(map_ptr, &i))
#endif

/** Iteration information structure passed to the callback. */
typedef struct FIO_NAME(FIO_MAP2_NAME, each_s) {
  /** The being iterated. Once set, cannot be safely changed. */
  FIO_MAP2_PTR const parent;
  /** The current object's index */
  uint64_t index;
  /** The callback / task called for each index, may be updated mid-cycle. */
  int (*task)(struct FIO_NAME(FIO_MAP2_NAME, each_s) * info);
  /** Opaque user data. */
  void *udata;
#ifdef FIO_MAP2_VALUE
  /** The object's value at the current index. */
  FIO_MAP2_VALUE value;
#endif
  /** The object's key the current index. */
  FIO_MAP2_KEY key;
} FIO_NAME(FIO_MAP2_NAME, each_s);

/**
 * Iteration using a callback for each element in the map.
 *
 * The callback task function must accept an each_s pointer, see above.
 *
 * If the callback returns -1, the loop is broken. Any other value is ignored.
 *
 * Returns the relative "stop" position, i.e., the number of items processed +
 * the starting point.
 */
SFUNC uint32_t FIO_NAME(FIO_MAP2_NAME,
                        each)(FIO_MAP2_PTR map,
                              int (*task)(FIO_NAME(FIO_MAP2_NAME, each_s) *),
                              void *udata,
                              ssize_t start_at);

/* *****************************************************************************
Optional Sorting Support - TODO? (convert to array, sort, rehash)
***************************************************************************** */

#if defined(FIO_MAP2_KEY_IS_GREATER_THAN) && !defined(FIO_SORT_TYPE) &&        \
    FIO_MAP2_ORDERED
#undef FIO_SORT_NAME
#endif

/* *****************************************************************************
Map Implementation - inlined static functions
***************************************************************************** */

#ifndef FIO_MAP2_CAPA_BITS_LIMIT
/* Note: cannot be more than 31 bits unless some of the code is rewritten. */
#define FIO_MAP2_CAPA_BITS_LIMIT 31
#endif

/* Theoretical map capacity. */
FIO_IFUNC uint32_t FIO_NAME(FIO_MAP2_NAME, capa)(FIO_MAP2_PTR map) {
  FIO_PTR_TAG_VALID_OR_RETURN(map, 0);
  FIO_MAP2_T *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP2_T, map);
  if (o->map)
    return (uint32_t)((size_t)1ULL << o->bits);
  return 0;
}

/* The number of objects in the map capacity. */
FIO_IFUNC uint32_t FIO_NAME(FIO_MAP2_NAME, count)(FIO_MAP2_PTR map) {
  FIO_PTR_TAG_VALID_OR_RETURN(map, 0);
  return ((FIO_NAME(FIO_MAP2_NAME, s) *)FIO_PTR_UNTAG(map))->count;
}

/** Returns 1 if the iterator points to a valid object, otherwise returns 0. */
FIO_IFUNC int FIO_NAME(FIO_MAP2_NAME,
                       iterator_is_valid)(FIO_NAME(FIO_MAP2_NAME, iterator_s) *
                                          iterator) {
  return (iterator && iterator->private_.map_validator);
}

/** Returns the key value associated with the node's pointer. */
FIO_IFUNC FIO_MAP2_KEY FIO_NAME(FIO_MAP2_NAME,
                                node2key)(FIO_NAME(FIO_MAP2_NAME, node_s) *
                                          node) {
  FIO_MAP2_KEY r = (FIO_MAP2_KEY){0};
  if (!node)
    return r;
  return FIO_MAP2_KEY_FROM_INTERNAL(node->key);
}

/** Returns the hash value associated with the node's pointer. */
FIO_IFUNC uint64_t FIO_NAME(FIO_MAP2_NAME,
                            node2hash)(FIO_NAME(FIO_MAP2_NAME, node_s) * node) {
  uint32_t r = (uint32_t){0};
  if (!node)
    return r;
#if FIO_MAP2_RECALC_HASH
  FIO_MAP2_KEY k = FIO_MAP2_KEY_FROM_INTERNAL(node->key);
  uint64_t hash = FIO_MAP2_HASH_FN(k);
  hash += !hash;
  return hash;
#else
  return node->hash;
#endif
}

#ifdef FIO_MAP2_VALUE
/** Returns the value associated with the node's pointer. */
FIO_IFUNC FIO_MAP2_VALUE FIO_NAME(FIO_MAP2_NAME,
                                  node2val)(FIO_NAME(FIO_MAP2_NAME, node_s) *
                                            node) {
  FIO_MAP2_VALUE r = (FIO_MAP2_VALUE){0};
  if (!node)
    return r;
  return FIO_MAP2_VALUE_FROM_INTERNAL(node->value);
}
#else
/* If called for a node without a value, returns the key (simplifies stuff). */
FIO_IFUNC FIO_MAP2_KEY FIO_NAME(FIO_MAP2_NAME,
                                node2val)(FIO_NAME(FIO_MAP2_NAME, node_s) *
                                          node) {
  return FIO_NAME(FIO_MAP2_NAME, node2key)(node);
}
#endif

/** Returns the key value associated with the node's pointer. */
FIO_IFUNC FIO_MAP2_KEY_INTERNAL *FIO_NAME(FIO_MAP2_NAME, node2key_ptr)(
    FIO_NAME(FIO_MAP2_NAME, node_s) * node) {
  if (!node)
    return NULL;
  return &(node->key);
}

#ifdef FIO_MAP2_VALUE
/** Returns the value associated with the node's pointer. */
FIO_IFUNC FIO_MAP2_VALUE_INTERNAL *FIO_NAME(FIO_MAP2_NAME, node2val_ptr)(
    FIO_NAME(FIO_MAP2_NAME, node_s) * node) {
  if (!node)
    return NULL;
  return &(node->value);
}
#else
/* If called for a node without a value, returns the key (simplifies stuff). */
FIO_IFUNC FIO_MAP2_KEY_INTERNAL *FIO_NAME(FIO_MAP2_NAME, node2val_ptr)(
    FIO_NAME(FIO_MAP2_NAME, node_s) * node) {
  return FIO_NAME(FIO_MAP2_NAME, node2key_ptr)(node);
}
#endif

/** Gets a value from the map, if exists. */
FIO_IFUNC FIO_MAP2_GET_T FIO_NAME(FIO_MAP2_NAME, get)(FIO_MAP2_PTR map,
#if !defined(FIO_MAP2_HASH_FN)
                                                      uint64_t hash,
#endif
                                                      FIO_MAP2_KEY key) {
  return FIO_NAME(FIO_MAP2_NAME,
                  node2val)(FIO_NAME(FIO_MAP2_NAME, get_ptr)(map,
#if !defined(FIO_MAP2_HASH_FN)
                                                             hash,
#endif
                                                             key));
}

/** Sets a value in the map, hash maps will overwrite existing data if any. */
FIO_IFUNC FIO_MAP2_GET_T FIO_NAME(FIO_MAP2_NAME,
                                  set)(FIO_MAP2_PTR map,
#if !defined(FIO_MAP2_HASH_FN)
                                       uint64_t hash,
#endif
#ifdef FIO_MAP2_VALUE
                                       FIO_MAP2_KEY key,
                                       FIO_MAP2_VALUE obj,
                                       FIO_MAP2_VALUE_INTERNAL *old
#else
                                       FIO_MAP2_KEY key
#endif
) {
  return FIO_NAME(FIO_MAP2_NAME,
                  node2val)(FIO_NAME(FIO_MAP2_NAME, set_ptr)(map,
#if !defined(FIO_MAP2_HASH_FN)
                                                             hash,
#endif
                                                             key
#ifdef FIO_MAP2_VALUE
                                                             ,
                                                             obj,
                                                             old,
                                                             1
#endif
                                                             ));
}

/** Sets a value in the map if not set previously. */
FIO_IFUNC FIO_MAP2_GET_T FIO_NAME(FIO_MAP2_NAME,
                                  set_if_missing)(FIO_MAP2_PTR map,
#if !defined(FIO_MAP2_HASH_FN)
                                                  uint64_t hash,
#endif
                                                  FIO_MAP2_KEY key
#ifdef FIO_MAP2_VALUE
                                                  ,
                                                  FIO_MAP2_VALUE obj
#endif
) {
  return FIO_NAME(FIO_MAP2_NAME,
                  node2val)(FIO_NAME(FIO_MAP2_NAME, set_ptr)(map,
#if !defined(FIO_MAP2_HASH_FN)
                                                             hash,
#endif
                                                             key
#ifdef FIO_MAP2_VALUE
                                                             ,
                                                             obj,
                                                             NULL,
                                                             0
#endif
                                                             ));
}

/** Returns a pointer to the node object in the internal map. */
FIO_IFUNC FIO_NAME(FIO_MAP2_NAME, node_s) *
    FIO_NAME(FIO_MAP2_NAME,
             iterator2node)(FIO_MAP2_PTR map,
                            FIO_NAME(FIO_MAP2_NAME, iterator_s) * iterator) {
  FIO_NAME(FIO_MAP2_NAME, node_s) *node = NULL;
  if (!iterator || !iterator->private_.map_validator)
    return node;
  FIO_PTR_TAG_VALID_OR_RETURN(map, node);
  FIO_NAME(FIO_MAP2_NAME, s) *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP2_T, map);
  node = o->map + iterator->private_.index;
  return node;
}

/* *****************************************************************************
Map Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

FIO_LEAK_COUNTER_DEF(FIO_NAME(FIO_MAP2_NAME, s))
FIO_LEAK_COUNTER_DEF(FIO_NAME(FIO_MAP2_NAME, destroy))
/* *****************************************************************************
Constructors
***************************************************************************** */

/* do we have a constructor? */
#ifndef FIO_REF_CONSTRUCTOR_ONLY
/* Allocates a new object on the heap and initializes it's memory. */
FIO_IFUNC FIO_MAP2_PTR FIO_NAME(FIO_MAP2_NAME, new)(void) {
  FIO_NAME(FIO_MAP2_NAME, s) *o =
      (FIO_NAME(FIO_MAP2_NAME, s) *)FIO_MEM_REALLOC_(NULL, 0, sizeof(*o), 0);
  if (!o)
    return (FIO_MAP2_PTR)NULL;
  FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(FIO_MAP2_NAME, s));
  *o = (FIO_NAME(FIO_MAP2_NAME, s))FIO_MAP2_INIT;
  return (FIO_MAP2_PTR)FIO_PTR_TAG(o);
}
/* Frees any internal data AND the object's container! */
FIO_IFUNC void FIO_NAME(FIO_MAP2_NAME, free)(FIO_MAP2_PTR map) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(map);
  FIO_NAME(FIO_MAP2_NAME, destroy)(map);
  FIO_NAME(FIO_MAP2_NAME, s) *o =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_MAP2_NAME, s), map);
  FIO_LEAK_COUNTER_ON_FREE(FIO_NAME(FIO_MAP2_NAME, s));
  FIO_MEM_FREE_(o, sizeof(*o));
}
#endif /* FIO_REF_CONSTRUCTOR_ONLY */

/* *****************************************************************************
Internal Helpers
***************************************************************************** */

#ifndef FIO_MAP2_ATTACK_LIMIT
#define FIO_MAP2_ATTACK_LIMIT 16
#endif
#ifndef FIO_MAP2_CUCKOO_STEPS
/* Prime numbers are better */
#define FIO_MAP2_CUCKOO_STEPS (0x43F82D0BUL) /* a big high prime */
#endif
#ifndef FIO_MAP2_SEEK_LIMIT
#define FIO_MAP2_SEEK_LIMIT 13U
#endif
#ifndef FIO_MAP2_ARRAY_LOG_LIMIT
#define FIO_MAP2_ARRAY_LOG_LIMIT 3
#endif
#ifndef FIO_MAP2_CAPA
#define FIO_MAP2_CAPA(bits) ((size_t)1ULL << (bits))
#endif

#ifndef FIO_MAP2_IS_SPARSE
#define FIO_MAP2_IS_SPARSE(map)                                                \
  (o->bits > FIO_MAP2_ARRAY_LOG_LIMIT && ((capa >> 2) > o->count))
#endif

/* The number of objects in the map capacity. */
FIO_IFUNC uint8_t *FIO_NAME(FIO_MAP2_NAME,
                            __imap)(FIO_NAME(FIO_MAP2_NAME, s) * o) {
  // FIO_ASSERT(o && o->map, "shouldn't have been called.");
  return (uint8_t *)(o->map + FIO_MAP2_CAPA(o->bits));
}

FIO_IFUNC uint64_t FIO_NAME(FIO_MAP2_NAME,
                            __byte_hash)(FIO_NAME(FIO_MAP2_NAME, s) * o,
                                         uint64_t hash) {
  hash = (hash >> o->bits);
  hash &= 0xFF;
  hash += !(hash);
  hash -= (hash == 255);
  return hash;
}

FIO_IFUNC uint64_t FIO_NAME(FIO_MAP2_NAME,
                            __is_eq_hash)(FIO_NAME(FIO_MAP2_NAME, node_s) * o,
                                          uint64_t hash) {
#if FIO_MAP2_RECALC_HASH && defined(FIO_MAP2_HASH_FN)
  uint64_t khash = FIO_MAP2_HASH_FN(FIO_MAP2_KEY_FROM_INTERNAL(o->key));
  khash += !khash;
#else
  const uint64_t khash = o->hash;
#endif
  return (khash == hash);
}

FIO_SFUNC uint32_t FIO_NAME(FIO_MAP2_NAME,
                            __index)(FIO_NAME(FIO_MAP2_NAME, s) * o,
                                     FIO_MAP2_KEY key,
                                     uint64_t hash) {
  uint32_t r = (uint32_t)-1;
  if (!o->map)
    return r;
  static int guard_print = 0;
  uint8_t *imap = FIO_NAME(FIO_MAP2_NAME, __imap)(o);
  size_t capa = FIO_MAP2_CAPA(o->bits);
  size_t bhash = FIO_NAME(FIO_MAP2_NAME, __byte_hash)(o, hash);
  size_t guard = FIO_MAP2_ATTACK_LIMIT + 1;
  if (o->bits > FIO_MAP2_ARRAY_LOG_LIMIT) { /* treat as map */
    uint64_t bhash64 = bhash | (bhash << 8);
    bhash64 |= bhash64 << 16;
    bhash64 |= bhash64 << 32;
    bhash64 = ~bhash64;
    const uintptr_t pos_mask = capa - 1;
    const uint_fast8_t offsets[8] = {0, 3, 8, 17, 28, 41, 58, 60};
    for (uintptr_t pos = hash, c = 0; c < FIO_MAP2_SEEK_LIMIT;
         (pos += FIO_MAP2_CUCKOO_STEPS), ++c) {
      uint64_t comb = imap[(pos + offsets[0]) & pos_mask];
      comb |= ((uint64_t)imap[(pos + offsets[1]) & pos_mask]) << (1 * 8);
      comb |= ((uint64_t)imap[(pos + offsets[2]) & pos_mask]) << (2 * 8);
      comb |= ((uint64_t)imap[(pos + offsets[3]) & pos_mask]) << (3 * 8);
      comb |= ((uint64_t)imap[(pos + offsets[4]) & pos_mask]) << (4 * 8);
      comb |= ((uint64_t)imap[(pos + offsets[5]) & pos_mask]) << (5 * 8);
      comb |= ((uint64_t)imap[(pos + offsets[6]) & pos_mask]) << (6 * 8);
      comb |= ((uint64_t)imap[(pos + offsets[7]) & pos_mask]) << (7 * 8);
      const uint64_t has_possible_match =
          (((comb ^ bhash64) & 0x7F7F7F7F7F7F7F7FULL) + 0x0101010101010101ULL) &
          0x8080808080808080ULL;
      if (has_possible_match) {
        /* there was a 7 bit match in one of the bytes in this 8 byte group */
        for (size_t i = 0; i < 8; ++i) {
          const uint32_t tmp = (uint32_t)((pos + offsets[i]) & pos_mask);
          if (imap[tmp] != bhash)
            continue;
          /* test key and hash equality */
          if (FIO_NAME(FIO_MAP2_NAME, __is_eq_hash)(o->map + tmp, hash)) {
            if (FIO_MAP2_KEY_CMP(o->map[tmp].key, key)) {
              guard_print = 0;
              return (r = tmp);
            }
            if (!(--guard)) {
              if (!guard_print)
                FIO_LOG_SECURITY("hash map " FIO_MACRO2STR(
                    FIO_NAME(FIO_MAP2_NAME, s)) " under attack?");
              guard_print = 1;
              return (r = tmp);
            }
          }
        }
      }
      const uint64_t has_possible_full_byte =
          (((comb)&0x7F7F7F7F7F7F7F7FULL) + 0x0101010101010101ULL) &
          0x8080808080808080ULL;
      const uint64_t has_possible_empty_byte =
          (((~comb) & 0x7F7F7F7F7F7F7F7FULL) + 0x0101010101010101ULL) &
          0x8080808080808080ULL;
      if (!(has_possible_full_byte | has_possible_empty_byte))
        continue;
      /* there was a 7 bit match for a possible free space in this group */
      for (int i = 0; i < 8; ++i) {
        const uint32_t tmp = (uint32_t)((pos + offsets[i]) & pos_mask);
        if (!imap[tmp])
          return (r = tmp); /* empty slot always ends search */
        if (r > pos_mask && imap[tmp] == 255)
          r = tmp; /* mark hole to be filled */
      }
    }
    return r;
  } /* treat as array */
  for (size_t i = 0; i < capa; ++i) {
    if (!imap[i])
      return (r = (uint32_t)i);
    if (imap[i] == bhash) {
      /* test key and hash equality */
      if (FIO_NAME(FIO_MAP2_NAME, __is_eq_hash)(o->map + i, hash)) {
        if (FIO_MAP2_KEY_CMP(o->map[i].key, key)) {
          guard_print = 0;
          return (r = (uint32_t)i);
        }
        if (!(--guard)) {
          if (!guard_print)
            FIO_LOG_SECURITY("hash map " FIO_MACRO2STR(
                FIO_NAME(FIO_MAP2_NAME, s)) " under attack?");
          guard_print = 1;
          return (r = (uint32_t)i);
        }
      }
    }
    if (imap[i] == 0xFF)
      r = (uint32_t)i; /* a free spot is available*/
  }
  return r;
}
/* deallocate the map's memory. */
FIO_SFUNC void FIO_NAME(FIO_MAP2_NAME,
                        __dealloc_map)(FIO_NAME(FIO_MAP2_NAME, s) * o) {
  if (!o->map)
    return;
  const size_t capa = FIO_MAP2_CAPA(o->bits);
  FIO_LEAK_COUNTER_ON_FREE(FIO_NAME(FIO_MAP2_NAME, destroy));
  FIO_MEM_FREE_(o->map, (capa * sizeof(*o->map)) + capa);
  (void)capa;
}

/** duplicates an objects between two maps. */
FIO_IFUNC int FIO_NAME(FIO_MAP2_NAME,
                       __copy_obj)(FIO_NAME(FIO_MAP2_NAME, s) * dest,
                                   FIO_NAME(FIO_MAP2_NAME, node_s) * o,
                                   uint32_t internal) {
  FIO_MAP2_KEY key = FIO_MAP2_KEY_FROM_INTERNAL(o->key);
  uint8_t *imap = FIO_NAME(FIO_MAP2_NAME, __imap)(dest);
#if FIO_MAP2_RECALC_HASH
  uint64_t ohash = FIO_MAP2_HASH_FN(key);
  ohash += !ohash;
#else
  const uint64_t ohash = o->hash;
#endif
  uint32_t i = FIO_NAME(FIO_MAP2_NAME, __index)(dest, key, ohash);
  if (i == (uint32_t)-1 || (imap[i] + 1) > 1)
    return -1;
  if (internal) {
    dest->map[i] = *o;
    imap[i] = FIO_NAME(FIO_MAP2_NAME, __byte_hash)(dest, ohash);
#if FIO_MAP2_ORDERED
    if (dest->count) { /* update ordering */
      FIO_INDEXED_LIST_PUSH(dest->map, node, dest->head, i);
    } else { /* set first order */
      dest->map[i].node.next = dest->map[i].node.prev = i;
      dest->head = i;
    }
#endif
    ++dest->count;
    return 0;
  }
  imap[i] = FIO_NAME(FIO_MAP2_NAME, __byte_hash)(dest, ohash);
  FIO_MAP2_KEY_COPY(dest->map[i].key, FIO_MAP2_KEY_FROM_INTERNAL(o->key));
  FIO_MAP2_VALUE_COPY(dest->map[i].value,
                      FIO_MAP2_VALUE_FROM_INTERNAL(o->value));
#if !FIO_MAP2_RECALC_HASH
  dest->map[i].hash = o->hash;
#endif
#if FIO_MAP2_ORDERED
  if (dest->count) { /* update ordering */
    FIO_INDEXED_LIST_PUSH(dest->map, node, dest->head, i);
  } else { /* set first order */
    dest->map[i].node.next = dest->map[i].node.prev = i;
    dest->head = i;
  }
#endif
  ++dest->count;
  return 0;
}

/** duplicates a map to a new copy (usually for rehashing / reserving space). */
FIO_IFUNC FIO_NAME(FIO_MAP2_NAME, s)
    FIO_NAME(FIO_MAP2_NAME, __duplicate)(FIO_NAME(FIO_MAP2_NAME, s) * o,
                                         uint32_t bits,
                                         uint32_t internal) {
  FIO_NAME(FIO_MAP2_NAME, s) cpy = {0};
  if (bits > FIO_MAP2_CAPA_BITS_LIMIT)
    return cpy;
  size_t capa = FIO_MAP2_CAPA(bits);
  cpy.map = (FIO_NAME(FIO_MAP2_NAME, node_s) *)
      FIO_MEM_REALLOC_(NULL, 0, ((capa * sizeof(*cpy.map)) + capa), 0);
  if (!cpy.map)
    return cpy;
  FIO_LEAK_COUNTER_ON_ALLOC(FIO_NAME(FIO_MAP2_NAME, destroy));
  if (!FIO_MEM_REALLOC_IS_SAFE_) {
    /* set only the imap, the rest can be junk data */
    FIO_MEMSET((cpy.map + capa), 0, capa);
  }
  cpy.bits = bits;
  if (!o->count)
    return cpy;
#if FIO_MAP2_ORDERED
  /* copy objects in order */
  FIO_INDEXED_LIST_EACH(o->map, node, o->head, i) {
    if (FIO_NAME(FIO_MAP2_NAME, __copy_obj)(&cpy, o->map + i, internal))
      goto error;
  }
#else
  uint8_t *imap = FIO_NAME(FIO_MAP2_NAME, __imap)(o);
  capa = FIO_MAP2_CAPA(o->bits);
  if (FIO_MAP2_IS_SPARSE(o)) { /* sparsely populated */
    for (size_t i = 0; i < capa; i += 8) {
      uint64_t comb = *((uint64_t *)(imap + i));
      if (!comb || comb == 0xFFFFFFFFFFFFFFFFULL)
        continue;
      for (size_t j = 0; j < 8; ++j) {
        const size_t tmp = j + i;
        if (!imap[tmp] || imap[tmp] == 0xFF)
          continue;
        if (FIO_NAME(FIO_MAP2_NAME, __copy_obj)(&cpy, o->map + tmp, internal))
          goto error;
      }
    }
    return cpy;
  } /* review as array */
  for (size_t i = 0; i < capa; ++i) {
    if (!imap[i] || imap[i] == 0xFF)
      continue;
    if (FIO_NAME(FIO_MAP2_NAME, __copy_obj)(&cpy, o->map + i, internal))
      goto error;
  }
#endif
  return cpy;
error:
  FIO_NAME(FIO_MAP2_NAME, __dealloc_map)(&cpy);
  cpy = (FIO_NAME(FIO_MAP2_NAME, s)){0};
  return cpy;
}

/* destroys all objects in the map, without(!) resetting the `imap`. */
FIO_SFUNC void FIO_NAME(FIO_MAP2_NAME,
                        __destroy_objects)(FIO_NAME(FIO_MAP2_NAME, s) * o) {
#if FIO_MAP2_VALUE_DESTROY_SIMPLE && FIO_MAP2_KEY_DESTROY_SIMPLE
  (void)o;
  return;
#else
  uint8_t *imap = FIO_NAME(FIO_MAP2_NAME, __imap)(o);
  const size_t capa = FIO_MAP2_CAPA(o->bits);
  if (FIO_MAP2_IS_SPARSE(o)) {
    for (size_t i = 0; i < capa; i += 8) {
      uint64_t comb = *((uint64_t *)(imap + i));
      if (!comb || comb == 0xFFFFFFFFFFFFFFFFULL)
        continue;
      for (size_t j = i; j < i + 8; ++j) {
        FIO_MAP2_KEY_DESTROY(o->map[j].key);
        FIO_MAP2_VALUE_DESTROY(o->map[j].value);
      }
    }
  } else { /* review as array */
    for (size_t i = 0; i < capa; ++i) {
      if (!imap[i] || imap[i] == 0xFF)
        continue;
      FIO_MAP2_KEY_DESTROY(o->map[i].key);
      FIO_MAP2_VALUE_DESTROY(o->map[i].value);
    }
  }
#endif /* FIO_MAP2_VALUE_DESTROY_SIMPLE */
}

/* *****************************************************************************
API implementation
***************************************************************************** */

/** Reserves at minimum the capacity requested. */
SFUNC void FIO_NAME(FIO_MAP2_NAME, reserve)(FIO_MAP2_PTR map, size_t capa) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(map);
  FIO_NAME(FIO_MAP2_NAME, s) *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP2_T, map);
  capa += o->count;
  if (FIO_MAP2_CAPA(o->bits) >= capa || (capa >> FIO_MAP2_CAPA_BITS_LIMIT))
    return;
  uint_fast8_t bits = o->bits + 1;
  while (FIO_MAP2_CAPA(bits) < capa)
    ++bits;
  FIO_NAME(FIO_MAP2_NAME, s)
  cpy = FIO_NAME(FIO_MAP2_NAME, __duplicate)(o, bits, 1);
  if (!cpy.map)
    return;
  FIO_NAME(FIO_MAP2_NAME, __dealloc_map)(o);
  *o = cpy;
}

/* Removes all objects from the map, without releasing the map's resources. */
SFUNC void FIO_NAME(FIO_MAP2_NAME, clear)(FIO_MAP2_PTR map) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(map);
  FIO_NAME(FIO_MAP2_NAME, s) *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP2_T, map);
  if (!o->map || !o->count)
    return;
  FIO_NAME(FIO_MAP2_NAME, __destroy_objects)(o);
  uint8_t *imap = FIO_NAME(FIO_MAP2_NAME, __imap)(o);
  const size_t capa = FIO_MAP2_CAPA(o->bits);
  FIO_MEMSET(imap, 0, capa);
  o->count = 0;
#if FIO_MAP2_ORDERED
  o->head = 0;
#endif
}

/** Attempts to minimize memory use. */
SFUNC void FIO_NAME(FIO_MAP2_NAME, compact)(FIO_MAP2_PTR map) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(map);
  FIO_NAME(FIO_MAP2_NAME, s) *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP2_T, map);
  if (!o->map || !o->count)
    return;
  uint32_t bits = o->bits;
  while (FIO_MAP2_CAPA(bits >> 1) > o->count)
    bits >>= 1;
  ++bits;
  for (;;) {
    if (bits >= o->bits)
      return;
    FIO_NAME(FIO_MAP2_NAME, s)
    cpy = FIO_NAME(FIO_MAP2_NAME, __duplicate)(o, bits, 1);
    if (!cpy.map) {
      ++bits;
      continue;
    }
    FIO_NAME(FIO_MAP2_NAME, __dealloc_map)(o);
    *o = cpy;
    return;
  }
}

/* Frees any internal data AND the object's container! */
SFUNC void FIO_NAME(FIO_MAP2_NAME, destroy)(FIO_MAP2_PTR map) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(map);
  FIO_NAME(FIO_MAP2_NAME, s) *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP2_T, map);
  if (o->map && o->count)
    FIO_NAME(FIO_MAP2_NAME, __destroy_objects)(o);
  FIO_NAME(FIO_MAP2_NAME, __dealloc_map)(o);
  *o = (FIO_NAME(FIO_MAP2_NAME, s))FIO_MAP2_INIT;
  return;
}

/** Evicts elements least recently used (LRU), FIFO or undefined. */
SFUNC void FIO_NAME(FIO_MAP2_NAME, evict)(FIO_MAP2_PTR map,
                                          size_t number_of_elements) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(map);
  FIO_NAME(FIO_MAP2_NAME, s) *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP2_T, map);
  if (!o->count)
    return;
  if (number_of_elements >= o->count) {
    FIO_NAME(FIO_MAP2_NAME, clear)(map);
    return;
  }
  uint8_t *imap = FIO_NAME(FIO_MAP2_NAME, __imap)(o);
#ifdef FIO_MAP2_LRU /* remove last X elements from the list */
  FIO_INDEXED_LIST_EACH_REVERSED(o->map, node, o->head, i) {
    FIO_MAP2_KEY_DESTROY(o->map[i].key);
    FIO_MAP2_VALUE_DESTROY(o->map[i].value);
    FIO_INDEXED_LIST_REMOVE(o->map, node, i);
    imap[i] = 0xFF;
    --o->count;
    if (!(--number_of_elements))
      return;
  }
#elif FIO_MAP2_ORDERED /* remove first X elements from the list */
  FIO_INDEXED_LIST_EACH(o->map, node, o->head, i) {
    FIO_MAP2_KEY_DESTROY(o->map[i].key);
    FIO_MAP2_VALUE_DESTROY(o->map[i].value);
    FIO_INDEXED_LIST_REMOVE(o->map, node, i);
    imap[i] = 0xFF;
    --o->count;
    if (!(--number_of_elements)) {
      o->head = o->map[i].node.next;
      return;
    }
  }
#else                  /* remove whatever... */
  if (o->bits > FIO_MAP2_ARRAY_LOG_LIMIT) {
    /* map is scattered */
    uint32_t pos_mask = (uint32_t)(FIO_MAP2_CAPA(o->bits) - 1);
    uint32_t pos = *(uint32_t *)o->map;
    for (int i = 0; i < 3; ++i) {
      struct timespec t = {0};
      clock_gettime(CLOCK_MONOTONIC, &t);
      pos *= t.tv_nsec ^ t.tv_sec ^ (uintptr_t)imap;
      pos ^= pos >> 7;
    }
    for (;;) { /* a bit of non-random randomness... */
      uint32_t offset = ((pos << 3)) & pos_mask;
      for (uint_fast8_t i = 0; i < 8; ++i) { /* ordering bias? vs performance */
        const uint32_t tmp = offset + i;
        if (!imap[tmp] || imap[tmp] == 0xFF)
          continue;
        FIO_MAP2_KEY_DESTROY(o->map[tmp].key);
        FIO_MAP2_VALUE_DESTROY(o->map[tmp].value);
        imap[tmp] = 0xFF;
        --o->count;
        if (!(--number_of_elements))
          return;
      }
      pos += FIO_MAP2_CUCKOO_STEPS;
    }
  }
  /* map is a simple array */
  while (number_of_elements--) {
    FIO_MAP2_KEY_DESTROY(o->map[number_of_elements].key);
    FIO_MAP2_VALUE_DESTROY(o->map[number_of_elements].value);
    imap[number_of_elements] = 0xFF;
  }
#endif                 /* FIO_MAP2_LRU / FIO_MAP2_ORDERED */
}

/* *****************************************************************************
The Map set/get functions
***************************************************************************** */

/**
 * The core get function. This function returns NULL if item is missing.
 *
 * NOTE: the function returns the internal representation of objects.
 */
SFUNC FIO_NAME(FIO_MAP2_NAME, node_s) *
    FIO_NAME(FIO_MAP2_NAME, get_ptr)(FIO_MAP2_PTR map,
#if !defined(FIO_MAP2_HASH_FN)
                                     uint64_t hash,
#endif
                                     FIO_MAP2_KEY key) {
  FIO_NAME(FIO_MAP2_NAME, node_s) *r = NULL;
  FIO_PTR_TAG_VALID_OR_RETURN(map, r);
  FIO_NAME(FIO_MAP2_NAME, s) *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP2_T, map);
  if (!o->count)
    return r;
#if defined(FIO_MAP2_HASH_FN)
  uint64_t hash = FIO_MAP2_HASH_FN(key);
#endif
  hash += !hash;
  uint32_t pos = FIO_NAME(FIO_MAP2_NAME, __index)(o, key, hash);
  uint8_t *imap = FIO_NAME(FIO_MAP2_NAME, __imap)(o);
  if (pos == (uint32_t)-1 || !imap[pos] || imap[pos] == 0xFF)
    return r;
#ifdef FIO_MAP2_LRU
  if (o->head != pos) {
    FIO_INDEXED_LIST_REMOVE(o->map, node, pos);
    FIO_INDEXED_LIST_PUSH(o->map, node, o->head, pos);
    o->head = pos;
  }
#endif
  r = o->map + pos;
  return r;
}

/** sets / removes an object in the map, returning a pointer to the map data. */
SFUNC FIO_NAME(FIO_MAP2_NAME, node_s) *
    FIO_NAME(FIO_MAP2_NAME, set_ptr)(FIO_MAP2_PTR map,
#if !defined(FIO_MAP2_HASH_FN)
                                     uint64_t hash,
#endif
#ifdef FIO_MAP2_VALUE
                                     FIO_MAP2_KEY key,
                                     FIO_MAP2_VALUE val,
                                     FIO_MAP2_VALUE_INTERNAL *old,
                                     int overwrite
#else
                                     FIO_MAP2_KEY key
#endif
    ) {
  FIO_NAME(FIO_MAP2_NAME, node_s) *r = NULL;
#ifdef FIO_MAP2_VALUE
  if (old)
    *old = (FIO_MAP2_VALUE_INTERNAL){0};
#endif
  FIO_NAME(FIO_MAP2_NAME, s) * o;
#if defined(FIO_MAP2_HASH_FN)
  uint64_t hash;
#endif
  uint32_t pos;
  uint8_t *imap = NULL;

  FIO_PTR_TAG_VALID_OR_GOTO(map, relinquish_attempt);
  o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP2_T, map);
#if defined(FIO_MAP2_HASH_FN)
  hash = FIO_MAP2_HASH_FN(key);
#endif
  hash += !hash;  /* hash is never zero */
  if (!o->bits) { /* minimal space is 8 objects... */
    *o = FIO_NAME(FIO_MAP2_NAME, __duplicate)(o, 3, 1);
  }
  /* find the object's (potential) position in the array */
  for (int i = 0;;) {
    pos = FIO_NAME(FIO_MAP2_NAME, __index)(o, key, hash);
    if (pos != (uint32_t)-1)
      break;
    if (i == 2)
      goto internal_error;
    FIO_NAME(FIO_MAP2_NAME, s)
    tmp = FIO_NAME(FIO_MAP2_NAME, __duplicate)(o, o->bits + (++i), 1);
    if (!tmp.map) /* no memory? something bad? */
      goto internal_error;
    FIO_NAME(FIO_MAP2_NAME, __dealloc_map)(o);
    *o = tmp;
  }
  /* imap may have been reallocated, collect info now. */
  imap = FIO_NAME(FIO_MAP2_NAME, __imap)(o);
  /* set return value */
  r = o->map + pos;

  if (!imap[pos] || imap[pos] == 0xFF) {
    /* insert new object */
    imap[pos] = FIO_NAME(FIO_MAP2_NAME, __byte_hash)(o, hash);
#if !FIO_MAP2_RECALC_HASH
    r->hash = hash;
#endif
    FIO_MAP2_KEY_COPY(r->key, key);
    FIO_MAP2_VALUE_COPY(r->value, val);
#if FIO_MAP2_ORDERED
    if (o->count) { /* update ordering */
      FIO_INDEXED_LIST_PUSH(o->map, node, o->head, pos);
#ifdef FIO_MAP2_LRU
      o->head = pos;                  /* update LRU head */
      if (FIO_MAP2_LRU == o->count) { /* limit reached - evict 1 LRU element */
        uint32_t to_evict = o->map[pos].node.prev;
        FIO_MAP2_KEY_DESTROY(o->map[to_evict].key);
        FIO_MAP2_VALUE_DESTROY(o->map[to_evict].value);
        FIO_INDEXED_LIST_REMOVE(o->map, node, to_evict);
        imap[to_evict] = 0xFF;
        --o->count;
      }
#endif       /* FIO_MAP2_LRU */
    } else { /* set first order */
      o->map[pos].node.next = o->map[pos].node.prev = pos;
      o->head = pos;
    }
#endif /* FIO_MAP2_ORDERED */
    ++o->count;
    return r;
  }

#ifdef FIO_MAP2_LRU
  /* update ordering (even if not overwriting) */
  if (o->head != pos) {
    FIO_INDEXED_LIST_REMOVE(o->map, node, pos);
    FIO_INDEXED_LIST_PUSH(o->map, node, o->head, pos);
    o->head = pos;
  }
#endif

#ifdef FIO_MAP2_VALUE
  if (overwrite) {
    /* overwrite existing object (only relevant for hash maps) */
    FIO_MAP2_KEY_DISCARD(key);
    if (!old) {
      FIO_MAP2_VALUE_DESTROY(o->map[pos].value);
      FIO_MAP2_VALUE_COPY(o->map[pos].value, val);
      return r;
    }
    *old = o->map[pos].value;
    o->map[pos].value = (FIO_MAP2_VALUE_INTERNAL){0};
    FIO_MAP2_VALUE_COPY(o->map[pos].value, val);
    return r;
  }
#endif
relinquish_attempt:
  /* discard attempt */
  FIO_MAP2_KEY_DISCARD(key);
  FIO_MAP2_VALUE_DISCARD(val);
  return r;
internal_error:
  FIO_MAP2_KEY_DISCARD(key);
  FIO_MAP2_VALUE_DISCARD(val);
  FIO_LOG_ERROR("unknown error occurred trying to add an entry to the map");
  FIO_ASSERT_DEBUG(0, "these errors shouldn't happen");
  return r;
}

/* *****************************************************************************
The Map remove function
***************************************************************************** */

/** Removes an object in the map, returning a pointer to the map data. */
SFUNC int FIO_NAME(FIO_MAP2_NAME, remove)(FIO_MAP2_PTR map,
#if !defined(FIO_MAP2_HASH_FN)
                                          uint64_t hash,
#endif
                                          FIO_MAP2_KEY key,
#ifdef FIO_MAP2_VALUE
                                          FIO_MAP2_VALUE_INTERNAL *old
#else
                                          FIO_MAP2_KEY_INTERNAL *old
#endif
) {
#ifdef FIO_MAP2_VALUE
  if (old)
    *old = (FIO_MAP2_VALUE_INTERNAL){0};
#else
  if (old)
    *old = (FIO_MAP2_KEY_INTERNAL){0};
#endif

  FIO_PTR_TAG_VALID_OR_RETURN(map, -1);
  FIO_NAME(FIO_MAP2_NAME, s) *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP2_T, map);
#if defined(FIO_MAP2_HASH_FN)
  uint64_t hash = FIO_MAP2_HASH_FN(key);
#endif
  hash += !hash; /* hash is never zero */
  uint32_t pos = FIO_NAME(FIO_MAP2_NAME, __index)(o, key, hash);
  uint8_t *imap = FIO_NAME(FIO_MAP2_NAME, __imap)(o);

  if (pos == (uint32_t)-1 || !imap[pos] || imap[pos] == 0xFF)
    return -1;

  imap[pos] = 0xFF; /* mark hole and update count */
  --o->count;

#if FIO_MAP2_ORDERED
  /* update ordering */
  if (o->head == pos)
    o->head = o->map[pos].node.next;
  if (o->head == pos)
    o->head = 0;
  else {
    FIO_INDEXED_LIST_REMOVE(o->map, node, pos);
  }
#endif

/* destroy data, copy to `old` pointer if necessary. */
#ifdef FIO_MAP2_VALUE
  FIO_MAP2_KEY_DESTROY(o->map[pos].key);
  o->map[pos].key = (FIO_MAP2_KEY_INTERNAL){0};
  if (!old) {
    FIO_MAP2_VALUE_DESTROY(o->map[pos].value);
  } else {
    *old = o->map[pos].value;
  }
  o->map[pos].value = (FIO_MAP2_VALUE_INTERNAL){0};
#else
  if (!old) {
    FIO_MAP2_KEY_DESTROY(o->map[pos].key);
  } else {
    *old = o->map[pos].key;
  }
  o->map[pos].key = (FIO_MAP2_KEY_INTERNAL){0};
#endif
#if !FIO_MAP2_RECALC_HASH && defined(DEBUG)
  o->map[pos].hash = 0; /* not necessary, but ... good for debugging? */
#endif
  return 0;
}

/* *****************************************************************************
Map Iteration
***************************************************************************** */

/** Returns the next iterator position after `current_pos`, first if `NULL`. */
SFUNC FIO_NAME(FIO_MAP2_NAME, iterator_s)
    FIO_NAME(FIO_MAP2_NAME,
             get_next)(FIO_MAP2_PTR map,
                       FIO_NAME(FIO_MAP2_NAME, iterator_s) * current_pos) {
  FIO_NAME(FIO_MAP2_NAME, iterator_s) r = {.private_ = {.pos = 0}};
  FIO_PTR_TAG_VALID_OR_RETURN(map, r);
  FIO_NAME(FIO_MAP2_NAME, s) *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP2_T, map);
  if (!o->count)
    return r;
  uint8_t *imap = FIO_NAME(FIO_MAP2_NAME, __imap)(o);
  size_t capa = FIO_MAP2_CAPA(o->bits);
  size_t pos_counter = 0;
  if (!current_pos || !current_pos->private_.map_validator) {
    goto find_pos;
  }
  if (current_pos->private_.pos + 1 == o->count)
    return r;
  r.private_.pos = current_pos->private_.pos + 1;
  if (current_pos->private_.map_validator != (uintptr_t)o) {
    goto refind_pos;
  }
  r.private_.index = current_pos->private_.index;

#if !FIO_MAP2_RECALC_HASH
#define FIO_MAP2___EACH_COPY_HASH() r.hash = o->map[r.private_.index].hash
#else
#define FIO_MAP2___EACH_COPY_HASH()
#endif

#ifdef FIO_MAP2_VALUE
#define FIO_MAP2___EACH_COPY_DATA()                                            \
  FIO_MAP2___EACH_COPY_HASH();                                                 \
  r.private_.map_validator = (uintptr_t)o;                                     \
  r.node = o->map + r.private_.index;                                          \
  r.key = FIO_MAP2_KEY_FROM_INTERNAL(o->map[r.private_.index].key);            \
  r.value = FIO_MAP2_VALUE_FROM_INTERNAL(o->map[r.private_.index].value)
#else
#define FIO_MAP2___EACH_COPY_DATA()                                            \
  FIO_MAP2___EACH_COPY_HASH();                                                 \
  r.private_.map_validator = (uintptr_t)o;                                     \
  r.node = o->map + r.private_.index;                                          \
  r.key = FIO_MAP2_KEY_FROM_INTERNAL(o->map[r.private_.index].key)
#endif

/* start seeking at the position inherited from current_pos */
#if FIO_MAP2_ORDERED
  (void)imap; /* unused in ordered maps */
  (void)capa; /* unused in ordered maps */
  r.private_.index = o->map[r.private_.index].node.next;
  if (r.private_.index == o->head)
    goto not_found;
  FIO_MAP2___EACH_COPY_DATA();
  return r;
#else
  if (FIO_MAP2_IS_SPARSE(o)) { /* sparsely populated */
    while ((++r.private_.index) & 7) {
      if (!imap[r.private_.index] || imap[r.private_.index] == 0xFF)
        continue;
      FIO_MAP2___EACH_COPY_DATA();
      return r;
    }
    while (r.private_.index < capa) {
      uint64_t simd = *(uint64_t *)(imap + r.private_.index);
      if (!simd || simd == 0xFFFFFFFFFFFFFFFFULL) {
        r.private_.index += 8;
        continue;
      }
      for (int i = 0; i < 8; (++i), (++r.private_.index)) {
        if (!imap[r.private_.index] || imap[r.private_.index] == 0xFF)
          continue;
        FIO_MAP2___EACH_COPY_DATA();
        return r;
      }
    }
    goto not_found;
  }
  /* review as array */
  while ((++r.private_.index) < capa) {
    if (!imap[r.private_.index] || imap[r.private_.index] == 0xFF)
      continue;
    FIO_MAP2___EACH_COPY_DATA();
    return r;
  }
  goto not_found;
#endif /* FIO_MAP2_ORDERED */

refind_pos:
  if (current_pos->private_.index)
    goto not_found;
find_pos:
/* first seek... re-start seeking */
#if FIO_MAP2_ORDERED
  FIO_INDEXED_LIST_EACH(o->map, node, o->head, i) {
    if (pos_counter != r.private_.pos) {
      ++pos_counter;
      continue;
    }
    r.private_.index = (uint32_t)i;
    FIO_MAP2___EACH_COPY_DATA();
    return r;
  }
  goto not_found;
#else
  if (FIO_MAP2_IS_SPARSE(o)) { /* sparsely populated */
    while (r.private_.index < capa) {
      uint64_t simd = *(uint64_t *)(imap + r.private_.index);
      if (!simd || simd == 0xFFFFFFFFFFFFFFFFULL) {
        r.private_.index += 8;
        continue;
      }
      for (int i = 0; i < 8; (++i), (++r.private_.index)) {
        if (!imap[r.private_.index] || imap[r.private_.index] == 0xFF)
          continue;
        if (pos_counter != r.private_.pos) {
          ++pos_counter;
          continue;
        }
        FIO_MAP2___EACH_COPY_DATA();
        return r;
      }
    }
    goto not_found;
  }
  /* review as array */
  while (r.private_.index < capa) {
    if (!imap[r.private_.index] || imap[r.private_.index] == 0xFF) {
      ++r.private_.index;
      continue;
    }
    FIO_MAP2___EACH_COPY_DATA();
    return r;
  }
#endif /* FIO_MAP2_ORDERED */

not_found:
  return (r = (FIO_NAME(FIO_MAP2_NAME, iterator_s)){.private_ = {.pos = 0}});
  FIO_ASSERT_DEBUG(0, "should this happen? ever?");
}

/** Returns the next iterator position after `current_pos`, first if `NULL`. */
SFUNC FIO_NAME(FIO_MAP2_NAME, iterator_s)
    FIO_NAME(FIO_MAP2_NAME,
             get_prev)(FIO_MAP2_PTR map,
                       FIO_NAME(FIO_MAP2_NAME, iterator_s) * current_pos) {
  FIO_NAME(FIO_MAP2_NAME, iterator_s) r = {.private_ = {.pos = 0}};
  FIO_PTR_TAG_VALID_OR_RETURN(map, r);
  FIO_NAME(FIO_MAP2_NAME, s) *o = FIO_PTR_TAG_GET_UNTAGGED(FIO_MAP2_T, map);
  if (!o->count)
    return r;
#if !FIO_MAP2_ORDERED
  uint8_t *imap = FIO_NAME(FIO_MAP2_NAME, __imap)(o);
  size_t capa = FIO_MAP2_CAPA(o->bits);
#endif
  size_t pos_counter = o->count;
  if (!current_pos || !current_pos->private_.map_validator) {
    r.private_.map_validator = (uintptr_t)o;
    r.private_.pos = o->count;
    goto find_pos;
  }
  if (!current_pos->private_.pos)
    return r;
  r.private_.pos = current_pos->private_.pos - 1;
  r.private_.map_validator = (uintptr_t)o;
  if (current_pos->private_.map_validator != (uintptr_t)o) {
    goto refind_pos;
  }
  r.private_.index = current_pos->private_.index;

/* start seeking at the position inherited from current_pos */
#if FIO_MAP2_ORDERED
  if (r.private_.index == o->head)
    goto not_found;
  r.private_.index = o->map[r.private_.index].node.prev;
  FIO_MAP2___EACH_COPY_DATA();
  return r;
#else
  if (FIO_MAP2_IS_SPARSE(o)) { /* sparsely populated */
    while ((--r.private_.index) & 7) {
      if (!imap[r.private_.index] || imap[r.private_.index] == 0xFF)
        continue;
      FIO_MAP2___EACH_COPY_DATA();
      return r;
    }
    while (r.private_.index) {
      uint64_t simd = *(uint64_t *)(imap + (r.private_.index - 8));
      if (!simd || simd == 0xFFFFFFFFFFFFFFFFULL) {
        r.private_.index -= 8;
        continue;
      }
      for (int i = 0; i < 8; ++i) {
        --r.private_.index;
        if (!imap[r.private_.index] || imap[r.private_.index] == 0xFF)
          continue;
        FIO_MAP2___EACH_COPY_DATA();
        return r;
      }
    }
    goto not_found;
  }
  /* review as array */
  while (r.private_.index--) {
    if (!imap[r.private_.index] || imap[r.private_.index] == 0xFF)
      continue;
    FIO_MAP2___EACH_COPY_DATA();
    return r;
  }
  goto not_found;
#endif /* FIO_MAP2_ORDERED */

refind_pos:
  if (current_pos->private_.index)
    goto not_found;
find_pos:
/* first seek... re-start seeking */
#if FIO_MAP2_ORDERED
  FIO_INDEXED_LIST_EACH_REVERSED(o->map, node, o->head, i) {
    if (pos_counter != r.private_.pos) {
      --pos_counter;
      continue;
    }
    r.private_.index = (uint32_t)i;
    FIO_MAP2___EACH_COPY_DATA();
    return r;
  }
  goto not_found;
#else
  r.private_.index = (uint32_t)capa;
  if (FIO_MAP2_IS_SPARSE(o)) { /* sparsely populated */
    while (r.private_.index) {
      uint64_t simd = *(uint64_t *)(imap + r.private_.index);
      if (!simd || simd == 0xFFFFFFFFFFFFFFFFULL) {
        r.private_.index -= 8;
        continue;
      }
      for (int i = 0; i < 8; (++i), (--r.private_.index)) {
        if (!imap[r.private_.index] || imap[r.private_.index] == 0xFF)
          continue;
        if (pos_counter != r.private_.pos) {
          ++pos_counter;
          continue;
        }
        FIO_MAP2___EACH_COPY_DATA();
        return r;
      }
    }
    goto not_found;
  }
  /* review as array */
  while ((r.private_.index--)) {
    if (!imap[r.private_.index] || imap[r.private_.index] == 0xFF)
      continue;
    FIO_MAP2___EACH_COPY_DATA();
    return r;
  }
#endif /* FIO_MAP2_ORDERED */

not_found:
  return (r = (FIO_NAME(FIO_MAP2_NAME, iterator_s)){.private_ = {.pos = 0}});
  FIO_ASSERT_DEBUG(0, "should this happen? ever?");
}
#undef FIO_MAP2___EACH_COPY_HASH
#undef FIO_MAP2___EACH_COPY_DATA

/**
 * Iteration using a callback for each element in the map.
 *
 * The callback task function must accept an each_s pointer, see above.
 *
 * If the callback returns -1, the loop is broken. Any other value is ignored.
 *
 * Returns the relative "stop" position, i.e., the number of items processed +
 * the starting point.
 */
SFUNC uint32_t FIO_NAME(FIO_MAP2_NAME,
                        each)(FIO_MAP2_PTR map,
                              int (*task)(FIO_NAME(FIO_MAP2_NAME, each_s) *),
                              void *udata,
                              ssize_t start_at) {
  FIO_PTR_TAG_VALID_OR_RETURN(map, 1);
  FIO_NAME(FIO_MAP2_NAME, each_s)
  e = {
      .parent = map,
      .task = task,
      .udata = udata,
  };
  FIO_NAME(FIO_MAP2_NAME, s) *o =
      FIO_PTR_TAG_GET_UNTAGGED(FIO_NAME(FIO_MAP2_NAME, s), map);
  if (start_at < 0) {
    start_at += o->count;
    if (start_at < 0)
      start_at = 0;
  } else if (start_at > o->count)
    return o->count;
  FIO_NAME(FIO_MAP2_NAME, iterator_s) i = {.private_ = {.pos = 0}};
  for (;;) {
    i = FIO_NAME(FIO_MAP2_NAME, get_next)(map, &i);
    if (!FIO_NAME(FIO_MAP2_NAME, iterator_is_valid)(&i))
      return o->count;
    e.index = i.private_.pos;
    e.key = i.key;
#ifdef FIO_MAP2_VALUE
    e.value = i.value;
#endif
    if (e.task(&e))
      return (uint32_t)(e.index + 1);
  }
  return o->count;
}

/* *****************************************************************************
Speed Testing
***************************************************************************** */

/* *****************************************************************************
Map Testing
***************************************************************************** */
#ifdef FIO_MAP2_TEST

#ifdef FIO_MAP2_HASH_FN
#define FIO___M_HASH(k)
#else
#define FIO___M_HASH(k) (k),
#endif
#ifdef FIO_MAP2_VALUE
#define FIO___M_VAL(v) , (v)
#define FIO___M_OLD    , NULL
#else
#define FIO___M_VAL(v)
#define FIO___M_OLD
#endif

FIO_SFUNC void FIO_NAME_TEST(stl, FIO_MAP2_NAME)(void) {
  /* testing only only works with integer external types */
  fprintf(stderr,
          "* Testing maps with key " FIO_MACRO2STR(
              FIO_MAP2_KEY) " (=> " FIO_MACRO2STR(FIO_MAP2_VALUE) ").\n");
  { /* test set / get overwrite , FIO_MAP2_EACH and evict */
    FIO_NAME(FIO_MAP2_NAME, s) map = FIO_MAP2_INIT;
    for (size_t i = 1; i < (1UL << (FIO_MAP2_ARRAY_LOG_LIMIT + 5)); ++i) {
      FIO_NAME(FIO_MAP2_NAME, set)
      (&map, FIO___M_HASH(i) i FIO___M_VAL(i) FIO___M_OLD);
      FIO_ASSERT(FIO_NAME(FIO_MAP2_NAME, count)(&map) == i,
                 "map `set` failed? %zu != %zu",
                 (size_t)FIO_NAME(FIO_MAP2_NAME, count)(&map),
                 i);
      for (size_t j = ((i << 2) + 1); j < i; ++j) { /* effects LRU ordering */
        FIO_ASSERT(FIO_NAME(FIO_MAP2_NAME, get_ptr)(&map, FIO___M_HASH(j) j) &&
                       FIO_NAME(FIO_MAP2_NAME, node2val)(
                           FIO_NAME(FIO_MAP2_NAME,
                                    get_ptr)(&map, FIO___M_HASH(j) j)) == j,
                   "map `get` failed? %zu/%zu (%p)",
                   j,
                   i,
                   FIO_NAME(FIO_MAP2_NAME, get_ptr)(&map, FIO___M_HASH(j) j));
        FIO_NAME(FIO_MAP2_NAME, set)
        (&map, FIO___M_HASH(j) j FIO___M_VAL(j) FIO___M_OLD);
        FIO_ASSERT(FIO_NAME(FIO_MAP2_NAME, count)(&map) == i,
                   "map `set` added an item that already exists? %zu != %zu",
                   (size_t)FIO_NAME(FIO_MAP2_NAME, count)(&map),
                   i);
      }
    }
    /* test FIO_MAP2_EACH and ordering */
    uint32_t count = FIO_NAME(FIO_MAP2_NAME, count)(&map);
    uint32_t loop_test = 0;
    FIO_MAP2_EACH(FIO_MAP2_NAME, &map, i) {
      /* test ordering */
#ifdef FIO_MAP2_LRU
      FIO_ASSERT(i.key == (count - loop_test),
                 "map FIO_MAP2_EACH LRU ordering broken? %zu != %zu",
                 (size_t)(i.key),
                 (size_t)(count - loop_test));
      ++loop_test;
#elif FIO_MAP2_ORDERED
      ++loop_test;
      FIO_ASSERT(i.key == loop_test,
                 "map FIO_MAP2_EACH LRU ordering broken? %zu != %zu",
                 (size_t)(i.key),
                 (size_t)(loop_test));
#else
      ++loop_test;
#endif
    }
    FIO_ASSERT(loop_test == count,
               "FIO_MAP2_EACH failed to iterate all elements? (%zu != %zu",
               (size_t)loop_test != (size_t)count);
    loop_test = 0;
    FIO_MAP2_EACH_REVERSED(FIO_MAP2_NAME, &map, i) { ++loop_test; }
    FIO_ASSERT(
        loop_test == count,
        "FIO_MAP2_EACH_REVERSED failed to iterate all elements? (%zu != %zu",
        (size_t)loop_test != (size_t)count);
    /* test `evict` while we're here */
    FIO_NAME(FIO_MAP2_NAME, evict)(&map, (count >> 1));
    FIO_ASSERT(FIO_NAME(FIO_MAP2_NAME, count)(&map) == (count - (count >> 1)),
               "map `evict` count error %zu != %zu",
               (size_t)FIO_NAME(FIO_MAP2_NAME, count)(&map),
               (size_t)(count - (count >> 1)));
    /* cleanup */
    FIO_NAME(FIO_MAP2_NAME, destroy)(&map);
  }
#ifndef FIO_MAP2_HASH_FN
  { /* test full collision guard and zero hash*/
    FIO_NAME(FIO_MAP2_NAME, s) map = FIO_MAP2_INIT;
    fprintf(
        stderr,
        "* Testing full collision guard for " FIO_MACRO2STR(
            FIO_NAME(FIO_MAP2_NAME, s)) " - expect SECURITY log messages.\n");
    for (size_t i = 1; i < 4096; ++i) {
      FIO_NAME(FIO_MAP2_NAME, set)
      (&map, FIO___M_HASH(0) i FIO___M_VAL(i) FIO___M_OLD);
    }
    FIO_ASSERT(FIO_NAME(FIO_MAP2_NAME, count)(&map),
               "zero hash fails insertion?");
    FIO_ASSERT(FIO_NAME(FIO_MAP2_NAME, count)(&map) <= FIO_MAP2_ATTACK_LIMIT,
               "map attack guard failed? %zu != %zu",
               (size_t)FIO_NAME(FIO_MAP2_NAME, count)(&map),
               (size_t)FIO_MAP2_ATTACK_LIMIT);
    FIO_NAME(FIO_MAP2_NAME, destroy)(&map);
  }
#endif
  { /* test reserve, remove */
    FIO_NAME(FIO_MAP2_NAME, s) map = FIO_MAP2_INIT;
    FIO_NAME(FIO_MAP2_NAME, reserve)(&map, 4096);
    FIO_ASSERT(FIO_NAME(FIO_MAP2_NAME, capa)(&map) == 4096,
               "map reserve error? %zu != %zu",
               (size_t)FIO_NAME(FIO_MAP2_NAME, capa)(&map),
               4096);
    for (size_t i = 1; i < 4096; ++i) {
      FIO_NAME(FIO_MAP2_NAME, set)
      (&map, FIO___M_HASH(i) i FIO___M_VAL(i) FIO___M_OLD);
      FIO_ASSERT(FIO_NAME(FIO_MAP2_NAME, count)(&map) == i,
                 "insertion failed?");
    }
    for (size_t i = 1; i < 4096; ++i) {
      FIO_ASSERT(FIO_NAME(FIO_MAP2_NAME, get)(&map, FIO___M_HASH(i) i),
                 "key missing?");
      FIO_NAME(FIO_MAP2_NAME, remove)
      (&map, FIO___M_HASH(i) i, NULL);
      FIO_ASSERT(!FIO_NAME(FIO_MAP2_NAME, get)(&map, FIO___M_HASH(i) i),
                 "map_remove error?");
      FIO_ASSERT(FIO_NAME(FIO_MAP2_NAME, count)(&map) == 4095 - i,
                 "map count error after removal? %zu != %zu",
                 (size_t)FIO_NAME(FIO_MAP2_NAME, count)(&map),
                 i);
    }
    FIO_NAME(FIO_MAP2_NAME, destroy)(&map);
  }
}
#undef FIO___M_HASH
#undef FIO___M_VAL
#undef FIO___M_OLD

#endif /* FIO_MAP2_TEST */
/* *****************************************************************************
Map Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */

#undef FIO_MAP2_ARRAY_LOG_LIMIT
#undef FIO_MAP2_ATTACK_LIMIT
#undef FIO_MAP2_CAPA
#undef FIO_MAP2_CAPA_BITS_LIMIT
#undef FIO_MAP2_CUCKOO_STEPS
#undef FIO_MAP2_GET_T
#undef FIO_MAP2_HASH_FN
#undef FIO_MAP2_IS_SPARSE
#undef FIO_MAP2_KEY
#undef FIO_MAP2_KEY_CMP
#undef FIO_MAP2_KEY_COPY
#undef FIO_MAP2_KEY_DESTROY
#undef FIO_MAP2_KEY_DESTROY_SIMPLE
#undef FIO_MAP2_KEY_DISCARD
#undef FIO_MAP2_KEY_FROM_INTERNAL
#undef FIO_MAP2_KEY_INTERNAL
#undef FIO_MAP2_KEY_IS_GREATER_THAN
#undef FIO_MAP2_LRU
#undef FIO_MAP2_NAME
#undef FIO_MAP2_ORDERED
#undef FIO_MAP2_PTR
#undef FIO_MAP2_RECALC_HASH
#undef FIO_MAP2_SEEK_LIMIT
#undef FIO_MAP2_T
#undef FIO_MAP2_TEST
#undef FIO_MAP2_VALUE
#undef FIO_MAP2_VALUE_BSTR
#undef FIO_MAP2_VALUE_COPY
#undef FIO_MAP2_VALUE_DESTROY
#undef FIO_MAP2_VALUE_DESTROY_SIMPLE
#undef FIO_MAP2_VALUE_DISCARD
#undef FIO_MAP2_VALUE_FROM_INTERNAL
#undef FIO_MAP2_VALUE_INTERNAL
#undef FIO_OMAP_NAME
#undef FIO_UMAP_NAME

#endif /* FIO_MAP2_NAME */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_REF_NAME long_ref  /* Development inclusion - ignore line */
#define FIO_REF_TYPE long      /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                      Reference Counting / Wrapper
                   (must be placed after all type macros)


Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#ifdef FIO_REF_NAME

#ifndef FIO_REF_TYPE
#define FIO_REF_TYPE FIO_NAME(FIO_REF_NAME, s)
#endif

#ifndef FIO_REF_INIT
#define FIO_REF_INIT(obj)                                                      \
  do {                                                                         \
    if (!FIO_MEM_REALLOC_IS_SAFE_)                                             \
      (obj) = (FIO_REF_TYPE){0};                                               \
  } while (0)
#endif

#ifndef FIO_REF_DESTROY
#define FIO_REF_DESTROY(obj)
#endif

#ifndef FIO_REF_METADATA_INIT
#ifdef FIO_REF_METADATA
#define FIO_REF_METADATA_INIT(meta)                                            \
  do {                                                                         \
    if (!FIO_MEM_REALLOC_IS_SAFE_)                                             \
      (meta) = (FIO_REF_METADATA){0};                                          \
  } while (0)
#else
#define FIO_REF_METADATA_INIT(meta)
#endif
#endif

#ifndef FIO_REF_METADATA_DESTROY
#define FIO_REF_METADATA_DESTROY(meta)
#endif

/**
 * FIO_REF_CONSTRUCTOR_ONLY allows the reference counter constructor (TYPE_new)
 * to be the only constructor function.
 *
 * When set, the reference counting functions will use `X_new` and `X_free`.
 * Otherwise (assuming `X_new` and `X_free` are already defined), the reference
 * counter will define `X_new2` and `X_free2` instead.
 */
#ifdef FIO_REF_CONSTRUCTOR_ONLY
#define FIO_REF_CONSTRUCTOR new
#define FIO_REF_DESTRUCTOR  free
#define FIO_REF_DUPNAME     dup
#else
#define FIO_REF_CONSTRUCTOR new2
#define FIO_REF_DESTRUCTOR  free2
#define FIO_REF_DUPNAME     dup2
#endif

typedef struct {
#ifdef FIO_REF_FLEX_TYPE
  volatile uint32_t ref;
  uint32_t flx_size;
#else
  volatile size_t ref;
#endif
#ifdef FIO_REF_METADATA
  FIO_REF_METADATA metadata;
#endif
} FIO_NAME(FIO_REF_NAME, _wrapper_s);

#ifdef FIO_PTR_TAG_TYPE
#define FIO_REF_TYPE_PTR FIO_PTR_TAG_TYPE
#else
#define FIO_REF_TYPE_PTR FIO_REF_TYPE *
#endif

/* *****************************************************************************
Reference Counter (Wrapper) API
***************************************************************************** */

/** Allocates a reference counted object. */
#ifdef FIO_REF_FLEX_TYPE
IFUNC FIO_REF_TYPE_PTR FIO_NAME(FIO_REF_NAME,
                                FIO_REF_CONSTRUCTOR)(size_t members);
#else
IFUNC FIO_REF_TYPE_PTR FIO_NAME(FIO_REF_NAME, FIO_REF_CONSTRUCTOR)(void);
#endif /* FIO_REF_FLEX_TYPE */

/** Increases the reference count. */
FIO_IFUNC FIO_REF_TYPE_PTR FIO_NAME(FIO_REF_NAME,
                                    FIO_REF_DUPNAME)(FIO_REF_TYPE_PTR wrapped);

/** Frees a reference counted object (or decreases the reference count). */
IFUNC void FIO_NAME(FIO_REF_NAME, FIO_REF_DESTRUCTOR)(FIO_REF_TYPE_PTR wrapped);

#ifdef FIO_REF_METADATA
/** Returns a pointer to the object's metadata, if defined. */
IFUNC FIO_REF_METADATA *FIO_NAME(FIO_REF_NAME,
                                 metadata)(FIO_REF_TYPE_PTR wrapped);
#endif

#ifdef FIO_REF_FLEX_TYPE
/** The allocation length for the flex type */
IFUNC uint32_t FIO_NAME(FIO_REF_NAME,
                        metadata_flex_len)(FIO_REF_TYPE_PTR wrapped);
#endif
/* *****************************************************************************
Inline Implementation
***************************************************************************** */
/** Increases the reference count. */
FIO_IFUNC FIO_REF_TYPE_PTR
FIO_NAME(FIO_REF_NAME, FIO_REF_DUPNAME)(FIO_REF_TYPE_PTR wrapped_) {
  FIO_REF_TYPE *wrapped = (FIO_REF_TYPE *)(FIO_PTR_UNTAG(wrapped_));
  if (!wrapped || !wrapped_)
    return 0;
  FIO_NAME(FIO_REF_NAME, _wrapper_s) *o =
      ((FIO_NAME(FIO_REF_NAME, _wrapper_s) *)wrapped) - 1;
  fio_atomic_add(&o->ref, 1);
  return wrapped_;
}

/** Debugging helper, do not use for data, as returned value is unstable. */
FIO_IFUNC size_t FIO_NAME(FIO_REF_NAME, references)(FIO_REF_TYPE_PTR wrapped_) {
  FIO_REF_TYPE *wrapped = (FIO_REF_TYPE *)(FIO_PTR_UNTAG(wrapped_));
  if (!wrapped || !wrapped_)
    return 0;
  FIO_NAME(FIO_REF_NAME, _wrapper_s) *o =
      ((FIO_NAME(FIO_REF_NAME, _wrapper_s) *)wrapped) - 1;
  return o->ref;
}

#ifdef FIO_REF_FLEX_TYPE
/** The allocation length for the flex type */
IFUNC uint32_t FIO_NAME(FIO_REF_NAME,
                        metadata_flex_len)(FIO_REF_TYPE_PTR wrapped_) {
  FIO_REF_TYPE *wrapped = (FIO_REF_TYPE *)(FIO_PTR_UNTAG(wrapped_));
  if (!wrapped || !wrapped_)
    return 0;
  FIO_NAME(FIO_REF_NAME, _wrapper_s) *o =
      ((FIO_NAME(FIO_REF_NAME, _wrapper_s) *)wrapped) - 1;
  return o->flx_size;
}
#endif

/* *****************************************************************************
Reference Counter (Wrapper) Implementation
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

FIO_LEAK_COUNTER_DEF(FIO_REF_NAME)

/** Allocates a reference counted object. */
#ifdef FIO_REF_FLEX_TYPE
IFUNC FIO_REF_TYPE_PTR FIO_NAME(FIO_REF_NAME,
                                FIO_REF_CONSTRUCTOR)(size_t members) {
  FIO_NAME(FIO_REF_NAME, _wrapper_s) *o =
      (FIO_NAME(FIO_REF_NAME, _wrapper_s) *)FIO_MEM_REALLOC_(
          NULL,
          0,
          sizeof(*o) + sizeof(FIO_REF_TYPE) +
              (sizeof(FIO_REF_FLEX_TYPE) * members),
          0);
#else
IFUNC FIO_REF_TYPE_PTR FIO_NAME(FIO_REF_NAME, FIO_REF_CONSTRUCTOR)(void) {
  FIO_NAME(FIO_REF_NAME, _wrapper_s) *o = (FIO_NAME(FIO_REF_NAME, _wrapper_s) *)
      FIO_MEM_REALLOC_(NULL, 0, sizeof(*o) + sizeof(FIO_REF_TYPE), 0);
#endif /* FIO_REF_FLEX_TYPE */
  if (!o)
    return (FIO_REF_TYPE_PTR)(o);
  FIO_LEAK_COUNTER_ON_ALLOC(FIO_REF_NAME);
  o->ref = 1;
#ifdef FIO_REF_FLEX_TYPE
  o->flx_size = (uint32_t)members;
#endif
  FIO_REF_METADATA_INIT((o->metadata));
  FIO_REF_TYPE *ret = (FIO_REF_TYPE *)(o + 1);
  FIO_REF_INIT((ret[0]));
  return (FIO_REF_TYPE_PTR)(FIO_PTR_TAG(ret));
  (void)FIO_NAME(FIO_REF_NAME, references);
}

/** Frees a reference counted object (or decreases the reference count). */
IFUNC void FIO_NAME(FIO_REF_NAME,
                    FIO_REF_DESTRUCTOR)(FIO_REF_TYPE_PTR wrapped_) {
  FIO_REF_TYPE *wrapped = (FIO_REF_TYPE *)(FIO_PTR_UNTAG(wrapped_));
  if (!wrapped || !wrapped_)
    return;
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(wrapped_);
  FIO_NAME(FIO_REF_NAME, _wrapper_s) *o =
      ((FIO_NAME(FIO_REF_NAME, _wrapper_s) *)wrapped) - 1;
  if (!o)
    return;
  if (fio_atomic_sub_fetch(&o->ref, 1))
    return;
  FIO_REF_DESTROY((wrapped[0]));
  FIO_REF_METADATA_DESTROY((o->metadata));
  FIO_LEAK_COUNTER_ON_FREE(FIO_REF_NAME);
  FIO_MEM_FREE_(o, sizeof(*o) + (o->flx_size * sizeof(FIO_REF_TYPE)));
}

#ifdef FIO_REF_METADATA
/** Returns a pointer to the object's metadata, if defined. */
IFUNC FIO_REF_METADATA *FIO_NAME(FIO_REF_NAME,
                                 metadata)(FIO_REF_TYPE_PTR wrapped_) {
  FIO_REF_TYPE *wrapped = (FIO_REF_TYPE *)(FIO_PTR_UNTAG(wrapped_));
  FIO_NAME(FIO_REF_NAME, _wrapper_s) *o =
      ((FIO_NAME(FIO_REF_NAME, _wrapper_s) *)wrapped) - 1;
  return &o->metadata;
}
#endif

/* *****************************************************************************
Reference Counter (Wrapper) Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_REF_NAME
#undef FIO_REF_FLEX_TYPE
#undef FIO_REF_TYPE
#undef FIO_REF_INIT
#undef FIO_REF_DESTROY
#undef FIO_REF_METADATA
#undef FIO_REF_METADATA_INIT
#undef FIO_REF_METADATA_DESTROY
#undef FIO_REF_TYPE_PTR
#undef FIO_REF_CONSTRUCTOR_ONLY
#undef FIO_REF_CONSTRUCTOR
#undef FIO_REF_DUPNAME
#undef FIO_REF_DESTRUCTOR
#endif
/* *****************************************************************************
Pointer Tagging Cleanup
***************************************************************************** */
#ifndef FIO___DEV___
#undef FIO_PTR_TAG
#undef FIO_PTR_UNTAG
#undef FIO_PTR_TAG_TYPE
#undef FIO_PTR_TAG_VALIDATE
#undef FIO_PTR_TAG_VALID_OR_RETURN
#undef FIO_PTR_TAG_VALID_OR_RETURN_VOID
#undef FIO_PTR_TAG_VALID_OR_GOTO
#endif
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_FIOBJ              /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************








                          FIOBJ - soft (dynamic) types



FIOBJ - dynamic types

These are dynamic types that use pointer tagging for fast type identification.

Pointer tagging on 64 bit systems allows for 3 bits at the lower bits. On most
32 bit systems this is also true due to allocator alignment. When in doubt, use
the provided custom allocator.

To keep the 64bit memory address alignment on 32bit systems, a 32bit metadata
integer is added when a virtual function table is missing. This doesn't effect
memory consumption on 64 bit systems and uses 4 bytes on 32 bit systems.

Note: this code is placed at the end of the STL file, since it leverages most of
the SLT features and could be affected by their inclusion.

Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_FIOBJ) && !defined(H___FIO_FIOBJ___H) &&                       \
    !defined(FIO___RECURSIVE_INCLUDE)
#define H___FIO_FIOBJ___H
#define FIO___RECURSIVE_INCLUDE 99 /* 99 keeps EXTERN rules */
/* *****************************************************************************
FIOBJ compilation settings (type names and JSON nesting limits).

Type Naming Macros for FIOBJ types. By default, results in:
- fiobj_true()     (constant, cannot be changed except manually)
- fiobj_false()    (constant, cannot be changed except manually)
- fiobj_null()
- fiobj_num_new() ... (etc')
- fiobj_float_new() ... (etc')
- fiobj_str_new() ... (etc')
- fiobj_array_new() ... (etc')
- fiobj_hash_new() ... (etc')
***************************************************************************** */

#ifndef FIOBJ___NAME_NULL
#define FIOBJ___NAME_NULL null
#endif
#ifndef FIOBJ___NAME_NUMBER
#define FIOBJ___NAME_NUMBER num
#endif
#ifndef FIOBJ___NAME_FLOAT
#define FIOBJ___NAME_FLOAT float
#endif
#ifndef FIOBJ___NAME_STRING
#define FIOBJ___NAME_STRING str
#endif
#ifndef FIOBJ___NAME_ARRAY
#define FIOBJ___NAME_ARRAY array
#endif
#ifndef FIOBJ___NAME_HASH
#define FIOBJ___NAME_HASH hash
#endif

#ifndef FIOBJ_MAX_NESTING
/**
 * Sets the limit on nesting level transversal by recursive functions.
 *
 * This effects JSON output / input and the `fiobj_each2` function since they
 * are recursive.
 *
 * HOWEVER: this value will NOT effect the recursive `fiobj_free` which could
 * (potentially) expload the stack if given melformed input such as cyclic data
 * structures.
 *
 * Values should be less than 32K.
 */
#define FIOBJ_MAX_NESTING 512
#endif

/* make sure roundtrips work */
#ifndef JSON_MAX_DEPTH
#define JSON_MAX_DEPTH FIOBJ_MAX_NESTING
#endif

#ifndef FIOBJ_JSON_APPEND
#define FIOBJ_JSON_APPEND 1
#endif
/* *****************************************************************************
General Requirements / Macros
***************************************************************************** */

#ifdef __cplusplus /* C++ doesn't allow declarations for static variables */
#define FIOBJ_EXTERN_OBJ     extern "C" FIO_WEAK
#define FIOBJ_EXTERN_OBJ_IMP extern "C" FIO_WEAK
#elif defined(FIO_EXTERN)
#define FIOBJ_EXTERN_OBJ     extern
#define FIOBJ_EXTERN_OBJ_IMP FIO_WEAK
#else
#define FIOBJ_EXTERN_OBJ     static __attribute__((unused))
#define FIOBJ_EXTERN_OBJ_IMP static __attribute__((unused))
#endif
/* *****************************************************************************
Debugging / Leak Detection
***************************************************************************** */
#if defined(TEST) || defined(DEBUG) || defined(FIO_LEAK_COUNTER)
size_t FIO_WEAK FIOBJ_MARK_MEMORY_ALLOC_COUNTER;
size_t FIO_WEAK FIOBJ_MARK_MEMORY_FREE_COUNTER;
#define FIOBJ_MARK_MEMORY_ALLOC()                                              \
  fio_atomic_add(&FIOBJ_MARK_MEMORY_ALLOC_COUNTER, 1)
#define FIOBJ_MARK_MEMORY_FREE()                                               \
  fio_atomic_add(&FIOBJ_MARK_MEMORY_FREE_COUNTER, 1)
#define FIOBJ_MARK_MEMORY_PRINT()                                              \
  FIO___LOG_PRINT_LEVEL(                                                       \
      ((FIOBJ_MARK_MEMORY_ALLOC_COUNTER == FIOBJ_MARK_MEMORY_FREE_COUNTER)     \
           ? 4 /* FIO_LOG_LEVEL_INFO */                                        \
           : 3 /* FIO_LOG_LEVEL_WARNING */),                                   \
      ((FIOBJ_MARK_MEMORY_ALLOC_COUNTER == FIOBJ_MARK_MEMORY_FREE_COUNTER)     \
           ? "INFO: total remaining FIOBJ allocations: %zu (%zu - %zu)"        \
           : "WARNING: LEAKED! FIOBJ allocations: %zu (%zu - %zu)"),           \
      FIOBJ_MARK_MEMORY_ALLOC_COUNTER - FIOBJ_MARK_MEMORY_FREE_COUNTER,        \
      FIOBJ_MARK_MEMORY_ALLOC_COUNTER,                                         \
      FIOBJ_MARK_MEMORY_FREE_COUNTER)
#define FIOBJ_MARK_MEMORY_ENABLED 1

#else

#define FIOBJ_MARK_MEMORY_ALLOC_COUNTER 0 /* when testing unmarked FIOBJ */
#define FIOBJ_MARK_MEMORY_FREE_COUNTER  0 /* when testing unmarked FIOBJ */
#define FIOBJ_MARK_MEMORY_ALLOC()
#define FIOBJ_MARK_MEMORY_FREE()
#define FIOBJ_MARK_MEMORY_PRINT()
#define FIOBJ_MARK_MEMORY_ENABLED 0
#endif

/* *****************************************************************************
The FIOBJ Type
***************************************************************************** */

/** Use the FIOBJ type for dynamic types. */
typedef struct FIOBJ_s {
  struct FIOBJ_s *compiler_validation_type;
} * FIOBJ;

/** FIOBJ type enum for common / primitive types. */
typedef enum {
  FIOBJ_T_NUMBER = 0x01, /* 0b001 3 bits taken for small numbers */
  FIOBJ_T_PRIMITIVE = 2, /* 0b010 a lonely second bit signifies a primitive */
  FIOBJ_T_STRING = 3,    /* 0b011 */
  FIOBJ_T_ARRAY = 4,     /* 0b100 */
  FIOBJ_T_HASH = 5,      /* 0b101 */
  FIOBJ_T_FLOAT = 6,     /* 0b110 */
  FIOBJ_T_OTHER = 7,     /* 0b111 dynamic type - test content */
} fiobj_class_en;

#define FIOBJ_T_NULL  2  /* 0b010 a lonely second bit signifies a primitive */
#define FIOBJ_T_TRUE  18 /* 0b010 010 - primitive value */
#define FIOBJ_T_FALSE 34 /* 0b100 010 - primitive value */

/** Use the macros to avoid future API changes. */
#define FIOBJ_TYPE(o) fiobj_type(o)
/** Use the macros to avoid future API changes. */
#define FIOBJ_TYPE_IS(o, type) (fiobj_type(o) == type)
/** Identifies an invalid type identifier (returned from FIOBJ_TYPE(o) */
#define FIOBJ_T_INVALID 0
/** Identifies an invalid object */
#define FIOBJ_INVALID 0
/** Tests if the object is (probably) a valid FIOBJ */
#define FIOBJ_IS_INVALID(o)     (((uintptr_t)(o)&7UL) == 0)
#define FIOBJ_IS_NULL(o)        (FIOBJ_IS_INVALID(o) || ((o) == FIOBJ_T_NULL))
#define FIOBJ_TYPE_CLASS(o)     ((fiobj_class_en)(((uintptr_t)(o)) & 7UL))
#define FIOBJ_PTR_TAG(o, klass) ((uintptr_t)(((uintptr_t)(o)) | (klass)))
#define FIOBJ_PTR_UNTAG(o)      ((uintptr_t)(((uintptr_t)(o)) & (~7ULL)))
/** Returns an objects type. This isn't limited to known types. */
FIO_IFUNC size_t fiobj_type(FIOBJ o);

/* *****************************************************************************
FIOBJ Memory Management
***************************************************************************** */

/** Increases an object's reference count (or copies) and returns it. */
FIO_IFUNC FIOBJ fiobj_dup(FIOBJ o);

/** Decreases an object's reference count or frees it. */
FIO_IFUNC void fiobj_free(FIOBJ o);

/* *****************************************************************************
FIOBJ Data / Info
***************************************************************************** */

/** Compares two objects. */
FIO_IFUNC unsigned char FIO_NAME_BL(fiobj, eq)(FIOBJ a, FIOBJ b);

/** Returns a temporary String representation for any FIOBJ object. */
FIO_IFUNC fio_str_info_s FIO_NAME2(fiobj, cstr)(FIOBJ o);

/** Returns an integer representation for any FIOBJ object. */
FIO_IFUNC intptr_t FIO_NAME2(fiobj, i)(FIOBJ o);

/** Returns a float (double) representation for any FIOBJ object. */
FIO_IFUNC double FIO_NAME2(fiobj, f)(FIOBJ o);

/** Calculates an object's hash value for a specific hash map object. */
FIO_IFUNC uint64_t FIO_NAME2(fiobj, hash)(FIOBJ object_key);

/* *****************************************************************************
FIOBJ Containers (iteration)
***************************************************************************** */

/** Iteration information structure passed to the callback. */
typedef struct fiobj_each_s {
  /** The being iterated. Once set, cannot be safely changed. */
  FIOBJ const parent;
  /** The index to start at / the current object's index */
  uint64_t index;
  /** The callback / task called for each index, may be updated mid-cycle. */
  int (*task)(struct fiobj_each_s *info);
  /** The argument passed along to the task. */
  void *udata;
  /** The value of the current object in the Array or Hash Map */
  FIOBJ value;
  /* The key, if a Hash Map */
  FIOBJ key;
} fiobj_each_s;

/**
 * Performs a task for each element held by the FIOBJ object.
 *
 * If `task` returns -1, the `each` loop will break (stop).
 *
 * Returns the "stop" position - the number of elements processed + `start_at`.
 */
FIO_SFUNC uint32_t fiobj_each1(FIOBJ o,
                               int (*task)(fiobj_each_s *info),
                               void *udata,
                               int32_t start_at);

/**
 * Performs a task for the object itself and each element held by the FIOBJ
 * object or any of it's elements (a deep task).
 *
 * The order of performance is by order of appearance, as if all nesting levels
 * were flattened.
 *
 * If `task` returns -1, the `each` loop will break (stop).
 *
 * Returns the number of elements processed.
 */
SFUNC uint32_t fiobj_each2(FIOBJ o,
                           int (*task)(fiobj_each_s *info),
                           void *udata);

/* *****************************************************************************
FIOBJ Primitives (NULL, True, False)
***************************************************************************** */

/** Returns the `true` primitive. */
FIO_IFUNC FIOBJ fiobj_true(void) { return (FIOBJ)(FIOBJ_T_TRUE); }

/** Returns the `false` primitive. */
FIO_IFUNC FIOBJ fiobj_false(void) { return (FIOBJ)(FIOBJ_T_FALSE); }

/** Returns the `nil` / `null` primitive. */
FIO_IFUNC FIOBJ FIO_NAME(fiobj, FIOBJ___NAME_NULL)(void) {
  return (FIOBJ)(FIOBJ_T_NULL);
}

/* *****************************************************************************
FIOBJ Type - Extensibility (FIOBJ_T_OTHER)
***************************************************************************** */

/** FIOBJ types can be extended using virtual function tables. */
typedef struct {
  /**
   * MUST return a unique number to identify object type.
   *
   * Numbers (type IDs) under 100 are reserved. Numbers under 40 are illegal.
   */
  size_t type_id;
  /** Test for equality between two objects with the same `type_id` */
  unsigned char (*is_eq)(FIOBJ restrict a, FIOBJ restrict b);
  /** Converts an object to a String */
  fio_str_info_s (*to_s)(FIOBJ o);
  /** Converts an object to an integer */
  intptr_t (*to_i)(FIOBJ o);
  /** Converts an object to a double */
  double (*to_f)(FIOBJ o);
  /** Returns the number of exposed elements held by the object, if any. */
  uint32_t (*count)(FIOBJ o);
  /** Iterates the exposed elements held by the object. See `fiobj_each1`. */
  uint32_t (*each1)(FIOBJ o,
                    int (*task)(fiobj_each_s *e),
                    void *udata,
                    int32_t start_at);
  /**
   * Decreases the reference count and/or frees the object, calling `free2` for
   * any nested objects.
   */
  void (*free2)(FIOBJ o);
} FIOBJ_class_vtable_s;

FIOBJ_EXTERN_OBJ const FIOBJ_class_vtable_s FIOBJ___OBJECT_CLASS_VTBL;

#define FIO_REF_CONSTRUCTOR_ONLY 1
#define FIO_REF_NAME             fiobj_object
#define FIO_REF_TYPE             void *
#define FIO_REF_METADATA         const FIOBJ_class_vtable_s *
#define FIO_REF_METADATA_INIT(m)                                               \
  do {                                                                         \
    m = &FIOBJ___OBJECT_CLASS_VTBL;                                            \
    FIOBJ_MARK_MEMORY_ALLOC();                                                 \
  } while (0)
#define FIO_REF_METADATA_DESTROY(m)                                            \
  do {                                                                         \
    FIOBJ_MARK_MEMORY_FREE();                                                  \
  } while (0)
#define FIO_PTR_TAG(p)          FIOBJ_PTR_TAG(p, FIOBJ_T_OTHER)
#define FIO_PTR_UNTAG(p)        FIOBJ_PTR_UNTAG(p)
#define FIO_PTR_TAG_VALIDATE(p) (FIOBJ_TYPE_CLASS(p) == FIOBJ_T_OTHER)
#define FIO_PTR_TAG_TYPE        FIOBJ
#include FIO_INCLUDE_FILE

/* *****************************************************************************
FIOBJ Integers
***************************************************************************** */

/** Creates a new Number object. */
FIO_IFUNC FIOBJ FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), new)(intptr_t i);

/** Reads the number from a FIOBJ Number. */
FIO_IFUNC intptr_t FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), i)(FIOBJ i);

/** Reads the number from a FIOBJ Number, fitting it in a double. */
FIO_IFUNC double FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), f)(FIOBJ i);

/** Returns a String representation of the number (in base 10). */
SFUNC fio_str_info_s FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER),
                               cstr)(FIOBJ i);

/** Frees a FIOBJ number. */
FIO_IFUNC void FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), free)(FIOBJ i);

FIOBJ_EXTERN_OBJ const FIOBJ_class_vtable_s FIOBJ___NUMBER_CLASS_VTBL;

/* *****************************************************************************
FIOBJ Floats
***************************************************************************** */

/** Creates a new Float (double) object. */
FIO_IFUNC FIOBJ FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), new)(double i);

/** Reads the number from a FIOBJ Float rounding it to an integer. */
FIO_IFUNC intptr_t FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), i)(FIOBJ i);

/** Reads the value from a FIOBJ Float, as a double. */
FIO_IFUNC double FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), f)(FIOBJ i);

/** Returns a String representation of the float. */
SFUNC fio_str_info_s FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT),
                               cstr)(FIOBJ i);

/** Frees a FIOBJ Float. */
FIO_IFUNC void FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), free)(FIOBJ i);

FIOBJ_EXTERN_OBJ const FIOBJ_class_vtable_s FIOBJ___FLOAT_CLASS_VTBL;

/* *****************************************************************************
FIOBJ Strings
***************************************************************************** */

#define FIO_STR_NAME              FIO_NAME(fiobj, FIOBJ___NAME_STRING)
#define FIO_STR_OPTIMIZE_EMBEDDED 1
#define FIO_REF_NAME              FIO_NAME(fiobj, FIOBJ___NAME_STRING)
#define FIO_REF_CONSTRUCTOR_ONLY  1
#define FIO_REF_DESTROY(s)                                                     \
  do {                                                                         \
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), destroy)                    \
    ((FIOBJ)FIOBJ_PTR_TAG(&s, FIOBJ_T_STRING));                                \
    FIOBJ_MARK_MEMORY_FREE();                                                  \
  } while (0)
#define FIO_REF_INIT(s_)                                                       \
  do {                                                                         \
    s_ = (FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), s))FIO_STR_INIT;      \
    FIOBJ_MARK_MEMORY_ALLOC();                                                 \
  } while (0)

#if SIZE_T_MAX == 0xFFFFFFFF /* for 32bit system pointer alignment */
#define FIO_REF_METADATA uint32_t
#endif
#define FIO_PTR_TAG(p)          FIOBJ_PTR_TAG(p, FIOBJ_T_STRING)
#define FIO_PTR_UNTAG(p)        FIOBJ_PTR_UNTAG(p)
#define FIO_PTR_TAG_VALIDATE(p) (FIOBJ_TYPE_CLASS(p) == FIOBJ_T_STRING)
#define FIO_PTR_TAG_TYPE        FIOBJ
#include FIO_INCLUDE_FILE

/* Creates a new FIOBJ string object, copying the data to the new string. */
FIO_IFUNC FIOBJ FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING),
                         new_cstr)(const char *ptr, size_t len) {
  FIOBJ s = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), new)();
  FIO_ASSERT_ALLOC(FIOBJ_PTR_UNTAG(s));
  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)(s, ptr, len);
  return s;
}

/* Creates a new FIOBJ string object with (at least) the requested capacity. */
FIO_IFUNC FIOBJ FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING),
                         new_buf)(size_t capa) {
  FIOBJ s = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), new)();
  FIO_ASSERT_ALLOC(FIOBJ_PTR_UNTAG(s));
  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), reserve)(s, capa);
  return s;
}

/* Creates a new FIOBJ string object, copying the origin (`fiobj2cstr`). */
FIO_IFUNC FIOBJ FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING),
                         new_copy)(FIOBJ original) {
  FIOBJ s = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), new)();
  FIO_ASSERT_ALLOC(FIOBJ_PTR_UNTAG(s));
  fio_str_info_s i = FIO_NAME2(fiobj, cstr)(original);
  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)(s, i.buf, i.len);
  return s;
}

/** Returns information about the string. Same as fiobj_str_info(). */
FIO_IFUNC fio_str_info_s FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_STRING),
                                   cstr)(FIOBJ s) {
  return FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), info)(s);
}

/**
 * Creates a temporary FIOBJ String object on the stack.
 *
 * String data might be allocated dynamically.
 */
#define FIOBJ_STR_TEMP_VAR(str_name)                                           \
  struct {                                                                     \
    uint64_t i1;                                                               \
    uint64_t i2;                                                               \
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), s) s;                       \
  } FIO_NAME(str_name, __auto_mem_tmp) = {0x7f7f7f7f7f7f7f7fULL,               \
                                          0x7f7f7f7f7f7f7f7fULL,               \
                                          FIO_STR_INIT};                       \
  FIOBJ str_name =                                                             \
      (FIOBJ)(((uintptr_t) & (FIO_NAME(str_name, __auto_mem_tmp).s)) |         \
              FIOBJ_T_STRING);

/**
 * Creates a temporary FIOBJ String object on the stack, initialized with a
 * static string.
 *
 * String data might be allocated dynamically.
 */
#define FIOBJ_STR_TEMP_VAR_STATIC(str_name, buf_, len_)                        \
  struct {                                                                     \
    uint64_t i1;                                                               \
    uint64_t i2;                                                               \
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), s) s;                       \
  } FIO_NAME(str_name,                                                         \
             __auto_mem_tmp) = {0x7f7f7f7f7f7f7f7fULL,                         \
                                0x7f7f7f7f7f7f7f7fULL,                         \
                                FIO_STR_INIT_STATIC2((buf_), (len_))};         \
  FIOBJ str_name =                                                             \
      (FIOBJ)(((uintptr_t) & (FIO_NAME(str_name, __auto_mem_tmp).s)) |         \
              FIOBJ_T_STRING);

/**
 * Creates a temporary FIOBJ String object on the stack, initialized with a
 * static string.
 *
 * String data might be allocated dynamically.
 */
#define FIOBJ_STR_TEMP_VAR_EXISTING(str_name, buf_, len_, capa_)               \
  struct {                                                                     \
    uint64_t i1;                                                               \
    uint64_t i2;                                                               \
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), s) s;                       \
  } FIO_NAME(str_name, __auto_mem_tmp) = {                                     \
      0x7f7f7f7f7f7f7f7fULL,                                                   \
      0x7f7f7f7f7f7f7f7fULL,                                                   \
      FIO_STR_INIT_EXISTING((buf_), (len_), (capa_))};                         \
  FIOBJ str_name =                                                             \
      (FIOBJ)(((uintptr_t) & (FIO_NAME(str_name, __auto_mem_tmp).s)) |         \
              FIOBJ_T_STRING);

/** Resets a temporary FIOBJ String, freeing and any resources allocated. */
#define FIOBJ_STR_TEMP_DESTROY(str_name)                                       \
  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), destroy)(str_name);

/* *****************************************************************************
FIOBJ Arrays
***************************************************************************** */

#define FIO_ARRAY_NAME           FIO_NAME(fiobj, FIOBJ___NAME_ARRAY)
#define FIO_REF_NAME             FIO_NAME(fiobj, FIOBJ___NAME_ARRAY)
#define FIO_REF_CONSTRUCTOR_ONLY 1
#define FIO_REF_DESTROY(a)                                                     \
  do {                                                                         \
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), destroy)                     \
    ((FIOBJ)FIOBJ_PTR_TAG(&a, FIOBJ_T_ARRAY));                                 \
    FIOBJ_MARK_MEMORY_FREE();                                                  \
  } while (0)
#define FIO_REF_INIT(a)                                                        \
  do {                                                                         \
    a = (FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), s))FIO_ARRAY_INIT;      \
    FIOBJ_MARK_MEMORY_ALLOC();                                                 \
  } while (0)
#if SIZE_T_MAX == 0xFFFFFFFF /* for 32bit system pointer alignment */
#define FIO_REF_METADATA uint32_t
#endif
#define FIO_ARRAY_TYPE            FIOBJ
#define FIO_ARRAY_TYPE_CMP(a, b)  FIO_NAME_BL(fiobj, eq)((a), (b))
#define FIO_ARRAY_TYPE_DESTROY(o) fiobj_free(o)
#define FIO_ARRAY_TYPE_CONCAT_COPY(dest, obj)                                  \
  do {                                                                         \
    dest = fiobj_dup(obj);                                                     \
  } while (0)
#define FIO_PTR_TAG(p)          FIOBJ_PTR_TAG(p, FIOBJ_T_ARRAY)
#define FIO_PTR_UNTAG(p)        FIOBJ_PTR_UNTAG(p)
#define FIO_PTR_TAG_VALIDATE(p) (FIOBJ_TYPE_CLASS(p) == FIOBJ_T_ARRAY)
#define FIO_PTR_TAG_TYPE        FIOBJ
#include FIO_INCLUDE_FILE

/* *****************************************************************************
FIOBJ Hash Maps
***************************************************************************** */

#define FIO_REF_NAME             FIO_NAME(fiobj, FIOBJ___NAME_HASH)
#define FIO_REF_CONSTRUCTOR_ONLY 1
#define FIO_REF_DESTROY(a)                                                     \
  do {                                                                         \
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), destroy)                      \
    ((FIOBJ)FIOBJ_PTR_TAG(&(a), FIOBJ_T_HASH));                                \
    FIOBJ_MARK_MEMORY_FREE();                                                  \
  } while (0)
#define FIO_REF_INIT(a)                                                        \
  do {                                                                         \
    a = (FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), s))FIO_MAP_INIT;         \
    FIOBJ_MARK_MEMORY_ALLOC();                                                 \
  } while (0)
#if SIZE_T_MAX == 0xFFFFFFFF /* for 32bit system pointer alignment */
#define FIO_REF_METADATA uint32_t
#endif
#define FIO_MAP_NAME              FIO_NAME(fiobj, FIOBJ___NAME_HASH)
#define FIO_MAP_ORDERED           1
#define FIO_MAP_KEY               FIOBJ
#define FIO_MAP_KEY_CMP(a, b)     FIO_NAME_BL(fiobj, eq)((a), (b))
#define FIO_MAP_KEY_COPY(dest, o) (dest = fiobj_dup(o))
#define FIO_MAP_KEY_DESTROY(o)    fiobj_free(o)
#define FIO_MAP_VALUE             FIOBJ
#define FIO_MAP_HASH_FN(o)        FIO_NAME2(fiobj, hash)(o)
#define FIO_MAP_VALUE_DESTROY(o)  fiobj_free(o)
#define FIO_MAP_VALUE_DISCARD(o)  fiobj_free(o)
#define FIO_PTR_TAG(p)            FIOBJ_PTR_TAG(p, FIOBJ_T_HASH)
#define FIO_PTR_UNTAG(p)          FIOBJ_PTR_UNTAG(p)
#define FIO_PTR_TAG_VALIDATE(p)   (FIOBJ_TYPE_CLASS(p) == FIOBJ_T_HASH)
#define FIO_PTR_TAG_TYPE          FIOBJ
/* TODO! auto-hash object value */
#include FIO_INCLUDE_FILE
/**
 * Sets a value in a hash map, allocating the key String and automatically
 * calculating the hash value.
 */
FIO_IFUNC
FIOBJ FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH),
               set2)(FIOBJ hash, const char *key, size_t len, FIOBJ value);

/**
 * Finds a value in the hash map, using a temporary String and automatically
 * calculating the hash value.
 */
FIO_IFUNC FIOBJ FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH),
                         get2)(FIOBJ hash, const char *buf, size_t len);

/**
 * Removes a value in a hash map, using a temporary String and automatically
 * calculating the hash value.
 */
FIO_IFUNC int FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH),
                       remove2)(FIOBJ hash,
                                const char *buf,
                                size_t len,
                                FIOBJ *old);

/* *****************************************************************************
FIOBJ JSON support
***************************************************************************** */

/**
 * Returns a JSON valid FIOBJ String, representing the object.
 *
 * If `dest` is an existing String, the formatted JSON data will be appended to
 * the existing string.
 */
FIO_IFUNC FIOBJ FIO_NAME2(fiobj, json)(FIOBJ dest, FIOBJ o, uint8_t beautify);

/**
 * Updates a Hash using JSON data.
 *
 * Parsing errors and non-dictionary object JSON data are silently ignored,
 * attempting to update the Hash as much as possible before any errors
 * encountered.
 *
 * Conflicting Hash data is overwritten (preferring the new over the old).
 *
 * Returns the number of bytes consumed. On Error, 0 is returned and no data is
 * consumed.
 */
SFUNC size_t FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH),
                      update_json)(FIOBJ hash, fio_str_info_s str);

/** Helper function, calls `fiobj_hash_update_json` with string information */
FIO_IFUNC size_t FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH),
                          update_json2)(FIOBJ hash, char *ptr, size_t len);

/**
 * Parses a C string for JSON data. If `consumed` is not NULL, the `size_t`
 * variable will contain the number of bytes consumed before the parser stopped
 * (due to either error or end of a valid JSON data segment).
 *
 * Returns a FIOBJ object matching the JSON valid C string `str`.
 *
 * If the parsing failed (no complete valid JSON data) `FIOBJ_INVALID` is
 * returned.
 */
SFUNC FIOBJ fiobj_json_parse(fio_str_info_s str, size_t *consumed);

/** Helper macro, calls `fiobj_json_parse` with string information */
#define fiobj_json_parse2(data_, len_, consumed)                               \
  fiobj_json_parse(FIO_STR_INFO2(data_, len_), consumed)

/**
 * Uses JavaScript style notation to find data in an object structure.
 *
 * For example, "[0].name" will return the "name" property of the first object
 * in an array object.
 *
 * Returns a temporary reference to the object or FIOBJ_INVALID on an error.
 *
 * Use `fiobj_dup` to collect an actual reference to the returned object.
 */
SFUNC FIOBJ fiobj_json_find(FIOBJ object, fio_str_info_s notation);
/**
 * Uses JavaScript style notation to find data in an object structure.
 *
 * For example, "[0].name" will return the "name" property of the first object
 * in an array object.
 *
 * Returns a temporary reference to the object or FIOBJ_INVALID on an error.
 *
 * Use `fiobj_dup` to collect an actual reference to the returned object.
 */
#define fiobj_json_find2(object, str, length)                                  \
  fiobj_json_find(object, FIO_STR_INFO2(str, length))

/* *****************************************************************************
FIOBJ Mustache support
***************************************************************************** */

/**
 * Builds a Mustache template using a FIOBJ context (usually a Hash).
 *
 * Returns a FIOBJ String with the rendered template. May return `FIOBJ_INVALID`
 * if nothing was written.
 */
FIO_IFUNC FIOBJ fiobj_mustache_build(fio_mustache_s *m, FIOBJ ctx);

/**
 * Builds a Mustache template using a FIOBJ context (usually a Hash).
 *
 * Writes output to `dest` string (may be `FIOBJ_INVALID` / `NULL`).
 *
 * Returns `dest` (or a new String). May return `FIOBJ_INVALID` if nothing was
 * written and `dest` was empty.
 */
FIO_IFUNC FIOBJ fiobj_mustache_build2(fio_mustache_s *m, FIOBJ dest, FIOBJ ctx);

/* *****************************************************************************







FIOBJ - Implementation - Inline / Macro like fucntions







***************************************************************************** */

/* *****************************************************************************
The FIOBJ Type
***************************************************************************** */

/** Returns an objects type. This isn't limited to known types. */
FIO_IFUNC size_t fiobj_type(FIOBJ o) {
  switch (FIOBJ_TYPE_CLASS(o)) {
  case FIOBJ_T_PRIMITIVE:
    switch ((uintptr_t)(o)) {
    case FIOBJ_T_NULL: return FIOBJ_T_NULL;
    case FIOBJ_T_TRUE: return FIOBJ_T_TRUE;
    case FIOBJ_T_FALSE: return FIOBJ_T_FALSE;
    };
    return FIOBJ_T_INVALID;
  case FIOBJ_T_NUMBER: return FIOBJ_T_NUMBER;
  case FIOBJ_T_FLOAT: return FIOBJ_T_FLOAT;
  case FIOBJ_T_STRING: return FIOBJ_T_STRING;
  case FIOBJ_T_ARRAY: return FIOBJ_T_ARRAY;
  case FIOBJ_T_HASH: return FIOBJ_T_HASH;
  case FIOBJ_T_OTHER: return (*fiobj_object_metadata(o))->type_id;
  }
  if (!o)
    return FIOBJ_T_NULL;
  return FIOBJ_T_INVALID;
}

/* *****************************************************************************
FIOBJ Memory Management
***************************************************************************** */

/** Increases an object's reference count (or copies) and returns it. */
FIO_IFUNC FIOBJ fiobj_dup(FIOBJ o) {
  switch (FIOBJ_TYPE_CLASS(o)) {
  case FIOBJ_T_PRIMITIVE: /* fall through */
  case FIOBJ_T_NUMBER:    /* fall through */
  case FIOBJ_T_FLOAT: /* fall through */ return o;
  case FIOBJ_T_STRING: /* fall through */
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), dup)(o);
    break;
  case FIOBJ_T_ARRAY: /* fall through */
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), dup)(o);
    break;
  case FIOBJ_T_HASH: /* fall through */
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), dup)(o);
    break;
  case FIOBJ_T_OTHER: /* fall through */ fiobj_object_dup(o);
  }
  return o;
}

/** Decreases an object's reference count or frees it. */
FIO_IFUNC void fiobj_free(FIOBJ o) {
  switch (FIOBJ_TYPE_CLASS(o)) {
  case FIOBJ_T_PRIMITIVE: /* fall through */
  case FIOBJ_T_NUMBER:    /* fall through */
  case FIOBJ_T_FLOAT: return;
  case FIOBJ_T_STRING:
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), free)(o);
    return;
  case FIOBJ_T_ARRAY:
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), free)(o);
    return;
  case FIOBJ_T_HASH:
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), free)(o);
    return;
  case FIOBJ_T_OTHER: (*fiobj_object_metadata(o))->free2(o); return;
  }
}

/* *****************************************************************************
FIOBJ Data / Info
***************************************************************************** */

/** Internal: compares two nestable objects. */
SFUNC unsigned char fiobj___test_eq_nested(FIOBJ restrict a,
                                           FIOBJ restrict b,
                                           size_t nesting);

/** Compares two objects. */
FIO_IFUNC unsigned char FIO_NAME_BL(fiobj, eq)(FIOBJ a, FIOBJ b) {
  if (a == b)
    return 1;
  if (FIOBJ_TYPE_CLASS(a) != FIOBJ_TYPE_CLASS(b))
    return 0;
  switch (FIOBJ_TYPE_CLASS(a)) {
  case FIOBJ_T_PRIMITIVE:
  case FIOBJ_T_NUMBER: /* fall through */
  case FIOBJ_T_FLOAT: /* fall through */ return a == b;
  case FIOBJ_T_STRING:
    return FIO_NAME_BL(FIO_NAME(fiobj, FIOBJ___NAME_STRING), eq)(a, b);
  case FIOBJ_T_ARRAY: return fiobj___test_eq_nested(a, b, 0);
  case FIOBJ_T_HASH: return fiobj___test_eq_nested(a, b, 0);
  case FIOBJ_T_OTHER:
    if ((*fiobj_object_metadata(a))->count(a) ||
        (*fiobj_object_metadata(b))->count(b)) {
      if ((*fiobj_object_metadata(a))->count(a) !=
          (*fiobj_object_metadata(b))->count(b))
        return 0;
      return fiobj___test_eq_nested(a, b, 0);
    }
    return (*fiobj_object_metadata(a))->type_id ==
               (*fiobj_object_metadata(b))->type_id &&
           (*fiobj_object_metadata(a))->is_eq(a, b);
  }
  return 0;
}

/** Returns a temporary String representation for any FIOBJ object. */
FIO_IFUNC fio_str_info_s FIO_NAME2(fiobj, cstr)(FIOBJ o) {
  switch (FIOBJ_TYPE_CLASS(o)) {
  case FIOBJ_T_PRIMITIVE:
    switch ((uintptr_t)(o)) {
    case FIOBJ_T_NULL: return FIO_STR_INFO2((char *)"null", 4);
    case FIOBJ_T_TRUE: return FIO_STR_INFO2((char *)"true", 4);
    case FIOBJ_T_FALSE: return FIO_STR_INFO2((char *)"false", 5);
    };
    return (fio_str_info_s){.buf = (char *)""};
  case FIOBJ_T_NUMBER:
    return FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), cstr)(o);
  case FIOBJ_T_FLOAT:
    return FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), cstr)(o);
  case FIOBJ_T_STRING:
    return FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), info)(o);
  case FIOBJ_T_ARRAY: /* fall through */
    return FIO_STR_INFO2((char *)"[...]", 5);
  case FIOBJ_T_HASH: {
    return FIO_STR_INFO2((char *)"{...}", 5);
  }
  case FIOBJ_T_OTHER: return (*fiobj_object_metadata(o))->to_s(o);
  }
  /* a non-explicit NULL is an empty string. */
  return (fio_str_info_s){.buf = (char *)""};
}

/** Returns an integer representation for any FIOBJ object. */
FIO_IFUNC intptr_t FIO_NAME2(fiobj, i)(FIOBJ o) {
  fio_str_info_s tmp;
  switch (FIOBJ_TYPE_CLASS(o)) {
  case FIOBJ_T_PRIMITIVE:
    switch ((uintptr_t)(o)) {
    case FIOBJ_T_NULL: return 0;
    case FIOBJ_T_TRUE: return 1;
    case FIOBJ_T_FALSE: return 0;
    };
    return -1;
  case FIOBJ_T_NUMBER:
    return FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), i)(o);
  case FIOBJ_T_FLOAT:
    return FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), i)(o);
  case FIOBJ_T_STRING:
    tmp = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), info)(o);
    if (!tmp.len)
      return 0;
    return fio_atol(&tmp.buf);
  case FIOBJ_T_ARRAY:
    return FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), count)(o);
  case FIOBJ_T_HASH:
    return FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), count)(o);
  case FIOBJ_T_OTHER: return (*fiobj_object_metadata(o))->to_i(o);
  }
  if (!o)
    return 0;
  return -1;
}

/** Returns a float (double) representation for any FIOBJ object. */
FIO_IFUNC double FIO_NAME2(fiobj, f)(FIOBJ o) {
  fio_str_info_s tmp;
  switch (FIOBJ_TYPE_CLASS(o)) {
  case FIOBJ_T_PRIMITIVE:
    switch ((uintptr_t)(o)) {
    case FIOBJ_T_FALSE: /* fall through */
    case FIOBJ_T_NULL: return 0.0;
    case FIOBJ_T_TRUE: return 1.0;
    };
    return -1.0;
  case FIOBJ_T_NUMBER:
    return FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), f)(o);
  case FIOBJ_T_FLOAT:
    return FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), f)(o);
  case FIOBJ_T_STRING:
    tmp = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), info)(o);
    if (!tmp.len)
      return 0;
    return (double)fio_atof(&tmp.buf);
  case FIOBJ_T_ARRAY:
    return (double)FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), count)(o);
  case FIOBJ_T_HASH:
    return (double)FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), count)(o);
  case FIOBJ_T_OTHER: return (*fiobj_object_metadata(o))->to_f(o);
  }
  if (!o)
    return 0.0;
  return -1.0;
}

/* *****************************************************************************
FIOBJ Integers
***************************************************************************** */

#define FIO_REF_NAME     fiobj___bignum
#define FIO_REF_TYPE     intptr_t
#define FIO_REF_METADATA const FIOBJ_class_vtable_s *
#define FIO_REF_METADATA_INIT(m)                                               \
  do {                                                                         \
    m = &FIOBJ___NUMBER_CLASS_VTBL;                                            \
    FIOBJ_MARK_MEMORY_ALLOC();                                                 \
  } while (0)
#define FIO_REF_METADATA_DESTROY(m)                                            \
  do {                                                                         \
    FIOBJ_MARK_MEMORY_FREE();                                                  \
  } while (0)
#define FIO_PTR_TAG(p)          FIOBJ_PTR_TAG(p, FIOBJ_T_OTHER)
#define FIO_PTR_UNTAG(p)        FIOBJ_PTR_UNTAG(p)
#define FIO_PTR_TAG_VALIDATE(p) (FIOBJ_TYPE_CLASS(p) == FIOBJ_T_OTHER)
#define FIO_PTR_TAG_TYPE        FIOBJ
#include FIO_INCLUDE_FILE

/* Places a 61 or 29 bit signed integer in the leftmost bits of a word. */
#define FIO_NUMBER_ENCODE(i) (((uintptr_t)(i) << 3) | FIOBJ_T_NUMBER)
/* Reads a 61 or 29 bit signed integer from the leftmost bits of a word. */
#define FIO_NUMBER_DECODE(i)                                                   \
  ((intptr_t)(((uintptr_t)(i) >> 3) |                                          \
              ((uintptr_t)0 -                                                  \
               (((uintptr_t)(i) >> 3) &                                        \
                ((uintptr_t)1 << ((sizeof(uintptr_t) * 8) - 4))))))

/** Creates a new Number object. */
FIO_IFUNC FIOBJ FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER),
                         new)(intptr_t i) {
  FIOBJ o = (FIOBJ)FIO_NUMBER_ENCODE(i);
  if (FIO_NUMBER_DECODE(o) == i)
    return o;
  o = fiobj___bignum_new2();

  FIO_PTR_MATH_RMASK(intptr_t, o, 3)[0] = i;
  return o;
}

/** Reads the number from a FIOBJ number. */
FIO_IFUNC intptr_t FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), i)(FIOBJ i) {
  if (FIOBJ_TYPE_CLASS(i) == FIOBJ_T_NUMBER)
    return FIO_NUMBER_DECODE(i);
  if (FIOBJ_TYPE_CLASS(i) == FIOBJ_T_OTHER)
    return FIO_PTR_MATH_RMASK(intptr_t, i, 3)[0];
  return 0;
}

/** Reads the number from a FIOBJ number, fitting it in a double. */
FIO_IFUNC double FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), f)(FIOBJ i) {
  return (double)FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), i)(i);
}

/** Frees a FIOBJ number. */
FIO_IFUNC void FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), free)(FIOBJ i) {
  if (FIOBJ_TYPE_CLASS(i) == FIOBJ_T_OTHER)
    fiobj___bignum_free2(i);
}

FIO_IFUNC unsigned char FIO_NAME_BL(fiobj___num, eq)(FIOBJ restrict a,
                                                     FIOBJ restrict b) {
  /* it should be safe to assume that FIOBJ_TYPE_CLASS(i) != FIOBJ_T_NUMBER */
  return FIO_PTR_MATH_RMASK(intptr_t, a, 3)[0] ==
         FIO_PTR_MATH_RMASK(intptr_t, b, 3)[0];
  // return FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), i)(a) ==
  //        FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), i)(b);
}

#undef FIO_NUMBER_ENCODE
#undef FIO_NUMBER_DECODE

/* *****************************************************************************
FIOBJ Floats
***************************************************************************** */

#define FIO_REF_NAME     fiobj___bigfloat
#define FIO_REF_TYPE     double
#define FIO_REF_METADATA const FIOBJ_class_vtable_s *
#define FIO_REF_METADATA_INIT(m)                                               \
  do {                                                                         \
    m = &FIOBJ___FLOAT_CLASS_VTBL;                                             \
    FIOBJ_MARK_MEMORY_ALLOC();                                                 \
  } while (0)
#define FIO_REF_METADATA_DESTROY(m)                                            \
  do {                                                                         \
    FIOBJ_MARK_MEMORY_FREE();                                                  \
  } while (0)
#define FIO_PTR_TAG(p)          FIOBJ_PTR_TAG(p, FIOBJ_T_OTHER)
#define FIO_PTR_UNTAG(p)        FIOBJ_PTR_UNTAG(p)
#define FIO_PTR_TAG_VALIDATE(p) (FIOBJ_TYPE_CLASS(p) == FIOBJ_T_OTHER)
#define FIO_PTR_TAG_TYPE        FIOBJ
#include FIO_INCLUDE_FILE

/** Creates a new Float object. */
FIO_IFUNC FIOBJ FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), new)(double i) {
  FIOBJ ui;
  if (sizeof(double) <= sizeof(FIOBJ)) {
    union {
      double d;
      uintptr_t i;
    } punned;
    punned.i = 0; /* dead code, but leave it, just in case */
    punned.d = i;
    if ((punned.i & 7) == 0) {
      return (FIOBJ)(punned.i | FIOBJ_T_FLOAT);
    }
  }
  ui = fiobj___bigfloat_new2();

  FIO_PTR_MATH_RMASK(double, ui, 3)[0] = i;
  return ui;
}

/** Reads the integer part from a FIOBJ Float. */
FIO_IFUNC intptr_t FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), i)(FIOBJ i) {
  return (intptr_t)floor(FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), f)(i));
}

/** Reads the number from a FIOBJ number, fitting it in a double. */
FIO_IFUNC double FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), f)(FIOBJ i) {
  if (sizeof(double) <= sizeof(FIOBJ) && FIOBJ_TYPE_CLASS(i) == FIOBJ_T_FLOAT) {
    union {
      double d;
      uint64_t i;
    } punned;
    punned.d = 0; /* dead code, but leave it, just in case */
    punned.i = (uint64_t)(uintptr_t)i;
    punned.i = ((uint64_t)(uintptr_t)i & (~(uintptr_t)7ULL));
    return punned.d;
  }
  if (FIOBJ_TYPE_CLASS(i) == FIOBJ_T_OTHER)
    return FIO_PTR_MATH_RMASK(double, i, 3)[0];
  return 0.0;
}

/** Frees a FIOBJ number. */
FIO_IFUNC void FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), free)(FIOBJ i) {
  if (FIOBJ_TYPE_CLASS(i) == FIOBJ_T_OTHER)
    fiobj___bigfloat_free2(i);
  return;
}

/* *****************************************************************************
FIOBJ Basic Iteration
***************************************************************************** */

/**
 * Performs a task for each element held by the FIOBJ object.
 *
 * If `task` returns -1, the `each` loop will break (stop).
 *
 * Returns the "stop" position - the number of elements processed + `start_at`.
 */
FIO_SFUNC uint32_t fiobj_each1(FIOBJ o,
                               int (*task)(fiobj_each_s *e),
                               void *udata,
                               int32_t start_at) {
  switch (FIOBJ_TYPE_CLASS(o)) {
  case FIOBJ_T_PRIMITIVE: /* fall through */
  case FIOBJ_T_NUMBER:    /* fall through */
  case FIOBJ_T_STRING:    /* fall through */
  case FIOBJ_T_FLOAT: return 0;
  case FIOBJ_T_ARRAY:
    return FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), each)(
        o,
        (int (*)(FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), each_s *)))task,
        udata,
        start_at);
  case FIOBJ_T_HASH:
    return FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), each)(
        o,
        (int (*)(FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), each_s *)))task,
        udata,
        start_at);
  case FIOBJ_T_OTHER:
    return (*fiobj_object_metadata(o))->each1(o, task, udata, start_at);
  }
  return 0;
}

/* *****************************************************************************
FIOBJ Hash Maps
***************************************************************************** */

/** Calculates an object's hash value for a specific hash map object. */
FIO_IFUNC uint64_t FIO_NAME2(fiobj, hash)(FIOBJ o) {
  uint64_t seed = (uint64_t)(uintptr_t)&FIO_NAME2(fiobj, hash);
  switch (FIOBJ_TYPE_CLASS(o)) {
  case FIOBJ_T_PRIMITIVE:
    return fio_risky_hash(&o, sizeof(o), seed + (uintptr_t)o);
  case FIOBJ_T_NUMBER: {
    uintptr_t tmp = FIO_NAME2(fiobj, i)(o);
    return fio_risky_hash(&tmp, sizeof(tmp), seed);
  }
  case FIOBJ_T_FLOAT: {
    double tmp = FIO_NAME2(fiobj, f)(o);
    return fio_risky_hash(&tmp, sizeof(tmp), seed);
  }
  case FIOBJ_T_STRING: /* fall through */
    return FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), hash)(o, seed);
  case FIOBJ_T_ARRAY: {
    uint64_t h = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), count)(o);
    h += fio_risky_hash(&h, sizeof(h), seed + FIOBJ_T_ARRAY);
    {
      FIOBJ *a = FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), ptr)(o);
      const size_t count =
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), count)(o);
      if (a) {
        for (size_t i = 0; i < count; ++i) {
          h += FIO_NAME2(fiobj, hash)(a[i]);
        }
      }
    }
    return h;
  }
  case FIOBJ_T_HASH: {
    uint64_t h = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), count)(o);
    h += fio_risky_hash(&h, sizeof(h), seed + FIOBJ_T_HASH);
    FIO_MAP_EACH(FIO_NAME(fiobj, FIOBJ___NAME_HASH), o, i) {
      h += i.hash;
      h += FIO_NAME2(fiobj, hash)(i.value);
    }
    return h;
  }
  case FIOBJ_T_OTHER: {
    /* TODO: can we avoid "stringifying" the object? */
    fio_str_info_s tmp = (*fiobj_object_metadata(o))->to_s(o);
    return fio_risky_hash(tmp.buf, tmp.len, seed);
  }
  }
  return 0;
}

/**
 * Sets a String value in a hash map, allocating the String and automatically
 * calculating the hash value.
 */
FIO_IFUNC FIOBJ FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH),
                         set2)(FIOBJ hash,
                               const char *key,
                               size_t len,
                               FIOBJ value) {
  FIOBJ tmp = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), new)();
  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)(tmp, (char *)key, len);
  FIOBJ v =
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), set)(hash, tmp, value, NULL);
  fiobj_free(tmp);
  return v;
}

/**
 * Finds a String value in a hash map, using a temporary String and
 * automatically calculating the hash value.
 */
FIO_IFUNC FIOBJ FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH),
                         get2)(FIOBJ hash, const char *buf, size_t len) {
  if (FIOBJ_TYPE_CLASS(hash) != FIOBJ_T_HASH)
    return FIOBJ_INVALID;
  FIOBJ_STR_TEMP_VAR_STATIC(tmp, buf, len);
  FIOBJ v = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), get)(hash, tmp);
  return v;
}

/**
 * Removes a String value in a hash map, using a temporary String and
 * automatically calculating the hash value.
 */
FIO_IFUNC int FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH),
                       remove2)(FIOBJ hash,
                                const char *buf,
                                size_t len,
                                FIOBJ *old) {
  FIOBJ_STR_TEMP_VAR_STATIC(tmp, buf, len);
  int r = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), remove)(hash, tmp, old);
  FIOBJ_STR_TEMP_DESTROY(tmp);
  return r;
}

/** Updates a hash using information from another Hash. */
FIO_IFUNC void FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), update)(FIOBJ dest,
                                                                    FIOBJ src) {
  if (FIOBJ_TYPE_CLASS(dest) != FIOBJ_T_HASH ||
      FIOBJ_TYPE_CLASS(src) != FIOBJ_T_HASH)
    return;
  FIO_MAP_EACH(FIO_NAME(fiobj, FIOBJ___NAME_HASH), src, i) {
    if (i.key == FIOBJ_INVALID || FIOBJ_TYPE_CLASS(i.key) == FIOBJ_T_NULL) {
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), remove)(dest, i.key, NULL);
      continue;
    }
    register FIOBJ tmp;
    switch (FIOBJ_TYPE_CLASS(i.value)) {
    case FIOBJ_T_ARRAY:
      /* TODO? decide if we should merge elements or overwrite...? */
      tmp = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), get)(dest, i.key);
      if (FIOBJ_TYPE_CLASS(tmp) == FIOBJ_T_ARRAY) {
        FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), concat)
        (tmp, i.value);
        continue;
      }
      break;
    case FIOBJ_T_HASH:
      tmp = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), get)(dest, i.key);
      if (FIOBJ_TYPE_CLASS(tmp) == FIOBJ_T_HASH)
        FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), update)
      (dest, i.value);
      else break;
      continue;
    case FIOBJ_T_NUMBER:    /* fall through */
    case FIOBJ_T_PRIMITIVE: /* fall through */
    case FIOBJ_T_STRING:    /* fall through */
    case FIOBJ_T_FLOAT:     /* fall through */
    case FIOBJ_T_OTHER: break;
    }
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), set)
    (dest, i.key, fiobj_dup(i.value), NULL);
  }
}

/* *****************************************************************************
FIOBJ JSON support (inline functions)
***************************************************************************** */

typedef struct {
  FIOBJ json;
  size_t level;
  uint8_t beautify;
} fiobj___json_format_internal__s;

/* internal helper function for recursive JSON formatting. */
SFUNC void fiobj___json_format_internal__(fiobj___json_format_internal__s *,
                                          FIOBJ);

/** Helper function, calls `fiobj_hash_update_json` with string information */
FIO_IFUNC size_t FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH),
                          update_json2)(FIOBJ hash, char *ptr, size_t len) {
  return FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH),
                  update_json)(hash, FIO_STR_INFO2(ptr, len));
}

/**
 * Returns a JSON valid FIOBJ String, representing the object.
 *
 * If `dest` is an existing String, the formatted JSON data will be appended to
 * the existing string.
 */
FIO_IFUNC FIOBJ FIO_NAME2(fiobj, json)(FIOBJ dest, FIOBJ o, uint8_t beautify) {
  fiobj___json_format_internal__s args =
      (fiobj___json_format_internal__s){.json = dest, .beautify = beautify};
  if (FIOBJ_TYPE_CLASS(dest) != FIOBJ_T_STRING)
    args.json = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), new)();
  fiobj___json_format_internal__(&args, o);
  return args.json;
}

#undef FIO___RECURSIVE_INCLUDE /* from now on, type helpers are internal */

/* *****************************************************************************
FIOBJ Mustache support - inline implementation
***************************************************************************** */

/* callback should write `txt` to output and return updated `udata.` */
FIO_SFUNC void *fiobj___mustache_write_text(void *udata, fio_buf_info_s txt);
/* same as `write_text`, but should also  HTML escape (sanitize) data. */
FIO_SFUNC void *fiobj___mustache_write_text_escaped(void *udata,
                                                    fio_buf_info_s raw);
/* callback should return a new context pointer with the value of `name`. */
FIO_SFUNC void *fiobj___mustache_get_var(void *ctx, fio_buf_info_s name);
/* if context is an Array, should return its length. */
FIO_SFUNC size_t fiobj___mustache_array_length(void *ctx);
/* if context is an Array, should return a context pointer @ index. */
FIO_SFUNC void *fiobj___mustache_get_var_index(void *ctx, size_t index);
/* should return the String value of context `var` as a `fio_buf_info_s`. */
FIO_SFUNC fio_buf_info_s fiobj___mustache_var2str(void *var);
/* should return non-zero if the context pointer refers to a valid value. */
FIO_SFUNC int fiobj___mustache_var_is_truthful(void *ctx);

/**
 * Builds a Mustache template using a FIOBJ context (usually a Hash).
 *
 * Returns a FIOBJ String with the rendered template. May return `FIOBJ_INVALID`
 * if nothing was written.
 */
FIO_IFUNC FIOBJ fiobj_mustache_build(fio_mustache_s *m, FIOBJ ctx) {
  return (FIOBJ)fio_mustache_build(
      m,
      .write_text = fiobj___mustache_write_text,
      .write_text_escaped = fiobj___mustache_write_text_escaped,
      .get_var = fiobj___mustache_get_var,
      .array_length = fiobj___mustache_array_length,
      .get_var_index = fiobj___mustache_get_var_index,
      .var2str = fiobj___mustache_var2str,
      .var_is_truthful = fiobj___mustache_var_is_truthful,
      .ctx = ctx,
      .udata = NULL);
}

/**
 * Builds a Mustache template using a FIOBJ context (usually a Hash).
 *
 * Writes output to `dest` string (may be `FIOBJ_INVALID` / `NULL`).
 *
 * Returns `dest` (or a new String). May return `FIOBJ_INVALID` if nothing was
 * written and `dest` was empty.
 */
FIO_IFUNC FIOBJ fiobj_mustache_build2(fio_mustache_s *m,
                                      FIOBJ dest,
                                      FIOBJ ctx) {
  dest = (FIOBJ)fio_mustache_build(
      m,
      .write_text = fiobj___mustache_write_text,
      .write_text_escaped = fiobj___mustache_write_text_escaped,
      .get_var = fiobj___mustache_get_var,
      .array_length = fiobj___mustache_array_length,
      .get_var_index = fiobj___mustache_get_var_index,
      .var2str = fiobj___mustache_var2str,
      .var_is_truthful = fiobj___mustache_var_is_truthful,
      .ctx = ctx,
      .udata = dest);
  return dest;
}

/* callback should write `txt` to output and return updated `udata.` */
FIO_SFUNC void *fiobj___mustache_write_text(void *udata, fio_buf_info_s txt) {
  FIOBJ d = (FIOBJ)udata;
  if (!d)
    d = fiobj_str_new_buf(txt.len + 32);
  fiobj_str_write(d, txt.buf, txt.len);
  return (void *)d;
}
/* same as `write_text`, but should also  HTML escape (sanitize) data. */
FIO_SFUNC void *fiobj___mustache_write_text_escaped(void *ud,
                                                    fio_buf_info_s raw) {
  FIOBJ d = (FIOBJ)ud;
  if (!d)
    d = fiobj_str_new_buf(raw.len + 32);
  fiobj_str_write_html_escape(d, raw.buf, raw.len);
  return (void *)d;
}
/* callback should return a new context pointer with the value of `name`. */
FIO_SFUNC void *fiobj___mustache_get_var(void *ctx, fio_buf_info_s name) {
  if (!ctx)
    return NULL;
  if (!FIOBJ_TYPE_IS((FIOBJ)ctx, FIOBJ_T_HASH))
    return NULL;
  return fiobj_hash_get2((FIOBJ)ctx, name.buf, name.len);
}
/* if context is an Array, should return its length. */
FIO_SFUNC size_t fiobj___mustache_array_length(void *ctx) {
  if (!FIOBJ_TYPE_IS((FIOBJ)ctx, FIOBJ_T_ARRAY))
    return 0;
  return fiobj_array_count((FIOBJ)ctx);
}
/* if context is an Array, should return a context pointer @ index. */
FIO_SFUNC void *fiobj___mustache_get_var_index(void *ctx, size_t index) {
  if (!FIOBJ_TYPE_IS((FIOBJ)ctx, FIOBJ_T_ARRAY) || index > 0xFFFFFFFFUL)
    return NULL;
  return fiobj_array_get((FIOBJ)ctx, (uint32_t)index);
}
/* should return the String value of context `var` as a `fio_buf_info_s`. */
FIO_SFUNC fio_buf_info_s fiobj___mustache_var2str(void *var) {
  fio_buf_info_s r = {0};
  if (!var || var == fiobj_null())
    return r;
  fio_str_info_s tmp = fiobj2cstr((FIOBJ)var);
  r = FIO_STR2BUF_INFO(tmp);
  return r;
}
/* should return non-zero if the context pointer refers to a valid value. */
FIO_SFUNC int fiobj___mustache_var_is_truthful(void *v) {
  return v && (FIOBJ)v != fiobj_null() && (FIOBJ)v != fiobj_false() &&
         (!FIOBJ_TYPE_IS((FIOBJ)v, FIOBJ_T_ARRAY) ||
          fiobj_array_count((FIOBJ)v));
}

/* *****************************************************************************


FIOBJ - Externed Implementation


***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* *****************************************************************************
FIOBJ Basic Object vtable
***************************************************************************** */

FIOBJ_EXTERN_OBJ_IMP const FIOBJ_class_vtable_s FIOBJ___OBJECT_CLASS_VTBL = {
    .type_id = 99, /* type IDs below 100 are reserved. */
};

/* *****************************************************************************
FIOBJ Complex Iteration
***************************************************************************** */
typedef struct {
  FIOBJ obj;
  size_t pos;
} fiobj___stack_element_s;

#define FIO_ARRAY_NAME fiobj___active_stack
#define FIO_ARRAY_TYPE fiobj___stack_element_s
#define FIO_ARRAY_COPY(dest, src)                                              \
  do {                                                                         \
    (dest).obj = fiobj_dup((src).obj);                                         \
    (dest).pos = (src).pos;                                                    \
  } while (0)
#define FIO_ARRAY_TYPE_CMP(a, b) (a).obj == (b).obj
#define FIO_ARRAY_DESTROY(o)     fiobj_free(o)
#define FIO___RECURSIVE_INCLUDE  1
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

#define FIO_ARRAY_TYPE_CMP(a, b) (a).obj == (b).obj
#define FIO_ARRAY_NAME           fiobj___stack
#define FIO_ARRAY_TYPE           fiobj___stack_element_s
#define FIO___RECURSIVE_INCLUDE  1
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

typedef struct {
  int (*task)(fiobj_each_s *info);
  void *arg;
  FIOBJ next;
  size_t count;
  fiobj___stack_s stack;
  uint32_t end;
  uint8_t stop;
} fiobj_____each2_data_s;

FIO_SFUNC uint32_t fiobj____each2_element_count(FIOBJ o) {
  switch (FIOBJ_TYPE_CLASS(o)) {
  case FIOBJ_T_PRIMITIVE: /* fall through */
  case FIOBJ_T_NUMBER:    /* fall through */
  case FIOBJ_T_STRING:    /* fall through */
  case FIOBJ_T_FLOAT: return 0;
  case FIOBJ_T_ARRAY:
    return FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), count)(o);
  case FIOBJ_T_HASH:
    return FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), count)(o);
  case FIOBJ_T_OTHER: /* fall through */
    return (*fiobj_object_metadata(o))->count(o);
  }
  return 0;
}
FIO_SFUNC int fiobj____each2_wrapper_task(fiobj_each_s *e) {
  fiobj_____each2_data_s *d = (fiobj_____each2_data_s *)e->udata;
  e->task = d->task;
  e->udata = d->arg;
  d->stop = (d->task(e) == -1);
  d->task = e->task;
  d->arg = e->udata;
  e->task = fiobj____each2_wrapper_task;
  e->udata = d;
  ++d->count;
  if (d->stop)
    return -1;
  uint32_t c = fiobj____each2_element_count(e->value);
  if (c) {
    d->next = e->value;
    d->end = c;
    return -1;
  }
  return 0;
}

/**
 * Performs a task for the object itself and each element held by the FIOBJ
 * object or any of it's elements (a deep task).
 *
 * The order of performance is by order of appearance, as if all nesting levels
 * were flattened.
 *
 * If `task` returns -1, the `each` loop will break (stop).
 *
 * Returns the number of elements processed.
 */
SFUNC uint32_t fiobj_each2(FIOBJ o, int (*task)(fiobj_each_s *), void *udata) {
  /* TODO - move to recursion with nesting limiter? */
  fiobj_____each2_data_s d = {
      .task = task,
      .arg = udata,
      .next = FIOBJ_INVALID,
      .stack = FIO_ARRAY_INIT,
  };
  struct FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), each_s) e_tmp = {

      .parent = FIOBJ_INVALID,
      .task = (int (*)(FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH),
                                each_s) *))fiobj____each2_wrapper_task,
      .udata = &d,
      .value = o,
  };
  fiobj___stack_element_s i = {.obj = o, .pos = 0};
  uint32_t end = fiobj____each2_element_count(o);
  fiobj____each2_wrapper_task((fiobj_each_s *)&e_tmp);
  while (!d.stop && i.obj && i.pos < end) {
    i.pos =
        fiobj_each1(i.obj, fiobj____each2_wrapper_task, &d, (uint32_t)i.pos);
    if (d.next != FIOBJ_INVALID) {
      if (fiobj___stack_count(&d.stack) + 1 > FIOBJ_MAX_NESTING) {
        FIO_LOG_ERROR("FIOBJ nesting level too deep (%u)."
                      "`fiobj_each2` stopping loop early.",
                      (unsigned int)fiobj___stack_count(&d.stack));
        d.stop = 1;
        continue;
      }
      fiobj___stack_push(&d.stack, i);
      i.pos = 0;
      i.obj = d.next;
      d.next = FIOBJ_INVALID;
      end = d.end;
    } else {
      /* re-collect end position to accommodate for changes */
      end = fiobj____each2_element_count(i.obj);
    }
    while (i.pos >= end && fiobj___stack_count(&d.stack)) {
      fiobj___stack_pop(&d.stack, &i);
      end = fiobj____each2_element_count(i.obj);
    }
  };
  fiobj___stack_destroy(&d.stack);
  return (uint32_t)d.count;
}

/* *****************************************************************************
FIOBJ Hash / Array / Other (enumerable) Equality test.
***************************************************************************** */

/** Internal: compares two nestable objects. */
SFUNC unsigned char fiobj___test_eq_nested(FIOBJ restrict a,
                                           FIOBJ restrict b,
                                           size_t nesting) {
  if (a == b)
    return 1;
  if (FIOBJ_TYPE_CLASS(a) != FIOBJ_TYPE_CLASS(b))
    return 0;
  if (fiobj____each2_element_count(a) != fiobj____each2_element_count(b))
    return 0;
  if (nesting >= FIOBJ_MAX_NESTING)
    return 0;

  ++nesting;

  switch (FIOBJ_TYPE_CLASS(a)) {
  case FIOBJ_T_PRIMITIVE: /* fall through */
  case FIOBJ_T_NUMBER:    /* fall through */
  case FIOBJ_T_FLOAT: return a == b;
  case FIOBJ_T_STRING:
    return FIO_NAME_BL(FIO_NAME(fiobj, FIOBJ___NAME_STRING), eq)(a, b);

  case FIOBJ_T_ARRAY:
    if (!fiobj____each2_element_count(a))
      return 1;
    /* test each array member with matching index */
    {
      const size_t count = fiobj____each2_element_count(a);
      for (size_t i = 0; i < count; ++i) {
        if (!fiobj___test_eq_nested(
                FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), get)(a,
                                                                   (int32_t)i),
                FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), get)(b,
                                                                   (int32_t)i),
                nesting))
          return 0;
      }
    }
    return 1;

  case FIOBJ_T_HASH:
    if (!fiobj____each2_element_count(a))
      return 1;
    FIO_MAP_EACH(FIO_NAME(fiobj, FIOBJ___NAME_HASH), a, pos) {
      FIOBJ val = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), get)(b, pos.key);
      if (!fiobj___test_eq_nested(val, pos.value, nesting))
        return 0;
    }
    return 1;
  case FIOBJ_T_OTHER:
    if (!fiobj____each2_element_count(a) &&
        (*fiobj_object_metadata(a))->is_eq(a, b))
      return 1;
    /* TODO: iterate through objects and test equality within nesting */
    return (*fiobj_object_metadata(a))->is_eq(a, b);
    return 1;
  }
  return 0;
}

/* *****************************************************************************
FIOBJ general helpers
***************************************************************************** */

FIO_SFUNC uint32_t fiobj___count_noop(FIOBJ o) {
  return 0;
  (void)o;
}

/* *****************************************************************************
FIOBJ Integers (bigger numbers)
***************************************************************************** */

SFUNC fio_str_info_s FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER),
                               cstr)(FIOBJ i) {
  static char buf[32 * 128];
  static uint8_t pos = 0;
  size_t at = fio_atomic_add(&pos, 1);
  fio_str_info_s s = {.buf = buf + ((at & 127) << 5), .capa = 31};
  fio_string_write_i(&s,
                     NULL,
                     FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), i)(i));
  return s;
}

FIOBJ_EXTERN_OBJ_IMP const FIOBJ_class_vtable_s FIOBJ___NUMBER_CLASS_VTBL = {
    /**
     * MUST return a unique number to identify object type.
     *
     * Numbers (IDs) under 100 are reserved.
     */
    .type_id = FIOBJ_T_NUMBER,
    /** Test for equality between two objects with the same `type_id` */
    .is_eq = FIO_NAME_BL(fiobj___num, eq),
    /** Converts an object to a String */
    .to_s = FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), cstr),
    /** Converts and object to an integer */
    .to_i = FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), i),
    /** Converts and object to a float */
    .to_f = FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), f),
    /** Returns the number of exposed elements held by the object, if any. */
    .count = fiobj___count_noop,
    /** Iterates the exposed elements held by the object. See `fiobj_each1`. */
    .each1 = NULL,
    /** Deallocates the element (but NOT any of it's exposed elements). */
    .free2 = fiobj___bignum_free2,
};

/* *****************************************************************************
FIOBJ Floats (bigger / smaller doubles)
***************************************************************************** */

FIO_SFUNC unsigned char FIO_NAME_BL(fiobj___float, eq)(FIOBJ restrict a,
                                                       FIOBJ restrict b) {
  unsigned char r = 0;
  union {
    uint64_t u;
    double f;
  } da, db;
  da.f = FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), f)(a);
  db.f = FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), f)(b);
  /* regular equality? */
  r |= da.f == db.f;
  /* test for small rounding errors (4 bit difference) on normalize floats */
  r |= !((da.u ^ db.u) & UINT64_C(0xFFFFFFFFFFFFFFF0)) &&
       (da.u & UINT64_C(0x7FF0000000000000));
  /* test for small ULP: */
  r |= (((da.u > db.u) ? da.u - db.u : db.u - da.u) < 2);
  /* test for +-0 */
  r |= !((da.u | db.u) & UINT64_C(0x7FFFFFFFFFFFFFFF));
  return r;
}

SFUNC fio_str_info_s FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT),
                               cstr)(FIOBJ i) {
  static char buf[32 * 128];
  static uint8_t pos = 0;
  size_t at = fio_atomic_add(&pos, 1);
  char *tmp = buf + ((at & 127) << 5);
  size_t len =
      fio_ftoa(tmp, FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), f)(i), 10);
  tmp[len] = 0;
  return FIO_STR_INFO2(tmp, len);
}

FIOBJ_EXTERN_OBJ_IMP const FIOBJ_class_vtable_s FIOBJ___FLOAT_CLASS_VTBL = {
    /**
     * MUST return a unique number to identify object type.
     *
     * Numbers (IDs) under 100 are reserved.
     */
    .type_id = FIOBJ_T_FLOAT,
    /** Test for equality between two objects with the same `type_id` */
    .is_eq = FIO_NAME_BL(fiobj___float, eq),
    /** Converts an object to a String */
    .to_s = FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), cstr),
    /** Converts and object to an integer */
    .to_i = FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), i),
    /** Converts and object to a float */
    .to_f = FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), f),
    /** Returns the number of exposed elements held by the object, if any. */
    .count = fiobj___count_noop,
    /** Iterates the exposed elements held by the object. See `fiobj_each1`. */
    .each1 = NULL,
    /** Deallocates the element (but NOT any of it's exposed elements). */
    .free2 = fiobj___bigfloat_free2,
};

/* *****************************************************************************
FIOBJ JSON support - output
***************************************************************************** */

FIO_IFUNC void fiobj___json_format_internal_beauty_pad(FIOBJ json,
                                                       size_t level) {
  size_t pos = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(json);
  fio_str_info_s tmp = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING),
                                resize)(json, (level << 1) + pos + 2);
  tmp.buf[pos++] = '\r';
  tmp.buf[pos++] = '\n';
  for (size_t i = 0; i < level; ++i) {
    tmp.buf[pos++] = ' ';
    tmp.buf[pos++] = ' ';
  }
}

SFUNC void fiobj___json_format_internal__(fiobj___json_format_internal__s *args,
                                          FIOBJ o) {
  switch (FIOBJ_TYPE(o)) {
  case FIOBJ_T_TRUE:
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
    (args->json, "true", 4);
    return;
  case FIOBJ_T_FALSE:
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
    (args->json, "false", 5);
    return;
  case FIOBJ_T_NULL:
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
    (args->json, "null", 4);
    return;
  case FIOBJ_T_NUMBER:
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write_i)
    (args->json, FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), i)(o));
    return;
  case FIOBJ_T_FLOAT: {
    char tmp_buf[256];
    size_t len = fio_ftoa(tmp_buf,
                          FIO_NAME2(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), f)(o),
                          10);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
    (args->json, tmp_buf, len);
    return;
  }
  case FIOBJ_T_STRING: /* fall through */
  default: {
    fio_str_info_s info = FIO_NAME2(fiobj, cstr)(o);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)(args->json, "\"", 1);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write_escape)
    (args->json, info.buf, info.len);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)(args->json, "\"", 1);
    return;
  }
  case FIOBJ_T_ARRAY:
    if (!FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), count)(o))
      goto empty_array;
    if (args->level == FIOBJ_MAX_NESTING)
      goto err_array_nesting;
    {
      ++args->level;
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)(args->json, "[", 1);
      const uint32_t len =
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), count)(o);
      if (args->beautify) {
        fiobj___json_format_internal_beauty_pad(args->json, args->level);
      }
      fiobj___json_format_internal__(
          args,
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), get)(o, 0));
      if (args->beautify) {
        for (size_t i = 1; i < len; ++i) {
          FIOBJ child =
              FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), get)(o, i);
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
          (args->json, ",", 1);
          fiobj___json_format_internal_beauty_pad(args->json, args->level);
          fiobj___json_format_internal__(args, child);
        }
      } else {
        for (size_t i = 1; i < len; ++i) {
          FIOBJ child =
              FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), get)(o, i);
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
          (args->json, ",", 1);
          fiobj___json_format_internal__(args, child);
        }
      }
      --args->level;
      if (args->beautify) {
        fiobj___json_format_internal_beauty_pad(args->json, args->level);
      }
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)(args->json, "]", 1);
    }
    return;
  case FIOBJ_T_HASH:
    if (!FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), count)(o))
      goto empty_hash;
    if (args->level == FIOBJ_MAX_NESTING)
      goto err_hash_nesting;
    {
      size_t i = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), count)(o);
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
      (args->json, "{", 1);
      ++args->level;
      FIO_MAP_EACH(FIO_NAME(fiobj, FIOBJ___NAME_HASH), o, couplet) {
        if (args->beautify) {
          fiobj___json_format_internal_beauty_pad(args->json, args->level);
        }
        fio_str_info_s info = FIO_NAME2(fiobj, cstr)(couplet.key);
        FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
        (args->json, "\"", 1);
        FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write_escape)
        (args->json, info.buf, info.len);
        FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
        (args->json, "\":", 2);
        fiobj___json_format_internal__(args, couplet.value);
        if (--i)
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
        (args->json, ",", 1);
      }
      --args->level;
      if (args->beautify) {
        fiobj___json_format_internal_beauty_pad(args->json, args->level);
      }
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
      (args->json, "}", 1);
    }
    return;
  }
empty_hash:
  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
  (args->json, "{}", 2);
  return;
empty_array:
  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
  (args->json, "[]", 2);
  return;
err_array_nesting:
  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
  (args->json, "[ ]", 3);
  goto log_nesting_error;
err_hash_nesting:
  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)
  (args->json, "{ }", 3);
log_nesting_error:
  FIO_LOG_ERROR("JSON formatting truncated - nesting level too deep.");
}

/* *****************************************************************************
FIOBJ JSON parsing
***************************************************************************** */
#if 1

FIO_SFUNC void *fiobj___json_on_null(void) {
  return FIO_NAME(fiobj, FIOBJ___NAME_NULL)();
}
FIO_SFUNC void *fiobj___json_on_true(void) { return fiobj_true(); }
FIO_SFUNC void *fiobj___json_on_false(void) { return fiobj_false(); }
FIO_SFUNC void *fiobj___json_on_number(int64_t i) {
  return FIO_NAME(fiobj, FIO_NAME(FIOBJ___NAME_NUMBER, new))(i);
}
FIO_SFUNC void *fiobj___json_on_float(double f) {
  return FIO_NAME(fiobj, FIO_NAME(FIOBJ___NAME_FLOAT, new))(f);
}
FIO_SFUNC void *fiobj___json_on_string(const void *start, size_t len) {
  FIOBJ str = FIO_NAME(fiobj, FIO_NAME(FIOBJ___NAME_STRING, new))();
  FIO_NAME(fiobj, FIO_NAME(FIOBJ___NAME_STRING, write_unescape))
  (str, (const char *)start, len);
  return str;
}
FIO_SFUNC void *fiobj___json_on_string_simple(const void *start, size_t len) {
  FIOBJ str = FIO_NAME(fiobj, FIO_NAME(FIOBJ___NAME_STRING, new))();
  FIO_NAME(fiobj, FIO_NAME(FIOBJ___NAME_STRING, write))
  (str, (const char *)start, len);
  return str;
}
FIO_SFUNC void *fiobj___json_on_map(void *ctx, void *at) {
  FIOBJ m = FIOBJ_INVALID;
  if (ctx && at && FIOBJ_TYPE_CLASS(ctx) == FIOBJ_T_HASH)
    m = FIO_NAME(fiobj, FIO_NAME(FIOBJ___NAME_HASH, get))((FIOBJ)ctx,
                                                          (FIOBJ)at);
  if (!m || m == FIOBJ_INVALID || FIOBJ_TYPE_CLASS(m) != FIOBJ_T_ARRAY)
    m = FIO_NAME(fiobj, FIO_NAME(FIOBJ___NAME_HASH, new))();
  return m;
}
FIO_SFUNC void *fiobj___json_on_array(void *ctx, void *at) {
  FIOBJ m = FIOBJ_INVALID;
  if (ctx && at && FIOBJ_TYPE_CLASS(ctx) == FIOBJ_T_HASH)
    m = FIO_NAME(fiobj, FIO_NAME(FIOBJ___NAME_HASH, get))((FIOBJ)ctx,
                                                          (FIOBJ)at);
  if (!m || m == FIOBJ_INVALID || FIOBJ_TYPE_CLASS(m) != FIOBJ_T_ARRAY)
    m = FIO_NAME(fiobj, FIO_NAME(FIOBJ___NAME_ARRAY, new))();
  return m;
}
FIO_SFUNC int fiobj___json_map_push(void *ctx, void *key, void *value) {
  FIO_NAME(fiobj, FIO_NAME(FIOBJ___NAME_HASH, set))
  ((FIOBJ)ctx, (FIOBJ)key, (FIOBJ)value, NULL);
  fiobj_free((FIOBJ)key);
  return 0;
}
FIO_SFUNC int fiobj___json_array_push(void *ctx, void *value) {
  FIO_NAME(fiobj, FIO_NAME(FIOBJ___NAME_ARRAY, push))((FIOBJ)ctx, (FIOBJ)value);
  return 0;
}
FIO_SFUNC void fiobj___json_free_unused_object(void *ctx) {
  fiobj_free((FIOBJ)ctx);
}
FIO_SFUNC void *fiobj___json_on_error(void *ctx) {
  fiobj_free((FIOBJ)ctx);
  return FIOBJ_INVALID;
}
static fio_json_parser_callbacks_s FIOBJ_JSON_PARSER_CALLBACKS = {
    .on_null = fiobj___json_on_null,
    .on_true = fiobj___json_on_true,
    .on_false = fiobj___json_on_false,
    .on_number = fiobj___json_on_number,
    .on_float = fiobj___json_on_float,
    .on_string = fiobj___json_on_string,
    .on_string_simple = fiobj___json_on_string_simple,
    .on_map = fiobj___json_on_map,
    .on_array = fiobj___json_on_array,
    .map_push = fiobj___json_map_push,
    .array_push = fiobj___json_array_push,
    .free_unused_object = fiobj___json_free_unused_object,
    .on_error = fiobj___json_on_error,
};

/** Returns a JSON valid FIOBJ String, representing the object. */
SFUNC FIOBJ fiobj_json_parse(fio_str_info_s str, size_t *consumed_p) {
  fio_json_result_s result =
      fio_json_parse(&FIOBJ_JSON_PARSER_CALLBACKS, str.buf, str.len);
  if (consumed_p)
    *consumed_p = result.stop_pos;
  if (result.err) {
#ifdef DEBUG
    FIOBJ s = FIO_NAME2(fiobj, json)(FIOBJ_INVALID, (FIOBJ)result.ctx, 0);
    FIO_LOG_DEBUG("JSON data being deleted:\n%s",
                  FIO_NAME2(fiobj, cstr)(s).buf);
    fiobj_free(s);
#endif
    fiobj_free((FIOBJ)result.ctx);
    result.ctx = FIOBJ_INVALID;
  }
  return (FIOBJ)result.ctx;
}

/**
 * Updates a Hash using JSON data.
 *
 * Parsing errors and non-dictionary object JSON data are silently ignored,
 * attempting to update the Hash as much as possible before any errors
 * encountered.
 *
 * Conflicting Hash data is overwritten (preferring the new over the old).
 *
 * Returns the number of bytes consumed. On Error, 0 is returned and no data is
 * consumed.
 */
SFUNC size_t FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH),
                      update_json)(FIOBJ hash, fio_str_info_s str) {
  /* TODO! FIXME! this will leak memory on NULL hash and break on Arrays */
  fio_json_result_s result = fio_json_parse_update(&FIOBJ_JSON_PARSER_CALLBACKS,
                                                   hash,
                                                   str.buf,
                                                   str.len);
  // if (consumed_p)
  //   *consumed_p = result.stop_pos;
  if (result.err) {
#ifdef DEBUG
    FIOBJ s = FIO_NAME2(fiobj, json)(FIOBJ_INVALID, (FIOBJ)result.ctx, 0);
    FIO_LOG_DEBUG("JSON data being deleted:\n%s",
                  FIO_NAME2(fiobj, cstr)(s).buf);
    fiobj_free(s);
#endif
    fiobj_free((FIOBJ)result.ctx);
    result.ctx = FIOBJ_INVALID;
  }
  return result.stop_pos;
  FIO_LOG_ERROR("fiobj_hash_update_json note yet implemented");
  return 0;
  (void)str;
}

#else
#define FIO_JSON
#define FIO___RECURSIVE_INCLUDE 1
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

/* FIOBJ JSON parser */
typedef struct {
  fio_json_parser_s p;
  size_t so; /* stack offset */
  FIOBJ key;
  FIOBJ top;
  FIOBJ target;
  FIOBJ stack[JSON_MAX_DEPTH + 1];
} fiobj_json_parser_s;

static inline void fiobj_json_add2parser(fiobj_json_parser_s *p, FIOBJ o) {
  if (p->top) {
    if (FIOBJ_TYPE_CLASS(p->top) == FIOBJ_T_HASH) {
      if (p->key) {
        FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), set)
        (p->top, p->key, o, NULL);
        fiobj_free(p->key);
        p->key = FIOBJ_INVALID;
      } else {
        p->key = o;
      }
    } else {
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(p->top, o);
    }
  } else {
    p->top = o;
  }
}

/** a NULL object was detected */
static inline void fio_json_on_null(fio_json_parser_s *p) {
  fiobj_json_add2parser((fiobj_json_parser_s *)p,
                        FIO_NAME(fiobj, FIOBJ___NAME_NULL)());
}
/** a TRUE object was detected */
static inline void fio_json_on_true(fio_json_parser_s *p) {
  fiobj_json_add2parser((fiobj_json_parser_s *)p, fiobj_true());
}
/** a FALSE object was detected */
static inline void fio_json_on_false(fio_json_parser_s *p) {
  fiobj_json_add2parser((fiobj_json_parser_s *)p, fiobj_false());
}
/** a Numeral was detected (long long). */
static inline void fio_json_on_number(fio_json_parser_s *p, long long i) {
  fiobj_json_add2parser((fiobj_json_parser_s *)p,
                        FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), new)(i));
}
/** a Float was detected (double). */
static inline void fio_json_on_float(fio_json_parser_s *p, double f) {
  fiobj_json_add2parser((fiobj_json_parser_s *)p,
                        FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), new)(f));
}
/** a String was detected (int / float). update `pos` to point at ending */
static inline void fio_json_on_string(fio_json_parser_s *p,
                                      const void *start,
                                      size_t len) {
  FIOBJ str = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), new)();
  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write_unescape)
  (str, start, len);
  fiobj_json_add2parser((fiobj_json_parser_s *)p, str);
}
/** a dictionary object was detected */
static inline int fio_json_on_start_object(fio_json_parser_s *p) {
  fiobj_json_parser_s *pr = (fiobj_json_parser_s *)p;
  if (pr->target) {
    /* push NULL, don't free the objects */
    pr->stack[pr->so++] = FIOBJ_INVALID;
    pr->top = pr->target;
    pr->target = FIOBJ_INVALID;
  } else {
    FIOBJ hash;
#if FIOBJ_JSON_APPEND
    hash = FIOBJ_INVALID;
    if (pr->key && FIOBJ_TYPE_CLASS(pr->top) == FIOBJ_T_HASH) {
      hash =
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), get)(pr->top, pr->key);
    }
    if (FIOBJ_TYPE_CLASS(hash) != FIOBJ_T_HASH) {
      hash = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), new)();
      fiobj_json_add2parser(pr, hash);
    } else {
      fiobj_free(pr->key);
      pr->key = FIOBJ_INVALID;
    }
#else
    hash = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), new)();
    fiobj_json_add2parser(pr, hash);
#endif
    pr->stack[pr->so++] = pr->top;
    pr->top = hash;
  }
  return 0;
}
/** a dictionary object closure detected */
static inline void fio_json_on_end_object(fio_json_parser_s *p) {
  fiobj_json_parser_s *pr = (fiobj_json_parser_s *)p;
  if (pr->key) {
    FIO_LOG_WARNING("(JSON parsing) malformed JSON, "
                    "ignoring dangling Hash key.");
    fiobj_free(pr->key);
    pr->key = FIOBJ_INVALID;
  }
  pr->top = FIOBJ_INVALID;
  if (pr->so)
    pr->top = pr->stack[--pr->so];
}
/** an array object was detected */
static int fio_json_on_start_array(fio_json_parser_s *p) {
  fiobj_json_parser_s *pr = (fiobj_json_parser_s *)p;
  FIOBJ ary = FIOBJ_INVALID;
  if (pr->target != FIOBJ_INVALID) {
    if (FIOBJ_TYPE_CLASS(pr->target) != FIOBJ_T_ARRAY)
      return -1;
    ary = pr->target;
    pr->target = FIOBJ_INVALID;
  }
#if FIOBJ_JSON_APPEND
  if (pr->key && FIOBJ_TYPE_CLASS(pr->top) == FIOBJ_T_HASH) {
    ary = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), get)(pr->top, pr->key);
  }
  if (FIOBJ_TYPE_CLASS(ary) != FIOBJ_T_ARRAY) {
    ary = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), new)();
    fiobj_json_add2parser(pr, ary);
  } else {
    fiobj_free(pr->key);
    pr->key = FIOBJ_INVALID;
  }
#else
  FIOBJ ary = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), new)();
  fiobj_json_add2parser(pr, ary);
#endif

  pr->stack[pr->so++] = pr->top;
  pr->top = ary;
  return 0;
}
/** an array closure was detected */
static inline void fio_json_on_end_array(fio_json_parser_s *p) {
  fiobj_json_parser_s *pr = (fiobj_json_parser_s *)p;
  pr->top = FIOBJ_INVALID;
  if (pr->so)
    pr->top = pr->stack[--pr->so];
}
/** the JSON parsing is complete */
static void fio_json_on_json(fio_json_parser_s *p) {
  (void)p; /* nothing special... right? */
}
/** the JSON parsing is complete */
static inline void fio_json_on_error(fio_json_parser_s *p) {
  fiobj_json_parser_s *pr = (fiobj_json_parser_s *)p;
  fiobj_free(pr->stack[0]);
  fiobj_free(pr->key);
  *pr = (fiobj_json_parser_s){.top = FIOBJ_INVALID};
  FIO_LOG_DEBUG("JSON on_error callback called.");
}

/**
 * Updates a Hash using JSON data.
 *
 * Parsing errors and non-dictionary object JSON data are silently ignored,
 * attempting to update the Hash as much as possible before any errors
 * encountered.
 *
 * Conflicting Hash data is overwritten (preferring the new over the old).
 *
 * Returns the number of bytes consumed. On Error, 0 is returned and no data is
 * consumed.
 */
SFUNC size_t FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH),
                      update_json)(FIOBJ hash, fio_str_info_s str) {
  if (hash == FIOBJ_INVALID)
    return 0;
  fiobj_json_parser_s p = {.top = FIOBJ_INVALID, .target = hash};
  size_t consumed = fio_json_parse(&p.p, str.buf, str.len);
  fiobj_free(p.key);
  if (p.top != hash)
    fiobj_free(p.top);
  return consumed;
}

/** Returns a JSON valid FIOBJ String, representing the object. */
SFUNC FIOBJ fiobj_json_parse(fio_str_info_s str, size_t *consumed_p) {
  fiobj_json_parser_s p = {.top = FIOBJ_INVALID};
  register const size_t consumed = fio_json_parse(&p.p, str.buf, str.len);
  if (consumed_p) {
    *consumed_p = consumed;
  }
  if (!consumed || p.p.depth) {
    if (p.top) {
      FIO_LOG_DEBUG("WARNING - JSON failed secondary validation, no on_error");
    }
#ifdef DEBUG
    FIOBJ s = FIO_NAME2(fiobj, json)(FIOBJ_INVALID, p.top, 0);
    FIO_LOG_DEBUG("JSON data being deleted:\n%s",
                  FIO_NAME2(fiobj, cstr)(s).buf);
    fiobj_free(s);
#endif
    fiobj_free(p.stack[0]);
    p.top = FIOBJ_INVALID;
  }
  fiobj_free(p.key);
  return p.top;
}
#endif

/** Uses JSON (JavaScript) notation to find data in an object structure. Returns
 * a temporary object. */
SFUNC FIOBJ fiobj_json_find(FIOBJ o, fio_str_info_s n) {
  for (;;) {
  top:
    if (!n.len || (n.len == 1 && n.buf[0] == '.'))
      return o;
    switch (FIOBJ_TYPE_CLASS(o)) {
    case FIOBJ_T_ARRAY: {
      if (n.len <= 2 || n.buf[0] != '[' || n.buf[1] < '0' || n.buf[1] > '9')
        return FIOBJ_INVALID;
      size_t i = 0;
      ++n.buf;
      --n.len;
      while (n.len && fio_c2i(n.buf[0]) < 10) {
        i = (i * 10) + fio_c2i(n.buf[0]);
        ++n.buf;
        --n.len;
      }
      if (!n.len || n.buf[0] != ']' || i > 0xFFFFFFFFU)
        return FIOBJ_INVALID;
      o = fiobj_array_get(o, (uint32_t)i);
      ++n.buf;
      --n.len;
      if (n.len) {
        if (n.buf[0] == '.') {
          ++n.buf;
          --n.len;
        } else if (n.buf[0] != '[') {
          return FIOBJ_INVALID;
        }
        continue;
      }
      return o;
    }
    case FIOBJ_T_HASH: {
      FIOBJ tmp = fiobj_hash_get2(o, n.buf, n.len);
      if (tmp != FIOBJ_INVALID)
        return tmp;
      char *end = n.buf + n.len - 1;
      while (end > n.buf) {
        while (end > n.buf && end[0] != '.' && end[0] != '[')
          --end;
        if (end == n.buf)
          return FIOBJ_INVALID;
        const size_t t_len = end - n.buf;
        tmp = fiobj_hash_get2(o, n.buf, t_len);
        if (tmp != FIOBJ_INVALID) {
          o = tmp;
          n.len -= t_len + (end[0] == '.');
          n.buf = end + (end[0] == '.');
          goto top;
        }
        --end;
      }
    } /* fall through */
    default: return FIOBJ_INVALID;
    }
  }
}
/* *****************************************************************************
FIOBJ cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#undef FIOBJ_EXTERN_OBJ
#undef FIOBJ_EXTERN_OBJ_IMP
#undef FIO_FIOBJ
#endif /* FIO_FIOBJ */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_IO                 /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




              IO Reactor - an Evented IO Reactor, Single-Threaded



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_IO) && !defined(FIO___RECURSIVE_INCLUDE) &&                    \
    !defined(H___FIO_IO___H)
#define H___FIO_IO___H
/* *****************************************************************************
IO Reactor Settings

At this point, define any MACROs and customizable settings available to the
developer.
***************************************************************************** */

#ifndef FIO_IO_BUFFER_PER_WRITE
/** Control the size of the on-stack buffer used for `write` events. */
#define FIO_IO_BUFFER_PER_WRITE 65536U
#endif

#ifndef FIO_IO_THROTTLE_LIMIT
/** IO will be throttled (no `on_data` events) if outgoing buffer is large. */
#define FIO_IO_THROTTLE_LIMIT 2097152U
#endif

#ifndef FIO_IO_TIMEOUT_MAX
/** Controls the maximum and default timeout in milliseconds (5 minutes). */
#define FIO_IO_TIMEOUT_MAX 300000
#endif

#ifndef FIO_IO_SHUTDOWN_TIMEOUT
/* Sets the hard timeout (in milliseconds) for the reactor's shutdown loop. */
#define FIO_IO_SHUTDOWN_TIMEOUT 10000
#endif

#ifndef FIO_IO_COUNT_STORAGE
#ifdef DEBUG
#define FIO_IO_COUNT_STORAGE 1
#else
#define FIO_IO_COUNT_STORAGE 0
#endif
#endif
/* *****************************************************************************
IO Types
***************************************************************************** */

/** The main protocol object type. See `struct fio_io_protocol_s`. */
typedef struct fio_io_protocol_s fio_io_protocol_s;

/** The IO functions used by the protocol object. */
typedef struct fio_io_functions_s fio_io_functions_s;

/** The main IO object type. Should be treated as an opaque pointer. */
typedef struct fio_io_s fio_io_s;

/** An opaque type used for the SSL/TLS helper functions. */
typedef struct fio_io_tls_s fio_io_tls_s;

/** Message structure, as received by the `on_message` subscription callback. */
typedef struct fio_msg_s fio_msg_s;

/** The IO Async Queue type. */
typedef struct fio_io_async_s fio_io_async_s;

/* *****************************************************************************
Starting / Stopping the IO Reactor
***************************************************************************** */

/** Stopping the IO reactor. */
SFUNC void fio_io_stop(void);

/** Adds `workers` amount of workers to the root IO reactor process. */
SFUNC void fio_io_add_workers(int workers);

/** Starts the IO reactor, using optional `workers` processes. Will BLOCK! */
SFUNC void fio_io_start(int workers);

/* *****************************************************************************
The IO Reactor's State
***************************************************************************** */

/** Returns true if IO reactor running and 0 if stopped or shutting down. */
SFUNC int fio_io_is_running(void);

/** Returns true if the current process is the IO reactor's master process. */
SFUNC int fio_io_is_master(void);

/** Returns true if the current process is an IO reactor's worker process. */
SFUNC int fio_io_is_worker(void);

/** Returns the number or workers the IO reactor will actually run. */
SFUNC uint16_t fio_io_workers(int workers_requested);

/** Returns current process id. */
SFUNC int fio_io_pid(void);

/** Returns the root / master process id. */
SFUNC int fio_io_root_pid(void);

/** Returns the last millisecond when the IO reactor polled for events. */
SFUNC int64_t fio_io_last_tick(void);

/* *****************************************************************************
Listening to Incoming Connections
***************************************************************************** */

/** Arguments for the fio_io_listen function */
typedef struct fio_io_listen_args {
  /**
   * The binding address in URL format. Defaults to: tcp://0.0.0.0:3000
   *
   * Note: `.url` accept an optional query for building a TLS context.
   *
   * Possible query values include:
   *
   * - `tls` or `ssl` (no value): sets TLS as active, possibly self-signed.
   * - `tls=` or `ssl=`: value is a prefix for "key.pem" and "cert.pem".
   * - `key=` and `cert=`: file paths for ".pem" files.
   *
   * i.e.:
   *
   *     fio_io_listen(.url = "0.0.0.0:3000/?tls", ...);
   *     fio_io_listen(.url = "0.0.0.0:3000/?tls=./", ...);
   *     // same as:
   *     fio_io_listen(.url = "0.0.0.0:3000/"
   *                            "?key=./key.pem"
   *                            "&cert=./cert.pem", ...);
   */
  const char *url;
  /** The `fio_io_protocol_s` that will be assigned to incoming
   * connections. */
  fio_io_protocol_s *protocol;
  /** The default `udata` set for (new) incoming connections. */
  void *udata;
  /** TLS object used for incoming connections (ownership moved to listener). */
  fio_io_tls_s *tls;
  /**
   * Called when the a listening socket starts to listen.
   *
   * May be called multiple times (i.e., if the IO reactor stops and restarts).
   */
  void (*on_start)(fio_io_protocol_s *protocol, void *udata);
  /**
   * Called during listener cleanup.
   *
   * This will be called separately for every process before exiting.
   */
  void (*on_stop)(fio_io_protocol_s *protocol, void *udata);
  /**
   * Selects a queue that will be used to schedule a pre-accept task.
   * May be used to test user thread stress levels before accepting connections.
   */
  fio_io_async_s *queue_for_accept;
  /** When forking the IO reactor - limits `listen` to the root process. */
  uint8_t on_root;
  /** Hides "started/stopped listening" messages from log (if set). */
  uint8_t hide_from_log;
} fio_io_listen_args;

/**
 * Sets up a network service on a listening socket.
 *
 * Returns a self-destructible listener handle on success or NULL on error.
 */
SFUNC void *fio_io_listen(fio_io_listen_args args);
#define fio_io_listen(...) fio_io_listen((fio_io_listen_args){__VA_ARGS__})

/** Notifies a listener to stop listening. */
SFUNC void fio_io_listen_stop(void *listener);

/** Returns the URL on which the listener is listening. */
SFUNC fio_buf_info_s fio_io_listener_url(void *listener);

/** Returns true if the listener protocol has an attached TLS context. */
SFUNC int fio_io_listener_is_tls(void *listener);

/* *****************************************************************************
Connecting as a Client
***************************************************************************** */

/** Named arguments for fio_io_connect */
typedef struct {
  /** The URL to connect to (may contain TLS hints in query / `tls` scheme). */
  const char *url;
  /** Connection protocol (once connection established). */
  fio_io_protocol_s *protocol;
  /** Called in case of a failed connection, use for cleanup. */
  void (*on_failed)(fio_io_protocol_s *protocol, void *udata);
  /** Opaque user data (set only once connection was established). */
  void *udata;
  /** TLS builder object for TLS connections. */
  fio_io_tls_s *tls;
  /** Connection timeout in milliseconds (defaults to 30 seconds). */
  uint32_t timeout;
} fio_io_connect_args_s;

/** Connects to a specific URL, returning the `fio_io_s` IO object or `NULL`. */
SFUNC fio_io_s *fio_io_connect(fio_io_connect_args_s args);

#define fio_io_connect(url_, ...)                                              \
  fio_io_connect((fio_io_connect_args_s){.url = url_, __VA_ARGS__})

/* *****************************************************************************
IO Operations
***************************************************************************** */

/**
 * Attaches the socket in `fd` to the facio.io engine (reactor).
 *
 * * `fd` should point to a valid socket.
 *
 * * `protocol` may be the existing protocol or NULL (for partial hijack).
 *
 * * `udata` is opaque user data and may be any value, including NULL.
 *
 * * `tls` is a context for Transport Layer (Security) and can be used to
 *   redirect read/write operations, as set by the protocol.
 *
 * Returns NULL on error. the `fio_io_s` pointer must NOT be used except
 * within proper callbacks.
 */
SFUNC fio_io_s *fio_io_attach_fd(int fd,
                                 fio_io_protocol_s *protocol,
                                 void *udata,
                                 void *tls);

/** Sets a new protocol object. `NULL` is a valid "only-write" protocol. */
SFUNC fio_io_protocol_s *fio_io_protocol_set(fio_io_s *io,
                                             fio_io_protocol_s *protocol);

/**
 * Returns a pointer to the current protocol object.
 *
 * If `protocol` wasn't properly set, the pointer might be NULL or invalid.
 *
 * If `protocol` wasn't attached yet, may return the previous protocol.
 */
IFUNC fio_io_protocol_s *fio_io_protocol(fio_io_s *io);

/** Returns the a pointer to the memory buffer required by the protocol. */
IFUNC void *fio_io_buffer(fio_io_s *io);

/** Returns the length of the `buf` buffer. */
IFUNC size_t fio_io_buffer_len(fio_io_s *io);

/** Associates a new `udata` pointer with the IO, returning the old `udata` */
IFUNC void *fio_io_udata_set(fio_io_s *io, void *udata);

/** Returns the `udata` pointer associated with the IO. */
IFUNC void *fio_io_udata(fio_io_s *io);

/** Associates a new `tls` pointer with the IO, returning the old `tls` */
IFUNC void *fio_io_tls_set(fio_io_s *io, void *tls);

/** Returns the `tls` pointer associated with the IO. */
IFUNC void *fio_io_tls(fio_io_s *io);

/** Returns the socket file descriptor (fd) associated with the IO. */
IFUNC int fio_io_fd(fio_io_s *io);

/** Resets a socket's timeout counter. */
SFUNC void fio_io_touch(fio_io_s *io);

/**
 * Reads data to the buffer, if any data exists. Returns the number of bytes
 * read.
 *
 * NOTE: zero (`0`) is a valid return value meaning no data was available.
 */
SFUNC size_t fio_io_read(fio_io_s *io, void *buf, size_t len);

typedef struct {
  /** The buffer with the data to send (if no file descriptor) */
  void *buf;
  /** The file descriptor to send (if no buffer) */
  intptr_t fd;
  /** The length of the data to be sent. On files, 0 = the whole file. */
  size_t len;
  /** The length of the data to be sent. On files, 0 = the whole file. */
  size_t offset;
  /**
   * If this is a buffer, the de-allocation function used to free it.
   *
   * If NULL, the buffer will NOT be de-allocated.
   */
  void (*dealloc)(void *);
  /** If non-zero, makes a copy of the buffer or keeps a file open. */
  uint8_t copy;
} fio_io_write_args_s;

/**
 * Writes data to the outgoing buffer and schedules the buffer to be sent.
 */
SFUNC void fio_io_write2(fio_io_s *io, fio_io_write_args_s args);
#define fio_io_write2(io, ...)                                                 \
  fio_io_write2(io, (fio_io_write_args_s){__VA_ARGS__})

/** Helper macro for a common fio_io_write2 (copies the buffer). */
#define fio_io_write(io, buf_, len_)                                           \
  fio_io_write2(io, .buf = (buf_), .len = (len_), .copy = 1)

/**
 * Sends data from a file as if it were a single atomic packet (sends up to
 * length bytes or until EOF is reached).
 *
 * Once the file was sent, the `source_fd` will be closed using `close`.
 *
 * The file will be buffered to the socket chunk by chunk, so that memory
 * consumption is capped.
 *
 * `offset` dictates the starting point for the data to be sent and length sets
 * the maximum amount of data to be sent.
 *
 * Closes the file on error.
 */
#define fio_io_sendfile(io, source_fd, offset_, bytes)                         \
  fio_io_write2((io),                                                          \
                .fd = (source_fd),                                             \
                .offset = (size_t)(offset_),                                   \
                .len = (bytes))

/** Marks the IO for closure as soon as scheduled data was sent. */
SFUNC void fio_io_close(fio_io_s *io);

/** Marks the IO for immediate closure. */
SFUNC void fio_io_close_now(fio_io_s *io);

/**
 * Increases a IO's reference count, so it won't be automatically destroyed
 * when all tasks have completed.
 *
 * Use this function in order to use the IO outside of a scheduled task.
 *
 * This function is thread-safe.
 */
SFUNC fio_io_s *fio_io_dup(fio_io_s *io);

/**
 * Decreases a IO's reference count, so it could be automatically destroyed
 * when all other tasks have completed.
 *
 * Use this function once finished with a IO that was `dup`-ed.
 *
 * This function is thread-safe.
 */
SFUNC void fio_io_free(fio_io_s *io);

/** Suspends future `on_data` events for the IO. */
SFUNC void fio_io_suspend(fio_io_s *io);

/** Listens for future `on_data` events related to the IO. */
SFUNC void fio_io_unsuspend(fio_io_s *io);

/** Returns 1 if the IO handle was suspended. */
SFUNC int fio_io_is_suspended(fio_io_s *io);

/** Returns 1 if the IO handle is marked as open. */
SFUNC int fio_io_is_open(fio_io_s *io);

/** Returns the approximate number of bytes in the outgoing buffer. */
SFUNC size_t fio_io_backlog(fio_io_s *io);

/* *****************************************************************************
Task Scheduling
***************************************************************************** */

/** Schedules a task for delayed execution. This function is thread-safe. */
SFUNC void fio_io_defer(void (*task)(void *, void *),
                        void *udata1,
                        void *udata2);

/** Schedules a timer bound task, see `fio_timer_schedule`. */
SFUNC void fio_io_run_every(fio_timer_schedule_args_s args);
/**
 * Schedules a timer bound task, see `fio_timer_schedule`.
 *
 * Possible "named arguments" (fio_timer_schedule_args_s members) include:
 *
 * * The timer function. If it returns a non-zero value, the timer stops:
 *        int (*fn)(void *, void *)
 * * Opaque user data:
 *        void *udata1
 * * Opaque user data:
 *        void *udata2
 * * Called when the timer is done (finished):
 *        void (*on_stop)(void *, void *)
 * * Timer interval, in milliseconds:
 *        uint32_t every
 * * The number of times the timer should be performed. -1 == infinity:
 *        int32_t repetitions
 */
#define fio_io_run_every(...)                                                  \
  fio_io_run_every((fio_timer_schedule_args_s){__VA_ARGS__})

/** Returns a pointer for the IO reactor's queue. */
SFUNC fio_queue_s *fio_io_queue(void);

/**************************************************************************/ /**
Protocol IO Functions
============

The Protocol struct uses IO callbacks to allow an easy way to override the
system's IO functions.

This defines Transport Layer callbacks that facil.io will treat as non-blocking
system calls and allows any protocol to easily add a secure (SSL/TLS) flavor if
desired.
*/
struct fio_io_functions_s {
  /** Helper that converts a `fio_io_tls_s` into the implementation's context.
   */
  void *(*build_context)(fio_io_tls_s *tls, uint8_t is_client);
  /** Helper to free the context built by build_context. */
  void (*free_context)(void *context);
  /** called when a new IO is first attached to a valid protocol. */
  void (*start)(fio_io_s *io);
  /** Called to perform a non-blocking `read`, same as the system call. */
  ssize_t (*read)(int fd, void *buf, size_t len, void *context);
  /** Called to perform a non-blocking `write`, same as the system call. */
  ssize_t (*write)(int fd, const void *buf, size_t len, void *context);
  /** Sends any unsent internal data. Returns 0 only if all data was sent. */
  int (*flush)(int fd, void *context);
  /** Called when the IO object finished sending all data before closure. */
  void (*finish)(int fd, void *context);
  /** Called after the IO object is closed, used to cleanup its `tls` object. */
  void (*cleanup)(void *context);
};

/**************************************************************************/ /**
The Protocol
============

The Protocol struct defines the callbacks used for a family of connections and
sets their behavior. The Protocol struct is part of facil.io's core design.

Protocols are usually global objects and the same protocol can be assigned to
multiple IO handles.

All the callbacks receive a IO handle, which is used instead of the system's
file descriptor and protects callbacks and IO operations from sending data to
incorrect clients (possible `fd` "recycling").
*/
struct fio_io_protocol_s {
  /**
   * Reserved / private data - used by facil.io internally.
   * MUST be initialized to zero.
   */
  struct {
    /* A linked list of currently attached IOs (ordered) - do NOT alter. */
    FIO_LIST_HEAD ios;
    /* A linked list of other protocols used by IO core - do NOT alter. */
    FIO_LIST_NODE protocols;
    /* internal flags - do NOT alter after initial initialization to zero. */
    uintptr_t flags;
  } reserved;
  /** Called when an IO is attached to the protocol. */
  void (*on_attach)(fio_io_s *io);
  /** Called when a data is available. */
  void (*on_data)(fio_io_s *io);
  /** called once all pending `fio_write` calls are finished. */
  void (*on_ready)(fio_io_s *io);

  /**
   * Called when the IO reactor is shutting down, immediately before closing the
   * connection.
   *
   * After the `on_shutdown` callback returns, the socket is marked for closure.
   *
   * Once the socket was marked for closure, facil.io will allow a limited
   * amount of time for data to be sent, after which the socket might be closed
   * even if the client did not consume all buffered data.
   */
  void (*on_shutdown)(fio_io_s *io);
  /**
   * Called when a connection's timeout was reached
   *
   * Can be set to `fio_io_touch` if timeout is irrelevant (i.e., UDP).
   */
  void (*on_timeout)(fio_io_s *io);
  /** Used as a default `on_message` when an IO object subscribes. */

  /** Called after the connection was closed (once per IO). */
  void (*on_close)(void *iobuf, void *udata);

  void (*on_pubsub)(struct fio_msg_s *msg);
  /** Allows user specific protocol agnostic callbacks. */
  void (*on_user1)(fio_io_s *io, void *user_data);
  /** Allows user specific protocol agnostic callbacks. */
  void (*on_user2)(fio_io_s *io, void *user_data);
  /** Allows user specific protocol agnostic callbacks. */
  void (*on_user3)(fio_io_s *io, void *user_data);
  /** Reserved for future protocol agnostic callbacks. */
  void (*on_reserved)(fio_io_s *io, void *user_data);
  /**
   * Defines Transport Layer callbacks that facil.io will treat as non-blocking
   * system calls.
   */
  fio_io_functions_s io_functions;
  /**
   * The timeout value in milliseconds for all connections using this protocol.
   *
   * Limited to FIO_IO_TIMEOUT_MAX seconds. Zero (0) == FIO_IO_TIMEOUT_MAX
   */
  uint32_t timeout;
  /** The number of bytes to allocate for the fio_io_buf buffer. */
  uint32_t buffer_size;
};

/** Performs a task for each IO in the stated protocol. */
SFUNC size_t fio_io_protocol_each(fio_io_protocol_s *protocol,
                                  void (*task)(fio_io_s *, void *udata2),
                                  void *udata2);

/* *****************************************************************************
Connection Object Links / Environment
***************************************************************************** */

/** Named arguments for the `fio_io_env_set` function. */
typedef struct {
  /** A numerical type filter. Defaults to 0. Negative values are reserved. */
  intptr_t type;
  /** The name for the link. The name and type uniquely identify the object. */
  fio_buf_info_s name;
  /** The object being linked to the connection. */
  void *udata;
  /** A callback that will be called once the connection is closed. */
  void (*on_close)(void *data);
  /** Set to true (1) if the name string's life lives as long as the `env` . */
  uint8_t const_name;
} fio_io_env_set_args_s;

/** Named arguments for the `fio_io_env_unset` function. */
typedef struct {
  /** A numerical type filter. Should be the same as used with
   * `fio_io_env_set` */
  intptr_t type;
  /** The name of the object. Should be the same as used with `fio_io_env_set`
   */
  fio_buf_info_s name;
} fio_io_env_get_args_s;

/** Returns the named `udata` associated with the IO object (or `NULL`). */
SFUNC void *fio_io_env_get(fio_io_s *io, fio_io_env_get_args_s);

/** Returns the named `udata` associated with the IO object (or `NULL`). */
#define fio_io_env_get(io, ...)                                                \
  fio_io_env_get(io, (fio_io_env_get_args_s){__VA_ARGS__})

/**
 * Links an object to a connection's lifetime / environment.
 *
 * The `on_close` callback will be called once the connection has died.
 *
 * If the `io` is NULL, the value will be set for the global environment.
 */
SFUNC void fio_io_env_set(fio_io_s *io, fio_io_env_set_args_s);

/**
 * Links an object to a connection's lifetime, calling the `on_close` callback
 * once the connection has died.
 *
 * If the `io` is NULL, the value will be set for the global environment, in
 * which case the `on_close` callback will only be called once the process
 * exits.
 *
 * This is a helper MACRO that allows the function to be called using named
 * arguments.
 */
#define fio_io_env_set(io, ...)                                                \
  fio_io_env_set(io, (fio_io_env_set_args_s){__VA_ARGS__})

/**
 * Un-links an object from the connection's lifetime, so it's `on_close`
 * callback will NOT be called.
 *
 * Returns 0 on success and -1 if the object couldn't be found.
 */
SFUNC int fio_io_env_unset(fio_io_s *io, fio_io_env_get_args_s);

/**
 * Un-links an object from the connection's lifetime, so it's `on_close`
 * callback will NOT be called.
 *
 * Returns 0 on success and -1 if the object couldn't be found.
 *
 * This is a helper MACRO that allows the function to be called using named
 * arguments.
 */
#define fio_io_env_unset(io, ...)                                              \
  fio_io_env_unset(io, (fio_io_env_get_args_s){__VA_ARGS__})

/**
 * Removes an object from the connection's lifetime / environment, calling it's
 * `on_close` callback as if the connection was closed.
 */
SFUNC int fio_io_env_remove(fio_io_s *io, fio_io_env_get_args_s);

/**
 * Removes an object from the connection's lifetime / environment, calling it's
 * `on_close` callback as if the connection was closed.
 *
 * This is a helper MACRO that allows the function to be called using named
 * arguments.
 */
#define fio_io_env_remove(io, ...)                                             \
  fio_io_env_remove(io, (fio_io_env_get_args_s){__VA_ARGS__})

/* *****************************************************************************
TLS Context Helper Types
***************************************************************************** */

/** Performs a `new` operation, returning a new `fio_io_tls_s` context. */
SFUNC fio_io_tls_s *fio_io_tls_new(void);

/** Takes a parsed URL and optional TLS target and returns a TLS if needed. */
SFUNC fio_io_tls_s *fio_io_tls_from_url(fio_io_tls_s *target_or_null,
                                        fio_url_s url);

/** Performs a `dup` operation, increasing the object's reference count. */
SFUNC fio_io_tls_s *fio_io_tls_dup(fio_io_tls_s *);

/** Performs a `free` operation, reducing the reference count and freeing. */
SFUNC void fio_io_tls_free(fio_io_tls_s *);

/**
 * Adds a certificate a new SSL/TLS context / settings object (SNI support).
 *
 *      fio_io_tls_cert_add(tls, "www.example.com",
 *                            "public_key.pem",
 *                            "private_key.pem", NULL );
 *
 * NOTE: Except for the `tls` and `server_name` arguments, all arguments might
 * be `NULL`, which a context builder (`fio_io_functions_s`) should
 * treat as a request for a self-signed certificate. It may be silently ignored.
 */
SFUNC fio_io_tls_s *fio_io_tls_cert_add(fio_io_tls_s *,
                                        const char *server_name,
                                        const char *public_cert_file,
                                        const char *private_key_file,
                                        const char *pk_password);

/**
 * Adds an ALPN protocol callback to the SSL/TLS context.
 *
 * The first protocol added will act as the default protocol to be selected.
 *
 * A `NULL` protocol name will be silently ignored.
 *
 * A `NULL` callback (`on_selected`) will be silently replaced with a no-op.
 */
SFUNC fio_io_tls_s *fio_io_tls_alpn_add(fio_io_tls_s *tls,
                                        const char *protocol_name,
                                        void (*on_selected)(fio_io_s *));

/** Calls the `on_selected` callback for the `fio_io_tls_s` object. */
SFUNC int fio_io_tls_alpn_select(fio_io_tls_s *tls,
                                 const char *protocol_name,
                                 size_t name_length,
                                 fio_io_s *);

/**
 * Adds a certificate to the "trust" list, which automatically adds a peer
 * verification requirement.
 *
 * If `public_cert_file` is `NULL`, implementation is expected to add the
 * system's default trust registry.
 *
 * Note: when the `fio_io_tls_s` object is used for server connections, this
 * should limit connections to clients that connect using a trusted certificate.
 *
 *      fio_io_tls_trust_add(tls, "google-ca.pem" );
 */
SFUNC fio_io_tls_s *fio_io_tls_trust_add(fio_io_tls_s *,
                                         const char *public_cert_file);

/**
 * Returns the number of `fio_io_tls_cert_add` instructions.
 *
 * This could be used when deciding if to add a NULL instruction (self-signed).
 *
 * If `fio_io_tls_cert_add` was never called, zero (0) is returned.
 */
SFUNC uintptr_t fio_io_tls_cert_count(fio_io_tls_s *tls);

/**
 * Returns the number of registered ALPN protocol names.
 *
 * This could be used when deciding if protocol selection should be delegated to
 * the ALPN mechanism, or whether a protocol should be immediately assigned.
 *
 * If no ALPN protocols are registered, zero (0) is returned.
 */
SFUNC uintptr_t fio_io_tls_alpn_count(fio_io_tls_s *tls);

/**
 * Returns the number of `fio_io_tls_trust_add` instructions.
 *
 * This could be used when deciding if to disable peer verification or not.
 *
 * If `fio_io_tls_trust_add` was never called, zero (0) is returned.
 */
SFUNC uintptr_t fio_io_tls_trust_count(fio_io_tls_s *tls);

/** Arguments (and info) for `fio_io_tls_each`. */
typedef struct fio_io_tls_each_s {
  fio_io_tls_s *tls;
  void *udata;
  void *udata2;
  int (*each_cert)(struct fio_io_tls_each_s *,
                   const char *server_name,
                   const char *public_cert_file,
                   const char *private_key_file,
                   const char *pk_password);
  int (*each_alpn)(struct fio_io_tls_each_s *,
                   const char *protocol_name,
                   void (*on_selected)(fio_io_s *));
  int (*each_trust)(struct fio_io_tls_each_s *, const char *public_cert_file);
} fio_io_tls_each_s;

/** Calls callbacks for certificate, trust certificate and ALPN added. */
SFUNC int fio_io_tls_each(fio_io_tls_each_s);

/** `fio_io_tls_each` helper macro, see `fio_io_tls_each_s` for named
 * arguments. */
#define fio_io_tls_each(tls_, ...)                                             \
  fio_io_tls_each(((fio_io_tls_each_s){.tls = tls_, __VA_ARGS__}))

/** If `NULL` returns current default, otherwise sets it. */
SFUNC fio_io_functions_s fio_io_tls_default_functions(fio_io_functions_s *);

/* *****************************************************************************
IO Async Queue - Worker Threads for non-IO tasks
***************************************************************************** */

/** The IO Async Queue type. */
struct fio_io_async_s {
  fio_queue_s *q;
  uint32_t count;
  fio_queue_s queue;
  fio_timer_queue_s timers;
  FIO_LIST_NODE node;
};

/**
 * Initializes an IO Async Queue (multi-threaded task queue).
 *
 * The queue automatically spawns threads and shuts down as the IO reactor
 * starts or stops.
 *
 * It is recommended that the `fio_io_async_s` be allocated as a static
 * variable, as its memory must remain valid throughout the lifetime of the
 * IO reactor's app.
 */
#define FIO_IO_ASYN_INIT ((fio_io_async_s){0})

/** Returns the current task queue associated with the IO Async Queue. */
FIO_IFUNC fio_queue_s *fio_io_async_queue(fio_io_async_s *q) { return q->q; }

/**
 * Attaches an IO Async Queue for use in multi-threaded (non IO) tasks.
 *
 * This function can be called multiple times for the same (or other) queue, as
 * long as the async queue (`fio_io_async_s`) was previously initialized using
 * `FIO_IO_ASYN_INIT` or zeroed out. i.e.:
 *
 *     static fio_io_async_s SLOW_HTTP_TASKS = FIO_IO_ASYN_INIT;
 *     fio_io_async_attach(&SLOW_HTTP_TASKS, 32);
 */
SFUNC void fio_io_async_attach(fio_io_async_s *q, uint32_t threads);

/** Pushes a task to an IO Async Queue (macro helper). */
#define fio_io_async(q_, ...) fio_queue_push((q_)->q, __VA_ARGS__)

/** Schedules a timer bound task for the async queue (`fio_timer_schedule`). */
SFUNC void fio_io_async_every(fio_io_async_s *q, fio_timer_schedule_args_s);

/**
 * Schedules a timer bound task, for the async queue, see `fio_timer_schedule`.
 *
 * Possible "named arguments" (fio_timer_schedule_args_s members) include:
 *
 * * The timer function. If it returns a non-zero value, the timer stops:
 *        int (*fn)(void *, void *)
 * * Opaque user data:
 *        void *udata1
 * * Opaque user data:
 *        void *udata2
 * * Called when the timer is done (finished):
 *        void (*on_stop)(void *, void *)
 * * Timer interval, in milliseconds:
 *        uint32_t every
 * * The number of times the timer should be performed. -1 == infinity:
 *        int32_t repetitions
 */
#define fio_io_async_every(async, ...)                                         \
  fio_io_async_every(async, (fio_timer_schedule_args_s){__VA_ARGS__})

/* *****************************************************************************
IO API Finish
***************************************************************************** */
#endif /* FIO_IO */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_IO                 /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************

              IO Reactor - an Evented IO Reactor, Single-Threaded

Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_IO) && !defined(FIO___RECURSIVE_INCLUDE) &&                    \
    !defined(H___FIO_IO_TYPES___H) &&                                          \
    (defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN))
#define H___FIO_IO_TYPES___H

/** I would love to use fio_time_mono, but using time_real enables logging. */
#define FIO___IO_GET_TIME_MILLI() fio_time2milli(fio_time_real())

/* *****************************************************************************
IO environment support (`env`)
***************************************************************************** */

/** An object that can be linked to any facil.io connection (fio_s). */
typedef struct {
  void (*on_close)(void *data);
  void *udata;
} fio___io_env_obj_s;

/* unordered `env` dictionary style map */
#define FIO_UMAP_NAME fio___io_env
#define FIO_MAP_KEY_KSTR
#define FIO_MAP_VALUE fio___io_env_obj_s
#define FIO_MAP_VALUE_DESTROY(o)                                               \
  do {                                                                         \
    if ((o).on_close)                                                          \
      (o).on_close((o).udata);                                                 \
  } while (0)
#define FIO_MAP_DESTROY_AFTER_COPY 0

#define FIO___RECURSIVE_INCLUDE 1
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

typedef struct {
  fio_thread_mutex_t lock;
  fio___io_env_s env;
} fio___io_env_safe_s;

#define FIO___IO_ENV_SAFE_INIT                                                 \
  { .lock = FIO_THREAD_MUTEX_INIT, .env = FIO_MAP_INIT }

FIO_IFUNC void *fio___io_env_safe_get(fio___io_env_safe_s *e,
                                      char *key_,
                                      size_t len,
                                      intptr_t type_) {
  void *r;
  fio_str_info_s key = FIO_STR_INFO3(key_, len, 0);
  const uint64_t hash = fio_risky_hash(key_, len, (uint64_t)(type_));
  fio_thread_mutex_lock(&e->lock);
  r = fio___io_env_get(&e->env, hash, key).udata;
  fio_thread_mutex_unlock(&e->lock);
  return r;
}

FIO_IFUNC void fio___io_env_safe_set(fio___io_env_safe_s *e,
                                     char *key_,
                                     size_t len,
                                     intptr_t type_,
                                     fio___io_env_obj_s val,
                                     uint8_t key_is_const) {
  fio_str_info_s key = FIO_STR_INFO3(key_, len, !key_is_const);
  const uint64_t hash = fio_risky_hash(key_, len, (uint64_t)(type_));
  fio_thread_mutex_lock(&e->lock);
  fio___io_env_set(&e->env, hash, key, val, NULL);
  fio_thread_mutex_unlock(&e->lock);
}

FIO_IFUNC int fio___io_env_safe_unset(fio___io_env_safe_s *e,
                                      char *key_,
                                      size_t len,
                                      intptr_t type_) {
  int r;
  fio_str_info_s key = FIO_STR_INFO3(key_, len, 0);
  const uint64_t hash = fio_risky_hash(key_, len, (uint64_t)(type_));
  fio___io_env_obj_s old;
  fio_thread_mutex_lock(&e->lock);
  r = fio___io_env_remove(&e->env, hash, key, &old);
  fio_thread_mutex_unlock(&e->lock);
  return r;
}

FIO_IFUNC int fio___io_env_safe_remove(fio___io_env_safe_s *e,
                                       char *key_,
                                       size_t len,
                                       intptr_t type_) {
  int r;
  fio_str_info_s key = FIO_STR_INFO3(key_, len, 0);
  const uint64_t hash = fio_risky_hash(key_, len, (uint64_t)(type_));
  fio_thread_mutex_lock(&e->lock);
  r = fio___io_env_remove(&e->env, hash, key, NULL);
  fio_thread_mutex_unlock(&e->lock);
  return r;
}

FIO_IFUNC void fio___io_env_safe_destroy(fio___io_env_safe_s *e) {
  fio___io_env_destroy(&e->env); /* no need to lock, performed in IO thread. */
  fio_thread_mutex_destroy(&e->lock);
  *e = (fio___io_env_safe_s)FIO___IO_ENV_SAFE_INIT;
}

/* *****************************************************************************
Protocol Type Initialization
***************************************************************************** */

static void fio___io_on_ev_mock_sus(fio_io_s *io) { fio_io_suspend(io); }
static void fio___io_on_ev_mock(fio_io_s *io) { (void)(io); }
static void fio___io_on_ev_pubsub_mock(struct fio_msg_s *msg) { (void)(msg); }
static void fio___io_on_user_mock(fio_io_s *io, void *i_) {
  (void)io, (void)i_;
}
static void fio___io_on_close_mock(void *p1, void *p2) { (void)p1, (void)p2; }
static void fio___io_on_ev_on_timeout(fio_io_s *io) { fio_io_close_now(io); }

/* Called to perform a non-blocking `read`, same as the system call. */
static ssize_t fio___io_func_default_read(int fd,
                                          void *buf,
                                          size_t len,
                                          void *tls) {
  return fio_sock_read(fd, buf, len);
  (void)tls;
}
/** Called to perform a non-blocking `write`, same as the system call. */
static ssize_t fio___io_func_default_write(int fd,
                                           const void *buf,
                                           size_t len,
                                           void *tls) {
  return fio_sock_write(fd, buf, len);
  (void)tls;
}
/** Sends any unsent internal data. Returns 0 only if all data was sent. */
static int fio___io_func_default_flush(int fd, void *tls) {
  return 0;
  (void)fd, (void)tls;
}
/** Sends any unsent internal data. Returns 0 only if all data was sent. */
static void fio___io_func_default_finish(int fd, void *tls) {
  (void)fd, (void)tls;
}
static void fio___io_func_default_cleanup(void *p1) { (void)p1; }

/** Builds a local TLS context out of the fio_io_tls_s object. */
static void *fio___io_func_default_build_context(fio_io_tls_s *tls,
                                                 uint8_t is_client) {
  if (!tls)
    return NULL;
  FIO_ASSERT(0,
             "SSL/TLS `build_context` was called, but no SSL/TLS "
             "implementation found.");
  return NULL;
  (void)tls, (void)is_client;
}
/** Builds a local TLS context out of the fio_io_tls_s object. */
static void fio___io_func_default_free_context(void *context) {
  if (!context)
    return;
  FIO_ASSERT(0,
             "SSL/TLS `free_context` was called, but no SSL/TLS "
             "implementation found.");
  (void)context;
}

static void fio___io_func_free_context_caller_task(void *fn_ptr,
                                                   void *context) {
  union {
    void (*free_context)(void *context);
    void *fn_ptr;
  } u = {.fn_ptr = fn_ptr};
  u.free_context(context);
}

static void fio___io_func_free_context_caller(void (*free_context)(void *),
                                              void *context) {
  union {
    void (*free_context)(void *context);
    void *fn_ptr;
  } u = {.free_context = free_context};
  fio_queue_push(fio_io_queue(),
                 fio___io_func_free_context_caller_task,
                 u.fn_ptr,
                 context);
}

FIO_SFUNC void fio___io_init_protocol(fio_io_protocol_s *pr, _Bool has_tls) {
  pr->reserved.protocols = FIO_LIST_INIT(pr->reserved.protocols);
  pr->reserved.ios = FIO_LIST_INIT(pr->reserved.ios);
  fio_io_functions_s io_fn = {
      .build_context = fio___io_func_default_build_context,
      .free_context = fio___io_func_default_free_context,
      .start = fio___io_on_ev_mock,
      .read = fio___io_func_default_read,
      .write = fio___io_func_default_write,
      .flush = fio___io_func_default_flush,
      .finish = fio___io_func_default_finish,
      .cleanup = fio___io_func_default_cleanup,
  };
  if (has_tls)
    io_fn = fio_io_tls_default_functions(NULL);
  if (!pr->on_attach)
    pr->on_attach = fio___io_on_ev_mock;
  if (!pr->on_data)
    pr->on_data = fio___io_on_ev_mock_sus;
  if (!pr->on_ready)
    pr->on_ready = fio___io_on_ev_mock;
  if (!pr->on_close)
    pr->on_close = fio___io_on_close_mock;
  if (!pr->on_shutdown)
    pr->on_shutdown = fio___io_on_ev_mock;
  if (!pr->on_timeout)
    pr->on_timeout = fio___io_on_ev_on_timeout;
  if (!pr->on_pubsub)
    pr->on_pubsub = fio___io_on_ev_pubsub_mock;
  if (!pr->on_user1)
    pr->on_user1 = fio___io_on_user_mock;
  if (!pr->on_user2)
    pr->on_user2 = fio___io_on_user_mock;
  if (!pr->on_user3)
    pr->on_user3 = fio___io_on_user_mock;
  if (!pr->on_reserved)
    pr->on_reserved = fio___io_on_user_mock;
  if (!pr->io_functions.build_context)
    pr->io_functions.build_context = io_fn.build_context;
  if (!pr->io_functions.free_context)
    pr->io_functions.free_context = io_fn.free_context;
  if (!pr->io_functions.start)
    pr->io_functions.start = io_fn.start;
  if (!pr->io_functions.read)
    pr->io_functions.read = io_fn.read;
  if (!pr->io_functions.write)
    pr->io_functions.write = io_fn.write;
  if (!pr->io_functions.flush)
    pr->io_functions.flush = io_fn.flush;
  if (!pr->io_functions.finish)
    pr->io_functions.finish = io_fn.finish;
  if (!pr->io_functions.cleanup)
    pr->io_functions.cleanup = io_fn.cleanup;
  if (!pr->timeout)
    pr->timeout = FIO_IO_TIMEOUT_MAX;
  /* round up to nearest 16 byte size */
  pr->buffer_size = ((pr->buffer_size + 15ULL) & (~15ULL));
}

/* the FIO___MOCK_PROTOCOL is used to manage hijacked / zombie connections. */
static fio_io_protocol_s FIO___IO_MOCK_PROTOCOL;

FIO_IFUNC void fio___io_init_protocol_test(fio_io_protocol_s *pr,
                                           _Bool has_tls) {
  if (!fio_atomic_or(&pr->reserved.flags, 1))
    fio___io_init_protocol(pr, has_tls);
}

/* *****************************************************************************
IO Reactor State Machine
***************************************************************************** */

#define FIO___IO_FLAG_WAKEUP (1U)

SFUNC struct FIO___IO {
  fio_poll_s poll;
  int64_t tick;
  fio_queue_s queue;
  uint32_t flags;
  uint16_t workers;
  uint8_t is_worker;
  volatile uint8_t stop;
  fio_timer_queue_s timer;
  int wakeup_fd;
  fio_thread_pid_t root_pid;
  fio_thread_pid_t pid;
  fio___io_env_safe_s env;
  FIO_LIST_NODE protocols;
  FIO_LIST_NODE async;
  fio_io_s *wakeup;
} FIO___IO = {
    .tick = 0,
    .wakeup_fd = -1,
    .stop = 1,
};

/** Stopping the IO reactor. */
SFUNC void fio_io_stop(void) { FIO___IO.stop = 1; }

/** Returns current process id. */
SFUNC int fio_io_pid(void) { return FIO___IO.pid; }

/** Returns the root / master process id. */
SFUNC int fio_io_root_pid(void) { return FIO___IO.root_pid; }

/** Returns true if running and 0 if stopped or shutting down. */
SFUNC int fio_io_is_running(void) { return !FIO___IO.stop; }

/** Returns true if the current process is the master process. */
SFUNC int fio_io_is_master(void) { return FIO___IO.root_pid == FIO___IO.pid; }

/** Returns true if the current process is a worker process. */
SFUNC int fio_io_is_worker(void) { return FIO___IO.is_worker; }

/** Returns the last millisecond when the polled for IO events. */
SFUNC int64_t fio_io_last_tick(void) { return FIO___IO.tick; }

FIO_SFUNC void fio___io_wakeup(void);
void fio_io_defer___(void);
/** Schedules a task for delayed execution. This function is thread-safe. */
SFUNC void fio_io_defer FIO_NOOP(void (*task)(void *, void *),
                                 void *udata1,
                                 void *udata2) {
  fio_queue_push(&FIO___IO.queue, task, udata1, udata2);
  fio___io_wakeup();
}

FIO_IFUNC void fio___io_defer_no_wakeup(void (*task)(void *, void *),
                                        void *udata1,
                                        void *udata2) {
  fio_queue_push(&FIO___IO.queue, task, udata1, udata2);
}

void fio_io_run_every___(void);
/** Schedules a timer bound task, see `fio_timer_schedule`. */
SFUNC void fio_io_run_every FIO_NOOP(fio_timer_schedule_args_s args) {
  args.start_at = FIO___IO.tick;
  fio_timer_schedule FIO_NOOP(&FIO___IO.timer, args);
}

/** Returns a pointer for the IO reactor's queue. */
SFUNC fio_queue_s *fio_io_queue(void) { return &FIO___IO.queue; }

/* *****************************************************************************
IO Type
***************************************************************************** */

#define FIO___IO_FLAG_OPEN         ((uint32_t)1U)
#define FIO___IO_FLAG_SUSPENDED    ((uint32_t)2U)
#define FIO___IO_FLAG_THROTTLED    ((uint32_t)4U)
#define FIO___IO_FLAG_CLOSE        ((uint32_t)8U)
#define FIO___IO_FLAG_CLOSE_REMOTE ((uint32_t)16U)
#define FIO___IO_FLAG_CLOSE_ERROR  ((uint32_t)32U)
#define FIO___IO_FLAG_TOUCH        ((uint32_t)64U)
#define FIO___IO_FLAG_WRITE_SCHD   ((uint32_t)128U)
#define FIO___IO_FLAG_POLLIN_SET   ((uint32_t)256U)
#define FIO___IO_FLAG_POLLOUT_SET  ((uint32_t)512U)

#define FIO___IO_FLAG_PREVENT_ON_DATA                                          \
  (FIO___IO_FLAG_SUSPENDED | FIO___IO_FLAG_THROTTLED | FIO___IO_FLAG_CLOSE |   \
   FIO___IO_FLAG_CLOSE_REMOTE | FIO___IO_FLAG_CLOSE_ERROR)

#define FIO___IO_FLAG_POLL_SET                                                 \
  (FIO___IO_FLAG_POLLIN_SET | FIO___IO_FLAG_POLLOUT_SET)

#define FIO___IO_FLAG_SET(io, flag_to_set)                                     \
  fio_atomic_or(&(io)->flags, flag_to_set)
#define FIO___IO_FLAG_UNSET(io, flag_to_unset)                                 \
  fio_atomic_and(&(io)->flags, ~(flag_to_unset))

static void fio___io_poll_on_data_schd(void *io);
static void fio___io_poll_on_ready_schd(void *io);
static void fio___io_poll_on_close_schd(void *io);

/** The main IO object type. Should be treated as an opaque pointer. */
struct fio_io_s {
  int fd;
  uint32_t flags;
  FIO_LIST_NODE node;
  void *udata;
  void *tls;
  fio_io_protocol_s *pr;
  fio_stream_s out;
  fio___io_env_safe_s env;
#if FIO_IO_COUNT_STORAGE
  size_t total_sent;
  size_t total_recieved;
#endif
  int64_t active;
};

FIO_IFUNC void fio___io_monitor_in(fio_io_s *io) {
  FIO_LOG_DDEBUG2("(%d) IO monitoring Input for %d (called)",
                  fio_io_pid(),
                  io->fd);
  if (io->flags & FIO___IO_FLAG_PREVENT_ON_DATA)
    return;
  if ((FIO___IO_FLAG_SET(io, FIO___IO_FLAG_POLLIN_SET) &
       FIO___IO_FLAG_POLLIN_SET)) {
    return;
  }
  fio_poll_monitor(&FIO___IO.poll, io->fd, (void *)io, POLLIN);
  FIO_LOG_DDEBUG2("(%d) IO monitoring Input for %d", fio_io_pid(), io->fd);
}
FIO_IFUNC void fio___io_monitor_out(fio_io_s *io) {
  FIO_LOG_DDEBUG2("(%d) IO monitoring Output for %d (called)",
                  fio_io_pid(),
                  io->fd);
  if (io->flags & FIO___IO_FLAG_WRITE_SCHD)
    return;
  if ((FIO___IO_FLAG_SET(io, FIO___IO_FLAG_POLLOUT_SET) &
       FIO___IO_FLAG_POLLOUT_SET))
    return;
  fio_poll_monitor(&FIO___IO.poll, io->fd, (void *)io, POLLOUT);
  FIO_LOG_DDEBUG2("(%d) IO monitoring Output for %d", fio_io_pid(), io->fd);
}

FIO_IFUNC void fio___io_monitor_forget(fio_io_s *io) {
  FIO_LOG_DDEBUG2("(%d) IO monitoring Removed for %d (called)",
                  fio_io_pid(),
                  io->fd);
  if (!(FIO___IO_FLAG_UNSET(io, FIO___IO_FLAG_POLL_SET) &
        FIO___IO_FLAG_POLL_SET))
    return;
  fio_poll_forget(&FIO___IO.poll, io->fd);
  FIO_LOG_DDEBUG2("(%d) IO monitoring Removed for %d", fio_io_pid(), io->fd);
}

FIO_SFUNC void fio___io_destroy(fio_io_s *io) {
  fio_io_protocol_s *pr = io->pr;
  FIO_LIST_REMOVE(&io->node);
#if FIO_IO_COUNT_STORAGE
  FIO_LOG_DDEBUG2(
      "(%d) detaching and destroying %p (fd %d): %zu/%zu bytes received/sent",
      FIO___IO.pid,
      (void *)io,
      io->fd,
      io->total_recieved,
      io->total_sent);
#else
  FIO_LOG_DDEBUG2("(%d) detaching and destroying %p (fd %d).",
                  FIO___IO.pid,
                  (void *)io,
                  io->fd);
#endif
  /* store info, as it might be freed if the protocol is freed. */
  if (FIO_LIST_IS_EMPTY(&io->pr->reserved.ios))
    FIO_LIST_REMOVE_RESET(&io->pr->reserved.protocols);
  /* call on_stop / free callbacks . */
  pr->io_functions.cleanup(io->tls);
  pr->on_close((void *)(io + 1), io->udata);
  fio___io_env_safe_destroy(&io->env);
  fio_sock_close(io->fd);
  fio_stream_destroy(&io->out);
  fio___io_monitor_forget(io);
  FIO_LOG_DDEBUG2("(%d) IO closed and destroyed for fd %d",
                  fio_io_pid(),
                  io->fd);
}

#define FIO_REF_NAME            fio___io
#define FIO_REF_TYPE            fio_io_s
#define FIO_REF_FLEX_TYPE       uint8_t
#define FIO_REF_DESTROY(io)     fio___io_destroy(&io)
#define FIO___RECURSIVE_INCLUDE 1
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

FIO_SFUNC void fio___io_protocol_set(void *io_, void *pr_) {
  fio_io_s *io = (fio_io_s *)io_;
  fio_io_protocol_s *pr = (fio_io_protocol_s *)pr_;
  fio_io_protocol_s *old = io->pr;
  if (!pr)
    pr = &FIO___IO_MOCK_PROTOCOL;
  fio___io_init_protocol_test(pr, (io->tls != NULL));
  FIO_LIST_REMOVE(&io->node);
  if (FIO_LIST_IS_EMPTY(&old->reserved.ios))
    FIO_LIST_REMOVE_RESET(&old->reserved.protocols);
  if (FIO_LIST_IS_EMPTY(&pr->reserved.ios))
    FIO_LIST_PUSH(&FIO___IO.protocols, &pr->reserved.protocols);
  FIO_LIST_PUSH(&pr->reserved.ios, &io->node);
  io->pr = pr;
  FIO_LOG_DDEBUG2("(%d) protocol set for IO with fd %d",
                  fio_io_pid(),
                  fio_io_fd(io));
  pr->on_attach(io);
  /* avoid calling `start` and setting `on_ready` more than once */
  if (old == &FIO___IO_MOCK_PROTOCOL) {
    pr->io_functions.start(io);
    fio___io_monitor_out(io);
  }
  fio___io_monitor_in(io);
  fio___io_free2(io);
}

/** Performs a task for each IO in the stated protocol. */
SFUNC size_t fio_io_protocol_each(fio_io_protocol_s *protocol,
                                  void (*task)(fio_io_s *, void *udata2),
                                  void *udata2) {
  size_t count = 0;
  if (!protocol || !protocol->reserved.protocols.next)
    return count;
  FIO_LIST_EACH(fio_io_s, node, &protocol->reserved.ios, io) {
    task(io, udata2);
    ++count;
  }
  return count;
}

/* Attaches the socket in `fd` to the facio.io engine (reactor). */
SFUNC fio_io_s *fio_io_attach_fd(int fd,
                                 fio_io_protocol_s *pr,
                                 void *udata,
                                 void *tls) {
  fio_io_s *io = NULL;
  if (fd == -1)
    goto error;
  io = fio___io_new2(pr->buffer_size);
  *io = (fio_io_s){
      .fd = fd,
      .flags = FIO___IO_FLAG_OPEN,
      .pr = &FIO___IO_MOCK_PROTOCOL,
      .node = FIO_LIST_INIT(io->node),
      .udata = udata,
      .tls = tls,
      .active = FIO___IO.tick,
  };
  fio_sock_set_non_block(fd);
  FIO_LOG_DDEBUG2("(%d) attaching fd %d to IO object %p (%zu bytes buffer)",
                  fio_io_pid(),
                  fd,
                  (void *)io,
                  fio_io_buffer_len(io));
  fio_io_defer(fio___io_protocol_set, (void *)fio___io_dup2(io), (void *)pr);
  return io;

error:
  pr->on_close(NULL, udata);
  pr->io_functions.cleanup(tls);
  return io;
}

/** Sets a new protocol object. `NULL` is a valid "only-write" protocol. */
SFUNC fio_io_protocol_s *fio_io_protocol_set(fio_io_s *io,
                                             fio_io_protocol_s *pr) {
  fio_io_defer(fio___io_protocol_set, (void *)fio___io_dup2(io), (void *)pr);
  return pr;
}

/**
 * Returns a pointer to the current protocol object.
 *
 * If `protocol` wasn't properly set, the pointer might be NULL or invalid.
 *
 * If `protocol` wasn't attached yet, may return the previous protocol.
 */
IFUNC fio_io_protocol_s *fio_io_protocol(fio_io_s *io) { return io->pr; }

/** Returns the a pointer to the memory buffer required by the protocol. */
IFUNC void *fio_io_buffer(fio_io_s *io) { return (void *)(io + 1); }

/** Returns the length of the `buffer` buffer. */
IFUNC size_t fio_io_buffer_len(fio_io_s *io) {
  return fio___io_metadata_flex_len(io);
}

/** Associates a new `udata` pointer with the IO, returning the old `udata` */
IFUNC void *fio_io_udata_set(fio_io_s *io, void *udata) {
  void *old = io->udata;
  io->udata = udata;
  return old;
}

/** Returns the `udata` pointer associated with the IO. */
IFUNC void *fio_io_udata(fio_io_s *io) { return io->udata; }

/** Associates a new `tls` pointer with the IO, returning the old `tls` */
IFUNC void *fio_io_tls_set(fio_io_s *io, void *tls) {
  void *old = io->tls;
  io->tls = tls;
  return old;
}

/** Returns the `tls` pointer associated with the IO. */
IFUNC void *fio_io_tls(fio_io_s *io) { return io->tls; }

/** Returns the socket file descriptor (fd) associated with the IO. */
IFUNC int fio_io_fd(fio_io_s *io) { return io->fd; }

FIO_SFUNC void fio___io_touch(void *io_, void *ignr_) {
  fio_io_s *io = (fio_io_s *)io_;
  fio_atomic_and(&io->flags, ~FIO___IO_FLAG_TOUCH);
  io->active = FIO___IO.tick;
  FIO_LIST_REMOVE(&io->node); /* timeout IO ordering */
  FIO_LIST_PUSH(&io->pr->reserved.ios, &io->node);
  fio___io_free2(io);
  (void)ignr_;
}

/* Resets a socket's timeout counter. */
SFUNC void fio_io_touch(fio_io_s *io) {
  if (!(fio_atomic_or(&io->flags, FIO___IO_FLAG_TOUCH) & FIO___IO_FLAG_TOUCH))
    fio_queue_push_urgent(&FIO___IO.queue, fio___io_touch, fio___io_dup2(io));
}

/**
 * Reads data to the buffer, if any data exists. Returns the number of bytes
 * read.
 *
 * NOTE: zero (`0`) is a valid return value meaning no data was available.
 */
SFUNC size_t fio_io_read(fio_io_s *io, void *buf, size_t len) {
  if (!io)
    return 0;
  ssize_t r = io->pr->io_functions.read(io->fd, buf, len, io->tls);
  if (r > 0) {
#if FIO_IO_COUNT_STORAGE
    io->total_recieved += r;
#endif
    fio_io_touch(io);
    return r;
  }
  if ((unsigned)(!len) |
      ((unsigned)(r == -1) & ((unsigned)(errno == EAGAIN) |
                              (errno == EWOULDBLOCK) | (errno == EINTR))))
    return 0;
  fio_io_close(io);
  return 0;
}

FIO_SFUNC void fio___io_write2_dealloc_task(void *fn, void *data) {
  union {
    void *ptr;
    void (*fn)(void *);
  } u = {.ptr = fn};
  u.fn(data);
}

FIO_SFUNC void fio___io_write2(void *io_, void *packet_) {
  fio_io_s *io = (fio_io_s *)io_;
  fio_stream_packet_s *packet = (fio_stream_packet_s *)packet_;
  if (!(io->flags & FIO___IO_FLAG_OPEN))
    goto io_closed;

  fio_stream_add(&io->out, packet);
  fio___io_poll_on_ready_schd((void *)io);
  fio___io_free2(io);
  return;

io_closed:
  fio_stream_packet_free(packet);
  fio___io_free2(io);
}

void fio_io_write2___(void);
/**
 * Writes data to the outgoing buffer and schedules the buffer to be sent.
 */
SFUNC void fio_io_write2 FIO_NOOP(fio_io_s *io, fio_io_write_args_s args) {
  fio_stream_packet_s *packet = NULL;
  if (!io)
    goto io_error_null;
  if (args.buf) {
    packet = fio_stream_pack_data(args.buf,
                                  args.len,
                                  args.offset,
                                  args.copy,
                                  args.dealloc);
  } else if ((unsigned)(args.fd + 1) > 1) {
    packet = fio_stream_pack_fd((int)args.fd, args.len, args.offset, args.copy);
  } else /* fio_io_write2 called without data */
    goto do_nothing;
  if (!packet)
    goto error;
  if ((io->flags & FIO___IO_FLAG_CLOSE))
    goto write_called_after_close;
  fio_io_defer(fio___io_write2, (void *)fio___io_dup2(io), (void *)packet);
  return;

error: /* note: `dealloc` already called by the `fio_stream` error handler. */
  FIO_LOG_ERROR(
      "(%d) couldn't create %zu bytes long user-packet for IO %p (%d)",
      fio_io_pid(),
      args.len,
      (void *)io,
      (io ? io->fd : -1));
  return;

write_called_after_close:
  FIO_LOG_DEBUG2("(%d) `write` called after `close` was called for IO.",
                 fio_io_pid());
  {
    union {
      void *ptr;
      void (*fn)(fio_stream_packet_s *);
    } u = {.fn = fio_stream_pack_free};
    fio___io_defer_no_wakeup(fio___io_write2_dealloc_task, u.ptr, packet);
  }
  return;

io_error_null:
  FIO_LOG_ERROR("(%d) `fio_write2` called for invalid IO (NULL)", FIO___IO.pid);
do_nothing:
  if (args.dealloc) {
    union {
      void *ptr;
      void (*fn)(void *);
    } u = {.fn = args.dealloc};
    fio___io_defer_no_wakeup(fio___io_write2_dealloc_task, u.ptr, args.buf);
    if ((unsigned)(args.fd + 1) > 1)
      close((int)args.fd);
  }
}

/** Marks the IO for closure as soon as scheduled data was sent. */
SFUNC void fio_io_close(fio_io_s *io) {
  if (io && (io->flags & FIO___IO_FLAG_OPEN) &&
      !(FIO___IO_FLAG_SET(io, FIO___IO_FLAG_CLOSE) & FIO___IO_FLAG_CLOSE)) {
    FIO_LOG_DDEBUG2("(%d) scheduling IO %p (fd %d) for closure",
                    fio_io_pid(),
                    (void *)io,
                    io->fd);
    fio___io_poll_on_ready_schd((void *)io);
  }
}

/** Marks the IO for immediate closure. */
SFUNC void fio_io_close_now(fio_io_s *io) {
  if (!io)
    return;
  FIO_LOG_DDEBUG2("(%d) pre-destruction close called for fd %d",
                  fio_io_pid(),
                  fio_io_fd(io));
  FIO___IO_FLAG_SET(io, FIO___IO_FLAG_CLOSE);
  if ((FIO___IO_FLAG_UNSET(io, FIO___IO_FLAG_OPEN) & FIO___IO_FLAG_OPEN))
    fio_io_free(io);
}

/**
 * Increases a IO's reference count, so it won't be automatically destroyed
 * when all tasks have completed.
 *
 * Use this function in order to use the IO outside of a scheduled task.
 *
 * This function is thread-safe.
 */
SFUNC fio_io_s *fio_io_dup(fio_io_s *io) { return fio___io_dup2(io); }

SFUNC void fio___io_free_task(void *io_, void *ignr_) {
  fio___io_free2((fio_io_s *)io_);
  (void)ignr_;
}
/** Free IO (reference) - thread-safe */
SFUNC void fio_io_free(fio_io_s *io) {
  fio___io_defer_no_wakeup(fio___io_free_task, (void *)io, NULL);
}

/** Suspends future "on_data" events for the IO. */
SFUNC void fio_io_suspend(fio_io_s *io) {
  FIO___IO_FLAG_SET(io, FIO___IO_FLAG_SUSPENDED);
}

SFUNC void fio___io_unsuspend(void *io_, void *ignr_) {
  fio_io_s *io = (fio_io_s *)io_;
  fio___io_monitor_in(io);
  (void)ignr_;
}

/** Listens for future "on_data" events related to the IO. */
SFUNC void fio_io_unsuspend(fio_io_s *io) {
  if ((FIO___IO_FLAG_UNSET(io, FIO___IO_FLAG_SUSPENDED) &
       FIO___IO_FLAG_SUSPENDED))
    fio_io_defer(fio___io_unsuspend, (void *)io, NULL);
}

/** Returns 1 if the IO handle was suspended. */
SFUNC int fio_io_is_suspended(fio_io_s *io) {
  return (int)((io->flags & FIO___IO_FLAG_SUSPENDED) / FIO___IO_FLAG_SUSPENDED);
}

/** Returns 1 if the IO handle is marked as open. */
SFUNC int fio_io_is_open(fio_io_s *io) {
  return (int)((io->flags & FIO___IO_FLAG_OPEN) / FIO___IO_FLAG_OPEN);
}

/** Returns the approximate number of bytes in the outgoing buffer. */
SFUNC size_t fio_io_backlog(fio_io_s *io) {
  return fio_stream_length(&io->out);
}

/* *****************************************************************************
Connection Object Links / Environment
***************************************************************************** */

void *fio_io_env_get___(void); /* IDE Marker */
/** Returns the named `udata` associated with the IO object (or `NULL`). */
SFUNC void *fio_io_env_get FIO_NOOP(fio_io_s *io, fio_io_env_get_args_s a) {
  fio___io_env_safe_s *e = io ? &io->env : &FIO___IO.env;
  return fio___io_env_safe_get(e, a.name.buf, a.name.len, a.type);
}

void fio_io_env_set___(void); /* IDE Marker */
/** Links an object to a connection's lifetime / environment. */
SFUNC void fio_io_env_set FIO_NOOP(fio_io_s *io, fio_io_env_set_args_s a) {
  fio___io_env_safe_s *e = io ? &io->env : &FIO___IO.env;
  fio___io_env_safe_set(e,
                        a.name.buf,
                        a.name.len,
                        a.type,
                        (fio___io_env_obj_s){.on_close = a.on_close, a.udata},
                        a.const_name);
}

int fio_io_env_unset___(void); /* IDE Marker */
/** Un-links an object from the connection's lifetime, so it's `on_close` */
SFUNC int fio_io_env_unset FIO_NOOP(fio_io_s *io, fio_io_env_get_args_s a) {
  fio___io_env_safe_s *e = io ? &io->env : &FIO___IO.env;
  return fio___io_env_safe_unset(e, a.name.buf, a.name.len, a.type);
}

int fio_io_env_remove___(void); /* IDE Marker */
/**
 * Removes an object from the connection's lifetime / environment, calling it's
 * `on_close` callback as if the connection was closed.
 */
SFUNC int fio_io_env_remove FIO_NOOP(fio_io_s *io, fio_io_env_get_args_s a) {
  fio___io_env_safe_s *e = io ? &io->env : &FIO___IO.env;
  return fio___io_env_safe_remove(e, a.name.buf, a.name.len, a.type);
}

/* *****************************************************************************
Event handling
***************************************************************************** */

static void fio___io_poll_on_data(void *io_, void *ignr_) {
  (void)ignr_;
  fio_io_s *io = (fio_io_s *)io_;
  FIO___IO_FLAG_UNSET(io, FIO___IO_FLAG_POLLIN_SET);
  if (!(io->flags & FIO___IO_FLAG_PREVENT_ON_DATA)) {
    /* this also tests for the suspended / throttled / closing flags */
    io->pr->on_data(io);
    fio___io_monitor_in(io);
  } else if ((io->flags & FIO___IO_FLAG_OPEN)) {
    fio___io_monitor_out(io);
  }
  fio___io_free2(io);
  return;
}

static void fio___io_poll_on_ready(void *io_, void *ignr_) {
  (void)ignr_;
#if DEBUG
  errno = 0;
#endif
  fio_io_s *io = (fio_io_s *)io_;
  char buf_mem[FIO_IO_BUFFER_PER_WRITE];
  size_t total = 0;
  FIO___IO_FLAG_UNSET(io,
                      (FIO___IO_FLAG_POLLOUT_SET | FIO___IO_FLAG_WRITE_SCHD));
  FIO_LOG_DDEBUG2("(%d) poll_on_ready callback for fd %d",
                  fio_io_pid(),
                  fio_io_fd(io));
  if (!(io->flags & FIO___IO_FLAG_OPEN))
    goto finish;
  for (;;) {
    size_t len = FIO_IO_BUFFER_PER_WRITE;
    char *buf = buf_mem;
    fio_stream_read(&io->out, &buf, &len);
    if (!len)
      break;
    ssize_t r = io->pr->io_functions.write(io->fd, buf, len, io->tls);
    if (r > 0) {
      FIO_LOG_DDEBUG2("(%d) written %zu bytes to fd %d",
                      FIO___IO.pid,
                      (size_t)r,
                      io->fd);
      total += r;
      fio_stream_advance(&io->out, r);
      continue;
    }
    if (r == -1) {
      if ((errno == EWOULDBLOCK) || (errno == EAGAIN))
        break;
      if (errno == EINTR)
        continue;
    }
    goto connection_error;
  }
  if (total) {
    fio___io_touch((void *)fio___io_dup2(io), NULL);
#if FIO_IO_COUNT_STORAGE
    io->total_sent += total;
#endif
  }
  if (fio_stream_any(&io->out) || io->pr->io_functions.flush(io->fd, io->tls)) {
    if (fio_stream_length(&io->out) >= FIO_IO_THROTTLE_LIMIT) {
      if (!(io->flags & FIO___IO_FLAG_THROTTLED))
        FIO_LOG_DDEBUG2("(%d), throttled IO %p (fd %d)",
                        FIO___IO.pid,
                        (void *)io,
                        io->fd);
      FIO___IO_FLAG_SET(io, FIO___IO_FLAG_THROTTLED);
    }
    fio___io_monitor_out(io);
  } else if ((io->flags & FIO___IO_FLAG_CLOSE)) {
    io->pr->io_functions.finish(io->fd, io->tls);
    fio_io_close_now(io);
  } else {
    if ((io->flags & FIO___IO_FLAG_THROTTLED)) {
      FIO___IO_FLAG_UNSET(io, FIO___IO_FLAG_THROTTLED);
      fio___io_monitor_in(io);
    }
    FIO_LOG_DDEBUG2("(%d) calling on_ready for %p (fd %d) - %zu data left.",
                    FIO___IO.pid,
                    (void *)io,
                    io->fd,
                    fio_stream_length(&io->out));
    io->pr->on_ready(io);
  }

finish:
  fio___io_free2(io);
  return;

connection_error:
#if DEBUG
  if (fio_stream_any(&io->out))
    FIO_LOG_DERROR(
        "(%d) IO write failed (%d), disconnecting: %p (fd %d)\n\tError: %s",
        FIO___IO.pid,
        errno,
        (void *)io,
        io->fd,
        strerror(errno));
#endif
  fio_io_close_now(io);
  fio___io_free2(io);
}

static void fio___io_poll_on_close(void *io_, void *ignr_) {
  (void)ignr_;
  fio_io_s *io = (fio_io_s *)io_;
  FIO___IO_FLAG_SET(io, FIO___IO_FLAG_CLOSE_REMOTE);
  FIO_LOG_DEBUG2("(%d) fd %d closed by remote peer", FIO___IO.pid, io->fd);
  fio_io_close_now(io);
  fio___io_free2(io);
}

static void fio___io_poll_on_timeout(void *io_, void *ignr_) {
  (void)ignr_;
  fio_io_s *io = (fio_io_s *)io_;
  io->pr->on_timeout(io);
  fio___io_free2(io);
}

/* *****************************************************************************
Event scheduling
***************************************************************************** */

static void fio___io_poll_on_data_schd(void *io) {
  FIO_LOG_DDEBUG2("(%d) `on_data` scheduled for fd %d.",
                  fio_io_pid(),
                  fio_io_fd((fio_io_s *)io));
  fio___io_defer_no_wakeup(fio___io_poll_on_data,
                           (void *)fio___io_dup2((fio_io_s *)io),
                           NULL);
}
static void fio___io_poll_on_ready_schd(void *io) {
  if (!(FIO___IO_FLAG_SET((fio_io_s *)io, FIO___IO_FLAG_WRITE_SCHD) &
        FIO___IO_FLAG_WRITE_SCHD)) {
    FIO_LOG_DDEBUG2("(%d) `on_ready` scheduled for fd %d.",
                    fio_io_pid(),
                    fio_io_fd((fio_io_s *)io));
    fio___io_defer_no_wakeup(fio___io_poll_on_ready,
                             (void *)fio___io_dup2((fio_io_s *)io),
                             NULL);
  }
}
static void fio___io_poll_on_close_schd(void *io) {
  FIO_LOG_DDEBUG2("(%d) remote closure for fd %d.",
                  fio_io_pid(),
                  fio_io_fd((fio_io_s *)io));
  fio___io_defer_no_wakeup(fio___io_poll_on_close,
                           (void *)fio___io_dup2((fio_io_s *)io),
                           NULL);
}

/* *****************************************************************************
Timeout Review
***************************************************************************** */

/** Schedules the timeout event for any timed out IO object */
static int fio___io_review_timeouts(void) {
  int c = 0;
  static time_t last_to_review = 0;
  /* test timeouts at whole second intervals */
  if (last_to_review + 1000 > FIO___IO.tick)
    return c;
  last_to_review = FIO___IO.tick;
  const int64_t now_milli = FIO___IO.tick;

  FIO_LIST_EACH(fio_io_protocol_s,
                reserved.protocols,
                &FIO___IO.protocols,
                pr) {
    FIO_ASSERT_DEBUG(pr->reserved.flags, "protocol object flags unmarked?!");
    if (!pr->timeout || pr->timeout > FIO_IO_TIMEOUT_MAX)
      pr->timeout = FIO_IO_TIMEOUT_MAX;
    int64_t limit = now_milli - ((int64_t)pr->timeout);
    FIO_LIST_EACH(fio_io_s, node, &pr->reserved.ios, io) {
      FIO_ASSERT_DEBUG(io->pr == pr, "IO protocol ownership error");
      if (io->active >= limit)
        break;
      FIO_LOG_DDEBUG2("(%d) scheduling timeout for %p (fd %d)",
                      FIO___IO.pid,
                      (void *)io,
                      io->fd);
      fio___io_defer_no_wakeup(fio___io_poll_on_timeout,
                               (void *)fio___io_dup2(io),
                               NULL);
      ++c;
    }
  }
  return c;
}

/* *****************************************************************************
Wakeup Protocol
***************************************************************************** */

FIO_SFUNC void fio___io_wakeup_cb(fio_io_s *io) {
  char buf[512];
  ssize_t r = fio_sock_read(fio_io_fd(io), buf, 512);
  (void)r;
  FIO_LOG_DDEBUG2("(%d) fio___io_wakeup called", FIO___IO.pid);
  FIO___IO_FLAG_UNSET(&FIO___IO, FIO___IO_FLAG_WAKEUP);
}
FIO_SFUNC void fio___io_wakeup_on_close(void *ignr1_, void *ignr2_) {
  fio_sock_close(FIO___IO.wakeup_fd);
  FIO___IO.wakeup = NULL;
  FIO___IO.wakeup_fd = -1;
  FIO_LOG_DDEBUG2("(%d) fio___io_wakeup destroyed", FIO___IO.pid);
  (void)ignr1_, (void)ignr2_;
}

FIO_SFUNC void fio___io_wakeup(void) {
  if (!FIO___IO.wakeup || (FIO___IO_FLAG_SET(&FIO___IO, FIO___IO_FLAG_WAKEUP) &
                           FIO___IO_FLAG_WAKEUP))
    return;
  char buf[1] = {(char)~0};
  ssize_t ignr = fio_sock_write(FIO___IO.wakeup_fd, buf, 1);
  (void)ignr;
}

static fio_io_protocol_s FIO___IO_WAKEUP_PROTOCOL = {
    .on_data = fio___io_wakeup_cb,
    .on_close = fio___io_wakeup_on_close,
    .on_timeout = fio_io_touch,
};

FIO_SFUNC void fio___io_wakeup_init(void) {
  if (FIO___IO.wakeup)
    return;
  int fds[2];
  if (pipe(fds)) {
    FIO_LOG_ERROR("(%d) couldn't open wakeup pipes, fio___io_wakeup disabled.",
                  FIO___IO.pid);
    return;
  }
  fio_sock_set_non_block(fds[0]);
  fio_sock_set_non_block(fds[1]);
  FIO___IO.wakeup_fd = fds[1];
  FIO___IO.wakeup = fio_io_attach_fd(fds[0],
                                     &FIO___IO_WAKEUP_PROTOCOL,
                                     (void *)(uintptr_t)fds[1],
                                     NULL);
  FIO_LOG_DDEBUG2("(%d) fio___io_wakeup initialized", FIO___IO.pid);
}

/* *****************************************************************************
TLS Context Type and Helpers
***************************************************************************** */

typedef struct {
  fio_keystr_s nm;
  void (*fn)(fio_io_s *);
} fio___io_tls_alpn_s;

typedef struct {
  fio_keystr_s nm;
  fio_keystr_s public_cert_file;
  fio_keystr_s private_key_file;
  fio_keystr_s pk_password;
} fio___io_tls_cert_s;

typedef struct {
  fio_keystr_s nm;
} fio___io_tls_trust_s;

#undef FIO_TYPEDEF_IMAP_REALLOC
#undef FIO_TYPEDEF_IMAP_FREE
#undef FIO_TYPEDEF_IMAP_REALLOC_IS_SAFE
#define FIO_TYPEDEF_IMAP_REALLOC(p, size_old, size, copy) realloc(p, size)
#define FIO_TYPEDEF_IMAP_FREE(ptr, len)                   free(ptr)
#define FIO_TYPEDEF_IMAP_REALLOC_IS_SAFE                  0

#define FIO___IO_ALPN_HASH(o)   ((uint16_t)fio_keystr_hash(o->nm))
#define FIO___IO_ALPN_CMP(a, b) fio_keystr_is_eq(a->nm, b->nm)
#define FIO___IO_ALPN_VALID(o)  fio_keystr_buf(&o->nm).len

FIO_TYPEDEF_IMAP_ARRAY(fio___io_tls_alpn_map,
                       fio___io_tls_alpn_s,
                       uint16_t,
                       FIO___IO_ALPN_HASH,
                       FIO___IO_ALPN_CMP,
                       FIO___IO_ALPN_VALID)
FIO_TYPEDEF_IMAP_ARRAY(fio___io_tls_trust_map,
                       fio___io_tls_trust_s,
                       uint16_t,
                       FIO___IO_ALPN_HASH,
                       FIO___IO_ALPN_CMP,
                       FIO___IO_ALPN_VALID)
FIO_TYPEDEF_IMAP_ARRAY(fio___io_tls_cert_map,
                       fio___io_tls_cert_s,
                       uint16_t,
                       FIO___IO_ALPN_HASH,
                       FIO___IO_ALPN_CMP,
                       FIO_IMAP_ALWAYS_VALID)

#undef FIO___IO_ALPN_HASH
#undef FIO___IO_ALPN_CMP
#undef FIO___IO_ALPN_VALID
#undef FIO_TYPEDEF_IMAP_REALLOC
#undef FIO_TYPEDEF_IMAP_FREE
#undef FIO_TYPEDEF_IMAP_REALLOC_IS_SAFE
#define FIO_TYPEDEF_IMAP_REALLOC         FIO_MEM_REALLOC
#define FIO_TYPEDEF_IMAP_FREE            FIO_MEM_FREE
#define FIO_TYPEDEF_IMAP_REALLOC_IS_SAFE FIO_MEM_REALLOC_IS_SAFE

struct fio_io_tls_s {
  fio___io_tls_cert_map_s cert;
  fio___io_tls_alpn_map_s alpn;
  fio___io_tls_trust_map_s trust;
  uint8_t trust_sys; /** Set to 1 if system certificate registry is trusted */
};

#define FIO___RECURSIVE_INCLUDE 1
#define FIO_REF_NAME            fio_io_tls
#define FIO_REF_DESTROY(tls)                                                   \
  do {                                                                         \
    FIO_IMAP_EACH(fio___io_tls_alpn_map, &tls.alpn, i) {                       \
      fio_keystr_destroy(&tls.alpn.ary[i].nm, FIO_STRING_FREE_KEY);            \
    }                                                                          \
    FIO_IMAP_EACH(fio___io_tls_trust_map, &tls.trust, i) {                     \
      fio_keystr_destroy(&tls.trust.ary[i].nm, FIO_STRING_FREE_KEY);           \
    }                                                                          \
    FIO_IMAP_EACH(fio___io_tls_cert_map, &tls.cert, i) {                       \
      fio_keystr_destroy(&tls.cert.ary[i].nm, FIO_STRING_FREE_KEY);            \
      fio_keystr_destroy(&tls.cert.ary[i].public_cert_file,                    \
                         FIO_STRING_FREE_KEY);                                 \
      fio_keystr_destroy(&tls.cert.ary[i].private_key_file,                    \
                         FIO_STRING_FREE_KEY);                                 \
      fio_keystr_destroy(&tls.cert.ary[i].pk_password, FIO_STRING_FREE_KEY);   \
    }                                                                          \
    fio___io_tls_alpn_map_destroy(&tls.alpn);                                  \
    fio___io_tls_trust_map_destroy(&tls.trust);                                \
    fio___io_tls_cert_map_destroy(&tls.cert);                                  \
  } while (0)
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

/** Performs a `new` operation, returning a new `fio_io_tls_s` context. */
SFUNC fio_io_tls_s *fio_io_tls_new(void) {
  fio_io_tls_s *r = fio_io_tls_new2();
  FIO_ASSERT_ALLOC(r);
  *r = (fio_io_tls_s){.trust_sys = 0};
  return r;
}

/** Performs a `dup` operation, increasing the object's reference count. */
SFUNC fio_io_tls_s *fio_io_tls_dup(fio_io_tls_s *tls) {
  return fio_io_tls_dup2(tls);
}

/** Performs a `free` operation, reducing the reference count and freeing. */
SFUNC void fio_io_tls_free(fio_io_tls_s *tls) {
  if (!tls)
    return;
  fio_io_tls_free2(tls);
}

/** Takes a parsed URL and optional TLS target and returns a TLS if needed. */
SFUNC fio_io_tls_s *fio_io_tls_from_url(fio_io_tls_s *tls, fio_url_s url) {
  /* test for TLS info in URL */
  fio_url_tls_info_s tls_info = fio_url_is_tls(url);
  if (!tls_info.tls)
    return tls;

  if (!tls && tls_info.tls)
    tls = fio_io_tls_new();

  if (tls_info.key.buf && tls_info.cert.buf) {
    const char *tmp = NULL;
    FIO_STR_INFO_TMP_VAR(host_tmp, 512);
    FIO_STR_INFO_TMP_VAR(key_tmp, 128);
    FIO_STR_INFO_TMP_VAR(cert_tmp, 128);
    FIO_STR_INFO_TMP_VAR(pass_tmp, 128);
    if (url.host.len < 512 && url.host.buf)
      fio_string_write(&host_tmp, NULL, url.host.buf, url.host.len);
    else
      host_tmp.buf = NULL;

    if (tls_info.key.len < 124 && tls_info.cert.len < 124 &&
        tls_info.pass.len < 124) {
      fio_string_write(&key_tmp, NULL, tls_info.key.buf, tls_info.key.len);
      fio_string_write(&cert_tmp, NULL, tls_info.cert.buf, tls_info.cert.len);
      if (tls_info.pass.len)
        fio_string_write(&pass_tmp, NULL, tls_info.pass.buf, tls_info.pass.len);
      else
        pass_tmp.buf = NULL;

      if (tls_info.key.buf ==
          tls_info.cert.buf) { /* assume value is prefix / folder */
        if ((tmp = getenv(cert_tmp.buf))) {
          fio_buf_info_s buf_tmp = FIO_BUF_INFO1((char *)tmp);
          if (buf_tmp.len < 124) {
            key_tmp.len = cert_tmp.len = buf_tmp.len;
            FIO_MEMCPY(key_tmp.buf, buf_tmp.buf, buf_tmp.len);
            FIO_MEMCPY(cert_tmp.buf, buf_tmp.buf, buf_tmp.len);
          }
        }
        fio_string_write(&key_tmp, NULL, "key.pem", 7);
        fio_string_write(&cert_tmp, NULL, "cert.pem", 8);
      } else {
        if ((tmp = getenv(key_tmp.buf))) {
          fio_buf_info_s buf_tmp = FIO_BUF_INFO1((char *)tmp);
          if (buf_tmp.len < 124) {
            key_tmp.len = buf_tmp.len;
            FIO_MEMCPY(key_tmp.buf, buf_tmp.buf, buf_tmp.len);
          }
        }

        if ((tmp = getenv(cert_tmp.buf))) {
          fio_buf_info_s buf_tmp = FIO_BUF_INFO1((char *)tmp);
          if (buf_tmp.len < 124) {
            cert_tmp.len = buf_tmp.len;
            FIO_MEMCPY(cert_tmp.buf, buf_tmp.buf, buf_tmp.len);
          }
        }

        if (tls_info.key.len < 5 ||
            (fio_buf2u32u(tls_info.key.buf + (tls_info.key.len - 4)) |
             0x20202020UL) != fio_buf2u32u(".pem")) {
          fio_string_write(&key_tmp, NULL, ".pem", 4);
        }
        if (tls_info.cert.len < 5 ||
            (fio_buf2u32u(tls_info.cert.buf + (tls_info.cert.len - 4)) |
             0x20202020UL) != fio_buf2u32u(".pem")) {
          fio_string_write(&cert_tmp, NULL, ".pem", 4);
        }
      }
      fio_io_tls_cert_add(tls,
                          host_tmp.buf,
                          cert_tmp.buf,
                          key_tmp.buf,
                          pass_tmp.buf);
    } else {
      FIO_LOG_ERROR("TLS files in `fio_io_listen` URL too long, "
                    "construct TLS object separately");
    }
  }
  return tls;
}

/** Adds a certificate a new SSL/TLS context / settings object (SNI support). */
SFUNC fio_io_tls_s *fio_io_tls_cert_add(fio_io_tls_s *t,
                                        const char *server_name,
                                        const char *public_cert_file,
                                        const char *private_key_file,
                                        const char *pk_password) {
  if (!t)
    return t;
  fio___io_tls_cert_s o = {
      .nm = fio_keystr_init(FIO_STR_INFO1((char *)server_name),
                            FIO_STRING_ALLOC_KEY),
      .public_cert_file =
          fio_keystr_init(FIO_STR_INFO1((char *)public_cert_file),
                          FIO_STRING_ALLOC_KEY),
      .private_key_file =
          fio_keystr_init(FIO_STR_INFO1((char *)private_key_file),
                          FIO_STRING_ALLOC_KEY),
      .pk_password = fio_keystr_init(FIO_STR_INFO1((char *)pk_password),
                                     FIO_STRING_ALLOC_KEY),
  };
  fio___io_tls_cert_s *old = fio___io_tls_cert_map_get(&t->cert, o);
  if (old)
    goto replace_old;
  fio___io_tls_cert_map_set(&t->cert, o, 1);
  return t;
replace_old:
  fio_keystr_destroy(&old->nm, FIO_STRING_FREE_KEY);
  fio_keystr_destroy(&old->public_cert_file, FIO_STRING_FREE_KEY);
  fio_keystr_destroy(&old->private_key_file, FIO_STRING_FREE_KEY);
  fio_keystr_destroy(&old->pk_password, FIO_STRING_FREE_KEY);
  *old = o;
  return t;
}

/**
 * Adds an ALPN protocol callback to the SSL/TLS context.
 *
 * The first protocol added will act as the default protocol to be selected.
 *
 * Except for the `tls` and `protocol_name` arguments, all arguments can be
 * NULL.
 */
SFUNC fio_io_tls_s *fio_io_tls_alpn_add(fio_io_tls_s *t,
                                        const char *protocol_name,
                                        void (*on_selected)(fio_io_s *)) {
  if (!t || !protocol_name)
    return t;
  if (!on_selected)
    on_selected = fio___io_on_ev_mock;
  size_t pr_name_len = strlen(protocol_name);
  if (pr_name_len > 255) {
    FIO_LOG_ERROR(
        "fio_io_tls_alpn_add called with name longer than 255 chars!");
    return t;
  }
  fio___io_tls_alpn_s o = {
      .nm = fio_keystr_init(FIO_STR_INFO2((char *)protocol_name, pr_name_len),
                            FIO_STRING_ALLOC_KEY),
      .fn = on_selected,
  };
  fio___io_tls_alpn_s *old = fio___io_tls_alpn_map_get(&t->alpn, o);
  if (old)
    goto replace_old;
  fio___io_tls_alpn_map_set(&t->alpn, o, 1);
  return t;
replace_old:
  fio_keystr_destroy(&old->nm, FIO_STRING_FREE_KEY);
  *old = o;
  return t;
}

/** Calls the `on_selected` callback for the `fio_io_tls_s` object. */
SFUNC int fio_io_tls_alpn_select(fio_io_tls_s *t,
                                 const char *protocol_name,
                                 size_t name_length,
                                 fio_io_s *io) {
  if (!t || !protocol_name)
    return -1;
  fio___io_tls_alpn_s seeking = {
      .nm = fio_keystr_tmp(protocol_name, (uint32_t)name_length)};
  fio___io_tls_alpn_s *alpn = fio___io_tls_alpn_map_get(&t->alpn, seeking);
  if (!alpn) {
    FIO_LOG_DDEBUG2("TLS ALPN %.*s not found in %zu long list",
                    (int)name_length,
                    protocol_name,
                    t->alpn.count);
    return -1;
  }
  alpn->fn(io);
  return 0;
}

/**
 * Adds a certificate to the "trust" list, which automatically adds a peer
 * verification requirement.
 *
 * If `public_cert_file` is `NULL`, adds the system's default trust registry.
 *
 * Note: when the `fio_io_tls_s` object is used for server connections, this
 * will limit connections to clients that connect using a trusted certificate.
 *
 *      fio_io_tls_trust_add(tls, "google-ca.pem" );
 */
SFUNC fio_io_tls_s *fio_io_tls_trust_add(fio_io_tls_s *t,
                                         const char *public_cert_file) {
  if (!t)
    return t;
  if (!public_cert_file) {
    t->trust_sys = 1;
    return t;
  }
  fio___io_tls_trust_s o = {
      .nm = fio_keystr_init(FIO_STR_INFO1((char *)public_cert_file),
                            FIO_STRING_ALLOC_KEY),
  };
  fio___io_tls_trust_s *old = fio___io_tls_trust_map_get(&t->trust, o);
  if (old)
    goto replace_old;
  fio___io_tls_trust_map_set(&t->trust, o, 1);
  return t;
replace_old:
  fio_keystr_destroy(&old->nm, FIO_STRING_FREE_KEY);
  *old = o;
  return t;
}

/**
 * Returns the number of `fio_io_tls_cert_add` instructions.
 *
 * This could be used when deciding if to add a NULL instruction (self-signed).
 *
 * If `fio_io_tls_cert_add` was never called, zero (0) is returned.
 */
SFUNC uintptr_t fio_io_tls_cert_count(fio_io_tls_s *tls) {
  return tls ? tls->cert.count : 0;
}

/**
 * Returns the number of registered ALPN protocol names.
 *
 * This could be used when deciding if protocol selection should be delegated to
 * the ALPN mechanism, or whether a protocol should be immediately assigned.
 *
 * If no ALPN protocols are registered, zero (0) is returned.
 */
SFUNC uintptr_t fio_io_tls_alpn_count(fio_io_tls_s *tls) {
  return tls ? tls->alpn.count : 0;
}

/**
 * Returns the number of `fio_io_tls_trust_add` instructions.
 *
 * This could be used when deciding if to disable peer verification or not.
 *
 * If `fio_io_tls_trust_add` was never called, zero (0) is returned.
 */
SFUNC uintptr_t fio_io_tls_trust_count(fio_io_tls_s *tls) {
  return tls ? tls->trust.count : 0;
}

/** Calls callbacks for certificate, trust certificate and ALPN added. */
void fio_io_tls_each___(void); /* IDE Marker*/
SFUNC int fio_io_tls_each FIO_NOOP(fio_io_tls_each_s a) {
  if (!a.tls)
    return -1;
  if (a.each_cert) {
    FIO_IMAP_EACH(fio___io_tls_cert_map, &a.tls->cert, i) {
      if (a.each_cert(&a,
                      fio_keystr_buf(&a.tls->cert.ary[i].nm).buf,
                      fio_keystr_buf(&a.tls->cert.ary[i].public_cert_file).buf,
                      fio_keystr_buf(&a.tls->cert.ary[i].private_key_file).buf,
                      fio_keystr_buf(&a.tls->cert.ary[i].pk_password).buf))
        return -1;
    }
  }
  if (a.each_alpn) {
    FIO_IMAP_EACH(fio___io_tls_alpn_map, &a.tls->alpn, i) {
      if (a.each_alpn(&a,
                      fio_keystr_buf(&a.tls->alpn.ary[i].nm).buf,
                      a.tls->alpn.ary[i].fn))
        return -1;
    }
  }
  if (a.each_trust) {
    if (a.tls->trust_sys && a.each_trust(&a, NULL))
      return -1;
    FIO_IMAP_EACH(fio___io_tls_trust_map, &a.tls->trust, i) {
      if (a.each_trust(&a, fio_keystr_buf(&a.tls->trust.ary[i].nm).buf))
        return -1;
    }
  }
  return 0;
}

/** If `NULL` returns current default, otherwise sets it. */
SFUNC fio_io_functions_s fio_io_tls_default_functions(fio_io_functions_s *f) {
  static fio_io_functions_s default_io_functions = {
      .build_context = fio___io_func_default_build_context,
      .start = fio___io_on_ev_mock,
      .read = fio___io_func_default_read,
      .write = fio___io_func_default_write,
      .flush = fio___io_func_default_flush,
      .finish = fio___io_func_default_finish,
      .cleanup = fio___io_func_default_cleanup,
  };
  if (!f)
    return default_io_functions;
  if (!f->build_context)
    f->build_context = fio___io_func_default_build_context;
  if (!f->start)
    f->start = fio___io_on_ev_mock;
  if (!f->read)
    f->read = fio___io_func_default_read;
  if (!f->write)
    f->write = fio___io_func_default_write;
  if (!f->flush)
    f->flush = fio___io_func_default_flush;
  if (!f->finish)
    f->finish = fio___io_func_default_finish;
  if (!f->cleanup)
    f->cleanup = fio___io_func_default_cleanup;
  default_io_functions = *f;
  return default_io_functions;
}

/* *****************************************************************************
IO Async Queues - Worker Threads for non-IO tasks
***************************************************************************** */

FIO_SFUNC void fio___io_async_start(fio_io_async_s *q) {
  if (!q->count)
    goto no_worker_threads;
  q->q = &q->queue;
  if (q->count > 4095)
    goto failed;
  fio_queue_workers_stop(&q->queue);
  if (fio_queue_workers_add(&q->queue, (size_t)q->count))
    goto failed;
  return;

failed:
  FIO_LOG_ERROR("IO Async Queue couldn't spawn threads!");
no_worker_threads:
  q->q = fio_io_queue();
  fio_queue_perform_all(&q->queue);
}
FIO_SFUNC void fio___io_async_stop(fio_io_async_s *q) {
  q->q = fio_io_queue();
  fio_queue_workers_stop(&q->queue);
  fio_queue_perform_all(&q->queue);
  fio_queue_destroy(&q->queue);
}

/**
 * Attaches an IO Async Queue for use in multi-threaded (non IO) tasks.
 *
 * This function can be called multiple times for the same (or other) queue, as
 * long as the async queue (`fio_io_async_s`) was previously initialized using
 * `FIO_IO_ASYN_INIT` or zeroed out. i.e.:
 *
 *     static fio_io_async_s SLOW_HTTP_TASKS = FIO_IO_ASYN_INIT;
 *     fio_io_async_attach(&SLOW_HTTP_TASKS, 32);
 */
SFUNC void fio_io_async_attach(fio_io_async_s *q, uint32_t threads) {
  if (!q)
    return;
  if (!q->node.next) {
    *q = (fio_io_async_s){
        .q = fio_io_queue(),
        .count = threads,
        .queue = FIO_QUEUE_STATIC_INIT(q->queue),
        .timers = FIO_TIMER_QUEUE_INIT,
        .node = FIO_LIST_INIT(q->node),
    };
    FIO_LIST_PUSH(&FIO___IO.async, &q->node);
  }
  q->count = threads;
  if (fio_io_is_running())
    fio___io_async_start(q);
}

void fio_io_async_every___(void); /* IDE Mark */
/** Schedules a timer bound task for the async queue (`fio_timer_schedule`). */
SFUNC void fio_io_async_every FIO_NOOP(fio_io_async_s *q,
                                       fio_timer_schedule_args_s a) {
  a.start_at = FIO___IO.tick;
  fio_timer_schedule FIO_NOOP(&q->timers, a);
}

/* *****************************************************************************
Managing data after a fork
***************************************************************************** */
FIO_SFUNC void fio___io_after_fork(void *ignr_) {
  (void)ignr_;
  FIO___IO.pid = fio_thread_getpid();
  FIO___IO.tick = FIO___IO_GET_TIME_MILLI();
  fio_queue_perform_all(&FIO___IO.queue);
  FIO_LIST_EACH(fio_io_protocol_s,
                reserved.protocols,
                &FIO___IO.protocols,
                pr) {
    FIO_LIST_EACH(fio_io_s, node, &pr->reserved.ios, io) {
      fio_io_close_now(io);
    }
  }
  fio_queue_perform_all(&FIO___IO.queue);
  fio_queue_destroy(&FIO___IO.queue);
}

FIO_SFUNC void fio___io_cleanup_at_exit(void *ignr_) {
  fio___io_after_fork(ignr_);
  fio_poll_destroy(&FIO___IO.poll);
  fio___io_env_safe_destroy(&FIO___IO.env);
#if FIO_VALIDITY_MAP_USE
  fio_validity_map_destroy(&FIO___IO.valid);
#if FIO_VALIDATE_IO_MUTEX
  fio_thread_mutex_destroy(&FIO___IO.valid_lock);
#endif
#endif /* FIO_VALIDATE_IO_MUTEX / FIO_VALIDITY_MAP_USE */
  FIO___IO.tick = FIO___IO_GET_TIME_MILLI();
  fio_queue_perform_all(&FIO___IO.queue);
  fio_timer_destroy(&FIO___IO.timer);
  fio_queue_perform_all(&FIO___IO.queue);
}

/* *****************************************************************************
Initializing IO Reactor State
***************************************************************************** */
FIO_CONSTRUCTOR(fio___io) {
  fio_queue_init(&FIO___IO.queue);
  FIO___IO.protocols = FIO_LIST_INIT(FIO___IO.protocols);
  FIO___IO.tick = FIO___IO_GET_TIME_MILLI();
  FIO___IO.root_pid = FIO___IO.pid = fio_thread_getpid();
  FIO___IO.async = FIO_LIST_INIT(FIO___IO.async);
  fio___io_init_protocol(&FIO___IO_MOCK_PROTOCOL, 0);
  fio_poll_init(&FIO___IO.poll,
                .on_data = fio___io_poll_on_data_schd,
                .on_ready = fio___io_poll_on_ready_schd,
                .on_close = fio___io_poll_on_close_schd);
  fio___io_init_protocol_test(&FIO___IO_MOCK_PROTOCOL, 0);
  fio_state_callback_add(FIO_CALL_IN_CHILD, fio___io_after_fork, NULL);
  fio_state_callback_add(FIO_CALL_AT_EXIT, fio___io_cleanup_at_exit, NULL);
}

/* *****************************************************************************
IO Types Finish
***************************************************************************** */
#endif /* FIO_IO */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_IO                 /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************

              IO Reactor - an Evented IO Reactor, Single-Threaded

Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_IO) && !defined(FIO___RECURSIVE_INCLUDE) &&                    \
    !defined(H___FIO_IO_REACTOR___H) &&                                        \
    (defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN))
#define H___FIO_IO_REACTOR___H

/* *****************************************************************************
The IO Reactor Cycle (the actual work)
***************************************************************************** */

static void fio___io_signal_handle(int sig, void *flg) {
  ((uint8_t *)flg)[0] = 1;
  (void)sig;
}

FIO_SFUNC void fio___io_tick(int timeout) {
  static size_t performed_idle = 0;
  size_t idle_round = (fio_poll_review(&FIO___IO.poll, timeout) == 0);
  performed_idle &= idle_round;
  idle_round &= (timeout > 0);
  idle_round ^= performed_idle;
  if ((idle_round & !FIO___IO.stop)) {
    fio_state_callback_force(FIO_CALL_ON_IDLE);
    performed_idle = 1;
  }
  FIO___IO.tick = FIO___IO_GET_TIME_MILLI();
  fio_timer_push2queue(&FIO___IO.queue, &FIO___IO.timer, FIO___IO.tick);
  FIO_LIST_EACH(fio_io_async_s, node, &FIO___IO.async, a) {
    fio_timer_push2queue(a->q, &a->timers, FIO___IO.tick);
  }
  for (size_t i = 0; i < 2048; ++i)
    if (fio_queue_perform(&FIO___IO.queue))
      break;
  fio___io_review_timeouts();
  fio_signal_review();
}

FIO_SFUNC void fio___io_run_async_as_sync(void *ignr_1, void *ignr_2) {
  (void)ignr_1, (void)ignr_2;
  unsigned repeat = 0;
  FIO_LIST_EACH(fio_io_async_s, node, &FIO___IO.async, pos) {
    fio_queue_task_s t = fio_queue_pop(&pos->queue);
    if (!t.fn)
      continue;
    t.fn(t.udata1, t.udata2);
    repeat = 1;
  }
  if (repeat)
    fio_queue_push(&FIO___IO.queue, fio___io_run_async_as_sync);
}

FIO_SFUNC void fio___io_shutdown_task(void *shutdown_start_, void *a2) {
  intptr_t shutdown_start = (intptr_t)shutdown_start_;
  if (shutdown_start + FIO_IO_SHUTDOWN_TIMEOUT < FIO___IO.tick ||
      FIO_LIST_IS_EMPTY(&FIO___IO.protocols))
    return;
  fio___io_tick(fio_queue_count(&FIO___IO.queue) ? 0 : 100);
  fio_queue_push(&FIO___IO.queue, fio___io_run_async_as_sync);
  fio_queue_push(&FIO___IO.queue, fio___io_shutdown_task, shutdown_start_, a2);
}

FIO_SFUNC void fio___io_shutdown(void) {
  /* collect tick for shutdown start, to monitor for possible timeout */
  int64_t shutdown_start = FIO___IO.tick = FIO___IO_GET_TIME_MILLI();
  size_t connected = 0;
  /* first notify that shutdown is starting */
  fio_state_callback_force(FIO_CALL_ON_SHUTDOWN);
  /* preform on_shutdown callback for each connection and close */
  FIO_LIST_EACH(fio_io_protocol_s,
                reserved.protocols,
                &FIO___IO.protocols,
                pr) {
    FIO_LIST_EACH(fio_io_s, node, &pr->reserved.ios, io) {
      pr->on_shutdown(io); /* TODO / FIX: move callback to task? */
      fio_io_close(io);    /* TODO / FIX: skip close on return value? */
      ++connected;
    }
  }
  FIO_LOG_DEBUG2("(%d) IO Reactor shutting down with %zu connected clients",
                 fio_io_pid(),
                 connected);
  /* cycle while connections exist. */
  fio_queue_push(&FIO___IO.queue,
                 fio___io_shutdown_task,
                 (void *)(intptr_t)shutdown_start,
                 NULL);
  fio_queue_perform_all(&FIO___IO.queue);
  /* in case of timeout, force close remaining connections. */
  connected = 0;
  FIO_LIST_EACH(fio_io_protocol_s,
                reserved.protocols,
                &FIO___IO.protocols,
                pr) {
    FIO_LIST_EACH(fio_io_s, node, &pr->reserved.ios, io) {
      fio_io_close_now(io);
      ++connected;
    }
  }
  FIO_LOG_DEBUG2("(%d) IO Reactor shutdown timeout/done with %zu clients",
                 fio_io_pid(),
                 connected);
  /* perform remaining tasks. */
  fio_queue_perform_all(&FIO___IO.queue);
}

FIO_SFUNC void fio___io_work_task(void *ignr_1, void *ignr_2) {
  if (FIO___IO.stop)
    return;
  fio___io_tick(fio_queue_count(&FIO___IO.queue) ? 0 : 500);
  fio_queue_push(&FIO___IO.queue, fio___io_work_task, ignr_1, ignr_2);
}

FIO_SFUNC void fio___io_work(int is_worker) {
  FIO___IO.is_worker = is_worker;
  FIO_LIST_EACH(fio_io_async_s, node, &FIO___IO.async, q) {
    fio___io_async_start(q);
  }

  fio_queue_perform_all(&FIO___IO.queue);
  if (is_worker) {
    fio_state_callback_force(FIO_CALL_ON_START);
  }
  fio___io_wakeup_init();
  fio_queue_push(&FIO___IO.queue, fio___io_work_task);
  fio_queue_perform_all(&FIO___IO.queue);
  FIO_LIST_EACH(fio_io_async_s, node, &FIO___IO.async, q) {
    fio___io_async_stop(q);
  }
  fio___io_shutdown();
  FIO_LIST_EACH(fio_io_async_s, node, &FIO___IO.async, q) {
    fio___io_async_stop(q);
  }
  fio_queue_perform_all(&FIO___IO.queue);
  fio_state_callback_force(FIO_CALL_ON_STOP);
  fio_queue_perform_all(&FIO___IO.queue);
  FIO___IO.workers = 0;
}

/* *****************************************************************************
Worker Forking
***************************************************************************** */
static void fio___io_spawn_worker(void *ignr_1, void *ignr_2);

static void fio___io_wait_for_worker(void *thr_) {
  fio_thread_t t = (fio_thread_t)thr_;
  fio_thread_join(&t);
}

/** Worker sentinel */
static void *fio___io_worker_sentinel(void *pid_data) {
#ifdef WEXITSTATUS
  fio_thread_pid_t pid = (fio_thread_pid_t)(uintptr_t)pid_data;
  int status = 0;
  (void)status;
  fio_thread_t thr = fio_thread_current();
  fio_state_callback_add(FIO_CALL_ON_STOP,
                         fio___io_wait_for_worker,
                         (void *)thr);
  if (fio_thread_waitpid(pid, &status, 0) != pid && !FIO___IO.stop)
    FIO_LOG_ERROR("waitpid failed, worker re-spawning might fail.");
  if (!WIFEXITED(status) || WEXITSTATUS(status)) {
    FIO_LOG_WARNING("abnormal worker exit detected");
    fio_state_callback_force(FIO_CALL_ON_CHILD_CRUSH);
  }
  if (!FIO___IO.stop) {
    FIO_ASSERT_DEBUG(
        0,
        "DEBUG mode prevents worker re-spawning, now crashing parent.");
    fio_state_callback_remove(FIO_CALL_ON_STOP,
                              fio___io_wait_for_worker,
                              (void *)thr);
    fio_thread_detach(&thr);
    fio___io_defer_no_wakeup(fio___io_spawn_worker, (void *)thr, NULL);
  }
#else /* Non POSIX? no `fork`? no fio_thread_waitpid? */
  FIO_ASSERT(
      0,
      "facil.io doesn't know how to spawn and wait on workers on this system.");
#endif
  return NULL;
}

static void fio___io_spawn_worker(void *ignr_1, void *ignr_2) {
  (void)ignr_1, (void)ignr_2;
  fio_thread_t t;
  fio_signal_review();

  if (FIO___IO.stop || !fio_io_is_master())
    return;
  if (fio_atomic_or_fetch(&FIO___IO.stop, 2) != 2)
    return;
  FIO_LIST_EACH(fio_io_async_s, node, &FIO___IO.async, q) {
    fio___io_async_stop(q);
  }
  FIO___IO.tick = FIO___IO_GET_TIME_MILLI();
  fio_state_callback_force(FIO_CALL_BEFORE_FORK);
  /* do not allow master tasks to run in worker */
  fio_queue_perform_all(&FIO___IO.queue);
  /* perform actual fork */
  fio_thread_pid_t pid = fio_thread_fork();
  FIO_ASSERT(pid != (fio_thread_pid_t)-1, "system call `fork` failed.");
  if (!pid)
    goto is_worker_process;
  fio_state_callback_force(FIO_CALL_AFTER_FORK);
  fio_state_callback_force(FIO_CALL_IN_MASTER);
  if (fio_thread_create(&t, fio___io_worker_sentinel, (void *)(uintptr_t)pid)) {
    FIO_LOG_FATAL(
        "sentinel thread creation failed, no worker will be spawned.");
    fio_io_stop();
  }
  if (!fio_atomic_xor_fetch(&FIO___IO.stop, 2))
    fio___io_defer_no_wakeup(fio___io_work_task, NULL, NULL);
  return;

is_worker_process:
  FIO___IO.pid = fio_thread_getpid();
  FIO___IO.is_worker = 1;
  FIO_LOG_INFO("(%d) worker starting up.", fio_io_pid());
  fio_state_callback_force(FIO_CALL_AFTER_FORK);
  fio_state_callback_force(FIO_CALL_IN_CHILD);
  if (!fio_atomic_xor_fetch(&FIO___IO.stop, 2))
    fio___io_work(1);
  FIO_LOG_INFO("(%d) worker exiting.", fio_io_pid());
  exit(0);
}

/* *****************************************************************************
Starting / Stopping the IO Reactor
***************************************************************************** */

/** Adds `workers` amount of workers to the root IO reactor process. */
SFUNC void fio_io_add_workers(int workers) {
  if (!workers || !fio_io_is_master())
    return;
  FIO_LOG_INFO("(%d) spawning %d workers.", fio_io_pid(), workers);
  for (int i = 0; i < workers; ++i)
    fio___io_defer_no_wakeup(fio___io_spawn_worker, NULL, NULL);
}

/** Starts the IO reactor, using optional `workers` processes. Will BLOCK! */
SFUNC void fio_io_start(int workers) {
  FIO___IO.stop = 0;
  FIO___IO.workers = fio_io_workers(workers);
  workers = (int)FIO___IO.workers;
  FIO___IO.is_worker = !workers;
  fio_sock_maximize_limits(0);

  FIO_LIST_EACH(fio_io_async_s, node, &FIO___IO.async, q) {
    fio___io_async_start(q);
  }

  fio_state_callback_force(FIO_CALL_PRE_START);
  fio_queue_perform_all(&FIO___IO.queue);
  fio_signal_monitor(SIGINT, fio___io_signal_handle, (void *)&FIO___IO.stop);
  fio_signal_monitor(SIGTERM, fio___io_signal_handle, (void *)&FIO___IO.stop);
#ifdef SIGPIPE
  fio_signal_monitor(SIGPIPE, NULL, NULL);
#endif
  FIO___IO.tick = FIO___IO_GET_TIME_MILLI();
  if (workers) {
    FIO_LOG_INFO("(%d) spawning %d workers.", fio_io_root_pid(), workers);
    for (int i = 0; i < workers; ++i) {
      fio___io_spawn_worker(NULL, NULL);
    }
  } else {
    FIO_LOG_DEBUG2("(%d) starting facil.io IO reactor in single process mode.",
                   fio_io_root_pid());
  }
  fio___io_work(!workers);
  fio_signal_forget(SIGINT);
  fio_signal_forget(SIGTERM);
#ifdef SIGPIPE
  fio_signal_forget(SIGPIPE);
#endif
  fio_queue_perform_all(&FIO___IO.queue);
}

/** Returns the number or workers the IO reactor will actually run. */
SFUNC uint16_t fio_io_workers(int workers) {
  if (workers < 0) {
    long cores = -1;
#ifdef _SC_NPROCESSORS_ONLN
    cores = sysconf(_SC_NPROCESSORS_ONLN);
#endif /* _SC_NPROCESSORS_ONLN */
    if (cores == -1L) {
      cores = 8;
      FIO_LOG_WARNING(
          "fio_io_start / fio_io_workers called with negative value for worker "
          "count, but auto-detect failed, assuming %d CPU cores",
          cores);
    }
    workers = (int)(cores / (0 - workers));
    workers += !workers;
  }
  return (uint16_t)workers;
}

/* *****************************************************************************
Listening to Incoming Connections
***************************************************************************** */

typedef struct {
  fio_io_protocol_s *protocol;
  void *udata;
  void *tls_ctx;
  fio_io_async_s *queue_for_accept;
  fio_queue_s *queue;
  fio_io_s *io;
  void (*on_start)(fio_io_protocol_s *protocol, void *udata);
  void (*on_stop)(fio_io_protocol_s *protocol, void *udata);
  int owner;
  int fd;
  size_t ref_count;
  size_t url_len;
  uint8_t hide_from_log;
  char url[];
} fio___io_listen_s;

FIO_LEAK_COUNTER_DEF(fio_io_listen)

static fio___io_listen_s *fio___io_listen_dup(fio___io_listen_s *l) {
  fio_atomic_add(&l->ref_count, 1);
  return l;
}

static void fio___io_listen_free(void *l_) {
  fio___io_listen_s *l = (fio___io_listen_s *)l_;
  if (l->io)
    fio_io_close(l->io);
  if (fio_atomic_sub(&l->ref_count, 1))
    return;

  fio_state_callback_remove(FIO_CALL_AT_EXIT, fio___io_listen_free, (void *)l);
  fio_state_callback_remove(FIO_CALL_ON_START, fio___io_listen_free, (void *)l);
  fio_state_callback_remove(FIO_CALL_PRE_START,
                            fio___io_listen_free,
                            (void *)l);
  fio___io_func_free_context_caller(l->protocol->io_functions.free_context,
                                    l->tls_ctx);
  fio_sock_close(l->fd);

#ifdef AF_UNIX
  /* delete the unix socket file, if any. */
  fio_url_s u = fio_url_parse(l->url, FIO_STRLEN(l->url));
  if (FIO___IO.pid == l->owner && !u.host.buf && !u.port.buf && u.path.buf) {
    unlink(u.path.buf);
  }
#endif

  if (l->on_stop)
    l->on_stop(l->protocol, l->udata);

  if (l->hide_from_log)
    FIO_LOG_DEBUG2("(%d) stopped listening @ %.*s",
                   getpid(),
                   (int)l->url_len,
                   l->url);
  else
    FIO_LOG_INFO("(%d) stopped listening @ %.*s",
                 getpid(),
                 (int)l->url_len,
                 l->url);
  fio_queue_perform_all(&FIO___IO.queue);
  FIO_LEAK_COUNTER_ON_FREE(fio_io_listen);
  FIO_MEM_FREE_(l, sizeof(*l) + l->url_len + 1);
}

SFUNC void fio_io_listen_stop(void *listener) {
  if (listener)
    fio___io_listen_free(listener);
}

/** Returns the URL on which the listener is listening. */
SFUNC fio_buf_info_s fio_io_listener_url(void *listener) {
  fio___io_listen_s *l = (fio___io_listen_s *)listener;
  return FIO_BUF_INFO2(l->url, l->url_len);
}

/** Returns true if the listener protocol has an attached TLS context. */
SFUNC int fio_io_listener_is_tls(void *listener) {
  fio___io_listen_s *l = (fio___io_listen_s *)listener;
  return !!l->tls_ctx;
}

static void fio___io_listen_on_data_task(void *io_, void *ignr_) {
  (void)ignr_;
  fio_io_s *io = (fio_io_s *)io_;
  int fd;
  fio___io_listen_s *l = (fio___io_listen_s *)fio_io_udata(io);
  fio_io_unsuspend(io);
  while (FIO_SOCK_FD_ISVALID(fd = fio_sock_accept(fio_io_fd(io), NULL, NULL))) {
    FIO_LOG_DDEBUG2("(%d) accepted new connection with fd %d",
                    fio_io_pid(),
                    fd);
    fio_io_attach_fd(fd, l->protocol, l->udata, l->tls_ctx);
  }
  fio___io_free2(io);
}
static void fio___io_listen_on_data_task_reschd(void *io_, void *ignr_) {
  fio_io_defer(fio___io_listen_on_data_task, io_, ignr_);
}
static void fio___io_listen_on_attach(fio_io_s *io) {
  fio___io_listen_s *l = (fio___io_listen_s *)(io->udata);
  l->queue = (l->queue_for_accept && l->queue_for_accept->q != &FIO___IO.queue)
                 ? l->queue_for_accept->q
                 : NULL;
  if (l->on_start)
    l->on_start(l->protocol, l->udata);
  if (l->hide_from_log)
    FIO_LOG_DEBUG2("(%d) started listening @ %s", fio_io_pid(), l->url);
  else
    FIO_LOG_INFO("(%d) started listening @ %s", fio_io_pid(), l->url);
}
static void fio___io_listen_on_shutdown(fio_io_s *io) {
  fio___io_listen_s *l = (fio___io_listen_s *)(io->udata);
  l->queue = fio_io_queue();
}
static void fio___io_listen_on_data(fio_io_s *io) {
  fio___io_listen_s *l = (fio___io_listen_s *)(io->udata);
  if (l->queue) {
    fio_io_suspend(io);
    fio_queue_push(l->queue,
                   fio___io_listen_on_data_task_reschd,
                   fio___io_dup2(io));
    return;
  }
  fio___io_listen_on_data_task(fio___io_dup2(io), NULL);
}
static void fio___io_listen_on_close(void *buffer, void *l) {
  ((fio___io_listen_s *)l)->io = NULL;
  fio___io_listen_free(l);
  (void)buffer;
}

static fio_io_protocol_s FIO___IO_LISTEN_PROTOCOL = {
    .on_attach = fio___io_listen_on_attach,
    .on_data = fio___io_listen_on_data,
    .on_close = fio___io_listen_on_close,
    .on_timeout = fio_io_touch,
    .on_shutdown = fio___io_listen_on_shutdown,
};

FIO_SFUNC void fio___io_listen_attach_task_deferred(void *l_, void *ignr_) {
  fio___io_listen_s *l = (fio___io_listen_s *)l_;
  l = fio___io_listen_dup(l);
  int fd = fio_sock_dup(l->fd);
  FIO_ASSERT(fd != -1, "listening socket failed to `dup`");
  FIO_LOG_DEBUG2("(%d) Called dup(%d) to attach %d as a listening socket.",
                 (int)fio_io_pid(),
                 l->fd,
                 fd);
  l->io = fio_io_attach_fd(fd, &FIO___IO_LISTEN_PROTOCOL, l, NULL);
  (void)ignr_;
}

FIO_SFUNC void fio___io_listen_attach_task(void *l_) {
  /* make sure to run in server thread */
  fio_io_defer(fio___io_listen_attach_task_deferred, l_, NULL);
}

int fio_io_listen___(void); /* IDE marker */
/**
 * Sets up a network service on a listening socket.
 *
 * Returns 0 on success or -1 on error.
 *
 * See the `fio_listen` Macro for details.
 */
SFUNC void *fio_io_listen FIO_NOOP(struct fio_io_listen_args args) {
  fio___io_listen_s *l = NULL;
  void *built_tls = NULL;
  int should_free_tls = !args.tls;
  FIO_STR_INFO_TMP_VAR(url_alt, 2048);
  if (!args.protocol) {
    FIO_LOG_ERROR("fio_io_listen requires a protocol to be assigned.");
    return l;
  }
  if (args.on_root && !fio_io_is_master()) {
    FIO_LOG_ERROR("fio_io_listen called with `on_root` by a non-root worker.");
    return l;
  }
  if (!args.url) {
    args.url = getenv("ADDRESS");
    if (!args.url)
      args.url = "0.0.0.0";
  }
  url_alt.len = strlen(args.url);
  if (url_alt.len > 2024) {
    FIO_LOG_ERROR("binding address / url too long.");
    args.url = NULL;
  }
  fio_url_s url = fio_url_parse(args.url, url_alt.len);
  if (url.scheme.buf &&
      (url.scheme.len > 2 && url.scheme.len < 5 &&
       (url.scheme.buf[0] | (char)0x20) == 't' &&
       (url.scheme.buf[1] | (char)0x20) == 'c') &&
      (url.scheme.buf[2] | (char)0x20) == 'p')
    url.scheme = FIO_BUF_INFO0;
  if (!url.port.buf && !url.scheme.buf) {
    static size_t port_counter = 3000;
    size_t port = fio_atomic_add(&port_counter, 1);
    if (port == 3000 && getenv("PORT")) {
      char *port_env = getenv("PORT");
      port = fio_atol10(&port_env);
      if (!port | (port > 65535ULL))
        port = 3000;
    }
    url_alt.len = 0;
    fio_string_write2(&url_alt,
                      NULL,
                      FIO_STRING_WRITE_STR2(url.scheme.buf, url.scheme.len),
                      (url.scheme.len ? FIO_STRING_WRITE_STR2("://", 3)
                                      : FIO_STRING_WRITE_STR2(NULL, 0)),
                      FIO_STRING_WRITE_STR2(url.host.buf, url.host.len),
                      FIO_STRING_WRITE_STR2(":", 1),
                      FIO_STRING_WRITE_NUM(port));
    args.url = url_alt.buf;
    url = fio_url_parse(args.url, url_alt.len);
  }

  args.tls = fio_io_tls_from_url(args.tls, url);
  fio___io_init_protocol_test(args.protocol, !!args.tls);
  built_tls = args.protocol->io_functions.build_context(args.tls, 0);
  fio_buf_info_s url_buf = FIO_BUF_INFO2((char *)args.url, url_alt.len);
  /* remove query details from URL */
  if (url.query.len)
    url_buf.len = url.query.buf - (url_buf.buf + 1);
  else if (url.target.len)
    url_buf.len = url.target.buf - (url_buf.buf + 1);
  l = (fio___io_listen_s *)
      FIO_MEM_REALLOC_(NULL, 0, sizeof(*l) + url_buf.len + 1, 0);
  FIO_ASSERT_ALLOC(l);
  FIO_LEAK_COUNTER_ON_ALLOC(fio_io_listen);
  *l = (fio___io_listen_s){
      .protocol = args.protocol,
      .udata = args.udata,
      .tls_ctx = built_tls,
      .queue_for_accept = args.queue_for_accept,
      .on_start = args.on_start,
      .on_stop = args.on_stop,
      .owner = FIO___IO.pid,
      .url_len = url_buf.len,
      .hide_from_log = args.hide_from_log,
  };
  FIO_MEMCPY(l->url, url_buf.buf, url_buf.len);
  l->url[l->url_len] = 0;
  if (should_free_tls)
    fio_io_tls_free(args.tls);

  l->fd = fio_sock_open2(l->url, FIO_SOCK_SERVER | FIO_SOCK_TCP);
  if (l->fd == -1) {
    fio___io_listen_free(l);
    return (l = NULL);
  }
  if (fio_io_is_running()) {
    fio_io_defer(fio___io_listen_attach_task_deferred, l, NULL);
  } else {
    fio_state_callback_add(
        (args.on_root ? FIO_CALL_PRE_START : FIO_CALL_ON_START),
        fio___io_listen_attach_task,
        (void *)l);
  }
  fio_state_callback_add(FIO_CALL_AT_EXIT, fio___io_listen_free, l);
  return l;
}

/* *****************************************************************************
Connecting as a Client
***************************************************************************** */

typedef struct {
  fio_io_protocol_s protocol;
  fio_io_protocol_s *upr;
  void (*on_failed)(fio_io_protocol_s *protocol, void *udata);
  void *udata;
  void *tls_ctx;
  size_t url_len;
  char url[];
} fio___io_connecting_s;

FIO_SFUNC void fio___connecting_cleanup(fio___io_connecting_s *c) {
  fio___io_func_free_context_caller(c->protocol.io_functions.free_context,
                                    c->tls_ctx);
  FIO_MEM_FREE_(c, sizeof(*c) + c->url_len + 1);
}

FIO_SFUNC void fio___connecting_on_close(void *buffer, void *udata) {
  fio___io_connecting_s *c = (fio___io_connecting_s *)udata;
  if (c->on_failed)
    c->on_failed(c->upr, c->udata);
  fio___connecting_cleanup(c);
  (void)buffer;
}

FIO_SFUNC void fio___connecting_on_ready(fio_io_s *io) {
  if (!fio_io_is_open(io))
    return;
  fio___io_connecting_s *c = (fio___io_connecting_s *)fio_io_udata(io);
  FIO_LOG_DEBUG2("(%d) established client connection to %s",
                 fio_io_pid(),
                 c->url);
  fio_io_udata_set(io, c->udata);
  fio_io_protocol_set(io, c->upr);
  c->on_failed = NULL;
  fio___io_defer_no_wakeup(fio___connecting_on_close, NULL, (void *)c);
}

void fio_io_connect___(void); /* IDE Marker */
SFUNC fio_io_s *fio_io_connect FIO_NOOP(fio_io_connect_args_s args) {
  int should_free_tls = !args.tls;
  if (!args.protocol)
    return NULL;
  if (!args.url) {
    if (args.on_failed)
      args.on_failed(args.protocol, args.udata);
    return NULL;
  }
  if (!args.timeout)
    args.timeout = 30000;

  size_t url_len = strlen(args.url);
  fio_url_s url = fio_url_parse(args.url, url_len);
  args.tls = fio_io_tls_from_url(args.tls, url);
  fio___io_init_protocol(args.protocol, !!args.tls);
  if (url.query.len)
    url_len = url.query.buf - (args.url + 1);
  else if (url.target.len)
    url_len = url.target.buf - (args.url + 1);
  fio___io_connecting_s *c = (fio___io_connecting_s *)
      FIO_MEM_REALLOC_(NULL, 0, sizeof(*c) + url_len + 1, 0);
  FIO_ASSERT_ALLOC(c);
  *c = (fio___io_connecting_s){
      .protocol =
          {
              .on_ready = fio___connecting_on_ready,
              .on_close = fio___connecting_on_close,
              .io_functions = args.protocol->io_functions,
              .timeout = args.timeout,
              .buffer_size = args.protocol->buffer_size,
          },
      .upr = args.protocol,
      .on_failed = args.on_failed,
      .udata = args.udata,
      .tls_ctx = args.protocol->io_functions.build_context(args.tls, 1),
  };
  FIO_MEMCPY(c->url, args.url, url_len);
  c->url[url_len] = 0;
  fio_io_s *io = fio_io_attach_fd(
      fio_sock_open2(c->url, FIO_SOCK_CLIENT | FIO_SOCK_NONBLOCK),
      &c->protocol,
      c,
      c->tls_ctx);
  if (should_free_tls)
    fio_io_tls_free(args.tls);
  return io;
}
/* *****************************************************************************
IO Reactor Finish
***************************************************************************** */
#endif /* FIO_IO */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_IO                 /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                  OpenSSL Implementation for IO Functions




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(H___FIO_IO___H) &&                                                 \
    (HAVE_OPENSSL || __has_include("openssl/ssl.h")) &&                        \
     !defined(H___FIO_OPENSSL___H) && !defined(FIO___RECURSIVE_INCLUDE)
#define H___FIO_OPENSSL___H 1
/* *****************************************************************************
OpenSSL IO Function Getter
***************************************************************************** */

/* Returns the OpenSSL IO functions. */
SFUNC fio_io_functions_s fio_openssl_io_functions(void);

/* *****************************************************************************
OpenSSL Helpers Implementation
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

#include <openssl/err.h>
#include <openssl/ssl.h>

FIO_ASSERT_STATIC(OPENSSL_VERSION_MAJOR > 2, "OpenSSL version mismatch");

/* *****************************************************************************
Self-Signed Certificates - TODO: change to ECDSA
***************************************************************************** */
static EVP_PKEY *fio___openssl_pkey = NULL;
static void fio___openssl_clear_root_key(void *key) {
  EVP_PKEY_free(((EVP_PKEY *)key));
  fio___openssl_pkey = NULL;
}

static void fio___openssl_make_root_key(void) {
  static fio_lock_i lock = FIO_LOCK_INIT;
  fio_lock(&lock);
  if (!fio___openssl_pkey) {
    /* create private key, free it at exit */
    FIO_LOG_DEBUG2("calculating a new TLS private key... might take a while.");
    fio___openssl_pkey = EVP_RSA_gen(2048);
    FIO_ASSERT(fio___openssl_pkey, "OpenSSL failed to create private key.");
    fio_state_callback_add(FIO_CALL_AT_EXIT,
                           fio___openssl_clear_root_key,
                           fio___openssl_pkey);
  }
  fio_unlock(&lock);
}

static X509 *fio_io_tls_create_self_signed(const char *server_name) {
  X509 *cert = X509_new();
  static uint32_t counter = 0;
  FIO_ASSERT(cert,
             "OpenSSL failed to allocate memory for self-signed certificate.");
  fio___openssl_make_root_key();

  /* serial number */
  fio_atomic_add(&counter, 1);
  ASN1_INTEGER_set(X509_get_serialNumber(cert), counter);

  /* validity (180 days) */
  X509_gmtime_adj(X509_get_notBefore(cert), 0);
  X509_gmtime_adj(X509_get_notAfter(cert), 15552000L);

  /* set (public) key */
  X509_set_pubkey(cert, fio___openssl_pkey);

  /* set identity details */
  X509_NAME *s = X509_get_subject_name(cert);
  size_t srv_name_len = FIO_STRLEN(server_name);
  FIO_ASSERT(srv_name_len < (size_t)((int)0 - 1),
             "fio_io_tls_create_self_signed server_name too long");
  X509_NAME_add_entry_by_txt(s,
                             "O",
                             MBSTRING_ASC,
                             (unsigned char *)server_name,
                             (int)srv_name_len,
                             -1,
                             0);
  X509_NAME_add_entry_by_txt(s,
                             "CN",
                             MBSTRING_ASC,
                             (unsigned char *)server_name,
                             (int)srv_name_len,
                             -1,
                             0);
  X509_NAME_add_entry_by_txt(s,
                             "CA",
                             MBSTRING_ASC,
                             (unsigned char *)server_name,
                             (int)srv_name_len,
                             -1,
                             0);
  X509_set_issuer_name(cert, s);

  /* sign certificate */
  FIO_ASSERT(X509_sign(cert, fio___openssl_pkey, EVP_sha512()),
             "OpenSSL failed to signed self-signed certificate");
  return cert;
}

/* *****************************************************************************
OpenSSL Context type wrappers
***************************************************************************** */

/* Context for all future connections */
typedef struct {
  SSL_CTX *ctx;
  fio_io_tls_s *tls;
} fio___openssl_context_s;

FIO_LEAK_COUNTER_DEF(fio___openssl_context_s)

/* *****************************************************************************
OpenSSL Callbacks
***************************************************************************** */

FIO_SFUNC int fio___openssl_pem_password_cb(char *buf,
                                            int size,
                                            int rwflag,
                                            void *u) {
  const char *password = (const char *)u;
  size_t password_len = FIO_STRLEN(password);
  if (password_len > (size_t)size)
    return -1;
  FIO_MEMCPY(buf, password, password_len);
  return (int)password_len;
  (void)rwflag;
}

FIO_SFUNC int fio___openssl_alpn_selector_cb(SSL *ssl,
                                             const unsigned char **out,
                                             unsigned char *outlen,
                                             const unsigned char *in,
                                             unsigned int inlen,
                                             void *tls_) {
  fio_io_s *io = (fio_io_s *)SSL_get_ex_data(ssl, 0);
  fio___openssl_context_s *ctx = (fio___openssl_context_s *)tls_;

  const unsigned char *end = in + inlen;
  char buf[256];
  for (;;) {
    uint8_t len = in[0];
    FIO_MEMCPY(buf, in + 1, len);
    buf[len] = 0;
    if (fio_io_tls_alpn_select(ctx->tls, buf, (size_t)len, io)) {
      in += len + 1;
      if (in < end)
        continue;
      FIO_LOG_DDEBUG2("(%d) ALPN Failed! No protocol name match for %p",
                      (int)fio_thread_getpid(),
                      io);
      return SSL_TLSEXT_ERR_ALERT_FATAL;
    }
    *out = in + 1;
    *outlen = len;
    FIO_LOG_DDEBUG2("(%d) TLS ALPN set to: %s for %p",
                    (int)fio_thread_getpid(),
                    buf,
                    io);
    return SSL_TLSEXT_ERR_OK;
    (void)tls_;
  }
}

/* *****************************************************************************
Public Context Builder
***************************************************************************** */

FIO_SFUNC int fio___openssl_each_cert(struct fio_io_tls_each_s *e,
                                      const char *server_name,
                                      const char *public_cert_file,
                                      const char *private_key_file,
                                      const char *pk_password) {
  fio___openssl_context_s *s = (fio___openssl_context_s *)e->udata;
  if (public_cert_file && private_key_file) { /* load certificate */
    SSL_CTX_set_default_passwd_cb(s->ctx, fio___openssl_pem_password_cb);
    SSL_CTX_set_default_passwd_cb_userdata(s->ctx, (void *)pk_password);
    FIO_LOG_DDEBUG2("loading TLS certificates: %s & %s",
                    public_cert_file,
                    private_key_file);
    /* Set the key and cert */
    if (SSL_CTX_use_certificate_chain_file(s->ctx, public_cert_file) <= 0) {
      ERR_print_errors_fp(stderr);
      FIO_ASSERT(0,
                 "OpenSSL couldn't open PEM file for certificate: %s",
                 public_cert_file);
    }

    if (SSL_CTX_use_PrivateKey_file(s->ctx,
                                    private_key_file,
                                    SSL_FILETYPE_PEM) <= 0) {
      ERR_print_errors_fp(stderr);
      FIO_ASSERT(0,
                 "OpenSSL couldn't open PEM file for private key: %s",
                 private_key_file);
    }
    SSL_CTX_set_default_passwd_cb(s->ctx, NULL);
    SSL_CTX_set_default_passwd_cb_userdata(s->ctx, NULL);
  } else { /* self signed */
    if (!server_name || !strlen(server_name))
      server_name = (const char *)"localhost";
    X509 *cert = fio_io_tls_create_self_signed(server_name);
    SSL_CTX_use_certificate(s->ctx, cert);
    SSL_CTX_use_PrivateKey(s->ctx, fio___openssl_pkey);
  }
  return 0;
}

FIO_SFUNC int fio___openssl_each_alpn(struct fio_io_tls_each_s *e,
                                      const char *protocol_name,
                                      void (*on_selected)(fio_io_s *)) {
  fio_str_info_s *str = (fio_str_info_s *)e->udata2;
  size_t len = FIO_STRLEN(protocol_name);
  if (len > 255 || (len + str->len >= str->capa)) {
    FIO_LOG_ERROR("ALPN protocol name/list overflow.");
    return -1;
  }
  str->buf[str->len++] = (len & 0xFF);
  FIO_MEMCPY(str->buf + str->len, protocol_name, len);
  str->len += len;
  return 0;
  (void)on_selected;
}

FIO_SFUNC int fio___openssl_each_trust(struct fio_io_tls_each_s *e,
                                       const char *public_cert_file) {
  X509_STORE *store = (X509_STORE *)e->udata2;
  if (public_cert_file) /* trust specific certificate */
    X509_STORE_load_file(store, public_cert_file);
  else { /* trust system's trust */
    const char *path = getenv(X509_get_default_cert_dir_env());
    if (!path)
      path = X509_get_default_cert_dir();
    if (path)
      X509_STORE_load_path(store, path);
  }
  return 0;
}

/** Helper that converts a `fio_io_tls_s` into the implementation's context. */
FIO_SFUNC void *fio___openssl_build_context(fio_io_tls_s *tls,
                                            uint8_t is_client) {
  fio___openssl_context_s *ctx =
      (fio___openssl_context_s *)FIO_MEM_REALLOC(NULL, 0, sizeof(*ctx), 0);
  FIO_ASSERT_ALLOC(ctx);
  FIO_LEAK_COUNTER_ON_ALLOC(fio___openssl_context_s);
  *ctx = (fio___openssl_context_s){
      .ctx = SSL_CTX_new((is_client ? TLS_client_method : TLS_server_method)()),
      .tls = fio_io_tls_dup(tls),
  };

  SSL_CTX_set_mode(ctx->ctx, SSL_MODE_ENABLE_PARTIAL_WRITE);
  SSL_CTX_set_mode(ctx->ctx, SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER);
  SSL_CTX_clear_mode(ctx->ctx, SSL_MODE_AUTO_RETRY);

  X509_STORE *store = NULL;
  if (fio_io_tls_trust_count(tls)) {
    SSL_CTX_set_verify(ctx->ctx, SSL_VERIFY_PEER, NULL);
    store = X509_STORE_new();
    SSL_CTX_set_cert_store(ctx->ctx, store);
  } else {
    SSL_CTX_set_verify(ctx->ctx, SSL_VERIFY_NONE, NULL);
  }
  if (!fio_io_tls_cert_count(tls) && !is_client) {
    /* add self-signed certificate to context */
    X509 *cert = fio_io_tls_create_self_signed("localhost");
    SSL_CTX_use_certificate(ctx->ctx, cert);
    SSL_CTX_use_PrivateKey(ctx->ctx, fio___openssl_pkey);
  }
  fio_io_tls_each(tls,
                  .udata = ctx,
                  .udata2 = store,
                  .each_cert = fio___openssl_each_cert,
                  .each_trust = fio___openssl_each_trust);

  if (fio_io_tls_alpn_count(tls)) {
    FIO_STR_INFO_TMP_VAR(alpn_list, 1023);
    fio_io_tls_each(tls,
                    .udata = ctx,
                    .udata2 = &alpn_list,
                    .each_alpn = fio___openssl_each_alpn);
    if (SSL_CTX_set_alpn_protos(ctx->ctx,
                                (const unsigned char *)alpn_list.buf,
                                (unsigned int)alpn_list.len)) {
      FIO_LOG_ERROR("SSL_CTX_set_alpn_protos failed.");
    } else {
      SSL_CTX_set_alpn_select_cb(ctx->ctx, fio___openssl_alpn_selector_cb, ctx);
      SSL_CTX_set_next_proto_select_cb(
          ctx->ctx,
          (int (*)(SSL *,
                   unsigned char **,
                   unsigned char *,
                   const unsigned char *,
                   unsigned int,
                   void *))fio___openssl_alpn_selector_cb,
          (void *)ctx);
    }
  }
  return ctx;
}

/* *****************************************************************************
IO functions
***************************************************************************** */

/** Called to perform a non-blocking `read`, same as the system call. */
FIO_SFUNC ssize_t fio___openssl_read(int fd,
                                     void *buf,
                                     size_t len,
                                     void *tls_ctx) {
  ssize_t r;
  SSL *ssl = (SSL *)tls_ctx;
  errno = 0;
  if (len > INT_MAX)
    len = INT_MAX;
  r = SSL_read(ssl, buf, (int)len);
  if (r > 0)
    return r;
  if (errno == EWOULDBLOCK || errno == EAGAIN)
    return (ssize_t)-1;

  switch ((r = (ssize_t)SSL_get_error(ssl, (int)r))) {
  case SSL_ERROR_SSL:                                   /* fall through */
  case SSL_ERROR_SYSCALL:                               /* fall through */
  case SSL_ERROR_ZERO_RETURN: return (r = 0);           /* EOF */
  case SSL_ERROR_NONE:                                  /* fall through */
  case SSL_ERROR_WANT_CONNECT:                          /* fall through */
  case SSL_ERROR_WANT_ACCEPT:                           /* fall through */
  case SSL_ERROR_WANT_WRITE:                            /* fall through */
    r = SSL_write_ex(ssl, (void *)&r, 0, (size_t *)&r); /* fall through */
  case SSL_ERROR_WANT_X509_LOOKUP:                      /* fall through */
  case SSL_ERROR_WANT_READ:                             /* fall through */
#ifdef SSL_ERROR_WANT_ASYNC                             /* fall through */
  case SSL_ERROR_WANT_ASYNC:                            /* fall through */
#endif
  default: errno = EWOULDBLOCK; return (r = -1);
  }
  (void)fd;
}

/** Sends any unsent internal data. Returns 0 only if all data was sent. */
FIO_SFUNC int fio___openssl_flush(int fd, void *tls_ctx) {
  return 0;
  (void)fd, (void)tls_ctx;
#if 0                       /* no flushing necessary? */
  int r;
  char buf[8] = {0};
  size_t count = 0;
  SSL *ssl = (SSL *)tls_ctx;
  r = SSL_write_ex(ssl, buf, 0, &count);
  if (count)
    return 1;
  if (r > 0)
    return 0;
  switch ((r = SSL_get_error(ssl, r))) {
  case SSL_ERROR_SSL:                         /* fall through */
  case SSL_ERROR_SYSCALL:                     /* fall through */
  case SSL_ERROR_NONE:                        /* fall through */
  case SSL_ERROR_ZERO_RETURN: return (r = 0); /* EOF */
  case SSL_ERROR_WANT_CONNECT:                /* fall through */
  case SSL_ERROR_WANT_ACCEPT:                 /* fall through */
  case SSL_ERROR_WANT_X509_LOOKUP:            /* fall through */
  case SSL_ERROR_WANT_READ:                   /* fall through */
    SSL_read_ex(ssl, buf, 0, &count);         /* fall through */
  case SSL_ERROR_WANT_WRITE:                  /* fall through */
#ifdef SSL_ERROR_WANT_ASYNC /* fall through */
  case SSL_ERROR_WANT_ASYNC:                  /* fall through */
#endif
  default: errno = EWOULDBLOCK; return -1;
  }
#endif
}

/** Called to perform a non-blocking `write`, same as the system call. */
FIO_SFUNC ssize_t fio___openssl_write(int fd,
                                      const void *buf,
                                      size_t len,
                                      void *tls_ctx) {
  ssize_t r = -1;
  if (!buf || !len || !tls_ctx)
    return r;
  SSL *ssl = (SSL *)tls_ctx;
  errno = 0;
  if (len > INT_MAX)
    len = INT_MAX;
  r = SSL_write(ssl, buf, (int)len);
  if (r > 0)
    return r;
  if (errno == EWOULDBLOCK || errno == EAGAIN)
    return -1;

  switch ((r = (ssize_t)SSL_get_error(ssl, (int)r))) {
  case SSL_ERROR_SSL:                         /* fall through */
  case SSL_ERROR_SYSCALL:                     /* fall through */
  case SSL_ERROR_ZERO_RETURN: return (r = 0); /* EOF */
  case SSL_ERROR_NONE:                        /* fall through */
  case SSL_ERROR_WANT_CONNECT:                /* fall through */
  case SSL_ERROR_WANT_ACCEPT:                 /* fall through */
  case SSL_ERROR_WANT_X509_LOOKUP:            /* fall through */
  case SSL_ERROR_WANT_WRITE:                  /* fall through */
  case SSL_ERROR_WANT_READ:                   /* fall through */
#ifdef SSL_ERROR_WANT_ASYNC                   /* fall through */
  case SSL_ERROR_WANT_ASYNC:                  /* fall through */
#endif
  default: errno = EWOULDBLOCK; return (r = -1);
  }
  (void)fd;
}

/* *****************************************************************************
Per-Connection Builder
***************************************************************************** */

FIO_LEAK_COUNTER_DEF(fio___SSL)

/** called once the IO was attached and the TLS object was set. */
FIO_SFUNC void fio___openssl_start(fio_io_s *io) {
  fio___openssl_context_s *ctx_parent =
      (fio___openssl_context_s *)fio_io_tls(io);
  FIO_ASSERT_DEBUG(ctx_parent, "OpenSSL Context missing!");

  SSL *ssl = SSL_new(ctx_parent->ctx);
  FIO_LEAK_COUNTER_ON_ALLOC(fio___SSL);
  fio_io_tls_set(io, (void *)ssl);

  /* attach socket */
  FIO_LOG_DDEBUG2("(%d) allocated new TLS context for %p.",
                  (int)fio_thread_getpid(),
                  (void *)io);
  BIO *bio = BIO_new_socket(fio_io_fd(io), 0);
  SSL_set_bio(ssl, bio, bio);
  SSL_set_ex_data(ssl, 0, (void *)io);
  if (SSL_is_server(ssl))
    SSL_accept(ssl);
  else
    SSL_connect(ssl);
}

/* *****************************************************************************
Closing Connections
***************************************************************************** */

/** Decreases a fio_io_tls_s object's reference count, or frees the object. */
FIO_SFUNC void fio___openssl_finish(int fd, void *tls_ctx) {
  SSL *ssl = (SSL *)tls_ctx;
  SSL_shutdown(ssl);
  (void)fd;
}

/* *****************************************************************************
Per-Connection Cleanup
***************************************************************************** */

/** Decreases a fio_io_tls_s object's reference count, or frees the object. */
FIO_SFUNC void fio___openssl_cleanup(void *tls_ctx) {
  SSL *ssl = (SSL *)tls_ctx;
  SSL_shutdown(ssl);
  FIO_LEAK_COUNTER_ON_FREE(fio___SSL);
  SSL_free(ssl);
}

/* *****************************************************************************
Context Cleanup
***************************************************************************** */

static void fio___openssl_free_context_task(void *tls_ctx, void *ignr_) {
  fio___openssl_context_s *ctx = (fio___openssl_context_s *)tls_ctx;
  FIO_LEAK_COUNTER_ON_FREE(fio___openssl_context_s);
  SSL_CTX_free(ctx->ctx);
  fio_io_tls_free(ctx->tls);
  FIO_MEM_FREE(ctx, sizeof(*ctx));
  (void)ignr_;
}

/** Builds a local TLS context out of the fio_io_tls_s object. */
static void fio___openssl_free_context(void *tls_ctx) {
  fio_io_defer(fio___openssl_free_context_task, tls_ctx, NULL);
}
/* *****************************************************************************
IO Functions Structure
***************************************************************************** */

/* Returns the OpenSSL IO functions (implementation) */
SFUNC fio_io_functions_s fio_openssl_io_functions(void) {
  return (fio_io_functions_s){
      .build_context = fio___openssl_build_context,
      .free_context = fio___openssl_free_context,
      .start = fio___openssl_start,
      .read = fio___openssl_read,
      .write = fio___openssl_write,
      .flush = fio___openssl_flush,
      .cleanup = fio___openssl_cleanup,
  };
}

/* Setup OpenSSL as TLS IO default */
FIO_CONSTRUCTOR(fio___openssl_setup_default) {
  static fio_io_functions_s FIO___OPENSSL_IO_FUNCS;
  FIO___OPENSSL_IO_FUNCS = fio_openssl_io_functions();
  fio_io_tls_default_functions(&FIO___OPENSSL_IO_FUNCS);
#ifdef SIGPIPE
  fio_signal_monitor(SIGPIPE, NULL, NULL); /* avoid OpenSSL issue... */
#endif
}

/* *****************************************************************************
OpenSSL Helpers Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#endif /* HAVE_OPENSSL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_PUBSUB             /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                Pub/Sub Services for IPC / Server applications




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_PUBSUB) && !defined(H___FIO_PUBSUB___H) &&                     \
    !defined(FIO___RECURSIVE_INCLUDE)
#define H___FIO_PUBSUB___H

/* *****************************************************************************
Pub/Sub - message format
***************************************************************************** */

/** Message structure, as received by the `on_message` subscription callback. */
struct fio_msg_s {
  /** A connection (if any) to which the subscription belongs. */
  fio_io_s *io;
  /** The `udata` argument associated with the subscription. */
  void *udata;
  /** Message ID. */
  uint64_t id;
  /** Milliseconds since epoch. */
  uint64_t published;
  /**
   * A channel name, allowing for pub/sub patterns.
   *
   * NOTE: this is a shared copy - do NOT mutate the channel name string.
   */
  fio_buf_info_s channel;
  /**
   * The actual message.
   *
   * NOTE: this is a shared copy - do NOT mutate the message payload string.
   **/
  fio_buf_info_s message;
  /** Channel name namespace. Negative values are reserved. */
  int16_t filter;
  /** flag indicating if the message is JSON data or binary/text. */
  uint8_t is_json;
};

/* *****************************************************************************
Pub/Sub - Subscribe / Unsubscribe
***************************************************************************** */

/** Possible arguments for the fio_subscribe method. */
typedef struct {
  /**
   * The subscription owner - if none, the subscription is owned by the system.
   *
   * Note:
   *
   * Both the system and the `io` objects each manage channel listing
   * which allows only a single subscription to the same channel.
   *
   * This means a single subscription per channel per IO and a single
   * subscription per channel for the global system unless managing the
   * subscription handle manually.
   */
  fio_io_s *io;
  /**
   * A named `channel` to which the message was sent.
   *
   * Subscriptions require a match by both channel name and namespace filter.
   */
  fio_buf_info_s channel;
  /**
   * The callback to be called for each message forwarded to the subscription.
   */
  void (*on_message)(fio_msg_s *msg);
  /** An optional callback for when a subscription is canceled. */
  void (*on_unsubscribe)(void *udata);
  /** The opaque udata value is ignored and made available to the callbacks. */
  void *udata;
  /** Replay cached messages (if any) since supplied time in milliseconds. */
  uint64_t replay_since;
  /**
   * OPTIONAL: subscription handle return value - should be NULL when using
   * automatic memory management with the IO or global environment.
   *
   * When set, the `io` pointer will be ignored and the subscription object
   * handle will be written to the `subscription_handle_ptr` which MUST be
   * used when unsubscribing.
   *
   * NOTE: this could cause subscriptions and memory leaks unless properly
   * handled.
   */
  uintptr_t *subscription_handle_ptr;
  /**
   * A numerical namespace `filter` subscribers need to match.
   *
   * Negative values are reserved for facil.io framework extensions.
   *
   * Filer channels are bound to the processes and workers, they are NOT
   * forwarded to engines and can be used for inter process communication (IPC).
   */
  int16_t filter;
  /** If set, pattern matching will be used (name is a pattern). */
  uint8_t is_pattern;
  /** If set, subscription will be limited to the root / master process. */
  uint8_t master_only;
} fio_subscribe_args_s;

/**
 * Subscribes to a channel / filter pair.
 *
 * The on_unsubscribe callback will be called on failure.
 */
SFUNC void fio_subscribe(fio_subscribe_args_s args);

/**
 * Subscribes to a channel / filter pair.
 *
 * See `fio_subscribe_args_s` for details.
 */
#define fio_subscribe(...) fio_subscribe((fio_subscribe_args_s){__VA_ARGS__})

/**
 * Cancels an existing subscriptions.
 *
 * Accepts the same arguments as `fio_subscribe`, except the `udata` and
 * callback details are ignored (no need to provide `udata` or callback
 * details).
 *
 * If a `subscription_handle_ptr` was provided it should contain the value of
 * the subscription handle returned.
 *
 * Returns -1 if the subscription could not be found. Otherwise returns 0.
 */
SFUNC int fio_unsubscribe(fio_subscribe_args_s args);

/**
 * Cancels an existing subscriptions.
 *
 * Accepts the same arguments as `fio_subscribe`, except the `udata` and
 * callback details are ignored (no need to provide `udata` or callback
 * details).
 *
 * Returns -1 if the subscription could not be found. Otherwise returns 0.
 */
#define fio_unsubscribe(...)                                                   \
  fio_unsubscribe((fio_subscribe_args_s){__VA_ARGS__})

/* A callback for IO subscriptions - sends raw message data. */
FIO_SFUNC void FIO_ON_MESSAGE_SEND_MESSAGE(fio_msg_s *msg);

/* *****************************************************************************
Pub/Sub - Publish
***************************************************************************** */

/** A pub/sub engine data structure. See details later on. */
typedef struct fio_pubsub_engine_s fio_pubsub_engine_s;

/** Publishing and on_message callback arguments. */
typedef struct fio_publish_args_s {
  /** The pub/sub engine that should be used to forward this message. */
  fio_pubsub_engine_s const *engine;
  /** If `from` is specified, it will be skipped (won't receive message)
   *  UNLESS a non-native `engine` is specified. */
  fio_io_s *from;
  /** Message ID (if missing, a random ID will be generated). */
  uint64_t id;
  /** Milliseconds since epoch (if missing, defaults to "now"). */
  uint64_t published;
  /** The target named channel. */
  fio_buf_info_s channel;
  /** The message body / content. */
  fio_buf_info_s message;
  /** A numeral namespace for channel names. Negative values are reserved. */
  int16_t filter;
  /** A flag indicating if the message is JSON data or not. */
  uint8_t is_json;
} fio_publish_args_s;

/**
 * Publishes a message to the relevant subscribers (if any).
 *
 * By default the message is sent using the `FIO_PUBSUB_DEFAULT` engine (set by
 * default to `FIO_PUBSUB_LOCAL` which publishes to all processes, including the
 * calling process).
 *
 * To limit the message only to other processes (exclude the calling process),
 * use the `FIO_PUBSUB_SIBLINGS` engine.
 *
 * To limit the message only to the calling process, use the
 * `FIO_PUBSUB_PROCESS` engine.
 *
 * To limit the message only to the root process, use the `FIO_PUBSUB_ROOT`
 * engine.
 */
SFUNC void fio_publish(fio_publish_args_s args);
/**
 * Publishes a message to the relevant subscribers (if any).
 *
 * By default the message is sent using the `FIO_PUBSUB_DEFAULT` engine (set by
 * default to `FIO_PUBSUB_LOCAL` which publishes to all processes, including the
 * calling process).
 *
 * To limit the message only to other processes (exclude the calling process),
 * use the `FIO_PUBSUB_SIBLINGS` engine.
 *
 * To limit the message only to the calling process, use the
 * `FIO_PUBSUB_PROCESS` engine.
 *
 * To limit the message only to the root process, use the `FIO_PUBSUB_ROOT`
 * engine.
 */
#define fio_publish(...) fio_publish((fio_publish_args_s){__VA_ARGS__})

/**
 * Defers the current callback, so it will be called again for the message.
 *
 * After calling this function, the `msg` object must NOT be accessed again.
 */
SFUNC void fio_pubsub_message_defer(fio_msg_s *msg);

/* *****************************************************************************
Pub/Sub - History and Event Replay - TODO!!!
***************************************************************************** */

/** Sets the maximum number of messages to be stored in the history store. */
// SFUNC void fio_pubsub_store_limit(size_t messages);

/* *****************************************************************************
Pub/Sub - defaults and builtin pub/sub engines
***************************************************************************** */

/** Flag bits for internal usage (message exchange network format). */
typedef enum {
  /* pub/sub messages */
  FIO___PUBSUB_JSON = 1,
  FIO___PUBSUB_PROCESS = 2,
  FIO___PUBSUB_ROOT = 4,
  FIO___PUBSUB_SIBLINGS = 8,
  FIO___PUBSUB_WORKERS = (8 | 2),
  FIO___PUBSUB_LOCAL = (8 | 4 | 2),
  FIO___PUBSUB_REMOTE = 16,
  FIO___PUBSUB_CLUSTER = (16 | 8 | 4 | 2),
  FIO___PUBSUB_REPLAY = 32, /* history replay message */

  /* internal messages */
  FIO___PUBSUB_SPECIAL = 128,
  FIO___PUBSUB_SUB = (128 | 1),
  FIO___PUBSUB_UNSUB = (128 | 2),
  FIO___PUBSUB_IDENTIFY = (128 | 4),  /* identify remote connection */
  FIO___PUBSUB_FORWARDER = (128 | 8), /* forward to external engine */
  FIO___PUBSUB_PING = (128 | 16),

  FIO___PUBSUB_HISTORY_START = (128 | 32),
  FIO___PUBSUB_HISTORY_END = (128 | 64),
} fio___pubsub_msg_flags_e;

/** Used to publish the message exclusively to the root / master process. */
#define FIO_PUBSUB_ROOT ((fio_pubsub_engine_s *)FIO___PUBSUB_ROOT)
/** Used to publish the message only within the current process. */
#define FIO_PUBSUB_PROCESS ((fio_pubsub_engine_s *)FIO___PUBSUB_PROCESS)
/** Used to publish the message except within the current process. */
#define FIO_PUBSUB_SIBLINGS ((fio_pubsub_engine_s *)FIO___PUBSUB_SIBLINGS)
/** Used to publish the message for this process, its siblings and root. */
#define FIO_PUBSUB_LOCAL ((fio_pubsub_engine_s *)FIO___PUBSUB_LOCAL)
/** Used to publish the message to any possible publishers. */
#define FIO_PUBSUB_CLUSTER ((fio_pubsub_engine_s *)FIO___PUBSUB_CLUSTER)

#if defined(FIO_EXTERN) /* static definitions can't be easily repeated. */
/** The default engine (settable). Initial default is FIO_PUBSUB_CLUSTER. */
SFUNC const fio_pubsub_engine_s *FIO_PUBSUB_DEFAULT;

/**
 * The pattern matching callback used for pattern matching.
 *
 * Returns 1 on a match or 0 if the string does not match the pattern.
 *
 * By default, the value is set to `fio_glob_match` (see facil.io's C STL).
 */
SFUNC uint8_t (*FIO_PUBSUB_PATTERN_MATCH)(fio_str_info_s pattern,
                                          fio_str_info_s channel);
#endif

/* *****************************************************************************
Message metadata (advance usage API)
***************************************************************************** */

/**
 * The number of different metadata callbacks that can be attached.
 *
 * Effects performance.
 *
 * The default value should be enough for the following metadata objects:
 * - WebSocket server headers.
 * - WebSocket client (header + masked message copy).
 * - EventSource (SSE) encoded named channel and message.
 */
#ifndef FIO___PUBSUB_METADATA_STORE_LIMIT
#define FIO___PUBSUB_METADATA_STORE_LIMIT 4
#endif

/** Pub/Sub Metadata callback type. */
typedef void *(*fio_msg_metadata_fn)(fio_msg_s *);

/**
 * It's possible to attach metadata to facil.io pub/sub messages before they are
 * published.
 *
 * This allows, for example, messages to be encoded as network packets for
 * outgoing protocols (i.e., encoding for WebSocket transmissions), improving
 * performance in large network based broadcasting.
 *
 * Up to `FIO___PUBSUB_METADATA_STORE_LIMIT` metadata callbacks can be attached.
 *
 * The callback should return a `void *` pointer.
 *
 * To remove a callback, call `fio_message_metadata_remove` with the returned
 * value.
 *
 * The cluster messaging system allows some messages to be flagged as JSON and
 * this flag is available to the metadata callback.
 *
 * Returns zero (0) on success or -1 on failure.
 *
 * Multiple `fio_message_metadata_add` calls increase a reference count and
 * should be matched by the same number of `fio_message_metadata_remove`.
 */
SFUNC int fio_message_metadata_add(fio_msg_metadata_fn metadata_func,
                                   void (*cleanup)(void *));

/**
 * Removed the metadata callback.
 *
 * Removal might be delayed if live metatdata exists.
 */
SFUNC void fio_message_metadata_remove(fio_msg_metadata_fn metadata_func);

/** Finds the message's metadata, returning the data or NULL. */
SFUNC void *fio_message_metadata(fio_msg_s *msg,
                                 fio_msg_metadata_fn metadata_func);

/* *****************************************************************************
Pub/Sub Middleware and Extensions ("Engines")
***************************************************************************** */

/**
 * facil.io can be linked with external Pub/Sub services using "engines".
 *
 * Engines MUST provide the listed function pointers and should be attached
 * using the `fio_pubsub_attach` function.
 *
 * Engines that were connected / attached using `fio_pubsub_attach` MUST
 * disconnect / detach, before being destroyed, by using the `fio_pubsub_detach`
 * function.
 *
 * When an engine received a message to publish, it should call the
 * `fio_publish` function with the engine to which the message is forwarded.
 * i.e.:
 *
 *       fio_publish(
 *           .engine = FIO_PUBSUB_LOCAL,
 *           .channel = channel_name,
 *           .message = msg_body);
 *
 * IMPORTANT: The callbacks will be called by the main IO thread, so they should
 * never block. Long tasks should copy the data and scheduling an external task
 * (i.e., using `fio_io_defer`).
 */
struct fio_pubsub_engine_s {
  /** Called after the engine was detached, may be used for cleanup. */
  void (*detached)(const fio_pubsub_engine_s *eng);
  /** Subscribes to a channel. Called ONLY in the Root (master) process. */
  void (*subscribe)(const fio_pubsub_engine_s *eng,
                    fio_buf_info_s channel,
                    int16_t filter);
  /** Subscribes to a pattern. Called ONLY in the Root (master) process. */
  void (*psubscribe)(const fio_pubsub_engine_s *eng,
                     fio_buf_info_s channel,
                     int16_t filter);
  /** Unsubscribes to a channel. Called ONLY in the Root (master) process. */
  void (*unsubscribe)(const fio_pubsub_engine_s *eng,
                      fio_buf_info_s channel,
                      int16_t filter);
  /** Unsubscribe to a pattern. Called ONLY in the Root (master) process. */
  void (*punsubscribe)(const fio_pubsub_engine_s *eng,
                       fio_buf_info_s channel,
                       int16_t filter);
  /** Publishes a message through the engine. Called by any worker / thread. */
  void (*publish)(const fio_pubsub_engine_s *eng, fio_msg_s *msg);
};

/**
 * Attaches an engine, so it's callback can be called by facil.io.
 *
 * The `(p)subscribe` callback will be called for every existing channel.
 *
 * This can be called multiple times resulting in re-running the `(p)subscribe`
 * callbacks.
 *
 * NOTE: engines are automatically detached from child processes but can be
 * safely used even so - messages are always forwarded to the engine attached to
 * the root (master) process.
 *
 * NOTE: engines should publish events to `FIO_PUBSUB_LOCAL`.
 */
SFUNC void fio_pubsub_attach(fio_pubsub_engine_s *engine);

/** Schedules an engine for Detachment, so it could be safely destroyed. */
SFUNC void fio_pubsub_detach(fio_pubsub_engine_s *engine);

/* *****************************************************************************
Pub/Sub Clustering and Security
***************************************************************************** */

/** Sets the current IPC socket address (can't be changed while running). */
SFUNC int fio_pubsub_ipc_url_set(char *str, size_t len);

/** Returns a pointer to the current IPC socket address. */
SFUNC const char *fio_pubsub_ipc_url(void);

/**
 * Sets a (possibly shared) secret for securing pub/sub communication.
 *
 * If `secret` is `NULL`, the environment variable `"SECRET"` will be used or.
 *
 * If secret is never set, a random secret will be generated.
 *
 * NOTE: secrets produce a SHA-512 Hash that is used to produce 256 bit keys.
 */
SFUNC void fio_pubsub_secret_set(char *secret, size_t len);

/** Auto-peer detection and pub/sub multi-machine clustering using `port`. */
SFUNC void fio_pubsub_broadcast_on_port(int16_t port);

/* *****************************************************************************



Pub/Sub Implementation



The implementation has a big number of interconnected modules:
- Distribution Channels (`fio_channel_s` and `FIO___PUBSUB_POSTOFFICE`)
- Subscriptions (`fio_subscription_s`)
- Metadata Management.
- External Distribution Engines (`fio_pubsub_engine_s`)
- Message format and their network exchange protocols (`fio___pubsub_message_s`)

Message wire format (as 64 bit numerals in little endien encoding):
[0] Message ID
[1] Publication time (milliseconds since epoch)
[2] 16 bit filter | 16 bit channel len | 24 bit message len | 8 bit flags
| --- encryption starts --- |
| X bytes - (channel name, + 1 NUL terminator) |
| Y bytes - (message data, + 1 NUL terminator) |
| --- encryption ends --- |
| 16 bytes - (optional) message MAC |
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

#undef FIO___PUBSUB_MESSAGE_HEADER
#define FIO___PUBSUB_MESSAGE_HEADER 24
/* header + 2 NUL bytes (message + channel) + 16 byte MAC */
#undef FIO___PUBSUB_MESSAGE_OVERHEAD
#define FIO___PUBSUB_MESSAGE_OVERHEAD (FIO___PUBSUB_MESSAGE_HEADER + 18)

/* *****************************************************************************
Pub/Sub - defaults and builtin pub/sub engines
***************************************************************************** */

/** The default engine (settable). Initial default is FIO_PUBSUB_CLUSTER. */
SFUNC const fio_pubsub_engine_s *FIO_PUBSUB_DEFAULT = FIO_PUBSUB_CLUSTER;

/**
 * The pattern matching callback used for pattern matching.
 *
 * Returns 1 on a match or 0 if the string does not match the pattern.
 *
 * By default, the value is set to `fio_glob_match` (see facil.io's C STL).
 */
SFUNC uint8_t (*FIO_PUBSUB_PATTERN_MATCH)(fio_str_info_s,
                                          fio_str_info_s) = fio_glob_match;

/* a mock callback for subscriptions */
FIO_SFUNC void fio___subscription_mock_cb(fio_msg_s *msg) { (void)msg; }

/* A callback for IO subscriptions. */
FIO_SFUNC void fio___subscription_call_protocol(fio_msg_s *msg) {
  if (!msg->io)
    return;
  fio_io_protocol_s *p = fio_io_protocol(msg->io);
  FIO_ASSERT_DEBUG(p, "every IO object should have a protocol, always");
  p->on_pubsub(msg);
}

#ifndef FIO___PUBSUB_CLUSTER_BACKLOG
#define FIO___PUBSUB_CLUSTER_BACKLOG (1UL << 12)
#endif

/* *****************************************************************************
PostOffice Distribution types - Channel and Subscription Core Types
***************************************************************************** */

/** The Distribution Channel: manages subscriptions to named channels. */
typedef struct fio_channel_s {
  FIO_LIST_HEAD subscriptions;
  FIO_LIST_HEAD history;
  uint32_t name_len;
  int16_t filter;
  uint8_t is_pattern;
  char name[];
} fio_channel_s;

/** The Channel Map: maps named channels. */
FIO_SFUNC void fio___channel_on_create(fio_channel_s *ch);
FIO_SFUNC void fio___channel_on_destroy(fio_channel_s *ch);

/**
 * Reference counting: `fio_channel_dup(ch)` / `fio_channel_free(ch)`
 */
#define FIO_REF_NAME             fio_channel
#define FIO_REF_FLEX_TYPE        char
#define FIO_REF_DESTROY(ch)      fio___channel_on_destroy(&(ch))
#define FIO_REF_CONSTRUCTOR_ONLY 1
#define FIO___RECURSIVE_INCLUDE  1
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

/** The Subscription: contains subscriber data. */
typedef struct fio_subscription_s {
  FIO_LIST_NODE node;
  FIO_LIST_NODE history;
  FIO_LIST_NODE history_active;
  uint64_t replay_since;
  fio_io_s *io;
  fio_channel_s *channel;
  void (*on_message)(fio_msg_s *msg);
  void (*on_unsubscribe)(void *udata);
  void *udata;
} fio_subscription_s;

/**
 * Reference counting: `fio_subscription_dup(sb)` / `fio_subscription_free(sb)`
 */
FIO_SFUNC void fio___pubsub_subscription_on_destroy(fio_subscription_s *sub);
#define FIO_REF_NAME             fio_subscription
#define FIO_REF_DESTROY(obj)     fio___pubsub_subscription_on_destroy(&(obj))
#define FIO_REF_CONSTRUCTOR_ONLY 1
#define FIO___RECURSIVE_INCLUDE  1
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

/** The Message Container */
typedef struct {
  fio_msg_s data;
  void *metadata[FIO___PUBSUB_METADATA_STORE_LIMIT];
  uint8_t metadata_is_initialized; /* to compact this we need to change all? */
  char buf[];
} fio___pubsub_message_s;

/* returns the internal message object. */
FIO_IFUNC fio___pubsub_message_s *fio___pubsub_msg2internal(fio_msg_s *msg);

/** Callback called when a message is destroyed (reference counting). */
FIO_SFUNC void fio___pubsub_message_on_destroy(fio___pubsub_message_s *m);

/* Message reference counting */
#define FIO_REF_NAME             fio___pubsub_message
#define FIO_REF_DESTROY(obj)     fio___pubsub_message_on_destroy(&(obj))
#define FIO_REF_FLEX_TYPE        char
#define FIO_REF_CONSTRUCTOR_ONLY 1
#define FIO___RECURSIVE_INCLUDE  1
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

typedef struct {
  size_t len;
  uint64_t uuid[2];
  fio___pubsub_message_s *msg;
  char buf[];
} fio___pubsub_message_parser_s;

FIO_LEAK_COUNTER_DEF(fio___pubsub_message_parser_s)

FIO_IFUNC fio___pubsub_message_parser_s *fio___pubsub_message_parser(
    fio_io_s *io) {
  return io ? (fio___pubsub_message_parser_s *)fio_io_buffer(io) : NULL;
}

FIO_SFUNC void fio___pubsub_message_parser_init(
    fio___pubsub_message_parser_s *p) {
  FIO_LEAK_COUNTER_ON_ALLOC(fio___pubsub_message_parser_s);
  *p = (fio___pubsub_message_parser_s){0};
}

FIO_SFUNC void fio___pubsub_message_parser_destroy(
    fio___pubsub_message_parser_s *p) {
  fio___pubsub_message_free(p->msg);
  FIO_LEAK_COUNTER_ON_FREE(fio___pubsub_message_parser_s);
}

/* *****************************************************************************
PostOffice Distribution types - The Distribution Channel Map
***************************************************************************** */

#define FIO___PUBSUB_CHANNEL_ENCODE_CAPA(filter_, is_pattern_)                 \
  (((size_t)(is_pattern_) << 16) | (size_t)(uint16_t)(filter_))

#define FIO___PUBSUB_CHANNEL2STR(ch)                                           \
  FIO_STR_INFO3(ch->name,                                                      \
                ch->name_len,                                                  \
                FIO___PUBSUB_CHANNEL_ENCODE_CAPA(ch->filter, ch->is_pattern))

FIO_IFUNC int fio___channel_cmp(fio_channel_s *ch, fio_str_info_s s) {
  fio_str_info_s c = FIO___PUBSUB_CHANNEL2STR(ch);
  return FIO_STR_INFO_IS_EQ(c, s);
}

FIO_IFUNC fio_channel_s *fio___channel_new_for_map(fio_str_info_s s) {
  fio_channel_s *ch = fio_channel_new(s.len + 1);
  FIO_ASSERT_ALLOC(ch);
  *ch = (fio_channel_s){
      .subscriptions = FIO_LIST_INIT(ch->subscriptions),
      .history = FIO_LIST_INIT(ch->history),
      .name_len = (uint32_t)s.len,
      .filter = (int16_t)(s.capa & 0xFFFFUL),
      .is_pattern = (uint8_t)(s.capa >> 16),
  };
  FIO_MEMCPY(ch->name, s.buf, s.len);
  ch->name[s.len] = 0;
  fio___channel_on_create(ch);
  return ch;
}

#define FIO_MAP_NAME                  fio___channel_map
#define FIO_MAP_KEY                   fio_str_info_s
#define FIO_MAP_KEY_INTERNAL          fio_channel_s *
#define FIO_MAP_KEY_FROM_INTERNAL(k_) FIO___PUBSUB_CHANNEL2STR(k_)
#define FIO_MAP_KEY_COPY(dest, src)   ((dest) = fio___channel_new_for_map((src)))
#define FIO_MAP_KEY_CMP(a, b)         fio___channel_cmp((a), (b))
#define FIO_MAP_HASH_FN(str)          fio_risky_hash(str.buf, str.len, str.capa)
#define FIO_MAP_KEY_DESTROY(key)      fio_channel_free((key))
#define FIO_MAP_KEY_DISCARD(key)
#define FIO___RECURSIVE_INCLUDE 1
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

/* *****************************************************************************
Pub/Sub Subscription destruction
***************************************************************************** */

/* calls the on_unsubscribe callback. */
FIO_SFUNC void fio___pubsub_subscription_on_destroy__task(void *fnp,
                                                          void *udata) {
  union {
    void *p;
    void (*fn)(void *udata);
  } u = {.p = fnp};
  u.fn(udata);
}

FIO_SFUNC void fio___pubsub_subscription_on_destroy(fio_subscription_s *s) {
  if (s->on_unsubscribe) {
    union {
      void *p;
      void (*fn)(void *udata);
    } u = {.fn = s->on_unsubscribe};
    fio_queue_push(fio_io_queue(),
                   fio___pubsub_subscription_on_destroy__task,
                   u.p,
                   s->udata);
  }
}
/* *****************************************************************************
Pub/Sub Subscription map (for mapping Master only subscriptions)
***************************************************************************** */

/** Performs Housekeeping and defers the on_unsubscribe callback. */
FIO_IFUNC void fio___pubsub_subscription_unsubscribe(fio_subscription_s *s);

/* define a helper map to manage master only subscription. */
#define FIO_MAP_KEY_KSTR
#define FIO_MAP_NAME             fio___postoffice_msmap
#define FIO_MAP_VALUE            fio_subscription_s *
#define FIO_MAP_VALUE_DESTROY(s) fio___pubsub_subscription_unsubscribe(s)
#define FIO___RECURSIVE_INCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

/* *****************************************************************************
Pub/Sub Remote Connection Uniqueness
***************************************************************************** */

/* Managing Remote Connection Uniqueness */
#define FIO_MAP_NAME fio___pubsub_broadcast_connected
#define FIO_MAP_KEY  uint64_t
#define FIO___RECURSIVE_INCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

/* *****************************************************************************
Pub/Sub Engine Map
***************************************************************************** */

/* Managing Remote Connection Uniqueness */
#define FIO_MAP_NAME        fio___pubsub_engines
#define FIO_MAP_KEY         fio_pubsub_engine_s *
#define FIO_MAP_HASH_FN(e)  fio_risky_ptr(e)
#define FIO_MAP_RECALC_HASH 1
#define FIO_MAP_KEY_DESTROY(e)                                                 \
  do {                                                                         \
    e->detached(e);                                                            \
    e = NULL;                                                                  \
  } while (0)
#define FIO_MAP_KEY_DISCARD(e)
#define FIO___RECURSIVE_INCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

/* *****************************************************************************
Message Uniqueness Map for filtering remote connection broadcasts
***************************************************************************** */

/* Managing Remote Connection Uniqueness */
#define FIO_MAP_NAME             fio___pubsub_message_map
#define FIO_MAP_KEY              fio___pubsub_message_s *
#define FIO_MAP_KEY_COPY(d_, e_) (d_ = fio___pubsub_message_dup(e_))
#define FIO_MAP_KEY_CMP(a, b)                                                  \
  (a->data.id == b->data.id && a->data.published == b->data.published)
#define FIO_MAP_KEY_DESTROY(e) fio___pubsub_message_free(e)
#define FIO_MAP_HASH_FN(m)     fio_risky_num(m->data.id, m->data.published)
#define FIO_MAP_RECALC_HASH    1
#define FIO_MAP_LRU            FIO___PUBSUB_CLUSTER_BACKLOG
#define FIO_MAP_KEY_DISCARD(e)
#define FIO___RECURSIVE_INCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___RECURSIVE_INCLUDE

/* *****************************************************************************
Pub/Sub Post Office State
***************************************************************************** */
#ifndef FIO___IPC_LEN
#define FIO___IPC_LEN 256
#endif

FIO_SFUNC void fio___pubsub_protocol_on_attach(fio_io_s *io);
FIO_SFUNC void fio___pubsub_protocol_on_data_master(fio_io_s *io);
FIO_SFUNC void fio___pubsub_protocol_on_data_worker(fio_io_s *io);
FIO_SFUNC void fio___pubsub_protocol_on_data_remote(fio_io_s *io);
FIO_SFUNC void fio___pubsub_protocol_on_close(void *buffer, void *udata);
FIO_SFUNC void fio___pubsub_protocol_on_timeout(fio_io_s *io);

static struct FIO___PUBSUB_POSTOFFICE {
  fio_u128 uuid;
  fio_u512 secret;
  fio___channel_map_s channels;
  fio___channel_map_s patterns;
  struct {
    uint8_t publish;
    uint8_t local;
    uint8_t remote;
  } filter;
  uint8_t secret_is_random;
  FIO___LOCK_TYPE lock;
  fio___pubsub_engines_s engines;
  FIO_LIST_NODE history_active;
  FIO_LIST_NODE history_waiting;
  fio___postoffice_msmap_s master_subscriptions;
  fio___postoffice_msmap_s global_subscriptions;
  fio___pubsub_broadcast_connected_s remote_uuids;
  fio___pubsub_message_map_s remote_messages;
  fio___pubsub_message_map_s history_messages;
  struct {
    fio_io_protocol_s ipc;
    fio_io_protocol_s remote;
  } protocol;
  fio_io_s *broadcaster;
  struct {
    fio_msg_metadata_fn build;
    void (*cleanup)(void *);
    size_t ref;
  } metadata[FIO___PUBSUB_METADATA_STORE_LIMIT];
  char ipc_url[FIO___IPC_LEN];
} FIO___PUBSUB_POSTOFFICE = {
    .filter =
        {
            .publish = (FIO___PUBSUB_PROCESS | FIO___PUBSUB_ROOT),
            .local = (FIO___PUBSUB_SIBLINGS),
            .remote = FIO___PUBSUB_REMOTE,
        },
    .lock = FIO___LOCK_INIT,
    .protocol =
        {
            .ipc =
                {
                    .on_attach = fio___pubsub_protocol_on_attach,
                    .on_data = fio___pubsub_protocol_on_data_master,
                    .on_close = fio___pubsub_protocol_on_close,
                    .on_timeout = fio_io_touch,
                    .buffer_size = sizeof(fio___pubsub_message_parser_s) +
                                   FIO___PUBSUB_MESSAGE_OVERHEAD,
                },
            .remote =
                {
                    .on_attach = fio___pubsub_protocol_on_attach,
                    .on_data = fio___pubsub_protocol_on_data_remote,
                    .on_close = fio___pubsub_protocol_on_close,
                    .on_timeout = fio___pubsub_protocol_on_timeout,
                    .buffer_size = sizeof(fio___pubsub_message_parser_s) +
                                   FIO___PUBSUB_MESSAGE_OVERHEAD,
                },
        },
};

/** Returns the secret key for a message with stated `rndm` value. */
FIO_IFUNC const void *fio___pubsub_secret_key(uint64_t rndm) {
  return (void *)&FIO___PUBSUB_POSTOFFICE.secret.u8[rndm & 15];
}

/* *****************************************************************************
PostOffice Helpers
***************************************************************************** */

/** Sets the current IPC socket address (shouldn't be changed while running). */
SFUNC int fio_pubsub_ipc_url_set(char *str, size_t len) {
  if (fio_io_is_running() || len >= FIO___IPC_LEN)
    return -1;
  fio_str_info_s url =
      FIO_STR_INFO3(FIO___PUBSUB_POSTOFFICE.ipc_url, 0, FIO___IPC_LEN);
  fio_string_write2(&url, NULL, FIO_STRING_WRITE_STR2(str, len));
  return 0;
}
/** Returns the current IPC socket address (shouldn't be changed). */
SFUNC const char *fio_pubsub_ipc_url(void) {
  return FIO___PUBSUB_POSTOFFICE.ipc_url;
}

/** Sets a (possibly shared) secret for securing pub/sub communication. */
SFUNC void fio_pubsub_secret_set(char *str, size_t len) {
  FIO___PUBSUB_POSTOFFICE.secret_is_random = 0;
  uint64_t fallback_secret = 0;
  if (!str || !len) {
    if ((str = getenv("SECRET"))) {
      const char *secret_length = getenv("SECRET_LENGTH");
      len = secret_length ? fio_atol((char **)&secret_length) : 0;
      if (!len)
        len = strlen(str);
    } else {
      fallback_secret = fio_rand64();
      str = (char *)&fallback_secret;
      len = sizeof(fallback_secret);
      FIO___PUBSUB_POSTOFFICE.secret_is_random = 1;
    }
  }
  FIO___PUBSUB_POSTOFFICE.secret = fio_sha512(str, len);
}

/* *****************************************************************************
Postoffice History Control
***************************************************************************** */

FIO_SFUNC void fio___pubub_on_history_start(void *ignr_1, void *ignr_2) {
  (void)ignr_1, (void)ignr_2;
  if (!FIO_LIST_IS_EMPTY(&FIO___PUBSUB_POSTOFFICE.history_active))
    return;
  FIO_LIST_EACH(fio_subscription_s,
                history_active,
                &FIO___PUBSUB_POSTOFFICE.history_active,
                s) {
    FIO_LIST_REMOVE(&s->history);
    FIO_LIST_REMOVE(&s->history_active);
    FIO_LIST_PUSH(&s->channel->history, &s->history);
    FIO_LIST_PUSH(&FIO___PUBSUB_POSTOFFICE.history_active, &s->history_active);
  }
}

FIO_SFUNC void fio___pubub_on_history_end(void *ignr_1, void *ignr_2) {
  (void)ignr_1, (void)ignr_2;
  FIO_LIST_EACH(fio_subscription_s,
                history_active,
                &FIO___PUBSUB_POSTOFFICE.history_active,
                s) {
    FIO_LIST_REMOVE(&s->history);
    FIO_LIST_REMOVE(&s->history_active);
  }
}

/* *****************************************************************************
Postoffice Metadata Control
***************************************************************************** */

/* Returns zero (0) on success or -1 on failure. */
SFUNC int fio_message_metadata_add(fio_msg_metadata_fn metadata_func,
                                   void (*cleanup)(void *)) {
  for (size_t i = 0; i < FIO___PUBSUB_METADATA_STORE_LIMIT;
       ++i) { /* test existing */
    if (fio_atomic_add(&FIO___PUBSUB_POSTOFFICE.metadata[i].ref, 1) &&
        metadata_func == FIO___PUBSUB_POSTOFFICE.metadata[i].build)
      return 0;
    fio_atomic_sub(&FIO___PUBSUB_POSTOFFICE.metadata[i].ref, 1);
  }
  for (size_t i = 0; i < FIO___PUBSUB_METADATA_STORE_LIMIT;
       ++i) { /* insert if available */
    if (fio_atomic_add(&FIO___PUBSUB_POSTOFFICE.metadata[i].ref, 1)) {
      fio_atomic_sub(&FIO___PUBSUB_POSTOFFICE.metadata[i].ref, 1);
      continue;
    }
    FIO___PUBSUB_POSTOFFICE.metadata[i].build = metadata_func;
    FIO___PUBSUB_POSTOFFICE.metadata[i].cleanup = cleanup;
    return 0;
  }
  return -1;
}

/**
 * Removed the metadata callback.
 *
 * Removal might be delayed if live metatdata
 * exists.
 */
SFUNC void fio_message_metadata_remove(fio_msg_metadata_fn metadata_func) {
  for (size_t i = 0; i < FIO___PUBSUB_METADATA_STORE_LIMIT;
       ++i) { /* test existing */
    if (fio_atomic_add(&FIO___PUBSUB_POSTOFFICE.metadata[i].ref, 1) &&
        metadata_func == FIO___PUBSUB_POSTOFFICE.metadata[i].build) {
      fio_atomic_sub(&FIO___PUBSUB_POSTOFFICE.metadata[i].ref, 1);
    }
    fio_atomic_sub(&FIO___PUBSUB_POSTOFFICE.metadata[i].ref, 1);
  }
}

/** Finds the message's metadata, returning the data or NULL. */
SFUNC void *fio_message_metadata(fio_msg_s *msg,
                                 fio_msg_metadata_fn metadata_func) {
  for (size_t i = 0; i < FIO___PUBSUB_METADATA_STORE_LIMIT;
       ++i) { /* test existing */
    if (FIO___PUBSUB_POSTOFFICE.metadata[i].ref &&
        metadata_func == FIO___PUBSUB_POSTOFFICE.metadata[i].build) {
      return fio___pubsub_msg2internal(msg)->metadata[i];
    }
  }
  return NULL;
}

/* *****************************************************************************
Listening to Local Connections (IPC)
***************************************************************************** */

#if defined(DEBUG)
#define FIO___PUBSUB_HIDE_FROM_LOG 0
#else
#define FIO___PUBSUB_HIDE_FROM_LOG 1
#endif
/** Starts listening to IPC connections on a local socket. */
FIO_IFUNC void fio___pubsub_ipc_listen(void *ignr_) {
  (void)ignr_;
  if (fio_io_is_worker()) {
    FIO_LOG_DEBUG2("(%d) pub/sub IPC socket skipped - no workers are spawned.",
                   fio_io_pid());
    return;
  }
  FIO_ASSERT(fio_io_listen(.url = FIO___PUBSUB_POSTOFFICE.ipc_url,
                           .protocol = &FIO___PUBSUB_POSTOFFICE.protocol.ipc,
                           .on_root = 1,
                           .hide_from_log = FIO___PUBSUB_HIDE_FROM_LOG),
             "(%d) pub/sub couldn't open a socket for IPC\n\t\t%s",
             fio_io_pid(),
             FIO___PUBSUB_POSTOFFICE.ipc_url);
}
#undef FIO___PUBSUB_HIDE_FROM_LOG

/* *****************************************************************************
Postoffice Constructor / Destructor
***************************************************************************** */

/* listens for IPC connections. */
FIO_SFUNC void fio___pubsub_ipc_listen(void *);
/* protocol functions. */
FIO_SFUNC void fio___pubsub_protocol_on_attach(fio_io_s *io);
FIO_SFUNC void fio___pubsub_protocol_on_data_master(fio_io_s *io);
FIO_SFUNC void fio___pubsub_protocol_on_data_worker(fio_io_s *io);
FIO_SFUNC void fio___pubsub_protocol_on_data_remote(fio_io_s *io);
FIO_SFUNC void fio___pubsub_protocol_on_close(void *buffer, void *udata);

FIO_SFUNC void fio___pubsub_at_exit(void *ignr_) {
  (void)ignr_;
  fio_queue_perform_all(fio_io_queue());
  fio___postoffice_msmap_destroy(&FIO___PUBSUB_POSTOFFICE.master_subscriptions);
  fio___postoffice_msmap_destroy(&FIO___PUBSUB_POSTOFFICE.global_subscriptions);
  fio___pubsub_broadcast_connected_destroy(
      &FIO___PUBSUB_POSTOFFICE.remote_uuids);
  fio___pubsub_message_map_destroy(&FIO___PUBSUB_POSTOFFICE.remote_messages);
  fio___pubsub_message_map_destroy(&FIO___PUBSUB_POSTOFFICE.history_messages);
  fio___pubsub_engines_destroy(&FIO___PUBSUB_POSTOFFICE.engines);
  FIO___LOCK_DESTROY(FIO___PUBSUB_POSTOFFICE.lock);
  fio_queue_perform_all(fio_io_queue());
}

/** Callback called by the letter protocol entering a child processes. */
FIO_SFUNC void fio___pubsub_on_enter_child(void *ignr_) {
  (void)ignr_;
  FIO___PUBSUB_POSTOFFICE.protocol.ipc.on_data =
      fio___pubsub_protocol_on_data_worker;

  FIO___PUBSUB_POSTOFFICE.filter.publish = FIO___PUBSUB_PROCESS;
  FIO___PUBSUB_POSTOFFICE.filter.local =
      (FIO___PUBSUB_SIBLINGS | FIO___PUBSUB_ROOT);
  FIO___PUBSUB_POSTOFFICE.filter.remote = 0;
  fio___postoffice_msmap_destroy(&FIO___PUBSUB_POSTOFFICE.master_subscriptions);
  fio___pubsub_engines_destroy(&FIO___PUBSUB_POSTOFFICE.engines);
  if (!fio_io_attach_fd(fio_sock_open2(FIO___PUBSUB_POSTOFFICE.ipc_url,
                                       FIO_SOCK_CLIENT | FIO_SOCK_NONBLOCK),
                        &FIO___PUBSUB_POSTOFFICE.protocol.ipc,
                        NULL,
                        NULL)) {
    FIO_LOG_FATAL("(%d) couldn't connect to pub/sub socket @ %s",
                  fio_io_pid(),
                  FIO___PUBSUB_POSTOFFICE.ipc_url);
    fio_thread_kill(fio_io_root_pid(), SIGINT);
    FIO_ASSERT(0, "fatal error encountered");
  }
}

FIO_CONSTRUCTOR(fio_postoffice_init) {
  FIO___PUBSUB_POSTOFFICE.engines = (fio___pubsub_engines_s)FIO_MAP_INIT;
  fio_pubsub_secret_set(NULL, 0); /* allocate a random secret */
  for (size_t i = 0; i < sizeof(FIO___PUBSUB_POSTOFFICE.uuid) / 8; ++i)
    FIO___PUBSUB_POSTOFFICE.uuid.u64[i] = fio_rand64();
  fio_str_info_s url =
      FIO_STR_INFO3(FIO___PUBSUB_POSTOFFICE.ipc_url, 0, FIO___IPC_LEN);

  fio_string_write2(&url,
                    NULL,
                    FIO_STRING_WRITE_STR1((char *)"priv://facil_io_tmp_"),
                    FIO_STRING_WRITE_HEX(fio_rand64()),
                    FIO_STRING_WRITE_STR1((char *)".sock"));
  fio_state_callback_add(FIO_CALL_PRE_START, fio___pubsub_ipc_listen, NULL);
  fio_state_callback_add(FIO_CALL_IN_CHILD, fio___pubsub_on_enter_child, NULL);
  fio_state_callback_add(FIO_CALL_AT_EXIT, fio___pubsub_at_exit, NULL);
  /* TODO!!! */
  FIO___PUBSUB_POSTOFFICE.protocol.ipc = (fio_io_protocol_s){
      .on_attach = fio___pubsub_protocol_on_attach,
      .on_data = fio___pubsub_protocol_on_data_master,
      .on_close = fio___pubsub_protocol_on_close,
      .on_timeout = fio_io_touch,
      .buffer_size =
          sizeof(fio___pubsub_message_parser_s) + FIO___PUBSUB_MESSAGE_OVERHEAD,
  };
  FIO___PUBSUB_POSTOFFICE.protocol.remote = (fio_io_protocol_s){
      .on_attach = fio___pubsub_protocol_on_attach,
      .on_data = fio___pubsub_protocol_on_data_remote,
      .on_close = fio___pubsub_protocol_on_close,
      .on_timeout = fio_io_touch,
      .buffer_size =
          sizeof(fio___pubsub_message_parser_s) + FIO___PUBSUB_MESSAGE_OVERHEAD,
  };
}

/* *****************************************************************************
Subscription Setup
***************************************************************************** */

/** Completes the subscription request. */
FIO_IFUNC void fio___pubsub_subscribe_task(void *sub_, void *ignr_) {
  fio_subscription_s *sub = (fio_subscription_s *)sub_;
  union {
    FIO_LIST_HEAD *ls;
    fio_str_info_s *str;
  } uptr = {.ls = &sub->node};
  const fio_str_info_s ch_name = *uptr.str;
  fio_channel_s **ch_ptr =
      fio___channel_map_node2key_ptr(fio___channel_map_set_ptr(
          &FIO___PUBSUB_POSTOFFICE.channels + (ch_name.capa >> 16),
          ch_name));
  fio_bstr_free(ch_name.buf);
  sub->node = FIO_LIST_INIT(sub->node);
  sub->history = FIO_LIST_INIT(sub->history);
  sub->history_active = FIO_LIST_INIT(sub->history_active);
  if (FIO_UNLIKELY(!ch_ptr))
    goto no_channel;
  sub->channel = ch_ptr[0];
  FIO_LIST_PUSH(&(ch_ptr[0]->subscriptions), &sub->node);
  if (sub->replay_since) {
    FIO_LIST_PUSH(&FIO___PUBSUB_POSTOFFICE.history_waiting, &sub->history);
    /* TODO: publish history request event to the cluster. */
  }
  return;
no_channel:
  fio___pubsub_subscription_unsubscribe(sub);
  (void)ignr_;
}

/** Unsubscribes a node and destroys the channel if no more subscribers. */
FIO_IFUNC void fio___pubsub_unsubscribe_task(void *sub_, void *ignr_) {
  fio_subscription_s *sub = (fio_subscription_s *)sub_;
  fio_channel_s *ch = sub->channel;
  fio___channel_map_s *map;
  FIO_LIST_REMOVE(&sub->node);
  FIO_LIST_REMOVE(&sub->history);
  FIO_LIST_REMOVE(&sub->history_active);
  if (FIO_UNLIKELY(!ch))
    goto no_channel;

  if (FIO_LIST_IS_EMPTY(&ch->subscriptions)) {
    map = &FIO___PUBSUB_POSTOFFICE.channels + ch->is_pattern;
    fio___channel_map_remove(map, FIO___PUBSUB_CHANNEL2STR(ch), NULL);
    if (!fio___channel_map_count(map))
      fio___channel_map_destroy(map);
  }
  sub->channel = NULL;

no_channel:
  fio_subscription_free(sub);
  return;
  (void)ignr_;
}

/** Performs Housekeeping and defers the on_unsubscribe callback. */
FIO_IFUNC void fio___pubsub_subscription_unsubscribe(fio_subscription_s *s) {
  if (!s)
    return;
  s->on_message = fio___subscription_mock_cb;
  fio_queue_push(fio_io_queue(),
                 fio___pubsub_unsubscribe_task,
                 (void *)s,
                 NULL);
}

/** Subscribes to a named channel in the numerical filter's namespace. */
void fio_subscribe___(void); /* sublimetext marker */
SFUNC void fio_subscribe FIO_NOOP(fio_subscribe_args_s args) {
  fio_subscription_s *s = NULL;
  union {
    FIO_LIST_HEAD *ls;
    fio_str_info_s *str;
  } uptr;
  if (args.channel.len > 0xFFFFUL)
    goto sub_error;
  s = fio_subscription_new();
  if (!s)
    goto sub_error;

  *s = (fio_subscription_s){
      .replay_since = args.replay_since,
      .io = args.io,
      .on_message =
          (args.on_message ? args.on_message
                           : (args.io ? fio___subscription_call_protocol
                                      : fio___subscription_mock_cb)),
      .on_unsubscribe = args.on_unsubscribe,
      .udata = args.udata,
  };
  args.is_pattern = !!args.is_pattern; /* make sure this is either 1 or zero */
  uptr.ls = &s->node;
  *uptr.str = FIO_STR_INFO3(
      (args.channel.len
           ? fio_bstr_write(NULL, args.channel.buf, args.channel.len)
           : NULL),
      args.channel.len,
      FIO___PUBSUB_CHANNEL_ENCODE_CAPA(args.filter, args.is_pattern));

  if (args.subscription_handle_ptr)
    goto has_handle;
  if (args.master_only)
    goto is_master_only;
  if (!args.io)
    goto is_global;

  fio_io_defer(fio___pubsub_subscribe_task, (void *)s, NULL);
  fio_io_env_set(
      args.io,
      .type = (intptr_t)(0LL - (((2ULL | (!!args.is_pattern)) << 16) |
                                (uint16_t)args.filter)),
      .name = args.channel,
      .udata = s,
      .on_close = (void (*)(void *))fio___pubsub_subscription_unsubscribe);
  return;

has_handle:
  fio_io_defer(fio___pubsub_subscribe_task, (void *)s, NULL);
  *args.subscription_handle_ptr = (uintptr_t)s;
  return;

is_master_only:
  if (!fio_io_is_master())
    goto error_not_on_master;
is_global:
  if (1) { /* so C++ can jump even though there's a new var here */
    fio_io_defer(fio___pubsub_subscribe_task, (void *)s, NULL);
    uint64_t hashed_value =
        fio_risky_hash(args.channel.buf,
                       args.channel.len,
                       args.filter | ((size_t)args.is_pattern << 20));
    FIO___LOCK_LOCK(FIO___PUBSUB_POSTOFFICE.lock);
    fio___postoffice_msmap_set(
        &FIO___PUBSUB_POSTOFFICE.master_subscriptions + (!args.master_only),
        hashed_value,
        FIO_STR_INFO2(args.channel.buf, args.channel.len),
        s,
        NULL);
    FIO___LOCK_UNLOCK(FIO___PUBSUB_POSTOFFICE.lock);
  }
  return;

error_not_on_master:
  fio_bstr_free(uptr.str->buf);
  s->node = FIO_LIST_INIT(s->node);
  s->history = FIO_LIST_INIT(s->history);
  fio_subscription_free(s);
  FIO_LOG_WARNING(
      "(%d) master-only subscription attempt on a non-master process: %.*s",
      fio_io_pid(),
      (int)args.channel.len,
      args.channel.buf);
  return;

sub_error:
  FIO_LOG_ERROR("(%d) pub/sub subscription/channel cannot be created?"
                "\n\t%zu bytes long\n\t%.*s...",
                fio_io_pid(),
                args.channel.len,
                (int)(args.channel.len > 10 ? 7 : args.channel.len),
                args.channel.buf);
  FIO_LOG_ERROR("failed to allocate a new subscription");
  if (args.on_unsubscribe) {
    union {
      void *p;
      void (*fn)(void *udata);
    } u = {.fn = args.on_unsubscribe};
    fio_queue_push(fio_io_queue(),
                   fio___pubsub_subscription_on_destroy__task,
                   u.p,
                   args.udata);
  }
  return;
}

/** Cancels an existing subscriptions. */
void fio_unsubscribe___(void); /* sublimetext marker */
int fio_unsubscribe FIO_NOOP(fio_subscribe_args_s args) {
  if (args.subscription_handle_ptr)
    goto has_handle;
  if (args.master_only || !args.io)
    goto is_global;

  return fio_io_env_remove(
      args.io,
      .type = (intptr_t)(0LL - (((2ULL | (!!args.is_pattern)) << 16) |
                                (uint16_t)args.filter)),
      .name = args.channel);

has_handle:
  fio___pubsub_subscription_unsubscribe(
      *(fio_subscription_s **)args.subscription_handle_ptr);
  return 0;

is_global:
  if (1) {
    int r;
    uint64_t hashed_value =
        fio_risky_hash(args.channel.buf,
                       args.channel.len,
                       args.filter | ((size_t)args.is_pattern << 20));
    FIO___LOCK_LOCK(FIO___PUBSUB_POSTOFFICE.lock);
    r = fio___postoffice_msmap_remove(
        &FIO___PUBSUB_POSTOFFICE.master_subscriptions + (!args.master_only),
        hashed_value,
        FIO_STR_INFO3(args.channel.buf, args.channel.len, (size_t)-1),
        NULL);
    FIO___LOCK_UNLOCK(FIO___PUBSUB_POSTOFFICE.lock);
    return r;
  }
}

/* *****************************************************************************
Pub/Sub Message Distribution (local process)
***************************************************************************** */

/* performs the subscription callback */
FIO_IFUNC void fio___subscription_on_message_task(void *s_, void *m_) {
  fio_subscription_s *s = (fio_subscription_s *)s_;
  fio___pubsub_message_s *m = (fio___pubsub_message_s *)m_;
  struct {
    fio_msg_s msg;
    fio___pubsub_message_s *m;
    uintptr_t flag;
  } container = {
      .msg = m->data,
      .m = m,
  };
  container.msg.io = s->io;
  container.msg.udata = s->udata;
  container.msg.is_json = !!(container.msg.is_json & FIO___PUBSUB_JSON);
  s->on_message(&container.msg);
  s->udata = container.msg.udata;
  if (container.flag)
    goto reschedule;
  fio_subscription_free(s);
  fio___pubsub_message_free(m);
  return;
reschedule:
  fio_queue_push(fio_io_queue(), fio___subscription_on_message_task, s_, m_);
}

/* returns the internal message object. */
FIO_IFUNC fio___pubsub_message_s *fio___pubsub_msg2internal(fio_msg_s *msg) {
  return *(fio___pubsub_message_s **)(msg + 1);
}

/** Defers the current callback, so it will be called again for the message. */
SFUNC void fio_pubsub_message_defer(fio_msg_s *msg) {
  ((uintptr_t *)(msg + 1))[1] = 1;
}

/* distributes a message to all of a channel's subscribers */
FIO_SFUNC void fio___pubsub_channel_deliver_task(void *ch_, void *m_) {
  fio_channel_s *ch = (fio_channel_s *)ch_;
  fio___pubsub_message_s *m = (fio___pubsub_message_s *)m_;
  FIO_LIST_HEAD *head = (&ch->subscriptions);
  _Bool is_history = !!(m->data.is_json & FIO___PUBSUB_REPLAY);
  head += is_history;
  if (m->data.io) { /* move as many `if` statements as possible out of loops. */
    if (is_history) {
      FIO_LIST_EACH(fio_subscription_s, node, head, s) {
        if (m->data.io != s->io && m->data.published >= s->replay_since)
          fio_queue_push(
              fio_io_queue(),
              (void (*)(void *, void *))fio___subscription_on_message_task,
              fio_subscription_dup(s),
              fio___pubsub_message_dup(m));
      }
    } else {
      FIO_LIST_EACH(fio_subscription_s, node, head, s) {
        if (m->data.io != s->io)
          fio_queue_push(
              fio_io_queue(),
              (void (*)(void *, void *))fio___subscription_on_message_task,
              fio_subscription_dup(s),
              fio___pubsub_message_dup(m));
      }
    }
  } else {
    if (is_history) {
      FIO_LIST_EACH(fio_subscription_s, node, head, s) {
        if (m->data.published >= s->replay_since)
          fio_queue_push(
              fio_io_queue(),
              (void (*)(void *, void *))fio___subscription_on_message_task,
              fio_subscription_dup(s),
              fio___pubsub_message_dup(m));
      }
    } else {
      FIO_LIST_EACH(fio_subscription_s, node, head, s) {
        fio_queue_push(
            fio_io_queue(),
            (void (*)(void *, void *))fio___subscription_on_message_task,
            fio_subscription_dup(s),
            fio___pubsub_message_dup(m));
      }
    }
  }
  fio___pubsub_message_free(m);
  fio_channel_free(ch);
}

/** Callback called when a letter is destroyed (reference counting). */
FIO_SFUNC void fio___pubsub_message_metadata_init(fio___pubsub_message_s *m);
/** distributes a message to all matching channels */
FIO_SFUNC void fio___pubsub_message_deliver(fio___pubsub_message_s *m) {
  fio___pubsub_message_metadata_init(m); /* metadata initialization */
  fio_str_info_s ch_name =
      FIO_STR_INFO3(m->data.channel.buf,
                    m->data.channel.len,
                    FIO___PUBSUB_CHANNEL_ENCODE_CAPA(m->data.filter, 0));
  fio_channel_s **ch_ptr = fio___channel_map_node2key_ptr(
      fio___channel_map_get_ptr(&FIO___PUBSUB_POSTOFFICE.channels, ch_name));
  if (ch_ptr)
    fio_queue_push(fio_io_queue(),
                   fio___pubsub_channel_deliver_task,
                   fio_channel_dup(ch_ptr[0]),
                   fio___pubsub_message_dup(m));
  FIO_MAP_EACH(fio___channel_map, &FIO___PUBSUB_POSTOFFICE.patterns, i) {
    if (i.node->key->filter == m->data.filter &&
        FIO_PUBSUB_PATTERN_MATCH(i.key, ch_name))
      fio_queue_push(fio_io_queue(),
                     fio___pubsub_channel_deliver_task,
                     fio_channel_dup(i.node->key),
                     fio___pubsub_message_dup(m));
  }
}

FIO_SFUNC void fio___pubsub_message_deliver_task(void *m_, void *ignr_) {
  fio___pubsub_message_deliver((fio___pubsub_message_s *)m_);
  fio___pubsub_message_free((fio___pubsub_message_s *)m_);
  (void)ignr_;
}

/* *****************************************************************************
Pub/Sub Message Type (internal data carrying structure)
***************************************************************************** */

/** Callback called when a letter is destroyed (reference counting). */
FIO_SFUNC void fio___pubsub_message_metadata_init(fio___pubsub_message_s *m) {
  if (fio_atomic_or(&m->metadata_is_initialized, 1)) {
    return;
  }
  fio_msg_s msg = m->data;
  msg.is_json &= FIO___PUBSUB_JSON;
  for (size_t i = 0; i < FIO___PUBSUB_METADATA_STORE_LIMIT; ++i) {
    if (fio_atomic_add(&FIO___PUBSUB_POSTOFFICE.metadata[i].ref, 1)) {
      m->metadata[i] = FIO___PUBSUB_POSTOFFICE.metadata[i].build(&msg);
      continue;
    }
    fio_atomic_sub(&FIO___PUBSUB_POSTOFFICE.metadata[i].ref, 1);
  }
}

/** Callback called when a letter is destroyed (reference counting). */
FIO_SFUNC void fio___pubsub_message_metadata_free(fio___pubsub_message_s *m) {
  if (!m->metadata_is_initialized)
    return;
  for (size_t i = 0; i < FIO___PUBSUB_METADATA_STORE_LIMIT; ++i) {
    if (fio_atomic_add(&FIO___PUBSUB_POSTOFFICE.metadata[i].ref, 1)) {
      FIO___PUBSUB_POSTOFFICE.metadata[i].cleanup(m->metadata[i]);
      fio_atomic_sub(&FIO___PUBSUB_POSTOFFICE.metadata[i].ref, 1);
    }
    fio_atomic_sub(&FIO___PUBSUB_POSTOFFICE.metadata[i].ref, 1);
  }
  m->metadata_is_initialized = 0;
}

/** Callback called when a letter is destroyed (reference counting). */
FIO_SFUNC void fio___pubsub_message_on_destroy(fio___pubsub_message_s *m) {
  fio___pubsub_message_metadata_free(m);
}

FIO_IFUNC fio___pubsub_message_s *fio___pubsub_message_alloc(void *header) {
  fio___pubsub_message_s *m;
  const size_t channel_len = fio_buf2u16_le((char *)header + 18);
  const size_t message_len = fio_buf2u24_le((char *)header + 20);
  m = fio___pubsub_message_new(((channel_len + message_len) << 1) +
                               (FIO___PUBSUB_MESSAGE_OVERHEAD + 2));
  FIO_ASSERT_ALLOC(m);
  *m = (fio___pubsub_message_s){
      .data =
          (fio_msg_s){
              .udata = m->buf + channel_len + message_len + 2,
              .channel = FIO_BUF_INFO2(m->buf, channel_len),
              .message = FIO_BUF_INFO2(m->buf + channel_len + 1, message_len),
          },
  };
  return m;
}

FIO_IFUNC fio___pubsub_message_s *fio___pubsub_message_author(
    fio_publish_args_s args) {
  fio___pubsub_message_s *m =
      fio___pubsub_message_new(((args.message.len + args.channel.len) << 1) +
                               (FIO___PUBSUB_MESSAGE_OVERHEAD + 2));
  FIO_ASSERT_ALLOC(m);
  *m = (fio___pubsub_message_s){
      .data =
          (fio_msg_s){
              .io = args.from,
              .id = args.id ? args.id : fio_rand64(),
              .published = args.published
                               ? args.published
                               : (uint64_t)fio_time2milli(fio_time_real()),
              .channel = FIO_BUF_INFO2(m->buf, args.channel.len),
              .message = FIO_BUF_INFO2(m->buf + args.channel.len + 1,
                                       args.message.len),
              .filter = args.filter,
              .is_json = args.is_json,
          },
  };
  if (args.channel.buf && args.channel.len)
    FIO_MEMCPY(m->data.channel.buf, args.channel.buf, args.channel.len);
  m->data.channel.buf[args.channel.len] = 0;
  if (args.message.buf && args.message.len)
    FIO_MEMCPY(m->data.message.buf, args.message.buf, args.message.len);
  m->data.message.buf[args.message.len] = 0;
  return m;
}

FIO_SFUNC void fio___pubsub_message_encrypt(fio___pubsub_message_s *m) {
  if (m->data.udata)
    return;
  const void *k = fio___pubsub_secret_key(m->data.id);
  const uint64_t nonce[2] = {fio_risky_num(m->data.id, 0), m->data.published};
  uint8_t *pos = (uint8_t *)(m->data.message.buf + m->data.message.len + 1);
  uint8_t *dest = pos;
  m->data.udata = (void *)pos;
  fio_u2buf64_le(pos, m->data.id);
  pos += 8;
  fio_u2buf64_le(pos, m->data.published);
  pos += 8;
  fio_u2buf16_le(pos, (uint16_t)m->data.filter);
  pos += 2;
  fio_u2buf16_le(pos, (uint16_t)m->data.channel.len);
  pos += 2;
  fio_u2buf24_le(pos, (uint32_t)m->data.message.len);
  pos += 3;
  *(pos++) = m->data.is_json;
  const size_t enc_len = m->data.channel.len + m->data.message.len + 2;
  FIO_MEMCPY(pos, m->data.channel.buf, enc_len);
  if (enc_len == 2)
    return;
  pos += enc_len;
  fio_chacha20_poly1305_enc(pos,
                            (void *)(dest + FIO___PUBSUB_MESSAGE_HEADER),
                            m->data.channel.len + m->data.message.len + 2,
                            m->data.udata,
                            FIO___PUBSUB_MESSAGE_HEADER,
                            k,
                            nonce);
}

FIO_SFUNC int fio___pubsub_message_decrypt(fio___pubsub_message_s *m) {
  if (m->data.id)
    return 0;
  if (!m->data.udata)
    return -1;
  uint8_t *pos = (uint8_t *)(m->data.message.buf + m->data.message.len + 1);
  uint8_t *const dest = pos;
  m->data.id = fio_buf2u64_le(pos);
  pos += 8;
  m->data.published = fio_buf2u64_le(pos);
  pos += 8;
  m->data.filter = fio_buf2u16_le(pos);
  pos += 2;
  m->data.channel = FIO_BUF_INFO2(m->buf, fio_buf2u16_le(pos));
  pos += 2;
  m->data.message =
      FIO_BUF_INFO2(m->buf + m->data.channel.len + 1, fio_buf2u24_le(pos));
  pos += 3;
  m->data.is_json = *(pos++);
  const void *k = fio___pubsub_secret_key(m->data.id);
  uint64_t nonce[2] = {fio_risky_num(m->data.id, 0), m->data.published};
  const size_t enc_len = m->data.channel.len + m->data.message.len + 2;
  FIO_MEMCPY(m->buf, pos, enc_len);
  if (enc_len == 2)
    return 0;
  pos += enc_len;
  return fio_chacha20_poly1305_dec(pos,
                                   m->buf,
                                   m->data.channel.len + m->data.message.len +
                                       2,
                                   dest,
                                   FIO___PUBSUB_MESSAGE_HEADER,
                                   k,
                                   nonce);
}

FIO_IFUNC void fio___pubsub_message_is_dirty(fio___pubsub_message_s *m) {
  m->data.udata = NULL;
}

/* *****************************************************************************
Pub/Sub Message Object - IO helpers
***************************************************************************** */

FIO_IFUNC void fio___pubsub_message_write2io(fio_io_s *io, void *m_) {
  fio___pubsub_message_s *m = (fio___pubsub_message_s *)m_;
  if (io == m->data.io)
    return;
  FIO_LOG_DDEBUG2("(%d) pub/sub sending IPC/peer message: %zu bytes",
                  fio_io_pid(),
                  m->data.message.len + m->data.channel.len +
                      FIO___PUBSUB_MESSAGE_OVERHEAD);
  fio___pubsub_message_encrypt(m);
  fio_io_write2(io,
                .buf = fio___pubsub_message_dup(m),
                .len = (m->data.message.len + m->data.channel.len +
                        FIO___PUBSUB_MESSAGE_OVERHEAD),
                .offset = ((uintptr_t)(m->data.udata) - (uintptr_t)(m)),
                .dealloc = (void (*)(void *))fio___pubsub_message_free);
}

/* A callback for IO subscriptions - sends raw message data. */
FIO_SFUNC void FIO_ON_MESSAGE_SEND_MESSAGE(fio_msg_s *msg) {
  if (!msg || !msg->message.len)
    return;
  fio___pubsub_message_s *m = fio___pubsub_msg2internal(msg);
  fio_io_write2(msg->io,
                .buf = fio___pubsub_message_dup(m),
                .len = msg->message.len,
                .offset = (size_t)(msg->message.buf - (char *)m),
                .dealloc = (void (*)(void *))fio___pubsub_message_free);
}

/* *****************************************************************************
Pub/Sub Message Routing
***************************************************************************** */

FIO_SFUNC void fio___pubsub_message_route(fio___pubsub_message_s *m) {
  fio___pubsub_message_parser_s *p;
  unsigned flags = m->data.is_json;
  FIO_LOG_DDEBUG2("(%d) pub/sub routing message (%x)",
                  fio_io_pid(),
                  (int)m->data.is_json);

  if (flags & FIO___PUBSUB_SPECIAL)
    goto is_special_message;

  if ((FIO___PUBSUB_POSTOFFICE.filter.local & flags))
    fio_io_protocol_each(&FIO___PUBSUB_POSTOFFICE.protocol.ipc,
                         fio___pubsub_message_write2io,
                         m);

  if ((FIO___PUBSUB_POSTOFFICE.filter.remote & flags))
    fio_io_protocol_each(&FIO___PUBSUB_POSTOFFICE.protocol.remote,
                         fio___pubsub_message_write2io,
                         m);

  if ((FIO___PUBSUB_POSTOFFICE.filter.publish & flags))
    fio_queue_push(fio_io_queue(),
                   fio___pubsub_message_deliver_task,
                   fio___pubsub_message_dup(m));

  return;

is_special_message:
  FIO_LOG_DDEBUG2("(%d) pub/sub internal subscription/ID message received",
                  fio_io_pid());
  switch (flags) {
  case FIO___PUBSUB_SPECIAL: /* TODO: run generic command on root */ break;
  case FIO___PUBSUB_SUB:
    fio_subscribe(.io = m->data.io,
                  .channel = m->data.channel,
                  .on_message = fio___subscription_mock_cb,
                  .filter = m->data.filter,
                  .is_pattern = (uint8_t)(m->data.id - 1));
    return;
  case FIO___PUBSUB_UNSUB:
    fio_unsubscribe(.io = m->data.io,
                    .channel = m->data.channel,
                    .on_message = fio___subscription_mock_cb,
                    .filter = m->data.filter,
                    .is_pattern = (uint8_t)(m->data.id - 1));
    return;

  case FIO___PUBSUB_IDENTIFY:
    p = fio___pubsub_message_parser(m->data.io);
    if (p) {
      p->uuid[0] = m->data.id;
      p->uuid[1] = m->data.published;
      fio___pubsub_broadcast_connected_set(
          &FIO___PUBSUB_POSTOFFICE.remote_uuids,
          p->uuid[0],
          p->uuid[1]);
    }
    FIO_LOG_INFO("(%d - cluster) identified new peer (%zu connections)",
                 fio_io_pid(),
                 fio___pubsub_broadcast_connected_count(
                     &FIO___PUBSUB_POSTOFFICE.remote_uuids));
    return;
  case FIO___PUBSUB_FORWARDER: /* fall through */
  case (FIO___PUBSUB_FORWARDER | FIO___PUBSUB_JSON):
    if (FIO___PUBSUB_POSTOFFICE.filter.remote) { /* root process */
      fio___pubsub_message_is_dirty(m);
      m->data.message.len -= 8;
      m->data.is_json &= FIO___PUBSUB_JSON;
      fio_pubsub_engine_s *e = (fio_pubsub_engine_s *)(uintptr_t)fio_buf2u64u(
          m->data.message.buf + m->data.message.len);
      m->data.message.buf[m->data.message.len] = 0;
      e->publish(e, &m->data);
    } else { /* child process */
      fio_io_protocol_each(&FIO___PUBSUB_POSTOFFICE.protocol.ipc,
                           fio___pubsub_message_write2io,
                           m);
    }
    return;

  case FIO___PUBSUB_HISTORY_START:
    FIO_LOG_DDEBUG2("(%d) pub/sub internal history start message received",
                    fio_io_pid());
    /* TODO! */
    return;
  case FIO___PUBSUB_HISTORY_END:
    FIO_LOG_DDEBUG2("(%d) pub/sub internal history end message received",
                    fio_io_pid());
    /* TODO! */
    return;
  }
  return;
}

/* *****************************************************************************
Pub/Sub - Publish
***************************************************************************** */

FIO_SFUNC void fio___publish_message_task(void *m_, void *ignr_) {
  (void)ignr_;
  fio___pubsub_message_s *m = (fio___pubsub_message_s *)m_;
  fio___pubsub_message_route(m);
  fio___pubsub_message_free(m);
}

/** Publishes a message to the relevant subscribers (if any). */
void fio_publish___(void); /* SublimeText marker*/
void fio_publish FIO_NOOP(fio_publish_args_s args) {
  if (FIO_UNLIKELY(args.channel.len > 0xFFFFUL)) {
    FIO_LOG_ERROR("(%d) pub/sub channel name too long (%zu bytes)",
                  fio_io_pid(),
                  args.channel.len);
    return;
  }
  if (FIO_UNLIKELY(args.message.len > 0xFFFFFFUL)) {
    FIO_LOG_ERROR("(%d) pub/sub message payload too large (%zu bytes)",
                  fio_io_pid(),
                  args.message.len);
    return;
  }
  fio___pubsub_message_s *m;
  fio_msg_s msg;

  if (!args.engine) {
    args.engine = FIO_PUBSUB_DEFAULT;
    if (!args.engine)
      args.engine = FIO_PUBSUB_DEFAULT = FIO_PUBSUB_CLUSTER;
    if (args.filter < 0)
      args.engine = FIO_PUBSUB_LOCAL;
  }
  if ((uintptr_t)args.engine > 0xFFUL)
    goto external_engine;

  m = fio___pubsub_message_author(args);
  m->data.is_json = ((!!args.is_json) | ((uint8_t)(uintptr_t)args.engine));

  FIO_LOG_DDEBUG2("(%d) publishing pub/sub message (scheduling)", fio_io_pid());
  fio_io_defer(fio___publish_message_task, m, NULL);
  return;

external_engine:

  msg.message = args.message;
  args.message.buf = NULL;
  args.message.len += 8;

  m = fio___pubsub_message_author(args);
  m->data.is_json = ((!!args.is_json) | ((uint8_t)FIO___PUBSUB_FORWARDER));
  FIO_MEMCPY(m->data.message.buf, msg.message.buf, msg.message.len);
  fio_u2buf64u(m->data.message.buf + msg.message.len, (uintptr_t)args.engine);
  fio_io_defer(fio___publish_message_task, m, NULL);
}

/* *****************************************************************************
Pub/Sub Message on-the-wire parsing
***************************************************************************** */

FIO_IFUNC void fio___pubsub_message_parse(
    fio_io_s *io,
    void (*cb)(fio_io_s *, fio___pubsub_message_s *)) {
  fio___pubsub_message_parser_s *parser = fio___pubsub_message_parser(io);
  if (!parser)
    return;
  size_t existing = parser->len;
  if (!parser->msg) {
    while (existing < FIO___PUBSUB_MESSAGE_HEADER) { /* get message length */
      size_t consumed = fio_io_read(io,
                                    parser->buf + existing,
                                    FIO___PUBSUB_MESSAGE_OVERHEAD - existing);
      if (!consumed) {
        parser->len = existing;
        return;
      }
      existing += consumed;
    }
    parser->msg = fio___pubsub_message_alloc(parser->buf);
    FIO_MEMCPY(parser->msg->data.udata, parser->buf, existing);
  }
  /* known message length, read to end and publish */
  fio___pubsub_message_s *m = parser->msg;
  const size_t needed =
      m->data.channel.len + m->data.message.len + FIO___PUBSUB_MESSAGE_OVERHEAD;
  // FIO_LOG_DDEBUG2("(%d) pub/sub parsing IPC/peer message %p (%zu/%zu bytes)",
  //                 fio_io_pid(),
  //                 (void *)fio_buf2u64_le(m->data.udata),
  //                 existing,
  //                 needed);
  while (existing < needed) {
    size_t consumed =
        fio_io_read(io, (char *)m->data.udata + existing, needed - existing);
    if (!consumed) {
      parser->len = existing;
      return;
    }
    existing += consumed;
  }
  parser->msg = NULL;
  parser->len = 0;
  m->data.io = io;
  if (fio___pubsub_message_decrypt(m)) {
    FIO_LOG_SECURITY("(%d) pub/sub message decryption error", fio_io_pid());
    fio_io_close_now(io);
  } else {
    cb(io, m);
  }
  fio___pubsub_message_free(m);
  return; /* consume no more than 1 message at a time */
}

/* *****************************************************************************
Pub/Sub Protocols
***************************************************************************** */

FIO_SFUNC void fio___pubsub_on_message_master(fio_io_s *io,
                                              fio___pubsub_message_s *msg) {
  fio___pubsub_message_route(msg);
  (void)io;
}
FIO_SFUNC void fio___pubsub_on_message_worker(fio_io_s *io,
                                              fio___pubsub_message_s *msg) {
  fio___pubsub_message_route(msg);
  (void)io;
}
FIO_SFUNC void fio___pubsub_on_message_remote(fio_io_s *io,
                                              fio___pubsub_message_s *msg) {
  fio___pubsub_message_map_s *map = &FIO___PUBSUB_POSTOFFICE.remote_messages;
  map += !!(msg->data.is_json & FIO___PUBSUB_REPLAY);
  fio___pubsub_message_s *existing = fio___pubsub_message_map_set(map, msg);
  if (existing != msg)
    return; /* already received */
  fio___pubsub_message_route(msg);
  (void)io;
}
FIO_SFUNC void fio___pubsub_protocol_on_attach(fio_io_s *io) {
  fio___pubsub_message_parser_init(fio___pubsub_message_parser(io));
}
FIO_SFUNC void fio___pubsub_protocol_on_data_master(fio_io_s *io) {
  fio___pubsub_message_parse(io, fio___pubsub_on_message_master);
}
FIO_SFUNC void fio___pubsub_protocol_on_data_worker(fio_io_s *io) {
  fio___pubsub_message_parse(io, fio___pubsub_on_message_worker);
}
FIO_SFUNC void fio___pubsub_protocol_on_data_remote(fio_io_s *io) {
  fio___pubsub_message_parse(io, fio___pubsub_on_message_remote);
}

FIO_SFUNC void fio___pubsub_protocol_on_close(void *p_, void *udata) {
  fio___pubsub_message_parser_s *p = (fio___pubsub_message_parser_s *)p_;
  if (p->uuid[0] || p->uuid[1]) {
    // TODO!: fio___pubsub_broadcast_hello(fio_io_s *io) ?
    fio___pubsub_broadcast_connected_remove(
        &FIO___PUBSUB_POSTOFFICE.remote_uuids,
        p->uuid[0],
        p->uuid[1],
        NULL);
    FIO_LOG_INFO(
        "(%d) (pub/sub cluster) lost peer connection (%zu connections)",
        fio_io_pid(),
        fio___pubsub_broadcast_connected_count(
            &FIO___PUBSUB_POSTOFFICE.remote_uuids));
  }
  fio___pubsub_message_parser_destroy(p);
  if (!fio_io_is_master())
    fio_io_stop();
  (void)udata;
}

static void fio___pubsub_protocol_on_timeout(fio_io_s *io) {
  static const uint8_t ping_msg[FIO___PUBSUB_MESSAGE_OVERHEAD] = {
      [23] = FIO___PUBSUB_PING};
  fio_io_write2(io,
                .buf = (void *)ping_msg,
                .len = FIO___PUBSUB_MESSAGE_OVERHEAD);
}

/* *****************************************************************************
Pub/Sub Engine Support Implementation
***************************************************************************** */

static void fio___pubsub_mock_detached(const fio_pubsub_engine_s *eng) {
  (void)eng;
}
static void fio___pubsub_mock_sub_unsub(const fio_pubsub_engine_s *eng,
                                        fio_buf_info_s channel,
                                        int16_t filter) {
  (void)eng, (void)channel, (void)filter;
}
static void fio___pubsub_mock_publish(const fio_pubsub_engine_s *eng,
                                      fio_msg_s *msg) {
  (void)eng, (void)msg; /* TODO:? sensible default? publish to cluster? */
}

static void fio___pubsub_attach_task(void *engine_, void *ignr_) {
  (void)ignr_;
  fio_pubsub_engine_s *engine = (fio_pubsub_engine_s *)engine_;
  if (!engine->detached)
    engine->detached = fio___pubsub_mock_detached;
  if (!engine->subscribe)
    engine->subscribe = fio___pubsub_mock_sub_unsub;
  if (!engine->unsubscribe)
    engine->unsubscribe = fio___pubsub_mock_sub_unsub;
  if (!engine->psubscribe)
    engine->psubscribe = fio___pubsub_mock_sub_unsub;
  if (!engine->punsubscribe)
    engine->punsubscribe = fio___pubsub_mock_sub_unsub;
  if (!engine->publish)
    engine->publish = fio___pubsub_mock_publish;
  fio___pubsub_engines_set(&FIO___PUBSUB_POSTOFFICE.engines, engine);
  FIO_MAP_EACH(fio___channel_map, &FIO___PUBSUB_POSTOFFICE.channels, i) {
    engine->subscribe(engine,
                      FIO_BUF_INFO2(i.key.buf, i.key.len),
                      (i.key.capa >> 16));
  }
  FIO_MAP_EACH(fio___channel_map, &FIO___PUBSUB_POSTOFFICE.patterns, i) {
    engine->psubscribe(engine,
                       FIO_BUF_INFO2(i.key.buf, i.key.len),
                       (i.key.capa >> 16));
  }
}

FIO_SFUNC void fio___pubsub_detach_task(void *engine, void *ignr_) {
  (void)ignr_;
  fio_pubsub_engine_s *e = (fio_pubsub_engine_s *)engine;
  fio___pubsub_engines_remove(&FIO___PUBSUB_POSTOFFICE.engines, e, NULL);
}

/** Attaches an engine, so it's callback can be called by facil.io. */
SFUNC void fio_pubsub_attach(fio_pubsub_engine_s *engine) {
  if (!engine)
    return;
  fio_io_defer(fio___pubsub_attach_task, engine, NULL);
}

/** Schedules an engine for Detachment, so it could be safely destroyed. */
SFUNC void fio_pubsub_detach(fio_pubsub_engine_s *engine) {
  fio_queue_push(fio_io_queue(), fio___pubsub_detach_task, engine, NULL);
}

/* *****************************************************************************
Channel Creation / Destruction Callback (notifying engines)
***************************************************************************** */

/** Callback for when a channel is created. */
FIO_IFUNC void fio___channel_on_create(fio_channel_s *ch) {
  fio_buf_info_s name = FIO_BUF_INFO2(ch->name, ch->name_len);
  FIO_LOG_DDEBUG2("(%d) pub/sub %s created, filter %d, length %zu bytes: %s",
                  fio_io_pid(),
                  (ch->is_pattern ? "pattern" : "channel"),
                  (int)ch->filter,
                  (size_t)ch->name_len,
                  name.buf);
  FIO_MAP_EACH(fio___pubsub_engines, &FIO___PUBSUB_POSTOFFICE.engines, i) {
    (&i.key->subscribe + ch->is_pattern)[0](i.key, name, ch->filter);
  }
  if (!FIO___PUBSUB_POSTOFFICE.filter.remote) { /* inform root process */
    FIO_LOG_DDEBUG2("(%d) informing root process of new channel.",
                    fio_io_pid());
    fio___pubsub_message_s *m =
        fio___pubsub_message_author((fio_publish_args_s){
            .id = (uint64_t)(ch->is_pattern + 1),
            .channel = FIO_BUF_INFO2(ch->name, ch->name_len),
            .filter = ch->filter,
            .is_json = FIO___PUBSUB_SUB,
        });
    fio_io_protocol_each(&FIO___PUBSUB_POSTOFFICE.protocol.ipc,
                         fio___pubsub_message_write2io,
                         m);
    fio___pubsub_message_free(m);
  }
}
/** Callback for when a channel is destroy. */
FIO_IFUNC void fio___channel_on_destroy(fio_channel_s *ch) {
  fio_buf_info_s name = FIO_BUF_INFO2(ch->name, ch->name_len);

  FIO_MAP_EACH(fio___pubsub_engines, &FIO___PUBSUB_POSTOFFICE.engines, i) {
    (&i.key->unsubscribe + ch->is_pattern)[0](i.key, name, ch->filter);
  }

  if (!FIO___PUBSUB_POSTOFFICE.filter.remote) { /* inform root process */
    fio___pubsub_message_s *m =
        fio___pubsub_message_author((fio_publish_args_s){
            .id = (uint64_t)(ch->is_pattern + 1),
            .channel = FIO_BUF_INFO2(ch->name, ch->name_len),
            .filter = ch->filter,
            .is_json = FIO___PUBSUB_UNSUB,
        });
    if (m) {
      fio_io_protocol_each(&FIO___PUBSUB_POSTOFFICE.protocol.ipc,
                           fio___pubsub_message_write2io,
                           m);
      fio___pubsub_message_free(m);
    }
  }

  FIO_LOG_DDEBUG2("(%d) pub/sub %s destroyed, filter %d, length %zu bytes: %s",
                  fio_io_pid(),
                  (ch->is_pattern ? "pattern" : "channel"),
                  (int)ch->filter,
                  (size_t)ch->name_len,
                  name.buf);
}

/* *****************************************************************************
Broadcasting for remote connections
***************************************************************************** */

FIO_IFUNC fio_u512 fio___pubsub_broadcast_compose(uint64_t tick) {
  /* [0-1]  Sender's 128 bit UUID
   * [2]    Random nonce
   * [3]    Timestamp in milliseconds
   * [4-5]  MAC
   */
  fio_u512 u = {0};
  uint64_t hello_rand = fio_rand64();
  const void *k = fio___pubsub_secret_key(hello_rand);
  u.u64[0] = FIO___PUBSUB_POSTOFFICE.uuid.u64[0];
  u.u64[1] = FIO___PUBSUB_POSTOFFICE.uuid.u64[1];
  u.u64[2] = fio_ltole64(hello_rand); /* persistent endienes required for k */
  u.u64[3] = fio_ltole64(tick);
  fio_poly1305_auth(u.u64 + 4, k, NULL, 0, u.u64, 32);
  return u;
}

FIO_SFUNC void fio___pubsub_broadcast_hello(fio_io_s *io) {

  if (!fio_io_is_running() || !(io = FIO___PUBSUB_POSTOFFICE.broadcaster))
    return;
  static int64_t last_hello = 0;
  int64_t this_hello = fio_io_last_tick();
  if (last_hello == this_hello)
    return;
  fio_u512 u = fio___pubsub_broadcast_compose((last_hello = this_hello));
  struct sockaddr_in addr = (struct sockaddr_in){
      .sin_family = AF_INET,
      .sin_port = fio_lton16((uint16_t)(uintptr_t)fio_io_udata(io)),
      .sin_addr.s_addr = INADDR_BROADCAST, // inet_addr("255.255.255.255"),
  };
  FIO_LOG_DEBUG2("(%d) pub/sub sending broadcast.", fio_io_pid());
  sendto(fio_io_fd(io),
         (const char *)u.u8,
         48,
         0,
         (struct sockaddr *)&addr,
         sizeof(addr));
}

FIO_SFUNC void fio___pubsub_broadcast_hello_task_done(void *io_, void *ignr_) {
  (void)ignr_;
  fio_io_s *io = (fio_io_s *)io_;
  fio_io_free(io);
}

FIO_SFUNC int fio___pubsub_broadcast_hello_task(void *io_, void *ignr_) {
  (void)ignr_;
  fio_io_s *io = (fio_io_s *)io_;
  fio___pubsub_broadcast_hello(io);
  return 0;
}

FIO_SFUNC int fio___pubsub_broadcast_hello_validate(uint64_t *hello) {
  uint64_t mac[2] = {0};
  /* test server UUID (ignore self generated messages) */
  if (hello[0] == FIO___PUBSUB_POSTOFFICE.uuid.u64[0] &&
      hello[1] == FIO___PUBSUB_POSTOFFICE.uuid.u64[1])
    return -1;
  /* test time window */
  mac[0] = fio_io_last_tick();
  if (mac[0] > fio_ltole64(hello[3]) + 8192 ||
      mac[0] + 8192 < fio_ltole64(hello[3])) {
    FIO_LOG_SECURITY(
        "(%d) pub/sub-broadcast timing error - possible replay attack?",
        fio_io_pid());
    return -1;
  }
  /* test for duplicate connections */
  if (fio___pubsub_broadcast_connected_get(
          &FIO___PUBSUB_POSTOFFICE.remote_uuids,
          hello[0],
          hello[1])) {
    FIO_LOG_DEBUG2("(%d) pub/sub-broadcast Prevented duplicate connection!",
                   fio_io_pid());
    return -1;
  }
  /* test MAC */
  const void *k = fio___pubsub_secret_key(fio_ltole64(hello[2]));
  fio_poly1305_auth(mac, k, NULL, 0, hello, 32);
  if (mac[0] != hello[4] || mac[1] != hello[5]) {
    FIO_LOG_SECURITY("(%d) pub/sub-broadcast MAC failure - under attack?",
                     fio_io_pid());
    return -1;
  }
  return 0;
}
/* *****************************************************************************
Letter Listening to Remote Connections - TODO!
*****************************************************************************
*/
FIO_SFUNC void fio___pubsub_broadcast_on_attach(fio_io_s *io) {
  fio___pubsub_broadcast_hello((FIO___PUBSUB_POSTOFFICE.broadcaster = io));
  fio_io_run_every(.fn = fio___pubsub_broadcast_hello_task,
                   .udata1 = fio_io_dup(io),
                   .on_finish = fio___pubsub_broadcast_hello_task_done,
                   .every =
                       (uint32_t)(1024 |
                                  (1023 & FIO___PUBSUB_POSTOFFICE.uuid.u64[0])),
                   .repetitions = 2);
}
FIO_SFUNC void fio___pubsub_broadcast_on_close(void *ignr1_, void *ignr2_) {
  FIO___PUBSUB_POSTOFFICE.broadcaster = NULL;
  (void)ignr1_, (void)ignr2_;
}

FIO_SFUNC void fio___pubsub_broadcast_on_data(fio_io_s *io) {
  uint64_t buf[16];
  struct sockaddr from[2];
  socklen_t from_len = sizeof(from);
  ssize_t len;
  int should_say_hello = 0;
  fio___pubsub_message_s *m = fio___pubsub_message_author(
      (fio_publish_args_s){.id = FIO___PUBSUB_POSTOFFICE.uuid.u64[0],
                           .published = FIO___PUBSUB_POSTOFFICE.uuid.u64[1],
                           .is_json = FIO___PUBSUB_IDENTIFY});

  while ((len = recvfrom(fio_io_fd(io), (char *)buf, 128, 0, from, &from_len)) >
         0) {
    if (len != 48) {
      FIO_LOG_WARNING(
          "(%d) pub/sub peer detection received invalid packet (%zu bytes)!",
          fio_io_pid(),
          len);
      continue;
    }
    if (fio___pubsub_broadcast_hello_validate(buf)) {
      FIO_LOG_WARNING(
          "(%d) pub/sub peer detection received invalid packet payload!",
          fio_io_pid());
      continue;
    }
    if (fio___pubsub_broadcast_connected_get(
            &FIO___PUBSUB_POSTOFFICE.remote_uuids,
            buf[0],
            buf[1]) == buf[1]) {
      FIO_LOG_DDEBUG2("(%d) skipping peer connection - already exists",
                      fio_io_pid());
      continue; /* skip connection, already exists. */
    }
    should_say_hello |= 1;
    FIO_LOG_DDEBUG2("(%d) detected peer, should now connect", fio_io_pid());

    /* TODO: fixme! */
    char addr_buf[128];
    if (getnameinfo(from,
                    from_len,
                    addr_buf,
                    64,
                    addr_buf + 64,
                    64,
                    (NI_NUMERICHOST | NI_NUMERICHOST))) {
      FIO_LOG_ERROR("(%d) couldn't resolve peer address", fio_io_pid());
      continue;
    }
    int fd = fio_sock_open(addr_buf,
                           addr_buf + 64,
                           FIO_SOCK_NONBLOCK | FIO_SOCK_CLIENT | FIO_SOCK_TCP);
    if (fd == -1) {
      FIO_LOG_ERROR("couldn't connect to cluster peer: %s", strerror(errno));
      continue;
    }
    fio___pubsub_broadcast_connected_set(&FIO___PUBSUB_POSTOFFICE.remote_uuids,
                                         addr_buf[0],
                                         addr_buf[1]);
    fio_io_s *peer = fio_io_attach_fd(fd,
                                      &FIO___PUBSUB_POSTOFFICE.protocol.remote,
                                      NULL,
                                      NULL);
    fio___pubsub_message_write2io(peer, m);
    FIO_LOG_INFO("(%d) pub/sub-cluster connecting to peer (%zu connections).",
                 fio_io_pid(),
                 fio___pubsub_broadcast_connected_count(
                     &FIO___PUBSUB_POSTOFFICE.remote_uuids));
  }
  fio___pubsub_message_free(m);
  if (should_say_hello)
    fio_io_run_every(.fn = fio___pubsub_broadcast_hello_task,
                     .udata1 = fio_io_dup(io),
                     .on_finish = fio___pubsub_broadcast_hello_task_done,
                     .every =
                         (uint32_t)(1024 |
                                    (1023 &
                                     FIO___PUBSUB_POSTOFFICE.uuid.u64[0])));
}

FIO_SFUNC void fio___pubsub_broadcast_on_incoming(fio_io_s *io) {
  int fd;
  while ((fd = accept(fio_io_fd(io), NULL, NULL)) != -1) {
    FIO_LOG_DDEBUG2("(%d) accepting a cluster peer connection", fio_io_pid());
    fio_io_attach_fd(fd, &FIO___PUBSUB_POSTOFFICE.protocol.remote, NULL, NULL);
  }
  FIO_LOG_INFO("(%d) (cluster) accepted new peer(s) (%zu connections).",
               fio_io_pid(),
               fio___pubsub_broadcast_connected_count(
                   &FIO___PUBSUB_POSTOFFICE.remote_uuids));
}

SFUNC void fio___pubsub_broadcast_on_port(void *port_) {
  int16_t port = (int16_t)(uintptr_t)port_;
  static fio_io_protocol_s broadcast = {
      .on_attach = fio___pubsub_broadcast_on_attach,
      .on_data = fio___pubsub_broadcast_on_data,
      .on_close = fio___pubsub_broadcast_on_close,
      .on_timeout = fio_io_touch,
  };
  static fio_io_protocol_s accept_remote = {
      .on_data = fio___pubsub_broadcast_on_incoming,
      .on_timeout = fio_io_touch,
  };
  if (FIO___PUBSUB_POSTOFFICE.secret_is_random) {
    FIO_LOG_ERROR(
        "(%d) Listening to cluster peer connections failed!"
        "\n\tUsing a random (non-shared) secret, cannot validate peers.",
        fio_io_pid());
    return;
  }
  if (!port || port < 0)
    port = 3333;
  FIO_STR_INFO_TMP_VAR(url, 32);
  url.buf[0] = ':';
  url.len = 1;
  fio_string_write_u(&url, NULL, (uint64_t)port);

  int fd_udp =
      fio_sock_open(NULL,
                    url.buf + 1,
                    FIO_SOCK_UDP | FIO_SOCK_NONBLOCK | FIO_SOCK_SERVER);
  FIO_ASSERT(fd_udp != -1, "couldn't open broadcast socket!");
  int fd_tcp =
      fio_sock_open(NULL,
                    url.buf + 1,
                    FIO_SOCK_TCP | FIO_SOCK_NONBLOCK | FIO_SOCK_SERVER);
  FIO_ASSERT(fd_tcp != -1, "couldn't open cluster-peer listening socket!");
  {
#if FIO_OS_WIN
    char enabled = 1;
#else
    int enabled = 1;
#endif
    setsockopt(fd_udp, SOL_SOCKET, SO_BROADCAST, &enabled, sizeof(enabled));
    enabled = 1;
    setsockopt(fd_udp, SOL_SOCKET, SO_REUSEADDR, &enabled, sizeof(enabled));
  }
  fio_io_attach_fd(fd_udp, &broadcast, port_, NULL);
  fio_io_attach_fd(fd_tcp, &accept_remote, NULL, NULL);
  return;
}

/** Auto-peer detection and pub/sub multi-machine clustering using `port`. */
SFUNC void fio_pubsub_broadcast_on_port(int16_t port) {
  fio_state_callback_add(FIO_CALL_PRE_START,
                         fio___pubsub_broadcast_on_port,
                         (void *)(uintptr_t)port);
}

/* *****************************************************************************
Pub/Sub Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_PUBSUB
#endif /* FIO_PUBSUB */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_HTTP_HANDLE        /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                      An HTTP connection Handle helper

See also:
https://www.rfc-editor.org/rfc/rfc9110.html



Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_HTTP_HANDLE) && !defined(H___FIO_HTTP_HANDLE___H) &&           \
    !defined(FIO___RECURSIVE_INCLUDE)
#define H___FIO_HTTP_HANDLE___H

/* *****************************************************************************
HTTP Handle Settings
***************************************************************************** */
#ifndef FIO_HTTP_EXACT_LOGGING
/**
 * By default, facil.io logs the HTTP request cycle using a fuzzy starting and
 * ending point for the time stamp.
 *
 * The fuzzy timestamp includes delays that aren't related to the HTTP request
 * and may ignore time passed due to timestamp caching.
 *
 * On the other hand, `FIO_HTTP_EXACT_LOGGING` collects exact time stamps to
 * measure the time it took to process the HTTP request (excluding time spent
 * reading / writing the data from the network).
 *
 * Due to the preference to err on the side of higher performance, fuzzy
 * time-stamping is the default.
 */
#define FIO_HTTP_EXACT_LOGGING 0
#ifndef H___FIO_IO___H
#undef FIO_HTTP_EXACT_LOGGING
#define FIO_HTTP_EXACT_LOGGING 1
#endif
#endif

#ifndef FIO_HTTP_BODY_RAM_LIMIT
/**
 * The HTTP handle automatically switches between RAM storage and file storage
 * once the HTTP body (payload) reaches a certain size. This control this point
 * of transition
 */
#define FIO_HTTP_BODY_RAM_LIMIT (1 << 17)
#endif

#ifndef FIO_HTTP_CACHE_LIMIT
/** Each of the HTTP String Caches will be limited to this String count. */
#define FIO_HTTP_CACHE_LIMIT 0 /* ((1UL << 6) + (1UL << 5)) */
#endif

#ifndef FIO_HTTP_CACHE_STR_MAX_LEN
/** The HTTP handle will avoid caching strings longer than this value. */
#define FIO_HTTP_CACHE_STR_MAX_LEN (1 << 12)
#endif

#ifndef FIO_HTTP_CACHE_USES_MUTEX
/** The HTTP cache will use a mutex to allow headers to be set concurrently. */
#define FIO_HTTP_CACHE_USES_MUTEX 1
#endif

#ifndef FIO_HTTP_PRE_CACHE_KNOWN_HEADERS
/** Adds a static cache for common HTTP header names. */
#define FIO_HTTP_PRE_CACHE_KNOWN_HEADERS 1
#endif

#ifndef FIO_HTTP_DEFAULT_INDEX_FILENAME
/** The default file name when a static file response points to a folder. */
#define FIO_HTTP_DEFAULT_INDEX_FILENAME "index"
#endif

#ifndef FIO_HTTP_STATIC_FILE_COMPLETION
/** Attempts to auto-complete static file paths with missing extensions. */
#define FIO_HTTP_STATIC_FILE_COMPLETION 1
#endif

#ifndef FIO_HTTP_LOG_X_REQUEST_START
#define FIO_HTTP_LOG_X_REQUEST_START 1
#endif

#ifndef FIO_HTTP_ENFORCE_LOWERCASE_HEADERS
/** If true, the HTTP handle will copy input header names to lower case. */
#define FIO_HTTP_ENFORCE_LOWERCASE_HEADERS 0
#endif

/* *****************************************************************************
HTTP Handle Type
***************************************************************************** */

/**
 * The HTTP Handle type.
 *
 * Note that the type is NOT designed to be thread-safe.
 */
typedef struct fio_http_s fio_http_s;

/**
 * The HTTP Controller points to all the callbacks required by the HTTP Handler.
 *
 * This allows the HTTP Handler to be somewhat protocol agnostic.
 *
 * Note: if the controller callbacks aren't thread-safe, than the `http_write`
 * function MUST NOT be called from any thread except the thread that the
 * controller is expecting.
 */
typedef struct fio_http_controller_s fio_http_controller_s;

/* *****************************************************************************
Constructor / Destructor
***************************************************************************** */

/** Create a new fio_http_s handle. */
SFUNC fio_http_s *fio_http_new(void);

/** Creates a copy of an existing handle, copying only its request data. */
SFUNC fio_http_s *fio_http_new_copy_request(fio_http_s *old);

/** Reduces an fio_http_s handle's reference count or frees it. */
SFUNC void fio_http_free(fio_http_s *);

/** Increases an fio_http_s handle's reference count. */
SFUNC fio_http_s *fio_http_dup(fio_http_s *);

/** Destroyed the HTTP handle object, freeing all allocated resources. */
SFUNC fio_http_s *fio_http_destroy(fio_http_s *h);

/** Collects an updated timestamp for logging purposes. */
SFUNC void fio_http_start_time_set(fio_http_s *);

/** Clears any response data. */
SFUNC fio_http_s *fio_http_clear_response(fio_http_s *h, bool clear_body);

/* *****************************************************************************
Opaque User and Controller Data
***************************************************************************** */

/** Gets the opaque user pointer associated with the HTTP handle. */
FIO_IFUNC void *fio_http_udata(fio_http_s *);

/** Sets the opaque user pointer associated with the HTTP handle. */
FIO_IFUNC void *fio_http_udata_set(fio_http_s *, void *);

/** Gets the second opaque user pointer associated with the HTTP handle. */
FIO_IFUNC void *fio_http_udata2(fio_http_s *);

/** Sets a second opaque user pointer associated with the HTTP handle. */
FIO_IFUNC void *fio_http_udata2_set(fio_http_s *, void *);

/** Gets the HTTP Controller associated with the HTTP handle. */
FIO_IFUNC fio_http_controller_s *fio_http_controller(fio_http_s *h);

/** Gets the HTTP Controller associated with the HTTP handle. */
FIO_IFUNC fio_http_controller_s *fio_http_controller_set(
    fio_http_s *h,
    fio_http_controller_s *controller);

/** Returns the existing controller data (`void *` pointer). */
FIO_IFUNC void *fio_http_cdata(fio_http_s *h);

/** Sets a new controller data (`void *` pointer). */
FIO_IFUNC void *fio_http_cdata_set(fio_http_s *h, void *cdata);

/* *****************************************************************************
Data associated with the Request (usually set by the HTTP protocol)
***************************************************************************** */

/** Gets the status associated with the HTTP handle (response). */
SFUNC size_t fio_http_status(fio_http_s *);

/** Sets the status associated with the HTTP handle (response). */
SFUNC size_t fio_http_status_set(fio_http_s *, size_t status);

/** Gets the method information associated with the HTTP handle. */
SFUNC fio_str_info_s fio_http_method(fio_http_s *);

/** Sets the method information associated with the HTTP handle. */
SFUNC fio_str_info_s fio_http_method_set(fio_http_s *, fio_str_info_s);

/** Gets the path information associated with the HTTP handle. */
SFUNC fio_str_info_s fio_http_path(fio_http_s *);

/** Sets the path information associated with the HTTP handle. */
SFUNC fio_str_info_s fio_http_path_set(fio_http_s *, fio_str_info_s);

/** Gets the query information associated with the HTTP handle. */
SFUNC fio_str_info_s fio_http_query(fio_http_s *);

/** Sets the query information associated with the HTTP handle. */
SFUNC fio_str_info_s fio_http_query_set(fio_http_s *, fio_str_info_s);

/** Gets the version information associated with the HTTP handle. */
SFUNC fio_str_info_s fio_http_version(fio_http_s *);

/** Sets the version information associated with the HTTP handle. */
SFUNC fio_str_info_s fio_http_version_set(fio_http_s *, fio_str_info_s);

/**
 * Gets the header information associated with the HTTP handle.
 *
 * Since more than a single value may be associated with a header name, the
 * index may be used to collect subsequent values.
 *
 * An empty value is returned if no header value is available (or index is
 * exceeded).
 */
SFUNC fio_str_info_s fio_http_request_header(fio_http_s *,
                                             fio_str_info_s name,
                                             size_t index);

/**
 * Returns the number of headers named `name` that were received.
 *
 * If `name` buffer is `NULL`, returns the number of unique headers (not the
 * number of unique values).
 */
SFUNC size_t fio_http_request_header_count(fio_http_s *, fio_str_info_s name);

/** Sets the header information associated with the HTTP handle. */
SFUNC fio_str_info_s fio_http_request_header_set(fio_http_s *,
                                                 fio_str_info_s name,
                                                 fio_str_info_s value);

/** Sets the header information associated with the HTTP handle. */
SFUNC fio_str_info_s
fio_http_request_header_set_if_missing(fio_http_s *,
                                       fio_str_info_s name,
                                       fio_str_info_s value);

/** Adds to the header information associated with the HTTP handle. */
SFUNC fio_str_info_s fio_http_request_header_add(fio_http_s *,
                                                 fio_str_info_s name,
                                                 fio_str_info_s value);

/**
 * Iterates through all request headers (except cookies!).
 *
 * A non-zero return will stop iteration.
 *
 * Returns the number of iterations performed. If `callback` is `NULL`, returns
 * the number of headers available (multi-value headers are counted as 1).
 * */
SFUNC size_t fio_http_request_header_each(fio_http_s *,
                                          int (*callback)(fio_http_s *,
                                                          fio_str_info_s name,
                                                          fio_str_info_s value,
                                                          void *udata),
                                          void *udata);

/** Gets the body (payload) length associated with the HTTP handle. */
SFUNC size_t fio_http_body_length(fio_http_s *);

/** Adjusts the body's reading position. Negative values start at the end. */
SFUNC size_t fio_http_body_seek(fio_http_s *, ssize_t pos);

/** Reads up to `length` of data from the body, returns nothing on EOF. */
SFUNC fio_str_info_s fio_http_body_read(fio_http_s *, size_t length);

/**
 * Reads from the body until finding `token`, reaching `limit` or EOF.
 *
 * Note: `limit` is ignored if zero or if the remaining data is lower than
 * limit.
 */
SFUNC fio_str_info_s fio_http_body_read_until(fio_http_s *,
                                              char token,
                                              size_t limit);

/** Allocates a body (payload) of (at least) the `expected_length`. */
SFUNC void fio_http_body_expect(fio_http_s *, size_t expected_length);

/** Writes `data` to the body (payload) associated with the HTTP handle. */
SFUNC void fio_http_body_write(fio_http_s *, const void *data, size_t len);

/**
 * If the body is stored in a temporary file, returns the file's handle.
 *
 * Otherwise returns -1.
 */
SFUNC int fio_http_body_fd(fio_http_s *);

/* *****************************************************************************
Cookies
***************************************************************************** */

/**
 * Possible values for the `same_site` property in the cookie settings.
 *
 * See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie
 */
typedef enum fio_http_cookie_same_site_e {
  /** allow the browser to dictate this property */
  FIO_HTTP_COOKIE_SAME_SITE_BROWSER_DEFAULT = 0,
  /** The browser sends the cookie with cross-site and same-site requests. */
  FIO_HTTP_COOKIE_SAME_SITE_NONE,
  /**
   * The cookie is withheld on cross-site sub-requests.
   *
   * The cookie is sent when a user navigates to the URL from an external
   * site.
   */
  FIO_HTTP_COOKIE_SAME_SITE_LAX,
  /** The browser sends the cookie only for same-site requests. */
  FIO_HTTP_COOKIE_SAME_SITE_STRICT,
} fio_http_cookie_same_site_e;

/**
 * This is a helper for setting cookie data.
 *
 * This struct is used together with the `fio_http_cookie_set` macro. i.e.:
 *
 *       fio_http_set_cookie(h,
 *                      .name = FIO_STR_INFO1("my_cookie"),
 *                      .value = FIO_STR_INFO1("data"));
 *
 */
typedef struct fio_http_cookie_args_s {
  /** The cookie's name. */
  fio_str_info_s name;
  /** The cookie's value (leave blank to delete cookie). */
  fio_str_info_s value;
  /** The cookie's domain (optional). */
  fio_str_info_s domain;
  /** The cookie's path (optional). */
  fio_str_info_s path;
  /** Max Age (how long should the cookie persist), in seconds (0 == session).*/
  int max_age;
  /** SameSite value. */
  fio_http_cookie_same_site_e same_site;
  /** Limit cookie to secure connections.*/
  unsigned secure : 1;
  /** Limit cookie to HTTP (intended to prevent JavaScript access/hijacking).*/
  unsigned http_only : 1;
  /**
   * Set the Partitioned (third party) cookie flag:
   * https://developer.mozilla.org/en-US/docs/Web/Privacy/Partitioned_cookies
   */
  unsigned partitioned : 1;
} fio_http_cookie_args_s;

/**
 * Sets a response cookie.
 *
 * Returns -1 on error and 0 on success.
 *
 * Note: Long cookie names and long cookie values will be considered a security
 * violation and an error will be returned. Many browsers and proxies impose
 * limits on headers and cookies, cookies often limited to 4Kb in total for both
 * name and value.
 */
SFUNC int fio_http_cookie_set(fio_http_s *h, fio_http_cookie_args_s);

/** Named arguments helper. See fio_http_cookie_args_s for details. */
#define fio_http_cookie_set(http___handle, ...)                                \
  fio_http_cookie_set((http___handle), (fio_http_cookie_args_s){__VA_ARGS__})

/** Returns a cookie value (either received of newly set), if any. */
SFUNC fio_str_info_s fio_http_cookie(fio_http_s *,
                                     const char *name,
                                     size_t name_len);

/** Iterates through all cookies. A non-zero return will stop iteration. */
SFUNC size_t fio_http_cookie_each(fio_http_s *,
                                  int (*callback)(fio_http_s *,
                                                  fio_str_info_s name,
                                                  fio_str_info_s value,
                                                  void *udata),
                                  void *udata);

/**
 * Iterates through all response set cookies.
 *
 * A non-zero return value from the callback will stop iteration.
 */
SFUNC size_t
fio_http_set_cookie_each(fio_http_s *h,
                         int (*callback)(fio_http_s *,
                                         fio_str_info_s set_cookie_header,
                                         fio_str_info_s value,
                                         void *udata),
                         void *udata);

/* *****************************************************************************
Responding to an HTTP event.
***************************************************************************** */

/** Returns true if no HTTP headers / data was sent (a clean slate). */
SFUNC int fio_http_is_clean(fio_http_s *);

/** Returns true if the HTTP handle's response was sent. */
SFUNC int fio_http_is_finished(fio_http_s *);

/** Returns true if the HTTP handle's response is streaming. */
SFUNC int fio_http_is_streaming(fio_http_s *);

/** Returns true if the HTTP connection was (or should have been) upgraded. */
SFUNC int fio_http_is_upgraded(fio_http_s *h);

/** Returns true if the HTTP handle refers to a WebSocket connection. */
SFUNC int fio_http_is_websocket(fio_http_s *);

/** Returns true if the HTTP handle refers to an EventSource connection. */
SFUNC int fio_http_is_sse(fio_http_s *);

/** Returns true if handle is in the process of freeing itself. */
SFUNC int fio_http_is_freeing(fio_http_s *);

/**
 * Gets the header information associated with the HTTP handle.
 *
 * Since more than a single value may be associated with a header name, the
 * index may be used to collect subsequent values.
 *
 * An empty value is returned if no header value is available (or index is
 * exceeded).
 *
 * If the response headers were already sent, the returned value is always
 * empty.
 */
SFUNC fio_str_info_s fio_http_response_header(fio_http_s *,
                                              fio_str_info_s name,
                                              size_t index);
/**
 * Returns the number of headers named `name` in the response.
 *
 * If `name` buffer is `NULL`, returns the number of unique headers (not the
 * number of unique values).
 */
SFUNC size_t fio_http_response_header_count(fio_http_s *, fio_str_info_s name);

/**
 * Sets the header information associated with the HTTP handle.
 *
 * If the response headers were already sent, the returned value is always
 * empty.
 */
SFUNC fio_str_info_s fio_http_response_header_set(fio_http_s *,
                                                  fio_str_info_s name,
                                                  fio_str_info_s value);
/**
 * Sets the header information associated with the HTTP handle.
 *
 * If the response headers were already sent, the returned value is always
 * empty.
 */
SFUNC fio_str_info_s
fio_http_response_header_set_if_missing(fio_http_s *,
                                        fio_str_info_s name,
                                        fio_str_info_s value);

/**
 * Adds to the header information associated with the HTTP handle.
 *
 * If the response headers were already sent, the returned value is always
 * empty.
 */
SFUNC fio_str_info_s fio_http_response_header_add(fio_http_s *,
                                                  fio_str_info_s name,
                                                  fio_str_info_s value);

/**
 * Iterates through all response headers (except cookies!).
 *
 * A non-zero return will stop iteration.
 * */
SFUNC size_t fio_http_response_header_each(fio_http_s *,
                                           int (*callback)(fio_http_s *,
                                                           fio_str_info_s name,
                                                           fio_str_info_s value,
                                                           void *udata),
                                           void *udata);

/** Arguments for the fio_http_write function. */
typedef struct fio_http_write_args_s {
  /** The data to be written. */
  const void *buf;
  /** The length of the data to be written. */
  size_t len;
  /** The offset at which writing should begin. */
  size_t offset;
  /** If streaming a file, set this value. The file is always closed. */
  int fd;
  /** If the data is a buffer, this callback may be set to free it once sent. */
  void (*dealloc)(void *);
  /** If the data is a buffer / a file - should it be copied? */
  int copy;
  /**
   * If `finish` is set, this data marks the end of the response.
   *
   * Otherwise the response will stream the data.
   */
  int finish;
} fio_http_write_args_s;

/**
 * Writes `data` to the response body associated with the HTTP handle after
 * sending all headers (no further headers may be sent).
 */
SFUNC void fio_http_write(fio_http_s *, fio_http_write_args_s args);

/** Named arguments helper. See fio_http_write and fio_http_write_args_s. */
#define fio_http_write(http_handle, ...)                                       \
  fio_http_write(http_handle, (fio_http_write_args_s){__VA_ARGS__})
#define fio_http_finish(http_handle) fio_http_write(http_handle, .finish = 1)

/** Closes a persistent HTTP connection (i.e., if upgraded). */
SFUNC void fio_http_close(fio_http_s *h);

/* *****************************************************************************
WebSocket / SSE Helpers
***************************************************************************** */

/** Returns non-zero if request headers ask for a WebSockets Upgrade.*/
SFUNC int fio_http_websocket_requested(fio_http_s *);

/** Returns non-zero if the response accepts a WebSocket upgrade request. */
SFUNC int fio_http_websocket_accepted(fio_http_s *h);

/** Sets response data to agree to a WebSockets Upgrade.*/
SFUNC void fio_http_upgrade_websocket(fio_http_s *);

/** Sets request data to request a WebSockets Upgrade.*/
SFUNC void fio_http_websocket_set_request(fio_http_s *);

/** Returns non-zero if request headers ask for an EventSource (SSE) Upgrade.*/
SFUNC int fio_http_sse_requested(fio_http_s *);

/** Returns non-zero if the response accepts an SSE request. */
SFUNC int fio_http_sse_accepted(fio_http_s *h);

/** Sets response data to agree to an EventSource (SSE) Upgrade.*/
SFUNC void fio_http_upgrade_sse(fio_http_s *);

/** Sets request data to request an EventSource (SSE) Upgrade.*/
SFUNC void fio_http_sse_set_request(fio_http_s *);

/* *****************************************************************************
MIME File Type Helpers - NOT thread safe!
***************************************************************************** */

/** Registers a Mime-Type to be associated with the file extension. */
SFUNC int fio_http_mimetype_register(char *file_ext,
                                     size_t file_ext_len,
                                     fio_str_info_s mime_type);

/** Finds the Mime-Type associated with the file extension (if registered). */
SFUNC fio_str_info_s fio_http_mimetype(char *file_ext, size_t file_ext_len);

/* *****************************************************************************
HTTP Body Parsing Helpers (TODO!)
***************************************************************************** */

/* *****************************************************************************
Header Parsing Helpers
***************************************************************************** */

/**
 * Copies all header data, from possibly an array of identical response headers,
 * resulting in a parsed format outputted to `buf_parsed`.
 *
 * Returns 0 on success or -1 on error (i.e., `buf_parsed.capa` wasn't enough
 * for the parsed output).
 *
 * Note that the parsed output isn't readable as a string, but is designed to
 * work with the `FIO_HTTP_PARSED_HEADER_EACH` and
 * `FIO_HTTP_HEADER_VALUE_EACH_PROPERTY` property.
 *
 * See also `fio_http_response_header_parse`.
 */
SFUNC int fio_http_response_header_parse(fio_http_s *h,
                                         fio_str_info_s *buf_parsed,
                                         fio_str_info_s header_name);

/**
 * Copies all header data, from possibly an array of identical response headers,
 * resulting in a parsed format outputted to `buf_parsed`.
 *
 * Returns 0 on success or -1 on error (i.e., `buf_parsed.capa` wasn't enough
 * for the parsed output).
 *
 * Note that the parsed output isn't readable as a string, but is designed to
 * work with the `FIO_HTTP_PARSED_HEADER_EACH` and
 * `FIO_HTTP_HEADER_VALUE_EACH_PROPERTY` property.
 *
 * i.e.:
 *
 * ```c
 *  FIO_STR_INFO_TMP_VAR(buf, 1023); // tmp buffer for the parsed output
 *  fio_http_s *h = fio_http_new();  // using a mock HTTP handle
 *  fio_http_request_header_add(
 *      h,
 *      FIO_STR_INFO2("accept", 6),
 *      FIO_STR_INFO1("text/html, application/json;q=0.9; d=500, image/png"));
 *  fio_http_request_header_add(h,
 *                              FIO_STR_INFO2("accept", 6),
 *                              FIO_STR_INFO1("text/yaml"));
 *  FIO_ASSERT(  // in production do NOT assert, but route to error instead!
 *      !fio_http_request_header_parse(h, &buf, FIO_STR_INFO2("accept", 6)),
 *      "parse returned error!");
 *  FIO_HTTP_PARSED_HEADER_EACH(buf, value) {
 *    printf("* processing value (%zu bytes): %s\n", value.len, value.buf);
 *    FIO_HTTP_HEADER_VALUE_EACH_PROPERTY(value, prop) {
 *      printf("* for value %s: (%zu,%zu bytes) %s = %s\n",
 *             value.buf,
 *             prop.name.len,
 *             prop.value.len,
 *             prop.name.buf,
 *             prop.value.buf);
 *    }
 *  }
 * ```
 */
SFUNC int fio_http_request_header_parse(fio_http_s *h,
                                        fio_str_info_s *buf_parsed,
                                        fio_str_info_s header_name);

/**
 * Parses header for multiple values and properties and iterates over all
 * values.
 *
 * This MACRO will allocate 2048 bytes on the stack for parsing the header
 * values and properties, if more space is necessary dig deeper.
 *
 * Use FIO_HTTP_HEADER_VALUE_EACH_PROPERTY to iterate over a value's properties.
 */
#define FIO_HTTP_HEADER_EACH_VALUE(/* fio_http_s */ http_handle,               \
                                   /* int / bool */ is_request,                \
                                   /* fio_str_info_s */ header_name,           \
                                   /* chosen var named */ value)               \
  for (char fio___buf__##value##__[2048], /* allocate buffer on stack */       \
           *fio___buf__##value##_ptr = NULL;                                   \
       !fio___buf__##value##_ptr;                                              \
       fio___buf__##value##_ptr = fio___buf__##value##__)                      \
    for (fio_str_info_s fio___buf__##value##__str = /* declare buffer var */   \
         FIO_STR_INFO3(fio___buf__##value##__, 0, 2048);                       \
         fio___buf__##value##__str.buf == fio___buf__##value##__;              \
         fio___buf__##value##__str.buf = fio___buf__##value##__ + 1)           \
      if (!((is_request ? fio_http_request_header_parse                        \
                        : fio_http_response_header_parse)(                     \
              http_handle, /* parse headers */                                 \
              &fio___buf__##value##__str,                                      \
              header_name)))                                                   \
  FIO_HTTP_PARSED_HEADER_EACH(fio___buf__##value##__str, value) /* loop        \
                                                                 */

/** Iterated through the properties associated with a parsed header values. */
#define FIO_HTTP_HEADER_VALUE_EACH_PROPERTY(/* fio_str_info_s   */ value,      \
                                            /* chosen var named */ property)

/** Used internally to iterate over a parsed header buffer. */
#define FIO_HTTP_PARSED_HEADER_EACH(/* fio_str_info_s   */ buf_parsed,         \
                                    /* chosen var named */ value)

/* *****************************************************************************
General Helpers
***************************************************************************** */

/** Sends the requested error message and finishes the response. */
SFUNC int fio_http_send_error_response(fio_http_s *h, size_t status);

/** Returns true (1) if the ETag response matches an if-none-match request. */
SFUNC int fio_http_etag_is_match(fio_http_s *h);

/**
 * Attempts to send a static file from the `root` folder. On success the
 * response is complete and 0 is returned. Otherwise returns -1.
 */
SFUNC int fio_http_static_file_response(fio_http_s *h,
                                        fio_str_info_s root_folder,
                                        fio_str_info_s file_name,
                                        size_t max_age);

/** Returns a human readable string related to the HTTP status number. */
SFUNC fio_str_info_s fio_http_status2str(size_t status);

/** Logs an HTTP (response) to STDOUT. */
SFUNC void fio_http_write_log(fio_http_s *h);

/**
 * Writes peer address to `dest` starting with the `forwarded` header, with a
 * fallback to actual socket address and a final fallback to `"[unknown]"`.
 *
 * If `unknown` is returned, the function returns -1. if `dest` capacity is too
 * small, the number of bytes required will be returned.
 *
 * If all goes well, this function returns 0.
 */
SFUNC int fio_http_from(fio_str_info_s *dest, const fio_http_s *h);

/* date/time string caching for HTTP date header */
SFUNC fio_str_info_s fio_http_date(uint64_t now_in_seconds);

/* date/time string caching for HTTP logging */
SFUNC fio_str_info_s fio_http_log_time(uint64_t now_in_seconds);
/* *****************************************************************************
The HTTP Controller
***************************************************************************** */

/**
 * The HTTP Controller manages all the callbacks required by the HTTP Handler in
 * order for HTTP responses and requests to be sent.
 */
struct fio_http_controller_s {
  /* MUST be initialized to zero, used internally by the HTTP Handle. */
  uintptr_t private_flags;
  /** Called when an HTTP handle is freed. */
  void (*on_destroyed)(fio_http_s *h);
  /** Informs the controller that request / response headers must be sent. */
  void (*send_headers)(fio_http_s *h);
  /** called by the HTTP handle for each body chunk, or to finish a response. */
  void (*write_body)(fio_http_s *h, fio_http_write_args_s args);
  /** called once a request / response had finished */
  void (*on_finish)(fio_http_s *h);
  /** called to close an HTTP connection */
  void (*close_io)(fio_http_s *h);
  /** called when the file descriptor is directly required */
  int (*get_fd)(fio_http_s *h);
};

/* *****************************************************************************
HTTP Handle Implementation - inlined static functions
***************************************************************************** */

#define FIO___HTTP_GETSET_PTR(type, name, index_, pre_set_code)                \
  /** Used internally to set / get the propecrty at its known pointer index.   \
   */                                                                          \
  FIO_IFUNC type *fio_http_##name(fio_http_s *h) {                             \
    return ((type **)h)[index_];                                               \
  }                                                                            \
  /** Used internally to set / get the propercty at its known pointer index.   \
   */                                                                          \
  FIO_IFUNC type *fio_http_##name##_set(fio_http_s *h, type *ptr) {            \
    pre_set_code;                                                              \
    return (((type **)h)[index_] = ptr);                                       \
  }

SFUNC fio_http_controller_s *fio___http_controller_validate(
    fio_http_controller_s *c);

/* Create fio_http_udata_(get|set) functions */
FIO___HTTP_GETSET_PTR(void, udata, 0, (void)0)
/* Create fio_http_pdata_(get|set) functions */
FIO___HTTP_GETSET_PTR(void, udata2, 1, (void)0)
/* Create fio_http_cdata_(get|set) functions */
FIO___HTTP_GETSET_PTR(void, cdata, 2, (void)0)
/* Create fio_http_controller_(get|set) functions */
FIO___HTTP_GETSET_PTR(fio_http_controller_s,
                      controller,
                      3,
                      ptr = fio___http_controller_validate(ptr))

#undef FIO___HTTP_GETSET_PTR
/*
REMEMBER:
========

All memory allocations should use:
* FIO_MEM_REALLOC_(ptr, old_size, new_size, copy_len)
* FIO_MEM_FREE_(ptr, size)

*/

/* *****************************************************************************
Header Parsing Helpers - inlined helpers
***************************************************************************** */

#define FIO___HTTP_PARSED_HEADER_VALUE              0
#define FIO___HTTP_PARSED_HEADER_PROPERTY_BLOCK_LEN 1
#define FIO___HTTP_PARSED_HEADER_PROPERTY_DATA      2

typedef struct {
  fio_str_info_s name;
  fio_str_info_s value;
} fio___http_header_property_s;

/**
 * Assumes a Buffer of bytes containing length info and string data as such:
 *   [ NUL byte - 1 byte at head of format ]
 *   repeat
 *   [ 2 byte info: (type | (len << 2)) ]
 *   [ Optional 2 byte info: (len << 2) (if type was 1)]
 *   [ String of `len` bytes][ NUL byte (not counted in `len`)]
 */

FIO_IFUNC fio_str_info_s fio___http_parsed_headers_next(fio_str_info_s value) {
  for (;;) {
    const size_t coded = (size_t)fio_buf2u16u(value.buf + value.len + 1U);
    if (!coded)
      return (value = (fio_str_info_s){0});
    const size_t block_len = coded >> 2;
    value.buf += value.len + 3;
    value.len = block_len;
    if (!(coded & 3))
      return value;
    value.buf -= 3; /* reposition to read NUL + value rather than text start */
  }
}

FIO_IFUNC fio___http_header_property_s
fio___http_parsed_property_next(fio___http_header_property_s property) {
  for (;;) {
    size_t coded =
        (size_t)fio_buf2u16u(property.value.buf + property.value.len + 1);
    if (!(coded & 3))
      return (property = (fio___http_header_property_s){{0}, {0}});
    if ((coded & 3) == FIO___HTTP_PARSED_HEADER_PROPERTY_BLOCK_LEN) {
      property.value.buf += 2;
      coded = (size_t)fio_buf2u16u(property.value.buf + property.value.len + 1);
    }
    if ((coded & 3) != 2)
      return (property = (fio___http_header_property_s){{0}, {0}});
    coded >>= 2;
    property.name.buf = property.value.buf + property.value.len + 3;
    property.name.len = coded;
    coded = (size_t)fio_buf2u16u(property.name.buf + property.name.len + 1);
    FIO_ASSERT_DEBUG((coded & 3) == 2,
                     "header property value parsing format error");
    property.value.buf = property.name.buf + property.name.len + 3;
    property.value.len = coded >> 2;
    return property;
  }
}

#undef FIO_HTTP_PARSED_HEADER_EACH
#define FIO_HTTP_PARSED_HEADER_EACH(buf_parsed, value)                         \
  for (fio_str_info_s value =                                                  \
           fio___http_parsed_headers_next(FIO_STR_INFO2(buf_parsed.buf, 0));   \
       value.len;                                                              \
       value = fio___http_parsed_headers_next(value))

#undef FIO_HTTP_HEADER_VALUE_EACH_PROPERTY
#define FIO_HTTP_HEADER_VALUE_EACH_PROPERTY(value_, property)                  \
  for (fio___http_header_property_s property =                                 \
           fio___http_parsed_property_next(                                    \
               (fio___http_header_property_s){.value = value_});               \
       property.name.len;                                                      \
       property = fio___http_parsed_property_next(property))

/* *****************************************************************************
HTTP Handle Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/* *****************************************************************************
Helpers - reading time
***************************************************************************** */

#if FIO_HTTP_EXACT_LOGGING
#define FIO___HTTP_TIME_DIV  1000000
#define FIO___HTTP_TIME_UNIT "us"
FIO_IFUNC int64_t fio_http_get_timestump(void) {
  return fio_time2micro(fio_time_real());
}
#else
#define FIO___HTTP_TIME_DIV      1000
#define FIO___HTTP_TIME_UNIT     "ms"
#define fio_http_get_timestump() fio_io_last_tick()
#endif

/* date/time string caching for HTTP date header */
SFUNC fio_str_info_s fio_http_date(uint64_t now_in_seconds) {
  static char date_buf[128];
  static size_t date_len;
  static uint64_t date_buf_val;
  if (date_buf_val == now_in_seconds)
    return FIO_STR_INFO2(date_buf, date_len);
  date_len = fio_time2rfc7231(date_buf, now_in_seconds);
  date_buf[date_len] = 0;
  date_buf_val = now_in_seconds;
  return FIO_STR_INFO2(date_buf, date_len);
}

/* date/time string caching for HTTP logging */
SFUNC fio_str_info_s fio_http_log_time(uint64_t now_in_seconds) {
  static char date_buf[128];
  static size_t date_len;
  static uint64_t date_buf_val;
  if (date_buf_val == now_in_seconds)
    return FIO_STR_INFO2(date_buf, date_len);
  date_len = fio_time2log(date_buf, now_in_seconds);
  date_buf[date_len] = 0;
  date_buf_val = now_in_seconds;
  return FIO_STR_INFO2(date_buf, date_len);
}

/* *****************************************************************************
Helpers - fio_keystr_s memory allocation callbacks
***************************************************************************** */

FIO_LEAK_COUNTER_DEF(http___keystr_allocator)

FIO_SFUNC void fio___http_keystr_free(void *ptr, size_t len) {
  if (!ptr)
    return;
  FIO_LEAK_COUNTER_ON_FREE(http___keystr_allocator);
  FIO_MEM_FREE_(ptr, len);
  (void)len; /* if unused */
}
FIO_SFUNC void *fio___http_keystr_alloc(size_t capa) {
  FIO_LEAK_COUNTER_ON_ALLOC(http___keystr_allocator);
  return FIO_MEM_REALLOC_(NULL, 0, capa, 0);
}

/* *****************************************************************************
Helper Types
***************************************************************************** */
#define FIO___RECURSIVE_INCLUDE 1
/* *****************************************************************************
String Cache
***************************************************************************** */

#define FIO_MAP_NAME fio___http_str_cache
#define FIO_MAP_LRU  FIO_HTTP_CACHE_LIMIT
#define FIO_MAP_KEY_BSTR
#include FIO_INCLUDE_FILE

static struct {
  fio___http_str_cache_s cache;
  FIO___LOCK_TYPE lock;
} FIO___HTTP_STRING_CACHE[2] = {{.lock = FIO___LOCK_INIT},
                                {.lock = FIO___LOCK_INIT}};
#define FIO___HTTP_STR_CACHE_COOKIE 0
#define FIO___HTTP_STR_CACHE_VALUE  1

#if FIO_HTTP_PRE_CACHE_KNOWN_HEADERS

#define FIO___HTTP_STATIC_CACHE_CAPA_BITS  7
#define FIO___HTTP_STATIC_CACHE_CAPA       (1U << FIO___HTTP_STATIC_CACHE_CAPA_BITS)
#define FIO___HTTP_STATIC_CACHE_MASK       (FIO___HTTP_STATIC_CACHE_CAPA - 1)
#define FIO___HTTP_STATIC_CACHE_STEP_LIMIT 4

typedef struct FIO___HTTP_STATIC_CACHE_T {
  fio___bstr_meta_s meta;
  char str[32];
} FIO___HTTP_STATIC_CACHE_T;
static FIO___HTTP_STATIC_CACHE_T FIO___HTTP_STATIC_CACHE[] = {
#define FIO___HTTP_STATIC_CACHE_SET(s)                                         \
  {                                                                            \
    .meta = {.len = (uint32_t)(sizeof(s) - 1), .ref = ((uint32_t)(~0) >> 8)},  \
    .str = s                                                                   \
  }
    FIO___HTTP_STATIC_CACHE_SET("a-im"),
    FIO___HTTP_STATIC_CACHE_SET("accept"),
    FIO___HTTP_STATIC_CACHE_SET("accept-charset"),
    FIO___HTTP_STATIC_CACHE_SET("accept-datetime"),
    FIO___HTTP_STATIC_CACHE_SET("accept-encoding"),
    FIO___HTTP_STATIC_CACHE_SET("accept-language"),
    FIO___HTTP_STATIC_CACHE_SET("accept-ranges"),
    FIO___HTTP_STATIC_CACHE_SET("access-control-allow-origin"),
    FIO___HTTP_STATIC_CACHE_SET("access-control-request-headers"),
    FIO___HTTP_STATIC_CACHE_SET("access-control-request-method"),
    FIO___HTTP_STATIC_CACHE_SET("age"),
    FIO___HTTP_STATIC_CACHE_SET("allow"),
    FIO___HTTP_STATIC_CACHE_SET("authorization"),
    FIO___HTTP_STATIC_CACHE_SET("cache-control"),
    FIO___HTTP_STATIC_CACHE_SET("connection"),
    FIO___HTTP_STATIC_CACHE_SET("content-disposition"),
    FIO___HTTP_STATIC_CACHE_SET("content-encoding"),
    FIO___HTTP_STATIC_CACHE_SET("content-language"),
    FIO___HTTP_STATIC_CACHE_SET("content-length"),
    FIO___HTTP_STATIC_CACHE_SET("content-location"),
    FIO___HTTP_STATIC_CACHE_SET("content-range"),
    FIO___HTTP_STATIC_CACHE_SET("content-type"),
    FIO___HTTP_STATIC_CACHE_SET("cookie"),
    FIO___HTTP_STATIC_CACHE_SET("date"),
    FIO___HTTP_STATIC_CACHE_SET("dnt"),
    FIO___HTTP_STATIC_CACHE_SET("etag"),
    FIO___HTTP_STATIC_CACHE_SET("expect"),
    FIO___HTTP_STATIC_CACHE_SET("expires"),
    FIO___HTTP_STATIC_CACHE_SET("forwarded"),
    FIO___HTTP_STATIC_CACHE_SET("from"),
    FIO___HTTP_STATIC_CACHE_SET("host"),
    FIO___HTTP_STATIC_CACHE_SET("if-match"),
    FIO___HTTP_STATIC_CACHE_SET("if-modified-since"),
    FIO___HTTP_STATIC_CACHE_SET("if-none-match"),
    FIO___HTTP_STATIC_CACHE_SET("if-range"),
    FIO___HTTP_STATIC_CACHE_SET("if-unmodified-since"),
    FIO___HTTP_STATIC_CACHE_SET("last-modified"),
    FIO___HTTP_STATIC_CACHE_SET("link"),
    FIO___HTTP_STATIC_CACHE_SET("location"),
    FIO___HTTP_STATIC_CACHE_SET("max-forwards"),
    FIO___HTTP_STATIC_CACHE_SET("origin"),
    FIO___HTTP_STATIC_CACHE_SET("pragma"),
    FIO___HTTP_STATIC_CACHE_SET("proxy-authenticate"),
    FIO___HTTP_STATIC_CACHE_SET("proxy-authorization"),
    FIO___HTTP_STATIC_CACHE_SET("range"),
    FIO___HTTP_STATIC_CACHE_SET("referer"),
    FIO___HTTP_STATIC_CACHE_SET("refresh"),
    FIO___HTTP_STATIC_CACHE_SET("retry-after"),
    FIO___HTTP_STATIC_CACHE_SET("sec-ch-ua"),
    FIO___HTTP_STATIC_CACHE_SET("sec-ch-ua-mobile"),
    FIO___HTTP_STATIC_CACHE_SET("sec-ch-ua-platform"),
    FIO___HTTP_STATIC_CACHE_SET("sec-fetch-dest"),
    FIO___HTTP_STATIC_CACHE_SET("sec-fetch-mode"),
    FIO___HTTP_STATIC_CACHE_SET("sec-fetch-site"),
    FIO___HTTP_STATIC_CACHE_SET("sec-fetch-user"),
    FIO___HTTP_STATIC_CACHE_SET("server"),
    FIO___HTTP_STATIC_CACHE_SET("set-cookie"),
    FIO___HTTP_STATIC_CACHE_SET("strict-transport-security"),
    FIO___HTTP_STATIC_CACHE_SET("te"),
    FIO___HTTP_STATIC_CACHE_SET("transfer-encoding"),
    FIO___HTTP_STATIC_CACHE_SET("upgrade"),
    FIO___HTTP_STATIC_CACHE_SET("upgrade-insecure-requests"),
    FIO___HTTP_STATIC_CACHE_SET("user-agent"),
    FIO___HTTP_STATIC_CACHE_SET("vary"),
    FIO___HTTP_STATIC_CACHE_SET("via"),
    FIO___HTTP_STATIC_CACHE_SET("warning"),
    FIO___HTTP_STATIC_CACHE_SET("www-authenticate"),
    FIO___HTTP_STATIC_CACHE_SET("x-csrf-token"),
    FIO___HTTP_STATIC_CACHE_SET("x-forwarded-for"),
    FIO___HTTP_STATIC_CACHE_SET("x-forwarded-host"),
    FIO___HTTP_STATIC_CACHE_SET("x-forwarded-proto"),
    FIO___HTTP_STATIC_CACHE_SET("x-requested-with"),
    {{0}}};

static uint32_t FIO___HTTP_STATIC_CACHE_IMAP[FIO___HTTP_STATIC_CACHE_CAPA];

static uint64_t fio___http_str_cached_hash(char *str, size_t len) {
  /* use low-case hash specific for the HTTP handle (change resilient) */
  const fio_u256 primes = fio_u256_init64(FIO_U64_HASH_PRIME1,
                                          FIO_U64_HASH_PRIME2,
                                          FIO_U64_HASH_PRIME3,
                                          FIO_U64_HASH_PRIME4);
  uint64_t hash = 0;
  if (len > 32)
    return hash;
  fio_u512 s = {0};
  fio_memcpy63x(s.u8, str, len);
  for (size_t i = 0; i < 4; ++i)
    s.u64[i] = fio_ltole64(s.u64[i]);
#if 0
  fio_u256_cor64(s.u256, s.u256, 0x2020202020202020ULL); /* lower case hash */
  fio_u256_cadd16(s.u256, s.u256, len);
  for (size_t i = 0; i < 4; ++i)
    s.u64[i] = fio_math_mulc64(s.u64[i], primes.u64[i], s.u64 + 4 + i);
  hash = fio_u256_reduce_add64(s.u256 + 1);
  hash ^= fio_u256_reduce_add64(s.u256);
  fio_u256_cxor64(s.u256, s.u256, hash);
  hash += fio_u256_reduce_add64(s.u256);
#else
  FIO_MATH_UXXX_COP(s.u256[0], s.u256[0], 0x2020202020202020ULL, 64, |);
  FIO_MATH_UXXX_COP(s.u256[0], s.u256[0], (uint16_t)len, 16, +);
  for (size_t i = 0; i < 4; ++i) {
    s.u64[i] = fio_math_mulc64(s.u64[i], primes.u64[i], s.u64 + 4 + i);
  }
  uint64_t tmp;
  FIO_MATH_UXXX_REDUCE(hash, s.u256[1], 64, +);
  FIO_MATH_UXXX_REDUCE(tmp, s.u256[0], 64, +);
  hash ^= tmp;
  FIO_MATH_UXXX_COP(s.u256[0], s.u256[0], hash, 64, ^);
  FIO_MATH_UXXX_REDUCE(tmp, s.u256[0], 64, +);
  hash += tmp;
#endif
  // hash += hash >> 4;
  hash += hash >> 5;
  return hash;
}

#ifndef FIO___HTTP_STATIC_CACHE_CMP_SECURE
#define FIO___HTTP_STATIC_CACHE_CMP_SECURE 0
#endif
static bool fio___http_str_cached_cmp(void *arry, void *obj, uint32_t indx) {
  FIO___HTTP_STATIC_CACHE_T *ary = (FIO___HTTP_STATIC_CACHE_T *)arry;
  if (indx >
      ((sizeof(FIO___HTTP_STATIC_CACHE) / sizeof(FIO___HTTP_STATIC_CACHE[0])) -
       1))
    return 0;
  fio_buf_info_s *s = (fio_buf_info_s *)obj;
  fio_buf_info_s t = FIO_BUF_INFO2(ary[indx].str, ary[indx].meta.len);
#if FIO___HTTP_STATIC_CACHE_CMP_SECURE
  return FIO_BUF_INFO_IS_EQ((*s), t);
#else
  return s[0].len == t.len && s[0].buf[0] == (t.buf[0] | 32);
#endif
}
#undef FIO___HTTP_STATIC_CACHE_CMP_SECURE

static char *fio___http_str_cached_static(char *str, size_t len) {
  if (len >= 32)
    return NULL;
  fio_buf_info_s obj = FIO_BUF_INFO2(str, len);
  uint64_t hash = fio___http_str_cached_hash(obj.buf, obj.len);
  fio___imap32_seeker_s pos =
      fio___imap32_seek((void *)FIO___HTTP_STATIC_CACHE,
                        FIO___HTTP_STATIC_CACHE_IMAP,
                        FIO___HTTP_STATIC_CACHE_CAPA_BITS,
                        (void *)&obj,
                        (uint32_t)hash,
                        fio___http_str_cached_cmp,
                        FIO___HTTP_STATIC_CACHE_STEP_LIMIT);
  if (!pos.is_valid)
    return NULL;
  ++FIO___HTTP_STATIC_CACHE[pos.pos].meta.ref;
  return FIO___HTTP_STATIC_CACHE[pos.pos].str;
}

static void fio___http_str_cached_init(void) {
  FIO_MEMSET(FIO___HTTP_STATIC_CACHE_IMAP,
             0,
             sizeof(FIO___HTTP_STATIC_CACHE_IMAP));

  for (size_t i = 0; FIO___HTTP_STATIC_CACHE[i].meta.ref; ++i) {
    fio_buf_info_s obj = FIO_BUF_INFO2(FIO___HTTP_STATIC_CACHE[i].str,
                                       FIO___HTTP_STATIC_CACHE[i].meta.len);
    uint64_t hash = fio___http_str_cached_hash(obj.buf, obj.len);
    fio___imap32_seeker_s pos =
        fio___imap32_seek((void *)FIO___HTTP_STATIC_CACHE,
                          FIO___HTTP_STATIC_CACHE_IMAP,
                          FIO___HTTP_STATIC_CACHE_CAPA_BITS,
                          (void *)&obj,
                          (uint32_t)hash,
                          fio___http_str_cached_cmp,
                          FIO___HTTP_STATIC_CACHE_STEP_LIMIT);
    FIO_ASSERT(!pos.is_valid && pos.ipos < FIO___HTTP_STATIC_CACHE_CAPA &&
                   !FIO___HTTP_STATIC_CACHE_IMAP[pos.ipos],
               "HTTP static cache collision / overflow @ %zu (%s)",
               i,
               obj.buf);

    pos.set_val |= i;
    fio___imap32_set(FIO___HTTP_STATIC_CACHE_IMAP, pos.ipos, pos.set_val);

    FIO_ASSERT(fio___http_str_cached_static(obj.buf, obj.len) == obj.buf,
               "HTTP static cache initialization round-trip error @ %zu (%s)",
               i,
               obj.buf);
  }
}

#undef FIO___HTTP_STATIC_CACHE_CAPA_BITS
#undef FIO___HTTP_STATIC_CACHE_CAPA
#undef FIO___HTTP_STATIC_CACHE_MASK
#undef FIO___HTTP_STATIC_CACHE_STEP_LIMIT
#else
#define fio___http_str_cached_init() (void)0
#endif /* FIO_HTTP_PRE_CACHE_KNOWN_HEADERS */

FIO_IFUNC char *fio___http_str_cached_inner(size_t group,
                                            uint64_t hash,
                                            fio_str_info_s s) {
#if !FIO_HTTP_CACHE_LIMIT
  return fio_bstr_write(NULL, s.buf, s.len);
#endif
  fio_str_info_s cached;
  hash ^= (uint64_t)(uintptr_t)fio_http_new;
#if FIO_HTTP_CACHE_USES_MUTEX
  FIO___LOCK_LOCK(FIO___HTTP_STRING_CACHE[group].lock);
#endif
  cached =
      fio___http_str_cache_set_if_missing(&FIO___HTTP_STRING_CACHE[group].cache,
                                          hash,
                                          s);
#if FIO_HTTP_CACHE_USES_MUTEX
  FIO___LOCK_UNLOCK(FIO___HTTP_STRING_CACHE[group].lock);
#endif
  return fio_bstr_copy(cached.buf);
}
FIO_IFUNC char *fio___http_str_cached(size_t group, fio_str_info_s s) {
#if !FIO_HTTP_CACHE_LIMIT
  return fio_bstr_write(NULL, s.buf, s.len);
#endif
  if (!s.len)
    return NULL;
  if (s.len > FIO_HTTP_CACHE_STR_MAX_LEN)
    goto avoid_caching;
  return fio___http_str_cached_inner(group, fio_risky_hash(s.buf, s.len, 0), s);
avoid_caching:
  return fio_bstr_write(NULL, s.buf, s.len);
}

FIO_IFUNC char *fio___http_str_cached_with_static(fio_str_info_s s) {
#if FIO_HTTP_PRE_CACHE_KNOWN_HEADERS
  char *tmp;
  if (!s.len)
    return NULL;
  if (s.len > FIO_HTTP_CACHE_STR_MAX_LEN)
    goto skip_cache_test;
  tmp = fio___http_str_cached_static(s.buf, s.len);
  if (tmp) {
    FIO_LOG_DDEBUG2("(%d) using statically cached header: %s",
                    fio_io_pid(),
                    tmp);
    return tmp; /* reference count increased by fio___http_str_cached_static */
  }
skip_cache_test:
#endif /* FIO_HTTP_PRE_CACHE_KNOWN_HEADERS */
  return fio_bstr_write(NULL, s.buf, s.len);
}

/* *****************************************************************************
Headers Maps
***************************************************************************** */

#define FIO_ARRAY_NAME              fio___http_sary
#define FIO_ARRAY_TYPE              char *
#define FIO_ARRAY_TYPE_DESTROY(obj) fio_bstr_free(obj)

#define FIO_MAP_NAME                 fio___http_hmap
#define FIO_MAP_KEY                  fio_str_info_s
#define FIO_MAP_KEY_INTERNAL         char *
#define FIO_MAP_KEY_FROM_INTERNAL(k) fio_bstr_info((k))
#define FIO_MAP_KEY_CMP(a, b)        fio_bstr_is_eq2info((a), (b))
#define FIO_MAP_KEY_DESTROY(key)     fio_bstr_free((key))
#define FIO_MAP_KEY_COPY(dest, src)                                            \
  (dest) = fio___http_str_cached_with_static((src))
#define FIO_MAP_KEY_DISCARD(key)
#define FIO_MAP_VALUE fio___http_sary_s
#define FIO_MAP_VALUE_COPY(a, b)                                               \
  do {                                                                         \
    (a) = (fio___http_sary_s)FIO_ARRAY_INIT;                                   \
    (void)(b);                                                                 \
  } while (0) /*no-op*/
#define FIO_MAP_VALUE_DESTROY(o) fio___http_sary_destroy(&(o))
#define FIO_MAP_HASH_FN(k)                                                     \
  fio_risky_hash((k).buf, (k).len, (uint64_t)(uintptr_t)fio___http_sary_destroy)
#include FIO_INCLUDE_FILE

#if FIO_HTTP_ENFORCE_LOWERCASE_HEADERS
#define FIO___HTTP_ENFORCE_LOWERCASE(var_name, inpute_var)                     \
  FIO_STR_INFO_TMP_VAR(var_name, 4096);                                        \
  fio___http_hmap_key_to_lower(&var_name, &inpute_var);

/** Converts a Header key to lower-case */
FIO_IFUNC void fio___http_hmap_key_to_lower(fio_str_info_s *t,
                                            fio_str_info_s *k) {
  if (k->len >= t->capa)
    goto too_big;
  for (size_t i = 0; i < k->len; ++i) {
    uint8_t c = (uint8_t)k->buf[i];
    c |= (uint8_t)(c >= 'A' || c <= 'Z') << 5;
    t->buf[i] = c;
  }
  t->len = k->len;
  return;
too_big:
  *t = *k;
}

#else
#define FIO___HTTP_ENFORCE_LOWERCASE(var_name, inpute_var)                     \
  fio_str_info_s var_name = inpute_var;
#endif

/** set `add` to positive to add multiple values or negative to overwrite. */
FIO_IFUNC fio_str_info_s fio___http_hmap_set2(fio___http_hmap_s *map,
                                              fio_str_info_s key_input,
                                              fio_str_info_s val,
                                              int add) {
  fio_str_info_s r = {0};
  if (!key_input.buf || !key_input.len || !map)
    return r;
  /* make sure key is all lower-case? */
  FIO___HTTP_ENFORCE_LOWERCASE(key, key_input);
  fio___http_sary_s *o;
  if (!val.buf || !val.len)
    goto remove_key;
  o = fio___http_hmap_node2val_ptr(fio___http_hmap_get_ptr(map, key));
  if (!o) {
    fio___http_sary_s va = {0};
    o = fio___http_hmap_node2val_ptr(
        fio___http_hmap_set_ptr(map, key, va, NULL, 1));
    add = 1;
  }
  if (FIO_UNLIKELY(!o)) {
    FIO_LOG_ERROR("Couldn't add value to header: %.*s:%.*s",
                  (int)key.len,
                  key.buf,
                  (int)val.len,
                  val.buf);
    return r;
  }
  if (add) {
    if (add < 0) {
      fio___http_sary_destroy(o);
    }
    r = fio_bstr_info(fio___http_str_cached(FIO___HTTP_STR_CACHE_VALUE, val));
    fio___http_sary_push(o, r.buf);
    return r;
  }
  r = fio_bstr_info(fio___http_sary_get(o, -1));
  return r;

remove_key:
  if (add < 1)
    fio___http_hmap_remove(map, key, NULL);
  return r;
}

FIO_IFUNC fio_str_info_s fio___http_hmap_get2(fio___http_hmap_s *map,
                                              fio_str_info_s key_input,
                                              int32_t index) {
  fio_str_info_s r = {0};
  FIO___HTTP_ENFORCE_LOWERCASE(key, key_input);
  fio___http_sary_s *a =
      fio___http_hmap_node2val_ptr(fio___http_hmap_get_ptr(map, key));
  if (!a)
    return r;
  const uint32_t count = fio___http_sary_count(a);
  if (!count)
    return r;
  if (index < 0) {
    index += count;
    if (index < 0)
      index = 0;
  }
  if ((uint32_t)index >= count)
    return r;
  r = fio_bstr_info(fio___http_sary_get(a, index));
  return r;
}

FIO_IFUNC size_t fio___http_hmap_count2(fio___http_hmap_s *map,
                                        fio_str_info_s key) {
  size_t r = 0;
  fio___http_sary_s *a =
      fio___http_hmap_node2val_ptr(fio___http_hmap_get_ptr(map, key));
  if (!a)
    return r;
  r = fio___http_sary_count(a);
  return r;
}

/* *****************************************************************************
Header iteration Task
***************************************************************************** */

typedef struct {
  fio_http_s *h;
  int (*callback)(fio_http_s *, fio_str_info_s, fio_str_info_s, void *);
  void *udata;
} fio___http_hmap_each_info_s;

FIO_SFUNC int fio___http_h_each_task_wrapper(fio___http_hmap_each_s *e) {
  fio___http_hmap_each_info_s *data = (fio___http_hmap_each_info_s *)(e->udata);
  FIO_ARRAY_EACH(fio___http_sary, &e->value, pos) {
    if (data->callback(data->h, e->key, fio_bstr_info(*pos), data->udata) == -1)
      return -1;
  }
  return 0;
}

/* *****************************************************************************
Cookie Maps
***************************************************************************** */

#define FIO_MAP_NAME                 fio___http_cmap /* cached names */
#define FIO_MAP_KEY                  fio_str_info_s
#define FIO_MAP_KEY_INTERNAL         char *
#define FIO_MAP_KEY_FROM_INTERNAL(k) fio_bstr_info((k))
#define FIO_MAP_KEY_CMP(a, b)        fio_bstr_is_eq2info((a), (b))
#define FIO_MAP_KEY_DESTROY(key)     fio_bstr_free((key))
#define FIO_MAP_KEY_COPY(dest, src)                                            \
  (dest) = fio___http_str_cached(FIO___HTTP_STR_CACHE_COOKIE, (src))
#define FIO_MAP_KEY_DISCARD(key)

#define FIO_MAP_VALUE_BSTR /* not cached */
#define FIO_MAP_HASH_FN(k)                                                     \
  fio_risky_hash((k).buf, (k).len, (uint64_t)(uintptr_t)fio___http_cmap_destroy)
#include FIO_INCLUDE_FILE

/* *****************************************************************************
Controller Validation
***************************************************************************** */

FIO_SFUNC int fio___mock_controller_get_fd_cb(fio_http_s *h) {
  return -1;
  (void)h;
}
FIO_SFUNC void fio___mock_controller_cb(fio_http_s *h) { (void)h; }
FIO_SFUNC void fio___mock_c_write_body(fio_http_s *h,
                                       fio_http_write_args_s args) {
  if (args.buf) {
    if (args.dealloc)
      args.dealloc((void *)args.buf);
  } else if ((unsigned)(args.fd + 1) > 1U && !args.copy &&
             args.fd != fio_http_body_fd(h)) {
    close(args.fd);
  }
  (void)h;
}

static fio_http_controller_s FIO___MOCK_CONTROLLER = {
    .on_destroyed = fio___mock_controller_cb,
    .send_headers = fio___mock_controller_cb,
    .write_body = fio___mock_c_write_body,
    .on_finish = fio___mock_controller_cb,
    .close_io = fio___mock_controller_cb,
    .get_fd = fio___mock_controller_get_fd_cb,
};

SFUNC fio_http_controller_s *fio___http_controller_validate(
    fio_http_controller_s *c) {
  if (!c)
    c = &FIO___MOCK_CONTROLLER;
  if (c->private_flags)
    return c;
  if (!c->on_destroyed)
    c->on_destroyed = fio___mock_controller_cb;
  if (!c->send_headers)
    c->send_headers = fio___mock_controller_cb;
  if (!c->write_body)
    c->write_body = fio___mock_c_write_body;
  if (!c->on_finish)
    c->on_finish = fio___mock_controller_cb;
  if (!c->close_io)
    c->close_io = fio___mock_controller_cb;
  if (!c->get_fd)
    c->get_fd = fio___mock_controller_get_fd_cb;
  return c;
}

/* *****************************************************************************
HTTP Handle Type
***************************************************************************** */

#define FIO_HTTP_STATE_STREAMING      1
#define FIO_HTTP_STATE_FINISHED       2
#define FIO_HTTP_STATE_UPGRADED       4
#define FIO_HTTP_STATE_WEBSOCKET      8
#define FIO_HTTP_STATE_SSE            16
#define FIO_HTTP_STATE_COOKIES_PARSED 32
#define FIO_HTTP_STATE_FREEING        64

FIO_SFUNC int fio____http_write_start(fio_http_s *, fio_http_write_args_s *);
FIO_SFUNC int fio____http_write_cont(fio_http_s *, fio_http_write_args_s *);

struct fio_http_s {
  void *udata;
  void *udata2;
  void *cdata;
  fio_http_controller_s *controller;
  int (*writer)(fio_http_s *, fio_http_write_args_s *);
  int64_t received_at;
  size_t sent;
  uint32_t state;
  uint32_t status;
  fio_keystr_s method;
  fio_keystr_s path;
  fio_keystr_s query;
  fio_keystr_s version;
  fio___http_hmap_s headers[2]; /* request, response */
  fio___http_cmap_s cookies[2]; /* read, write */
  struct {
    char *buf;
    size_t len;
    size_t pos;
    int fd;
  } body;
};

#define HTTP_HDR_REQUEST(h)  (h->headers + 0)
#define HTTP_HDR_RESPONSE(h) (h->headers + 1)

#define FIO_REF_NAME fio_http
#define FIO_REF_INIT(h)                                                        \
  h = (fio_http_s) {                                                           \
    .controller = &FIO___MOCK_CONTROLLER, .writer = fio____http_write_start,   \
    .received_at = fio_http_get_timestump(), .body.fd = -1                     \
  }
#define FIO_REF_DESTROY(h) fio_http_destroy(&(h))
SFUNC fio_http_s *fio_http_destroy(fio_http_s *h) {
  if (!h)
    return h;
  h->state |= FIO_HTTP_STATE_FREEING;
  h->controller->on_destroyed(h);

  fio_keystr_destroy(&h->method, fio___http_keystr_free);
  fio_keystr_destroy(&h->path, fio___http_keystr_free);
  fio_keystr_destroy(&h->query, fio___http_keystr_free);
  fio_keystr_destroy(&h->version, fio___http_keystr_free);
  fio___http_hmap_destroy(h->headers);
  fio___http_hmap_destroy(h->headers + 1);
  fio___http_cmap_destroy(h->cookies);
  fio___http_cmap_destroy(h->cookies + 1);
  fio_bstr_free(h->body.buf);
  if (h->body.fd != -1)
    close(h->body.fd);
  FIO_REF_INIT(*h);
  return h;
}
#include FIO_INCLUDE_FILE

/** Clears any response data. */
SFUNC fio_http_s *fio_http_clear_response(fio_http_s *h, bool clear_body) {
  fio___http_hmap_destroy(HTTP_HDR_RESPONSE(h));
  h->state = 0;
  h->writer = fio____http_write_start;
  h->received_at = fio_http_get_timestump();
  h->status = 0;
  if (!clear_body)
    return h;
  fio_bstr_free(h->body.buf);
  if (h->body.fd != -1)
    close(h->body.fd);
  h->body.buf = NULL;
  h->body.len = h->body.pos = 0;
  h->body.fd = -1;
  return h;
}

/** Create a new http_s handle. */
SFUNC fio_http_s *fio_http_new(void) { return fio_http_new2(); }

/** Reduces an http_s handle's reference count or frees it. */
SFUNC void fio_http_free(fio_http_s *h) { fio_http_free2(h); }

/** Increases an http_s handle's reference count. */
SFUNC fio_http_s *fio_http_dup(fio_http_s *h) { return fio_http_dup2(h); }

/** Collects an updated timestamp for logging purposes. */
SFUNC void fio_http_start_time_set(fio_http_s *h) {
  h->received_at = fio_http_get_timestump();
}

/** Closes a persistent HTTP connection (i.e., if upgraded). */
SFUNC void fio_http_close(fio_http_s *h) { h->controller->close_io(h); }

/** Creates a copy of an existing handle, copying only its request data. */
SFUNC fio_http_s *fio_http_new_copy_request(fio_http_s *o) {
  fio_http_s *h = fio_http_new();
  FIO_ASSERT_ALLOC(h);
  fio_http_path_set(h, fio_http_path(o));
  fio_http_method_set(h, fio_http_method(o));
  fio_http_query_set(h, fio_http_query(o));
  fio_http_version_set(h, fio_http_version(o));
  /* copy headers */
  fio___http_hmap_reserve(h->headers, fio___http_hmap_count(o->headers));
  FIO_MAP_EACH(fio___http_hmap, o->headers, i) {
    fio___http_sary_s *a = fio___http_hmap_node2val_ptr(
        fio___http_hmap_set_ptr(h->headers,
                                i.key,
                                (fio___http_sary_s){0},
                                NULL,
                                0));
    FIO_ARRAY_EACH(fio___http_sary, &i.value, v) {
      fio___http_sary_push(a, fio_bstr_copy(*v));
    }
  }
  /* copy cookies */
  FIO_MAP_EACH(fio___http_cmap, o->cookies, i) {
    fio___http_cmap_set(h->cookies, i.key, i.value, NULL);
  }
  return h;
}

#undef FIO___RECURSIVE_INCLUDE
/* *****************************************************************************
Simple Property Set / Get
***************************************************************************** */

#define HTTP___MAKE_GET_SET(property)                                          \
  FIO_IFUNC fio_str_info_s fio_http_##property(fio_http_s *h) {                \
    FIO_ASSERT_DEBUG(h, "NULL HTTP handler!");                                 \
    return fio_keystr_info(&h->property);                                      \
  }                                                                            \
                                                                               \
  FIO_IFUNC fio_str_info_s fio_http_##property##_set(fio_http_s *h,            \
                                                     fio_str_info_s value) {   \
    FIO_ASSERT_DEBUG(h, "NULL HTTP handler!");                                 \
    fio_keystr_destroy(&h->property, fio___http_keystr_free);                  \
    h->property = fio_keystr_init(value, fio___http_keystr_alloc);             \
    return fio_keystr_info(&h->property);                                      \
  }

HTTP___MAKE_GET_SET(method)
HTTP___MAKE_GET_SET(path)
HTTP___MAKE_GET_SET(query)
HTTP___MAKE_GET_SET(version)

#undef HTTP___MAKE_GET_SET

FIO_IFUNC_DEF_GET(fio_http, fio_http_s, size_t, status)

/** Sets the status associated with the HTTP handle (response). */
SFUNC size_t fio_http_status_set(fio_http_s *h, size_t status) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP handler!");
  if (status > 1023)
    status = 500;
  if (!status)
    status = 200;
  return (h->status = (uint32_t)status);
}
/* *****************************************************************************
Handler State
***************************************************************************** */

SFUNC int fio_http_is_clean(fio_http_s *h) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP handler!");
  return !h->state;
}

/** Returns true if the HTTP handle's response was sent. */
SFUNC int fio_http_is_finished(fio_http_s *h) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP handler!");
  return (!!(h->state & FIO_HTTP_STATE_FINISHED));
}

/** Returns true if handle is in the process of freeing itself. */
SFUNC int fio_http_is_freeing(fio_http_s *h) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP handler!");
  return (!!(h->state & FIO_HTTP_STATE_FREEING));
}

/** Returns true if the HTTP handle's response is streaming. */
SFUNC int fio_http_is_streaming(fio_http_s *h) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP handler!");
  return (!!(h->state & FIO_HTTP_STATE_STREAMING));
}

/** Returns true if the HTTP connection was (or should have been) upgraded. */
SFUNC int fio_http_is_upgraded(fio_http_s *h) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP handler!");
  return (!!(h->state & FIO_HTTP_STATE_UPGRADED));
}

/** Returns true if the HTTP handle establishes a WebSocket Upgrade. */
SFUNC int fio_http_is_websocket(fio_http_s *h) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP handler!");
  return (!!(h->state & FIO_HTTP_STATE_WEBSOCKET));
}

/** Returns true if the HTTP handle establishes an EventSource connection. */
SFUNC int fio_http_is_sse(fio_http_s *h) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP handler!");
  return (!!(h->state & FIO_HTTP_STATE_SSE));
}

/* *****************************************************************************
Header Data Management
***************************************************************************** */

#define FIO___HTTP_HEADER_SET_FN(category, name_, headers, add_val)            \
  /** Sets the header information associated with the HTTP handle. */          \
  fio_str_info_s fio_http_##category##_header_##name_(fio_http_s *h,           \
                                                      fio_str_info_s name,     \
                                                      fio_str_info_s value) {  \
    FIO_ASSERT_DEBUG(h, "NULL HTTP Handle!");                                  \
    return fio___http_hmap_set2(headers(h), name, value, add_val);             \
  }
FIO___HTTP_HEADER_SET_FN(request, set, HTTP_HDR_REQUEST, -1)
FIO___HTTP_HEADER_SET_FN(request, set_if_missing, HTTP_HDR_REQUEST, 0)
FIO___HTTP_HEADER_SET_FN(request, add, HTTP_HDR_REQUEST, 1)
FIO___HTTP_HEADER_SET_FN(response, set, HTTP_HDR_RESPONSE, -1)
FIO___HTTP_HEADER_SET_FN(response, set_if_missing, HTTP_HDR_RESPONSE, 0)
FIO___HTTP_HEADER_SET_FN(response, add, HTTP_HDR_RESPONSE, 1)
#undef FIO___HTTP_HEADER_SET_FN

fio_str_info_s fio_http_request_header(fio_http_s *h,
                                       fio_str_info_s name,
                                       size_t index) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP Handle!");
  return fio___http_hmap_get2(HTTP_HDR_REQUEST(h), name, (int32_t)index);
}
fio_str_info_s fio_http_response_header(fio_http_s *h,
                                        fio_str_info_s name,
                                        size_t index) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP Handle!");
  return fio___http_hmap_get2(HTTP_HDR_RESPONSE(h), name, (int32_t)index);
}

/** Returns the number of headers named `name` that were received. */
SFUNC size_t fio_http_request_header_count(fio_http_s *h, fio_str_info_s name) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP Handle!");
  if (!name.buf)
    return fio___http_hmap_count(HTTP_HDR_REQUEST(h));
  return fio___http_hmap_count2(HTTP_HDR_REQUEST(h), name);
}
/** Returns the number of headers named `name` that were received. */
SFUNC size_t fio_http_response_header_count(fio_http_s *h,
                                            fio_str_info_s name) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP Handle!");
  if (!name.buf)
    return fio___http_hmap_count(HTTP_HDR_RESPONSE(h));
  return fio___http_hmap_count2(HTTP_HDR_RESPONSE(h), name);
}

/** Iterates through all headers. A non-zero return will stop iteration. */
size_t fio_http_request_header_each(fio_http_s *h,
                                    int (*callback)(fio_http_s *,
                                                    fio_str_info_s name,
                                                    fio_str_info_s value,
                                                    void *udata),
                                    void *udata) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP Handle!");
  if (!callback)
    return fio___http_hmap_count(HTTP_HDR_REQUEST(h));
  fio___http_hmap_each_info_s d = {.h = h,
                                   .callback = callback,
                                   .udata = udata};
  return fio___http_hmap_each(HTTP_HDR_REQUEST(h),
                              fio___http_h_each_task_wrapper,
                              &d,
                              0);
}

/** Iterates through all headers. A non-zero return will stop iteration. */
size_t fio_http_response_header_each(
    fio_http_s *h,
    int (*callback)(fio_http_s *, fio_str_info_s, fio_str_info_s, void *),
    void *udata) {
  FIO_ASSERT_DEBUG(h, "NULL HTTP Handle!");
  if (!callback)
    return fio___http_hmap_count(HTTP_HDR_RESPONSE(h));
  fio___http_hmap_each_info_s d = {.h = h,
                                   .callback = callback,
                                   .udata = udata};
  return fio___http_hmap_each(HTTP_HDR_RESPONSE(h),
                              fio___http_h_each_task_wrapper,
                              &d,
                              0);
}

/* *****************************************************************************
Cookies
***************************************************************************** */

/** (Helper) HTTP Cookie Parser */
FIO_IFUNC void fio___http_cookie_parse_cookie(fio_http_s *h, fio_str_info_s s) {
  /* loop and read Cookie: name=value; name2=value2; name3=value3 */
  while (s.len) {
    fio_str_info_s k = {0}, v = {0};
    /* remove white-space */
    while ((s.buf[0] == ' ' || s.buf[0] == '\t') && s.len) {
      ++s.buf;
      --s.len;
    }
    if (!s.len)
      return;
    char *div = (char *)FIO_MEMCHR(s.buf, '=', s.len);
    char *end = (char *)FIO_MEMCHR(s.buf, ';', s.len);
    if (!end)
      end = s.buf + s.len;
    v.buf = s.buf;
    if (div) {
      /* cookie name may be an empty string */
      k.buf = s.buf;
      k.len = div - s.buf;
      v.buf = div + 1;
    }
    v.len = end - v.buf;
    s.len = (s.buf + s.len) - end;
    s.buf = end;
    /* skip the ';' if exists (if len is not zero, !!s.len == 1). */
    s.buf += !!s.len;
    s.len -= !!s.len;
    fio___http_cmap_set_if_missing(h->cookies, k, v);
  }
}

/** (Helper) HTTP Cookie Parser */
FIO_IFUNC void fio___http_cookie_parse_set_cookie(fio_http_s *h,
                                                  fio_str_info_s s) {
  /* TODO! */
  fio_str_info_s k = {0}, v = {0};
  /* remove white-space */
  while ((s.buf[0] == ' ' || s.buf[0] == '\t') && s.len) {
    ++s.buf;
    --s.len;
  }
  if (!s.len)
    return;
  char *div = (char *)FIO_MEMCHR(s.buf, '=', s.len);
  char *end = (char *)FIO_MEMCHR(s.buf, ';', s.len);
  if (div == s.buf || !div)
    return;
  if (!end)
    end = s.buf + s.len;
  const uint64_t prefix_secure = fio_buf2u64u("_Secure-");
  const uint32_t prefix_host = fio_buf2u32u("Host");
  uint32_t cont;
  k.buf = s.buf;
  k.len = div - s.buf;
  v.buf = div + 1;
  v.len = end - v.buf;
  do { /* loop to clear away cookie prefixes in any order */
    cont = 0;
    if (k.len > 8 && k.buf[0] == '_' &&
        fio_buf2u64u(k.buf + 1) == prefix_secure) {
      cont = 1;
      k.len -= 9;
      k.buf += 9;
    }
    if (k.len > 6 && k.buf[0] == '_' && k.buf[1] == '_' && k.buf[6] == '-' &&
        fio_buf2u32u(k.buf + 2) == prefix_host) {
      cont = 1;
      k.len -= 7;
      k.buf += 7;
    }
  } while (cont);
  if (k.len)
    fio___http_cmap_set_if_missing(h->cookies, k, v);
}

/** (Helper) Parses all HTTP Cookies */
FIO_SFUNC void fio___http_cookie_collect(fio_http_s *h) {
  fio___http_sary_s *header = NULL;
  header = fio___http_hmap_node2val_ptr(
      fio___http_hmap_get_ptr(h->headers, FIO_STR_INFO1((char *)"cookie")));
  if (header) {
    FIO_ARRAY_EACH(fio___http_sary, header, pos) {
      fio___http_cookie_parse_cookie(h, fio_bstr_info(*pos));
    }
  }
  /* if headers were sent, set-cookie data might belong to the handle */
  if (h->writer != fio____http_write_start)
    return;
  header = fio___http_hmap_node2val_ptr(
      fio___http_hmap_get_ptr(h->headers + 1,
                              FIO_STR_INFO1((char *)"set-cookie")));
  if (!header)
    return;
  FIO_ARRAY_EACH(fio___http_sary, header, pos) {
    fio___http_cookie_parse_set_cookie(h, fio_bstr_info(*pos));
  }
  return;
}

int fio_http_cookie_set___(void); /* IDE Marker */
/* Sets a response cookie. */
SFUNC int fio_http_cookie_set FIO_NOOP(fio_http_s *h,
                                       fio_http_cookie_args_s cookie) {
  FIO_ASSERT_DEBUG(h, "Can't set cookie for NULL HTTP handler!");
  if (!h || (h->state & (FIO_HTTP_STATE_FINISHED | FIO_HTTP_STATE_STREAMING)))
    return -1;
  /* promises that some warnings print only once. */
  static unsigned int warn_illegal = 0;
  unsigned int need2warn = 0;

  /* valid / invalid characters in cookies, create with Ruby using:
      a = []
      256.times {|i| a[i] = 1;}
      ('a'.ord..'z'.ord).each {|i| a[i] = 0;}
      ('A'.ord..'Z'.ord).each {|i| a[i] = 0;}
      ('0'.ord..'9'.ord).each {|i| a[i] = 0;}
      "!#$%&'*+-.^_`|~".bytes.each {|i| a[i] = 0;}
      p a; nil
      "!#$%&'()*+-./:<=>?@[]^_`{|}~".bytes.each {|i| a[i] = 0;} # for values
      p a; nil
  */
  static const char invalid_cookie_name_char[256] = {
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
  static const char invalid_cookie_value_char[256] = {
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
  /* write name and value while auto-correcting encoding issues */
  if ((cookie.name.len + cookie.value.len + cookie.domain.len +
       cookie.path.len + 128) > 5119) {
    FIO_LOG_ERROR("cookie data too long!");
  }
  char tmp_buf[5120];
  fio_str_info_s t = FIO_STR_INFO3(tmp_buf, 0, 5119);

#define fio___http_h_copy_cookie_ch(ch_var)                                    \
  if (!invalid_cookie_##ch_var##_char[(uint8_t)cookie.ch_var.buf[tmp]]) {      \
    t.buf[t.len++] = cookie.ch_var.buf[tmp];                                   \
  } else {                                                                     \
    need2warn |= 1;                                                            \
    t.buf[t.len++] = '%';                                                      \
    t.buf[t.len++] = fio_i2c(((uint8_t)cookie.ch_var.buf[tmp] >> 4) & 0x0F);   \
    t.buf[t.len++] = fio_i2c((uint8_t)cookie.ch_var.buf[tmp] & 0x0F);          \
  }                                                                            \
  tmp += 1;                                                                    \
  if (t.capa <= t.len + 3) {                                                   \
    ((t.buf == tmp_buf)                                                        \
         ? FIO_STRING_ALLOC_COPY                                               \
         : FIO_STRING_REALLOC)(&t, fio_string_capa4len(t.len + 3));            \
  }

  if (cookie.name.buf) {
    size_t tmp = 0;
    if (cookie.name.len) {
      while (tmp < cookie.name.len) {
        fio___http_h_copy_cookie_ch(name);
      }
    } else {
      while (cookie.name.buf[tmp]) {
        fio___http_h_copy_cookie_ch(name);
      }
    }
    if (need2warn && !warn_illegal) {
      warn_illegal |= 1;
      FIO_LOG_WARNING("illegal char 0x%.2x in cookie name (in %s)\n"
                      "         automatic %% encoding applied",
                      cookie.name.buf[tmp],
                      cookie.name.buf);
    }
  }
  t.buf[t.len++] = '=';
  if (cookie.value.buf) {
    size_t tmp = 0;
    if (cookie.value.len) {
      while (tmp < cookie.value.len) {
        fio___http_h_copy_cookie_ch(value);
      }
    } else {
      while (cookie.value.buf[tmp]) {
        fio___http_h_copy_cookie_ch(value);
      }
    }
    if (need2warn && !warn_illegal) {
      warn_illegal |= 1;
      FIO_LOG_WARNING("illegal char 0x%.2x in cookie value (in %s)\n"
                      "         automatic %% encoding applied",
                      cookie.value.buf[tmp],
                      cookie.value.buf);
    }
  } else
    cookie.max_age = -1;
#undef fio___http_h_copy_cookie_ch

  /* server cookie data */
  t.buf[t.len++] = ';';
  t.buf[t.len++] = ' ';

  if (cookie.max_age) {
    fio_string_write2(
        &t,
        ((t.buf == tmp_buf) ? FIO_STRING_ALLOC_COPY : FIO_STRING_REALLOC),
        FIO_STRING_WRITE_STR2((char *)"Max-Age=", 8),
        FIO_STRING_WRITE_NUM(cookie.max_age),
        FIO_STRING_WRITE_STR2((char *)"; ", 2));
  }

  if (cookie.domain.buf && cookie.domain.len) {
    fio_string_write2(
        &t,
        ((t.buf == tmp_buf) ? FIO_STRING_ALLOC_COPY : FIO_STRING_REALLOC),
        FIO_STRING_WRITE_STR2((char *)"domain=", 7),
        FIO_STRING_WRITE_STR2((char *)cookie.domain.buf, cookie.domain.len),
        FIO_STRING_WRITE_STR2((char *)"; ", 2));
  }
  if (cookie.path.buf && cookie.path.len) {
    fio_string_write2(
        &t,
        ((t.buf == tmp_buf) ? FIO_STRING_ALLOC_COPY : FIO_STRING_REALLOC),
        FIO_STRING_WRITE_STR2((char *)"path=", 5),
        FIO_STRING_WRITE_STR2((char *)cookie.path.buf, cookie.path.len),
        FIO_STRING_WRITE_STR2((char *)"; ", 2));
  }
  if (cookie.http_only) {
    fio_string_write(
        &t,
        ((t.buf == tmp_buf) ? FIO_STRING_ALLOC_COPY : FIO_STRING_REALLOC),
        "HttpOnly; ",
        10);
  }
  if (cookie.secure) {
    fio_string_write(
        &t,
        ((t.buf == tmp_buf) ? FIO_STRING_ALLOC_COPY : FIO_STRING_REALLOC),
        "secure; ",
        8);
  }
  if (cookie.partitioned) {
    fio_string_write(
        &t,
        ((t.buf == tmp_buf) ? FIO_STRING_ALLOC_COPY : FIO_STRING_REALLOC),
        "partitioned; ",
        13);
  }
  switch (cookie.same_site) {
  case FIO_HTTP_COOKIE_SAME_SITE_BROWSER_DEFAULT: /* fall through */
  default: break;
  case FIO_HTTP_COOKIE_SAME_SITE_NONE:
    fio_string_write(
        &t,
        ((t.buf == tmp_buf) ? FIO_STRING_ALLOC_COPY : FIO_STRING_REALLOC),
        "SameSite=None;",
        14);
    break;
  case FIO_HTTP_COOKIE_SAME_SITE_LAX:
    fio_string_write(
        &t,
        ((t.buf == tmp_buf) ? FIO_STRING_ALLOC_COPY : FIO_STRING_REALLOC),
        "SameSite=Lax;",
        13);
    break;
  case FIO_HTTP_COOKIE_SAME_SITE_STRICT:
    fio_string_write(
        &t,
        ((t.buf == tmp_buf) ? FIO_STRING_ALLOC_COPY : FIO_STRING_REALLOC),
        "SameSite=Strict;",
        16);
    break;
  }
  if (t.buf[t.len - 1] == ' ')
    --t.len;

  /* set the "write" cookie store data */
  fio___http_cmap_set(h->cookies + 1, cookie.name, t, NULL);
  /* set the "read" cookie store data */
  fio___http_cmap_set(h->cookies, cookie.name, cookie.value, NULL);
  if (t.buf != tmp_buf)
    FIO_STRING_FREE2(t);
  return 0;
}

/** Returns a cookie value (either received of newly set), if any. */
SFUNC fio_str_info_s fio_http_cookie(fio_http_s *h,
                                     const char *name,
                                     size_t name_len) {
  if (!(fio_atomic_or(&h->state, FIO_HTTP_STATE_COOKIES_PARSED) &
        FIO_HTTP_STATE_COOKIES_PARSED))
    fio___http_cookie_collect(h);
  fio_str_info_s r =
      fio___http_cmap_get(h->cookies, FIO_STR_INFO2((char *)name, name_len));
  return r;
}

/** Iterates through all cookies. A non-zero return will stop iteration. */
SFUNC size_t fio_http_cookie_each(fio_http_s *h,
                                  int (*callback)(fio_http_s *,
                                                  fio_str_info_s name,
                                                  fio_str_info_s value,
                                                  void *udata),
                                  void *udata) {
  if (!(fio_atomic_or(&h->state, FIO_HTTP_STATE_COOKIES_PARSED) &
        FIO_HTTP_STATE_COOKIES_PARSED))
    fio___http_cookie_collect(h);
  size_t i = 0;
  FIO_MAP_EACH(fio___http_cmap, h->cookies, pos) {
    ++i;
    if (callback(h, pos.key, pos.value, udata))
      return i;
  }
  return i;
}

/**
 * Iterates through all response set cookies.
 *
 * A non-zero return value from the callback will stop iteration.
 */
SFUNC size_t
fio_http_set_cookie_each(fio_http_s *h,
                         int (*callback)(fio_http_s *h,
                                         fio_str_info_s set_cookie_header,
                                         fio_str_info_s value,
                                         void *udata),
                         void *udata) {
  size_t i = 0;
  fio___http_cmap_s *set_cookies = h->cookies + 1;
  fio_str_info_s header_name = FIO_STR_INFO2((char *)"set-cookie", 10);
  FIO_MAP_EACH(fio___http_cmap, set_cookies, pos) {
    ++i;
    if (callback(h, header_name, pos.value, udata))
      return i;
  }
  return i;
}

/* *****************************************************************************
Peer Address
***************************************************************************** */

/**
 * Writes peer address to `dest` starting with the `forwarded` header, with a
 * fallback to actual socket address and a final fallback to `"[unknown]"`.
 *
 * If `unknown` is returned, the function returns -1. if `dest` capacity is too
 * small, the number of bytes required will be returned.
 *
 * If all goes well, this function returns 0.
 */
SFUNC int fio_http_from(fio_str_info_s *dest, const fio_http_s *h) {
  int r = 0;
  /* Guess IP address from headers (forwarded) where possible */
  fio_str_info_s forwarded =
      fio_http_request_header((fio_http_s *)h,
                              FIO_STR_INFO2((char *)"forwarded", 9),
                              -1);
  fio_buf_info_s buf;
  char *end;
  if (forwarded.len) {
    forwarded.len &= 1023; /* limit possible attack surface */
    for (; forwarded.len > 5;) {
      if ((forwarded.buf[0] | 32) != 'f' || (forwarded.buf[1] | 32) != 'o' ||
          (forwarded.buf[2] | 32) != 'r' || forwarded.buf[3] != '=') {
        ++forwarded.buf;
        --forwarded.len;
        continue;
      }
      forwarded.buf += 4 + (forwarded.buf[4] == '"');
      break;
    }
  client_address_found:
    buf.buf = end = forwarded.buf;
    while (*end && *end != '"' && *end != ',' && *end != ' ' && *end != ';' &&
           (end - forwarded.buf) < 48)
      ++end;
    buf.len = (size_t)(end - forwarded.buf);
  } else {
    forwarded =
        fio_http_request_header((fio_http_s *)h,
                                FIO_STR_INFO2((char *)"x-forwarded-for", 15),
                                -1);
    if (forwarded.len) {
      forwarded.buf += (forwarded.buf[0] == '"');
      goto client_address_found;
    }
#if defined(H___FIO_SOCK___H)
    if (!(buf = fio_sock_peer_addr(
              fio_http_controller((fio_http_s *)h)->get_fd((fio_http_s *)h)))
             .len)
#endif
      buf = FIO_BUF_INFO1((char *)"[unknown]");
    r = -1;
  }
  if (dest->capa > dest->len + buf.len) { /* enough space? */
    FIO_MEMCPY(dest->buf + dest->len, buf.buf, buf.len);
    dest->len += buf.len;
    dest->buf[dest->len] = 0;
  } else
    r = (int)buf.len - (!buf.len);
  return r;
}

/* *****************************************************************************
Body Management - file descriptor
***************************************************************************** */

FIO_SFUNC fio_str_info_s fio___http_body_read_fd(fio_http_s *h, size_t len) {
  h->body.buf = fio_bstr_len_set(h->body.buf, 0);
  h->body.buf = fio_bstr_readfd(h->body.buf, h->body.fd, h->body.pos, len);
  fio_str_info_s r = fio_bstr_info(h->body.buf);
  h->body.pos += r.len;
  return r;
}
FIO_SFUNC fio_str_info_s fio___http_body_read_until_fd(fio_http_s *h,
                                                       char token,
                                                       size_t limit) {
  h->body.buf = fio_bstr_len_set(h->body.buf, 0);
  h->body.buf =
      fio_bstr_getdelim_fd(h->body.buf, h->body.fd, h->body.pos, token, limit);
  fio_str_info_s r = fio_bstr_info(h->body.buf);
  h->body.pos += r.len;
  return r;
}
FIO_SFUNC void fio___http_body_expect_fd(fio_http_s *h, size_t len) {
  (void)h, (void)len;
}
FIO_SFUNC void fio___http_body_write_fd(fio_http_s *h,
                                        const void *data,
                                        size_t len) {
  ssize_t written = fio_fd_write(h->body.fd, data, len);
  if (written > 0)
    h->body.len += written;
}

/* *****************************************************************************
Body Management - buffer
***************************************************************************** */

FIO_SFUNC int fio___http_body___move_buf2fd(fio_http_s *h) {
  h->body.fd = fio_filename_tmp();
  if (h->body.fd == -1) {
#if 1
    static int error_printed = 0;
    if (!error_printed) {
      error_printed = 1;
      FIO_LOG_ERROR("fio_http_s couldn't open temporary file! (%d) %s",
                    errno,
                    strerror(errno));
    }
#endif
    return -1;
  }
  fio_buf_info_s b = fio_bstr_buf(h->body.buf);
  if (!b.len)
    return 0;
  ssize_t written = fio_fd_write(h->body.fd, b.buf, b.len);
  if (written == (ssize_t)b.len)
    return 0;
  close(h->body.fd);
  FIO_LOG_ERROR("fio_http_s couldn't transfer data to temporary file "
                "(transferred %zd / %zu)",
                written,
                b.len);
  return (h->body.fd = -1);
}
FIO_SFUNC fio_str_info_s fio___http_body_read_buf(fio_http_s *h, size_t len) {
  fio_str_info_s r = FIO_STR_INFO2((h->body.buf + h->body.pos), len);
  h->body.pos += len;
  return r;
}
FIO_SFUNC fio_str_info_s fio___http_body_read_until_buf(fio_http_s *h,
                                                        char token,
                                                        size_t limit) {
  fio_str_info_s r = FIO_STR_INFO2((h->body.buf + h->body.pos), limit);
  char *end = (char *)FIO_MEMCHR(r.buf, token, limit);
  if (end) {
    ++end;
    r.len = end - r.buf;
    h->body.pos = end - h->body.buf;
  }
  return r;
}
FIO_SFUNC void fio___http_body_expect_buf(fio_http_s *h, size_t len) {
  if (len + h->body.len > FIO_HTTP_BODY_RAM_LIMIT) {
    fio___http_body___move_buf2fd(h);
    return;
  }
  h->body.buf = fio_bstr_reserve(h->body.buf, len);
}
FIO_SFUNC void fio___http_body_write_buf(fio_http_s *h,
                                         const void *data,
                                         size_t len) {
  if (len + h->body.len > FIO_HTTP_BODY_RAM_LIMIT)
    goto switch_to_fd;
write_to_buf:
  h->body.buf = fio_bstr_write(h->body.buf, data, len);
  h->body.len += len;
  return;
switch_to_fd:
  if (fio___http_body___move_buf2fd(h))
    goto write_to_buf;
  fio___http_body_write_fd(h, data, len);
}

/* *****************************************************************************
Body Management - Public API
***************************************************************************** */

/** Gets the body (payload) length associated with the HTTP handle. */
SFUNC size_t fio_http_body_length(fio_http_s *h) { return h->body.len; }

/**
 * If the body is stored in a temporary file, returns the file's handle.
 *
 * Otherwise returns -1.
 */
SFUNC int fio_http_body_fd(fio_http_s *h) { return h->body.fd; }

/** Adjusts the body's reading position. Negative values start at the end. */
SFUNC size_t fio_http_body_seek(fio_http_s *h, ssize_t pos) {
  if (pos < 0) {
    pos += h->body.len;
    if (pos < 0)
      pos = 0;
  }
  if ((size_t)pos >= h->body.len)
    pos = h->body.len;
  h->body.pos = pos;
  return pos;
}

/** Reads up to `length` of data from the body, returns nothing on EOF. */
SFUNC fio_str_info_s fio_http_body_read(fio_http_s *h, size_t length) {
  fio_str_info_s r = {0};
  if (h->body.pos == h->body.len)
    return r;
  if (h->body.pos + length > h->body.len)
    length = h->body.len - h->body.pos;
  r = ((h->body.fd == -1) ? fio___http_body_read_buf
                          : fio___http_body_read_fd)(h, length);
  return r;
}

/**
 * Reads from the body until finding `token`, reaching `limit` or EOF.
 *
 * Note: `limit` is ignored if zero or larger than remaining data.
 */
SFUNC fio_str_info_s fio_http_body_read_until(fio_http_s *h,
                                              char token,
                                              size_t limit) {
  fio_str_info_s r = {0};
  if (h->body.pos == h->body.len)
    return r;
  if (!limit || (h->body.pos + limit) > h->body.len)
    limit = h->body.len - h->body.pos;
  r = ((h->body.fd == -1) ? fio___http_body_read_until_buf
                          : fio___http_body_read_until_fd)(h, token, limit);
  return r;
}

/** Allocates a body (payload) of (at least) the `expected_length`. */
SFUNC void fio_http_body_expect(fio_http_s *h, size_t expected_length) {
  ((h->body.fd == -1) ? fio___http_body_expect_buf
                      : fio___http_body_expect_fd)(h, expected_length);
}

/** Writes `data` to the body (payload) associated with the HTTP handle. */
SFUNC void fio_http_body_write(fio_http_s *h, const void *data, size_t len) {
  if (!data || !len)
    return;
  ((h->body.fd == -1) ? fio___http_body_write_buf
                      : fio___http_body_write_fd)(h, data, len);
}

/* *****************************************************************************
A Response Payload
***************************************************************************** */

/** ETag Helper */
FIO_IFUNC int fio___http_response_etag_if_none_match(fio_http_s *h);

FIO_SFUNC int fio____http_write_done(fio_http_s *h,
                                     fio_http_write_args_s *args) {
  return -1;
  (void)h, (void)args;
}

FIO_SFUNC int fio____http_write_upgraded(fio_http_s *h,
                                         fio_http_write_args_s *args) {
  h->controller->write_body(h, *args);
  h->sent += args->len;
  return 0;
}

FIO_SFUNC int fio____http_write_start(fio_http_s *h,
                                      fio_http_write_args_s *args) {
  /* if response has an `etag` header matching `if-none-match`, skip */
  fio___http_hmap_s *hdrs = h->headers + (!!h->status);
  if (h->status) {
    if (args->len && fio___http_response_etag_if_none_match(h))
      return -1;
    if (!args->len && args->finish && h->status >= 400) {
      fio_http_send_error_response(h, h->status);
      return 0;
    }
    /* validate Date header */
    fio___http_hmap_set2(
        hdrs,
        FIO_STR_INFO2((char *)"date", 4),
        fio_http_date(fio_http_get_timestump() / FIO___HTTP_TIME_DIV),
        0);
  }
  /* test if streaming / single body response */
  if (!fio___http_hmap_get_ptr(hdrs,
                               FIO_STR_INFO2((char *)"content-length", 14))) {
    if (args->finish) {
      /* validate / set Content-Length (not streaming) */
      char ibuf[32];
      fio_str_info_s k = FIO_STR_INFO2((char *)"content-length", 14);
      fio_str_info_s v = FIO_STR_INFO3(ibuf, 0, 32);
      v.len = fio_digits10u(args->len);
      fio_ltoa10u(v.buf, args->len, v.len);
      fio___http_hmap_set2(hdrs, k, v, -1);
    } else {
      h->state |= FIO_HTTP_STATE_STREAMING;
    }
  }

  /* start a response, unless status == 0 (which starts a request). */
  h->controller->send_headers(h);
  return (h->writer = fio____http_write_cont)(h, args);
}

FIO_SFUNC int fio____http_write_cont(fio_http_s *h,
                                     fio_http_write_args_s *args) {
  h->controller->write_body(h, *args);
  h->sent += args->len;
  if (args->finish) {
    h->state |= FIO_HTTP_STATE_FINISHED;
    h->writer = (h->state & FIO_HTTP_STATE_UPGRADED)
                    ? fio____http_write_upgraded
                    : fio____http_write_done;
    h->controller->on_finish(h);
  }
  return 0;
}

void fio_http_write___(void); /* IDE Marker */
/**
 * Writes `data` to the response body associated with the HTTP handle after
 * sending all headers (no further headers may be sent).
 */
SFUNC void fio_http_write FIO_NOOP(fio_http_s *h, fio_http_write_args_s args) {
  if (!h || !h->controller)
    goto handle_error;
  if (h->writer(h, &args))
    goto handle_error;
  return;

handle_error:
  if (args.fd)
    close(args.fd);
  if (args.dealloc && args.buf)
    args.dealloc((void *)args.buf);
}

/** ETag Helper */
FIO_IFUNC int fio___http_response_etag_if_none_match(fio_http_s *h) {
  if (!fio_http_etag_is_match(h))
    return 0;
  h->status = 304;
  fio___http_hmap_set2(HTTP_HDR_RESPONSE(h),
                       FIO_STR_INFO2((char *)"content-length", 14),
                       FIO_STR_INFO0,
                       -1);

  h->controller->send_headers(h);
  h->state |= FIO_HTTP_STATE_FINISHED;
  h->writer = fio____http_write_done;
  h->controller->on_finish(h);
  return -1;
}

/* *****************************************************************************
WebSocket / SSE Helpers
***************************************************************************** */

/** Returns non-zero if request headers ask for a WebSockets Upgrade.*/
SFUNC int fio_http_websocket_requested(fio_http_s *h) {
  fio_str_info_s val =
      fio_http_request_header(h, FIO_STR_INFO2((char *)"connection", 10), 0);
  /* test for "Connection: Upgrade" (TODO? allow for multi-value?) */
  if (val.len < 7 ||
      !(((fio_buf2u32u(val.buf) | 0x20202020UL) == fio_buf2u32u("upgr")) ||
        ((fio_buf2u32u(val.buf + 3) | 0x20202020) == fio_buf2u32u("rade"))))
    return 0;
  /* test for "Upgrade: websocket" (TODO? allow for multi-value?) */
  val = fio_http_request_header(h, FIO_STR_INFO2((char *)"upgrade", 7), 0);
  if (val.len < 7 ||
      !(((fio_buf2u64u(val.buf) | 0x2020202020202020ULL) ==
         fio_buf2u64u("websocke")) ||
        ((fio_buf2u32u(val.buf + 5) | 0x20202020UL) == fio_buf2u32u("cket"))))
    return 0;
  val = fio_http_request_header(h,
                                FIO_STR_INFO2((char *)"sec-websocket-key", 17),
                                0);
  if (val.len != 24)
    return 0;
  /* test for version value */
  val = fio_http_request_header(
      h,
      FIO_STR_INFO2((char *)"sec-websocket-version", 21),
      0);
  if (val.len != 2 || (val.buf[0] != '1' || val.buf[1] != '3'))
    return -1; /* note the error value is still true, requested WebSocket... */
  return 1;
}

/** Sets response data to agree to a WebSockets Upgrade.*/
SFUNC void fio_http_upgrade_websocket(fio_http_s *h) {
  { /* validate WebSocket version */
    fio_str_info_s val = fio_http_request_header(
        h,
        FIO_STR_INFO2((char *)"sec-websocket-version", 21),
        0);
    if (val.len != 2 || (val.buf[0] != '1' || val.buf[1] != '3')) {
      fio_http_response_header_set(
          h,
          FIO_STR_INFO2((char *)"sec-websocket-version", 21),
          FIO_STR_INFO2((char *)"13", 2));
      fio_http_send_error_response(h, 400);
    }
  }
  h->status = 101;
  fio_http_response_header_set(h,
                               FIO_STR_INFO2((char *)"connection", 10),
                               FIO_STR_INFO2((char *)"Upgrade", 7));
  fio_http_response_header_set(h,
                               FIO_STR_INFO2((char *)"upgrade", 7),
                               FIO_STR_INFO2((char *)"websocket", 9));
  { /* Sec-WebSocket-Accept */
    fio_str_info_s k =
        fio_http_request_header(h,
                                FIO_STR_INFO2((char *)"sec-websocket-key", 17),
                                0);
    FIO_STR_INFO_TMP_VAR(accept_val, 63);
    if (k.len != 24)
      goto handshake_error;
    fio_string_write(&accept_val, NULL, k.buf, k.len);
    fio_string_write(&accept_val,
                     NULL,
                     "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
                     36);
    fio_sha1_s sha = fio_sha1(accept_val.buf, accept_val.len);
    fio_sha1_digest(&sha);
    accept_val.len = 0;
    fio_string_write_base64enc(&accept_val,
                               NULL,
                               fio_sha1_digest(&sha),
                               fio_sha1_len(),
                               0);
    fio_http_response_header_set(
        h,
        FIO_STR_INFO2((char *)"sec-websocket-accept", 20),
        accept_val);
  }
  { /* finish up */
    h->state |= FIO_HTTP_STATE_UPGRADED | FIO_HTTP_STATE_WEBSOCKET;
    fio_http_write_args_s args = {.finish = 1};
    fio_http_write FIO_NOOP(h, args);
  }
  return;
handshake_error:
  fio_http_send_error_response(h, 403);
  return;
}

/** Sets request data to request a WebSockets Upgrade.*/
SFUNC void fio_http_websocket_set_request(fio_http_s *h) {
  fio_http_request_header_set(h,
                              FIO_STR_INFO2((char *)"connection", 10),
                              FIO_STR_INFO2((char *)"Upgrade", 7));
  fio_http_request_header_set(h,
                              FIO_STR_INFO2((char *)"pragma", 6),
                              FIO_STR_INFO2((char *)"no-cache", 8));
  fio_http_request_header_set(h,
                              FIO_STR_INFO2((char *)"cache-control", 13),
                              FIO_STR_INFO2((char *)"no-cache", 8));
  fio_http_request_header_set(h,
                              FIO_STR_INFO2((char *)"upgrade", 7),
                              FIO_STR_INFO2((char *)"websocket", 9));
  {
    fio_http_request_header_set_if_missing(
        h,
        FIO_STR_INFO2((char *)"origin", 6),
        fio_http_request_header(h, FIO_STR_INFO2((char *)"host", 4), 0));
  }
  fio_http_request_header_set(
      h,
      FIO_STR_INFO2((char *)"sec-websocket-version", 21),
      FIO_STR_INFO2((char *)"13", 2));

  {
    uint64_t tmp[2] = {fio_rand64(), fio_rand64()};
    FIO_STR_INFO_TMP_VAR(key, 64);
    fio_string_write_base64enc(&key, NULL, tmp, 16, 0);
    fio_http_request_header_set(h,
                                FIO_STR_INFO2((char *)"sec-websocket-key", 17),
                                key);
  }
  /* sec-websocket-extensions ? */
  /* send request? */
}

/** Returns non-zero if the response accepts a WebSocket upgrade request. */
SFUNC int fio_http_websocket_accepted(fio_http_s *h) {
  if (h->status != 101)
    return 0;
  if (!fio_http_websocket_requested(h))
    return 0;
  fio_str_info_s tst =
      fio_http_response_header(h, FIO_STR_INFO2((char *)"connection", 10), 0);
  if (tst.len < 7 ||
      (fio_buf2u64_le(tst.buf) | (uint64_t)0x20202020202020FFULL) !=
          (fio_buf2u64_le("upgrade") | (uint64_t)0x20202020202020FFULL))
    return 0;
  tst = fio_http_response_header(h, FIO_STR_INFO2((char *)"upgrade", 7), 0);
  if (tst.len < 9 || (tst.buf[0] | 32) != 'w' ||
      (fio_buf2u64u(tst.buf + 1) | (uint64_t)0x2020202020202020ULL) !=
          fio_buf2u64u("ebsocket"))
    return 0;
  { /* Sec-WebSocket-Accept */
    tst = fio_http_response_header(
        h,
        FIO_STR_INFO2((char *)"sec-websocket-accept", 20),
        0);
    if (!tst.len)
      return 0;

    fio_str_info_s k =
        fio_http_request_header(h,
                                FIO_STR_INFO2((char *)"sec-websocket-key", 17),
                                0);
    FIO_STR_INFO_TMP_VAR(accept_val, 63);
    if (k.len != 24)
      return 0;
    fio_string_write(&accept_val, NULL, k.buf, k.len);
    fio_string_write(&accept_val,
                     NULL,
                     "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
                     36);
    fio_sha1_s sha = fio_sha1(accept_val.buf, accept_val.len);
    fio_sha1_digest(&sha);
    accept_val.len = 0;
    fio_string_write_base64enc(&accept_val,
                               NULL,
                               fio_sha1_digest(&sha),
                               fio_sha1_len(),
                               0);
    if (!FIO_STR_INFO_IS_EQ(tst, accept_val)) {
      FIO_LOG_DDEBUG2(
          "(%d) sec-websocket-key invalid, WebSocket handshake failed.\n\t"
          "%s != %s",
          getpid(),
          tst.buf,
          accept_val.buf);
      return 0;
    }
  }
  h->state |= (FIO_HTTP_STATE_UPGRADED | FIO_HTTP_STATE_WEBSOCKET |
               FIO_HTTP_STATE_FINISHED);
  h->writer = fio____http_write_upgraded;
  return 1;
}

/** Returns non-zero if request headers ask for an EventSource (SSE) Upgrade.*/
SFUNC int fio_http_sse_requested(fio_http_s *h) {
  fio_str_info_s val =
      fio_http_request_header(h, FIO_STR_INFO2((char *)"accept", 6), 0);
  if (val.len < 17)
    return 0;
  if ((val.buf[0] | 32) != 't')
    return 0;
  uint64_t t0 = fio_buf2u64u(val.buf + 1) | (uint64_t)0x2020202020202020ULL;
  uint64_t t1 = fio_buf2u64u(val.buf + 9) | (uint64_t)0x2020202020202020ULL;
  if ((t0 != fio_buf2u64u("ext/even")) || (t1 != fio_buf2u64u("t-stream")))
    return 0; /* note that '/' and '-' both have 32 (bit[5]) set */
  FIO_LOG_DDEBUG2("(%d) EventSource connection requested.",
                  fio_thread_getpid());
  return 1;
}

/** Returns non-zero if the response accepts an SSE request. */
SFUNC int fio_http_sse_accepted(fio_http_s *h) {
  if (!fio_http_sse_requested(h))
    return 0;
  if (h->status != 200)
    return 0;
  fio_str_info_s val =
      fio_http_request_header(h, FIO_STR_INFO2((char *)"accept", 6), 0);
  for (size_t i = 0; i < 2; ++i) {
    if (val.len < 17)
      return 0;
    if ((val.buf[0] | 32) != 't')
      return 0;
    uint64_t t0 = fio_buf2u64u(val.buf + 1) | (uint64_t)0x2020202020202020ULL;
    uint64_t t1 = fio_buf2u64u(val.buf + 9) | (uint64_t)0x2020202020202020ULL;
    if ((t0 != fio_buf2u64u("ext/even")) || (t1 != fio_buf2u64u("t-stream")))
      return 0; /* note that '/' and '-' both have 32 (bit[5]) set */
    val = fio_http_response_header(h,
                                   FIO_STR_INFO2((char *)"content-type", 12),
                                   0);
  }
  h->state |=
      (FIO_HTTP_STATE_UPGRADED | FIO_HTTP_STATE_SSE | FIO_HTTP_STATE_FINISHED);
  h->writer = fio____http_write_upgraded;
  FIO_LOG_DDEBUG2("EventSource connection accepted.");
  return 1;
}

/** Sets response data to agree to an EventSource (SSE) Upgrade.*/
SFUNC void fio_http_upgrade_sse(fio_http_s *h) {
  if (h->state)
    return;
  fio_http_response_header_set(h,
                               FIO_STR_INFO2((char *)"content-type", 12),
                               FIO_STR_INFO2((char *)"text/event-stream", 17));
  fio_http_response_header_set(h,
                               FIO_STR_INFO2((char *)"cache-control", 13),
                               FIO_STR_INFO2((char *)"no-store", 8));
  fio___http_hmap_remove(HTTP_HDR_RESPONSE(h),
                         FIO_STR_INFO2((char *)"content-length", 14),
                         NULL);
  h->state |=
      FIO_HTTP_STATE_FINISHED | FIO_HTTP_STATE_UPGRADED | FIO_HTTP_STATE_SSE;
  h->controller->send_headers(h);
  h->writer = fio____http_write_upgraded;
  h->controller->on_finish(h);
}

/** Sets request data to request an EventSource (SSE) Upgrade.*/
SFUNC void fio_http_sse_set_request(fio_http_s *h) {
  fio_http_request_header_set(h,
                              FIO_STR_INFO2((char *)"accept", 6),
                              FIO_STR_INFO2((char *)"text/event-stream", 17));
  fio_http_request_header_set(h,
                              FIO_STR_INFO2((char *)"connection", 10),
                              FIO_STR_INFO2((char *)"keep-alive", 10));
  fio_http_request_header_set(h,
                              FIO_STR_INFO2((char *)"cache-control", 13),
                              FIO_STR_INFO2((char *)"no-cache", 8));
}

/* *****************************************************************************
Header Parsing Helpers - Implementation
***************************************************************************** */

/**
 * Assumes a Buffer of bytes containing length info and string data as such:
 *
 *   [ 2 byte info: (type | (len << 2)) ]
 *   [ Optional 2 byte info: (len << 2) (if type was 1)]
 *   [ String of `len` bytes][ NUL byte (not counted in `len`)]
 */

FIO_SFUNC int fio___http_header_parse_properties(fio_str_info_s *dst,
                                                 char *start,
                                                 char *const end) {
  for (;;) {
    char *nxt = (char *)FIO_MEMCHR(start, ';', end - start);
    if (!nxt)
      nxt = end;
    char *eq = (char *)FIO_MEMCHR(start, '=', nxt - start);
    if (!eq)
      eq = nxt;
    /* write value to dst */
    size_t len = eq - start;
    if ((len & (~(size_t)0x3FFF)) | (dst->len + len + 3 > dst->capa))
      return -1; /* too long */
    fio_u2buf16u(dst->buf + dst->len,
                 ((len << 2) | FIO___HTTP_PARSED_HEADER_PROPERTY_DATA));
    dst->len += 2;
    if (len)
      FIO_MEMCPY(dst->buf + dst->len, start, len);
    dst->len += len;
    dst->buf[dst->len++] = 0;

    eq += (eq[0] == '=');
    eq += (eq[0] == ' ' || eq[0] == '\t');
    len = nxt - eq;
    if ((len & (~(size_t)0x3FFF)) | (dst->len + len + 3 > dst->capa))
      return -1; /* too long */
    fio_u2buf16u(dst->buf + dst->len,
                 ((len << 2) | FIO___HTTP_PARSED_HEADER_PROPERTY_DATA));
    dst->len += 2;
    if (len)
      FIO_MEMCPY(dst->buf + dst->len, eq, len);
    dst->len += len;
    dst->buf[dst->len++] = 0;

    if (nxt == end)
      return 0;
    nxt += (*nxt == ';');
    while (*nxt == ' ' || *nxt == '\t')
      ++nxt;
    start = nxt;
  }
  return 0;
}

FIO_IFUNC int fio___http_header_parse(fio___http_hmap_s *map,
                                      fio_str_info_s *dst,
                                      fio_str_info_s header_name) {
  fio___http_sary_s *a =
      fio___http_hmap_node2val_ptr(fio___http_hmap_get_ptr(map, header_name));
  if (!a)
    return -1;
  dst->len = 0;
  if (dst->capa < 3)
    return -1;
  dst->buf[dst->len++] = 0; /* first byte is a pretend NUL */
  FIO_ARRAY_EACH(fio___http_sary, a, pos) {
    fio_buf_info_s i = fio_bstr_buf(*pos);
    if (!i.len)
      continue;
    char *const end = i.buf + i.len;
    char *sep;
    do {
      sep = (char *)FIO_MEMCHR(i.buf, ',', end - i.buf);
      if (!sep)
        sep = end;
      char *prop = (char *)FIO_MEMCHR(i.buf, ';', sep - i.buf);
      if (!prop)
        prop = sep;
      size_t len = prop - i.buf;
      if ((len & (~(size_t)0x3FFF)) | (dst->len + len + 3 > dst->capa))
        return -1; /* too long */
      fio_u2buf16u(dst->buf + dst->len, (len << 2));
      dst->len += 2;
      FIO_MEMCPY(dst->buf + dst->len, i.buf, len);
      dst->len += len;
      dst->buf[dst->len++] = 0;
      if (prop != sep) { /* parse properties */
        ++prop;
        len = sep - prop;
        if ((len & (~(size_t)0x3FFF)) | (dst->len + len + 3 > dst->capa))
          return -1;
        const size_t old_len = dst->len;
        dst->len += 2;
        if (fio___http_header_parse_properties(dst, prop, sep))
          return -1;
        len = dst->len - old_len;
        if ((len & (~(size_t)0x3FFF)) | (dst->len + len + 3 > dst->capa))
          return -1;
        fio_u2buf16u(
            dst->buf + old_len,
            ((len << 2) | FIO___HTTP_PARSED_HEADER_PROPERTY_BLOCK_LEN));
      }
      sep += (*sep == ',');
      while (*sep == ' ' || *sep == '\t')
        ++sep;
      i.buf = sep;
    } while (sep < end);
  }
  if (dst->len + 2 > dst->capa)
    return -1;
  /* last u16 must be zero (end marker) */
  dst->buf[dst->len++] = 0;
  dst->buf[dst->len++] = 0;
  return 0;
}

SFUNC int fio_http_response_header_parse(fio_http_s *h,
                                         fio_str_info_s *buf_parsed,
                                         fio_str_info_s header_name) {
  return fio___http_header_parse(HTTP_HDR_RESPONSE(h), buf_parsed, header_name);
}

SFUNC int fio_http_request_header_parse(fio_http_s *h,
                                        fio_str_info_s *buf_parsed,
                                        fio_str_info_s header_name) {
  return fio___http_header_parse(HTTP_HDR_REQUEST(h), buf_parsed, header_name);
}

/* *****************************************************************************
Error Handling
***************************************************************************** */

/** Sends the requested error message and finishes the response. */
SFUNC int fio_http_send_error_response(fio_http_s *h, size_t status) {
  if (!h || h->writer != fio____http_write_start)
    return -1;
  if (!status || status > 1000)
    status = 404;
  h->status = (uint32_t)status;
  FIO_STR_INFO_TMP_VAR(filename, 127);
  /* read static error code file */
  fio_string_write2(&filename,
                    NULL,
                    FIO_STRING_WRITE_UNUM(status),
                    FIO_STRING_WRITE_STR2(".html", 5));
  char *body = fio_bstr_readfile(NULL, filename.buf, 0, 0);
  fio_http_write_args_s args = {.buf = body,
                                .len = fio_bstr_len(body),
                                .dealloc = (void (*)(void *))fio_bstr_free,
                                .finish = 1};
  fio_http_response_header_set(h,
                               FIO_STR_INFO2((char *)"content-type", 12),
                               body ? FIO_STR_INFO2((char *)"text/html", 9)
                                    : FIO_STR_INFO2((char *)"text/plain", 10));
  if (!body) { /* write a short error response (plain text fallback) */
    fio_str_info_s status_str = fio_http_status2str(status);
    filename.len = 0;
    fio_string_write2(&filename,
                      NULL,
                      FIO_STRING_WRITE_STR2("Error ", 6),
                      FIO_STRING_WRITE_UNUM(status),
                      FIO_STRING_WRITE_STR2(": ", 2),
                      FIO_STRING_WRITE_STR_INFO(status_str),
                      FIO_STRING_WRITE_STR2(".", 1));
    args.buf = filename.buf;
    args.len = filename.len;
    args.copy = 1;
    args.dealloc = NULL;
  }
  fio_http_write FIO_NOOP(h, args);
  return 0;
}

/* *****************************************************************************
HTTP Logging
***************************************************************************** */

SFUNC void fio___http_write_pid(fio_str_info_s *dest) {
  static int last_pid = 0;
  static char buf[64];
  static size_t len = 0;
#ifdef H___FIO_SERVER___H
  int pid = fio_srv_pid();
#else
  int pid = fio_thread_getpid();
#endif
  if (last_pid != pid)
    goto rewrite;
copy:
  if (len)
    FIO_MEMCPY(dest->buf + dest->len, buf, len);
  dest->len += len;
  return;
rewrite:
  len = 0;
  buf[len++] = '[';
  if (pid > 0) {
    size_t d = fio_digits10u((uint64_t)pid);
    fio_ltoa10u(buf + 1, (uint64_t)pid, d);
    len += d;
  }
  buf[len++] = ']';
  last_pid = pid;
  goto copy;
}
/** Logs an HTTP (response) to STDOUT. */
SFUNC void fio_http_write_log(fio_http_s *h) {
  FIO_STR_INFO_TMP_VAR(buf, 1023);
  intptr_t bytes_sent = h->sent;
  uint64_t time_start, time_end, time_proxy = 0;
  time_start = h->received_at;
  time_end = fio_http_get_timestump();
  fio_str_info_s date = fio_http_log_time(time_end / FIO___HTTP_TIME_DIV);
  fio_string_write_s to_write[16] = {
      FIO_STRING_WRITE_STR_INFO(fio_keystr_info(&h->method)),
      FIO_STRING_WRITE_STR2((const char *)" ", 1),
      FIO_STRING_WRITE_STR_INFO(fio_keystr_info(&h->path)),
      FIO_STRING_WRITE_STR2((const char *)" ", 1),
      FIO_STRING_WRITE_STR_INFO(fio_keystr_info(&h->version)),
      FIO_STRING_WRITE_STR2((const char *)"\" ", 2),
      FIO_STRING_WRITE_NUM(h->status),
      FIO_STRING_WRITE_STR2(" ", 1),
      ((bytes_sent > 0) ? (FIO_STRING_WRITE_UNUM(bytes_sent))
                        : (FIO_STRING_WRITE_STR2((const char *)"---", 3))),
      FIO_STRING_WRITE_STR2((const char *)" ", 1),
      FIO_STRING_WRITE_NUM(time_end - time_start),
      FIO_STRING_WRITE_STR2((const char *)(FIO___HTTP_TIME_UNIT "\r\n"), 4),
  };
  if (FIO_HTTP_LOG_X_REQUEST_START) {
    /* log request wait time using x-request-start header */
    fio_str_info_s xstart =
        fio_http_request_header(h,
                                FIO_STR_INFO2((char *)"x-request-start", 15),
                                0);
    unsigned step =
        (xstart.len > 1 && (xstart.buf[0] | 32) == 't' && xstart.buf[1] == '=');
    step <<= 1;
    xstart.buf += step;
    xstart.len -= step;
    time_proxy = fio_atol(&xstart.buf);
    time_proxy *= (FIO___HTTP_TIME_DIV / 1000); /* assumes info in ms */
    time_proxy = time_start - time_proxy;
    if (time_proxy < (512 * FIO___HTTP_TIME_DIV)) { /* was ms? */
      to_write[11] =
          FIO_STRING_WRITE_STR2((const char *)(FIO___HTTP_TIME_UNIT " (wait "),
                                9);
      to_write[12] = FIO_STRING_WRITE_NUM(time_proxy);
      to_write[13] =
          FIO_STRING_WRITE_STR2((const char *)(FIO___HTTP_TIME_UNIT ")\r\n"),
                                5);
    }
  }

  /* Write log line to buffer */
  fio___http_write_pid(&buf);
  buf.buf[buf.len++] = ' ';
  fio_http_from(&buf, h);
  FIO_MEMCPY(buf.buf + buf.len, " - - ", 5);
  FIO_MEMCPY(buf.buf + buf.len + 5, date.buf, date.len);
  buf.len += date.len + 6;
  buf.buf[buf.len++] = ' ';
  buf.buf[buf.len++] = '\"';
  fio_string_write2 FIO_NOOP(&buf, NULL, to_write);

  if (buf.buf[buf.len - 1] != '\n')
    buf.buf[buf.len++] = '\n'; /* log was truncated, data too long */

  /* Write log line to STDOUT */
  fwrite(buf.buf, 1, buf.len, stdout);
  h->received_at = time_end;
}

/* *****************************************************************************
ETag helper
***************************************************************************** */

/** Returns true (1) if the ETag response matches an if-none-match request. */
SFUNC int fio_http_etag_is_match(fio_http_s *h) {
  fio_str_info_s method = fio_keystr_info(&h->method);
  if ((method.len < 3) | (method.len > 4))
    return 0;
  if (!(((method.buf[0] | 32) == 'g') & ((method.buf[1] | 32) == 'e') &
        ((method.buf[2] | 32) == 't')) &&
      !(((method.buf[0] | 32) == 'h') & ((method.buf[1] | 32) == 'e') &
        ((method.buf[2] | 32) == 'a') & ((method.buf[3] | 32) == 'd')))
    return 0;
  fio_str_info_s etag = fio___http_hmap_get2(HTTP_HDR_RESPONSE(h),
                                             FIO_STR_INFO2((char *)"etag", 4),
                                             0);
  if (!etag.len)
    return 0;
  fio_str_info_s cond =
      fio___http_hmap_get2(HTTP_HDR_REQUEST(h),
                           FIO_STR_INFO2((char *)"if-none-match", 13),
                           0);
  if (!cond.len)
    return 0;
  char *end = cond.buf + cond.len;
  for (;;) {
    cond.buf += (cond.buf[0] == ',');
    while (cond.buf[0] == ' ')
      ++cond.buf;
    if (cond.buf > end || (size_t)(end - cond.buf) < (size_t)etag.len)
      return 0;
    if (FIO_MEMCMP(cond.buf, etag.buf, etag.len)) {
      cond.buf = (char *)FIO_MEMCHR(cond.buf, ',', end - cond.buf);
      if (!cond.buf)
        return 0;
      continue;
    }
    return 1;
  }
}

/* *****************************************************************************
Param Parsing (TODO! - parse query, parse mime/multipart parse text/json)
***************************************************************************** */

/* *****************************************************************************


                                TODO WIP Marker!!!


***************************************************************************** */

/* *****************************************************************************
Static file helper
***************************************************************************** */

/**
 * Attempts to send a static file from the `root` folder. On success the
 * response is complete and 0 is returned. Otherwise returns -1.
 */
SFUNC int fio_http_static_file_response(fio_http_s *h,
                                        fio_str_info_s rt,
                                        fio_str_info_s fnm,
                                        size_t max_age) {
  int fd = -1;
  size_t file_length = 0;
  /* combine public folder with path to get file name */
  fio_str_info_s mime_type = {0};
  FIO_STR_INFO_TMP_VAR(etag, 31);
  FIO_STR_INFO_TMP_VAR(filename, 4095);
  { /* test for HEAD and OPTIONS requests */
    fio_str_info_s m = fio_keystr_info(&h->method);
    if ((m.len == 7 && (fio_buf2u64u(m.buf) | 0x2020202020202020ULL) ==
                           (fio_buf2u64u("options") | 0x2020202020202020ULL)))
      goto file_not_found;
  }
  rt.len -= ((rt.len > 0) && (fnm.len > 0 && fnm.buf[0] == '/') &&
             (rt.buf[rt.len - 1] == '/' ||
              rt.buf[rt.len - 1] == FIO_FOLDER_SEPARATOR));
  fio_string_write(&filename, NULL, rt.buf, rt.len);
  fio_string_write_url_dec(&filename, NULL, fnm.buf, fnm.len);
  if (fio_filename_is_unsafe_url(filename.buf))
    goto file_not_found;

  { /* Test for incomplete file name */
    size_t file_type = fio_filename_type(filename.buf);
#if defined(S_IFDIR) && defined(FIO_HTTP_DEFAULT_INDEX_FILENAME)
    if (file_type == S_IFDIR) {
      filename.len -= (filename.buf[filename.len - 1] == '/' ||
                       filename.buf[filename.len - 1] == FIO_FOLDER_SEPARATOR);
#if FIO_HTTP_STATIC_FILE_COMPLETION
      fio_string_write(&filename,
                       NULL,
                       "/" FIO_HTTP_DEFAULT_INDEX_FILENAME,
                       sizeof(FIO_HTTP_DEFAULT_INDEX_FILENAME));
      file_type = 0;
#else
      fio_string_write(
          &filename,
          NULL, /* note that sizeof will count NUL, so we skip 1 char: */
          "/" FIO_HTTP_DEFAULT_INDEX_FILENAME ".html",
          sizeof(FIO_HTTP_DEFAULT_INDEX_FILENAME ".html"));
      file_type = fio_filename_type(filename.buf);
#endif /* FIO_HTTP_STATIC_FILE_COMPLETION */
    }
#endif /* S_IFDIR */
#if FIO_HTTP_STATIC_FILE_COMPLETION
    const fio_buf_info_s extensions[] = {FIO_BUF_INFO1((char *)".html"),
                                         FIO_BUF_INFO1((char *)".htm"),
                                         FIO_BUF_INFO1((char *)".txt"),
                                         FIO_BUF_INFO1((char *)".md"),
                                         FIO_BUF_INFO0};
    const fio_buf_info_s *pext = extensions;
    while (!file_type) {
      fio_string_write(&filename, NULL, pext->buf, pext->len);
      file_type = fio_filename_type(filename.buf);
      if (file_type)
        break;
      filename.len -= pext->len;
      ++pext;
      if (!pext->buf)
        goto file_not_found;
    }
    switch (file_type) {
    case S_IFREG: break;
#ifdef S_IFLNK
    case S_IFLNK: break;
#endif
    default: goto file_not_found;
    }
#else  /* FIO_HTTP_STATIC_FILE_COMPLETION */
    if (!file_type)
      goto file_not_found;
#endif /* FIO_HTTP_STATIC_FILE_COMPLETION */
  }
  {
    /* find mime type if registered */
    char *end = filename.buf + filename.len;
    char *ext = end;
    do {
      --ext;
    } while (ext[0] != '.' && ext[0] != '/');
    if ((ext++)[0] == '.') {
      mime_type = fio_http_mimetype(ext, end - ext);
      if (!mime_type.len)
        FIO_LOG_WARNING("missing mime-type for extension %s (not registered).",
                        ext);
    }
  }
  {
    fio_str_info_s ac =
        fio_http_request_header(h,
                                FIO_STR_INFO2((char *)"accept-encoding", 15),
                                0);
    if (!ac.len)
      goto accept_encoding_header_test_done;
    struct {
      char *value;
      fio_buf_info_s ext;
    } options[] = {{(char *)"gzip", FIO_BUF_INFO2((char *)".gz", 3)},
                   {(char *)"br", FIO_BUF_INFO2((char *)".br", 3)},
                   {(char *)"deflate", FIO_BUF_INFO2((char *)".zip", 4)},
                   {NULL}};
    for (size_t i = 0; options[i].value; ++i) {
      if (!strstr(ac.buf, options[i].value))
        continue;
      fio_string_write(&filename, NULL, options[i].ext.buf, options[i].ext.len);
      if (!fio_filename_type(filename.buf)) {
        filename.len -= options[i].ext.len;
        filename.buf[filename.len] = 0;
        continue;
      }
      fio_http_response_header_set(
          h,
          FIO_STR_INFO2((char *)"vary", 4),
          FIO_STR_INFO2((char *)"accept-encoding", 15));
      fio_http_response_header_set(
          h,
          FIO_STR_INFO2((char *)"content-encoding", 16),
          FIO_STR_INFO1(options[i].value));
      break;
    }
  }

accept_encoding_header_test_done:
  /* attempt to open file */
  fd = fio_filename_open(filename.buf, O_RDONLY);
  if (fd == -1)
    goto file_not_found;

  { /* test / validate etag */
    struct stat stt;
    if (fstat(fd, &stt))
      goto file_not_found;
    uint64_t etag_hash = fio_risky_hash(&stt, sizeof(stt), 0);
    fio_string_write_hex(&etag, NULL, etag_hash);
    fio_http_response_header_set(h, FIO_STR_INFO2((char *)"etag", 4), etag);
    filename.len = 0;
    filename.len = fio_time2rfc7231(filename.buf, stt.st_mtime);
    fio_http_response_header_set(h,
                                 FIO_STR_INFO1((char *)"last-modified"),
                                 filename);
    if (max_age) {
      filename.len = 0;
      fio_string_write2(&filename,
                        NULL,
                        FIO_STRING_WRITE_STR2("max-age=", 8),
                        FIO_STRING_WRITE_UNUM(max_age));
      fio_http_response_header_set(h,
                                   FIO_STR_INFO1((char *)"cache-control"),
                                   filename);
    }
    file_length = stt.st_size;
    filename.capa = 0;
    if (fio___http_response_etag_if_none_match(h))
      return 0;
  }
  /* test for range requests. */
  {
    /* test / validate range requests */
    fio_str_info_s rng =
        fio_http_request_header(h, FIO_STR_INFO2((char *)"range", 5), 0);
    if (!rng.len)
      goto range_request_review_finished;
    {
      fio_str_info_s ifrng =
          fio_http_request_header(h, FIO_STR_INFO2((char *)"if-range", 8), 0);
      if (ifrng.len && !FIO_STR_INFO_IS_EQ(ifrng, etag))
        goto range_request_review_finished;
    }
    if (rng.len < 7 || fio_buf2u32u(rng.buf) != fio_buf2u32u("byte") ||
        fio_buf2u16u(rng.buf + 4) != fio_buf2u16u("s="))
      goto range_request_review_finished;
    char *ipos = rng.buf + 6;
    size_t start_range = fio_atol10u(&ipos);
    if (ipos == rng.buf + 6)
      start_range = (size_t)-1;
    if (*ipos != '-')
      goto range_request_review_finished;
    ++ipos;
    size_t end_range = fio_atol10u(&ipos);
    if (end_range > file_length)
      goto range_request_review_finished;
    if (!end_range)
      end_range = file_length - 1;
    if (start_range == (size_t)-1) {
      start_range = file_length - end_range;
      end_range = file_length - 1;
    }
    if (start_range > end_range || end_range > file_length)
      goto invalid_range;
    if (!start_range && end_range + 1 == file_length)
      goto range_request_review_finished;
    /* update response headers and info */
    h->status = 206;
    filename.len = 0;
    filename.capa = 1024;
    fio_string_write2(&filename,
                      NULL,
                      FIO_STRING_WRITE_STR2("bytes ", 6),
                      FIO_STRING_WRITE_UNUM(start_range),
                      FIO_STRING_WRITE_STR2("-", 1),
                      FIO_STRING_WRITE_UNUM((end_range)),
                      FIO_STRING_WRITE_STR2("/", 1),
                      FIO_STRING_WRITE_UNUM(file_length));
    fio_http_response_header_set(h,
                                 FIO_STR_INFO2((char *)"content-range", 13),
                                 filename);
    file_length = (end_range - start_range) + 1;
    filename.capa = start_range;
    fio_http_response_header_set(h,
                                 FIO_STR_INFO2((char *)"etag", 4),
                                 FIO_STR_INFO2(NULL, 0));
  }

range_request_review_finished:
  /* allow interrupted downloads to resume */
  fio_http_response_header_set(h,
                               FIO_STR_INFO2((char *)"accept-ranges", 13),
                               FIO_STR_INFO2((char *)"bytes", 5));
  /* test for HEAD requests */
  {
    fio_str_info_s m = fio_keystr_info(&h->method);
    if ((m.len == 4 && (fio_buf2u32u(m.buf) | 0x20202020UL) ==
                           (fio_buf2u32u("head") | 0x20202020UL)))
      goto head_request;
  }

  /* finish up (set mime type and send file) */
  if (mime_type.len)
    fio_http_response_header_set(h,
                                 FIO_STR_INFO2((char *)"content-type", 12),
                                 mime_type);
  { /* send response (avoid macro for C++ compatibility) */
    fio_http_write_args_s args = {
        .len = file_length,
        .offset = filename.capa, /* now holds starting offset */
        .fd = fd,
        .finish = 1};
    fio_http_write FIO_NOOP(h, args);
  }
  return 0;

file_not_found:
  if (fd != -1)
    close(fd);
  return -1;

head_request:
  /* TODO! HEAD responses should close?. */
  if (fd != -1)
    close(fd);
  {
    fio_http_write_args_s args = {.finish = 1};
    fio_http_write FIO_NOOP(h, args);
  }
  return 0;

invalid_range:
  filename.len = 0;
  filename.capa = 1024;
  fio_string_write2(&filename,
                    NULL,
                    FIO_STRING_WRITE_STR2("bytes */", 8),
                    FIO_STRING_WRITE_UNUM(file_length));
  fio_http_response_header_set(h,
                               FIO_STR_INFO2((char *)"content-range", 13),
                               filename);
  return fio_http_send_error_response(h, 416);
}

/* *****************************************************************************
Status Strings
***************************************************************************** */

/** Returns a human readable string related to the HTTP status number. */
SFUNC fio_str_info_s fio_http_status2str(size_t status) {
  fio_str_info_s r = {0};
#define HTTP_RETURN_STATUS(str)                                                \
  do {                                                                         \
    r.len = FIO_STRLEN(str);                                                   \
    r.buf = (char *)str;                                                       \
    return r;                                                                  \
  } while (0);
  switch (status) {
  // clang-format off
  case 100: HTTP_RETURN_STATUS("Continue");
  case 101: HTTP_RETURN_STATUS("Switching Protocols");
  case 102: HTTP_RETURN_STATUS("Processing");
  case 103: HTTP_RETURN_STATUS("Early Hints");
  case 110: HTTP_RETURN_STATUS("Response is Stale"); /* caching code*/
  case 111: HTTP_RETURN_STATUS("Re-validation Failed"); /* caching code*/
  case 112: HTTP_RETURN_STATUS("Disconnected Operation"); /* caching code*/
  case 113: HTTP_RETURN_STATUS("Heuristic Expiration"); /* caching code*/
  case 199: HTTP_RETURN_STATUS("Miscellaneous Warning"); /* caching code*/
  case 200: HTTP_RETURN_STATUS("OK");
  case 201: HTTP_RETURN_STATUS("Created");
  case 202: HTTP_RETURN_STATUS("Accepted");
  case 203: HTTP_RETURN_STATUS("Non-Authoritative Information");
  case 204: HTTP_RETURN_STATUS("No Content");
  case 205: HTTP_RETURN_STATUS("Reset Content");
  case 206: HTTP_RETURN_STATUS("Partial Content");
  case 207: HTTP_RETURN_STATUS("Multi-Status");
  case 208: HTTP_RETURN_STATUS("Already Reported");
  case 214: HTTP_RETURN_STATUS("Transformation Applied"); /* caching code*/
  case 218: HTTP_RETURN_STATUS("This is fine (Apache Web Server)"); /* unofficial */
  case 226: HTTP_RETURN_STATUS("IM Used");
  case 299: HTTP_RETURN_STATUS("Miscellaneous Persistent Warning"); /* caching code*/
  case 300: HTTP_RETURN_STATUS("Multiple Choices");
  case 301: HTTP_RETURN_STATUS("Moved Permanently");
  case 302: HTTP_RETURN_STATUS("Found");
  case 303: HTTP_RETURN_STATUS("See Other");
  case 304: HTTP_RETURN_STATUS("Not Modified");
  case 305: HTTP_RETURN_STATUS("Use Proxy");
  case 307: HTTP_RETURN_STATUS("Temporary Redirect");
  case 308: HTTP_RETURN_STATUS("Permanent Redirect");
  case 400: HTTP_RETURN_STATUS("Bad Request");
  case 401: HTTP_RETURN_STATUS("Unauthorized");
  case 402: HTTP_RETURN_STATUS("Payment Required");
  case 403: HTTP_RETURN_STATUS("Forbidden");
  case 404: HTTP_RETURN_STATUS("Not Found");
  case 405: HTTP_RETURN_STATUS("Method Not Allowed");
  case 406: HTTP_RETURN_STATUS("Not Acceptable");
  case 407: HTTP_RETURN_STATUS("Proxy Authentication Required");
  case 408: HTTP_RETURN_STATUS("Request Timeout");
  case 409: HTTP_RETURN_STATUS("Conflict");
  case 410: HTTP_RETURN_STATUS("Gone");
  case 411: HTTP_RETURN_STATUS("Length Required");
  case 412: HTTP_RETURN_STATUS("Precondition Failed");
  case 413: HTTP_RETURN_STATUS("Content Too Large");
  case 414: HTTP_RETURN_STATUS("URI Too Long");
  case 415: HTTP_RETURN_STATUS("Unsupported Media Type");
  case 416: HTTP_RETURN_STATUS("Range Not Satisfiable");
  case 417: HTTP_RETURN_STATUS("Expectation Failed");
  case 418: HTTP_RETURN_STATUS("I am a Teapot"); /* April Fool's Day, 1998 */
  case 419: HTTP_RETURN_STATUS("Page Expired (Laravel Framework)"); /* unofficial */
  case 420: HTTP_RETURN_STATUS("Enhance Your Calm (Twitter) - Method Failure (Spring Framework)"); /* unofficial */
  case 421: HTTP_RETURN_STATUS("Misdirected Request");
  case 422: HTTP_RETURN_STATUS("Unprocessable Content");
  case 423: HTTP_RETURN_STATUS("Locked");
  case 424: HTTP_RETURN_STATUS("Failed Dependency");
  case 425: HTTP_RETURN_STATUS("Too Early");
  case 426: HTTP_RETURN_STATUS("Upgrade Required");
  case 427: HTTP_RETURN_STATUS("Unassigned");
  case 428: HTTP_RETURN_STATUS("Precondition Required");
  case 429: HTTP_RETURN_STATUS("Too Many Requests");
  case 430: HTTP_RETURN_STATUS("Request Header Fields Too Large (Shopify)"); /* unofficial */
  case 431: HTTP_RETURN_STATUS("Request Header Fields Too Large");
  case 444: HTTP_RETURN_STATUS("No Response"); /* nginx code */
  case 450: HTTP_RETURN_STATUS("Blocked by Windows Parental Controls (Microsoft)"); /* unofficial */
  case 451: HTTP_RETURN_STATUS("Unavailable For Legal Reasons");
  case 494: HTTP_RETURN_STATUS("Request header too large"); /* nginx code */
  case 495: HTTP_RETURN_STATUS("SSL Certificate Error"); /* nginx code */
  case 496: HTTP_RETURN_STATUS("SSL Certificate Required"); /* nginx code */
  case 497: HTTP_RETURN_STATUS("HTTP Request Sent to HTTPS Port"); /* nginx code */
  case 498: HTTP_RETURN_STATUS("Invalid Token (Esri)"); /* unofficial */
  case 499: HTTP_RETURN_STATUS("Client Closed Request"); /* nginx code */
  case 500: HTTP_RETURN_STATUS("Internal Server Error");
  case 501: HTTP_RETURN_STATUS("Not Implemented");
  case 502: HTTP_RETURN_STATUS("Bad Gateway");
  case 503: HTTP_RETURN_STATUS("Service Unavailable");
  case 504: HTTP_RETURN_STATUS("Gateway Timeout");
  case 505: HTTP_RETURN_STATUS("HTTP Version Not Supported");
  case 506: HTTP_RETURN_STATUS("Variant Also Negotiates");
  case 507: HTTP_RETURN_STATUS("Insufficient Storage");
  case 508: HTTP_RETURN_STATUS("Loop Detected");
  case 509: HTTP_RETURN_STATUS("Bandwidth Limit Exceeded (Apache Web Server/cPanel)"); /* unofficial */
  case 510: HTTP_RETURN_STATUS("Not Extended");
  case 511: HTTP_RETURN_STATUS("Network Authentication Required");
  case 529: HTTP_RETURN_STATUS("Site is overloaded (Qualys)"); /* unofficial */
  case 530: HTTP_RETURN_STATUS("Site is frozen (Pantheon web)"); /* unofficial */
  case 598: HTTP_RETURN_STATUS("Network read timeout error"); /* unofficial */
    // clang-format on
  }
  HTTP_RETURN_STATUS("Unknown");
#undef HTTP_RETURN_STATUS
}

/* *****************************************************************************
MIME File Type Helpers
***************************************************************************** */

typedef struct {
  uint64_t ext;
  uint16_t len;
  char mime[118]; /* all together 128 bytes per node */
} fio___http_mime_info_s;

#define FIO___HTTP_MIME_IS_VALID(o) ((o)->ext != 0)
#define FIO___HTTP_MIME_CMP(a, b)   ((a)->ext == (b)->ext)
#define FIO___HTTP_MIME_HASH(o)     fio_risky_num(((o)->ext), 0)

#undef FIO_TYPEDEF_IMAP_REALLOC
#define FIO_TYPEDEF_IMAP_REALLOC(ptr, old_size, new_size, copy_len)            \
  realloc(ptr, new_size)
#undef FIO_TYPEDEF_IMAP_REALLOC_IS_SAFE
#define FIO_TYPEDEF_IMAP_REALLOC_IS_SAFE 0
#undef FIO_TYPEDEF_IMAP_FREE
#define FIO_TYPEDEF_IMAP_FREE(ptr, len) free(ptr)

FIO_TYPEDEF_IMAP_ARRAY(fio___http_mime_map,
                       fio___http_mime_info_s,
                       uint32_t,
                       FIO___HTTP_MIME_HASH,
                       FIO___HTTP_MIME_CMP,
                       FIO___HTTP_MIME_IS_VALID)

static fio___http_mime_map_s FIO___HTTP_MIMETYPES;
#undef FIO___HTTP_MIME_IS_VALID
#undef FIO___HTTP_MIME_CMP
#undef FIO___HTTP_MIME_HASH

#undef FIO_TYPEDEF_IMAP_REALLOC
#define FIO_TYPEDEF_IMAP_REALLOC FIO_MEM_REALLOC
#undef FIO_TYPEDEF_IMAP_REALLOC_IS_SAFE
#define FIO_TYPEDEF_IMAP_REALLOC_IS_SAFE FIO_MEM_REALLOC_IS_SAFE
#undef FIO_TYPEDEF_IMAP_FREE
#define FIO_TYPEDEF_IMAP_FREE FIO_MEM_FREE

/** Registers a Mime-Type to be associated with the file extension. */
SFUNC int fio_http_mimetype_register(char *file_ext,
                                     size_t file_ext_len,
                                     fio_str_info_s mime_type) {
  fio___http_mime_info_s tmp, *old;
  if (file_ext_len > 7 || mime_type.len > 117)
    return -1;
  tmp.ext = 0;
  FIO_MEMCPY(&tmp.ext, file_ext, file_ext_len);
  if (!mime_type.len)
    goto remove_mime;
  FIO_MEMCPY(&tmp.mime, mime_type.buf, mime_type.len);
  tmp.len = mime_type.len;
  tmp.mime[mime_type.len] = 0;
  old = fio___http_mime_map_get(&FIO___HTTP_MIMETYPES, tmp);
  if (old && old->len == tmp.len && !FIO_MEMCMP(old->mime, tmp.mime, tmp.len)) {
    FIO_LOG_WARNING("mime-type collision: %.*s was %s, now %s",
                    (int)file_ext_len,
                    file_ext,
                    old->mime,
                    tmp.mime);
  }
  fio___http_mime_map_set(&FIO___HTTP_MIMETYPES, tmp, 1);
  return 0;

remove_mime:
  return fio___http_mime_map_remove(&FIO___HTTP_MIMETYPES, tmp);
}

/** Finds the Mime-Type associated with the file extension (if registered). */
SFUNC fio_str_info_s fio_http_mimetype(char *file_ext, size_t file_ext_len) {
  fio_str_info_s r = {0};
  fio___http_mime_info_s tmp, *val;
  tmp.ext = 0;
  FIO_MEMCPY(&tmp.ext, file_ext, file_ext_len);
  val = fio___http_mime_map_get(&FIO___HTTP_MIMETYPES, tmp);
  if (!val)
    return r;
  r.len = val->len;
  r.buf = val->mime;
  return r;
}

#define REGISTER_MIME(ext, type)                                               \
  fio_http_mimetype_register((char *)ext,                                      \
                             sizeof(ext) - 1,                                  \
                             FIO_STR_INFO2((char *)type, sizeof(type) - 1))

/** Registers known mime-types that aren't often used by Web Servers. */
FIO_SFUNC void fio_http_mime_register_essential(void) {
  /* clang-format off */
  REGISTER_MIME("3ds", "image/x-3ds");
  REGISTER_MIME("3g2", "video/3gpp");
  REGISTER_MIME("3gp", "video/3gpp");
  REGISTER_MIME("7z", "application/x-7z-compressed");
  REGISTER_MIME("aac", "audio/aac");
  REGISTER_MIME("abw", "application/x-abiword");
  REGISTER_MIME("aif", "audio/x-aiff");
  REGISTER_MIME("aifc", "audio/x-aiff");
  REGISTER_MIME("aiff", "audio/x-aiff");
  REGISTER_MIME("arc", "application/x-freearc");
  REGISTER_MIME("atom", "application/atom+xml");
  REGISTER_MIME("avi", "video/x-msvideo");
  REGISTER_MIME("avif", "image/avif");
  REGISTER_MIME("azw", "application/vnd.amazon.ebook");
  REGISTER_MIME("bin", "application/octet-stream");
  REGISTER_MIME("bmp", "image/bmp");
  REGISTER_MIME("bz", "application/x-bzip");
  REGISTER_MIME("bz2", "application/x-bzip2");
  REGISTER_MIME("cda", "application/x-cdf");
  REGISTER_MIME("csh", "application/x-csh");
  REGISTER_MIME("css", "text/css");
  REGISTER_MIME("csv", "text/csv");
  REGISTER_MIME("dmg", "application/x-apple-diskimage");
  REGISTER_MIME("doc", "application/msword");
  REGISTER_MIME("docx", "application/" "vnd.openxmlformats-officedocument.wordprocessingml.document");
  REGISTER_MIME("eot", "application/vnd.ms-fontobject");
  REGISTER_MIME("epub", "application/epub+zip");
  REGISTER_MIME("gif", "image/gif");
  REGISTER_MIME("gz", "application/gzip");
  REGISTER_MIME("htm", "text/html");
  REGISTER_MIME("html", "text/html");
  REGISTER_MIME("ico", "image/vnd.microsoft.icon");
  REGISTER_MIME("ics", "text/calendar");
  REGISTER_MIME("iso", "application/x-iso9660-image");
  REGISTER_MIME("jar", "application/java-archive");
  REGISTER_MIME("jpe", "image/jpeg");
  REGISTER_MIME("jpeg", "image/jpeg");
  REGISTER_MIME("jpg", "image/jpeg");
  REGISTER_MIME("jpgm", "video/jpm");
  REGISTER_MIME("jpgv", "video/jpeg");
  REGISTER_MIME("jpm", "video/jpm");
  REGISTER_MIME("js", "application/javascript");
  REGISTER_MIME("json", "application/json");
  REGISTER_MIME("jsonld", "application/ld+json");
  REGISTER_MIME("jsonml", "application/jsonml+json");
  REGISTER_MIME("md", "text/markdown");  
  REGISTER_MIME("mid", "audio/midi");
  REGISTER_MIME("midi", "audio/midi");
  REGISTER_MIME("mjs", "text/javascript");
  REGISTER_MIME("mp3", "audio/mpeg");
  REGISTER_MIME("mp4", "video/mp4");
  REGISTER_MIME("m4v", "video/mp4");
  REGISTER_MIME("mpeg", "video/mpeg");
  REGISTER_MIME("mpkg", "application/vnd.apple.installer+xml");
  REGISTER_MIME("odp", "application/vnd.oasis.opendocument.presentation");
  REGISTER_MIME("ods", "application/vnd.oasis.opendocument.spreadsheet");
  REGISTER_MIME("odt", "application/vnd.oasis.opendocument.text");
  REGISTER_MIME("oga", "audio/ogg");
  REGISTER_MIME("ogv", "video/ogg");
  REGISTER_MIME("ogx", "application/ogg");
  REGISTER_MIME("opus", "audio/opus");
  REGISTER_MIME("otf", "font/otf");
  REGISTER_MIME("pdf", "application/pdf");
  REGISTER_MIME("php", "application/x-httpd-php");
  REGISTER_MIME("png", "image/png");
  REGISTER_MIME("ppt", "application/vnd.ms-powerpoint");
  REGISTER_MIME("pptx","application/""vnd.openxmlformats-officedocument.presentationml.presentation");
  REGISTER_MIME("rar", "application/vnd.rar");
  REGISTER_MIME("rtf", "application/rtf");
  REGISTER_MIME("sh", "application/x-sh");
  REGISTER_MIME("svg", "image/svg+xml");
  REGISTER_MIME("svgz", "image/svg+xml");
  REGISTER_MIME("tar", "application/x-tar");
  REGISTER_MIME("tif", "image/tiff");
  REGISTER_MIME("tiff", "image/tiff");
  REGISTER_MIME("ts", "video/mp2t");
  REGISTER_MIME("ttf", "font/ttf");
  REGISTER_MIME("txt", "text/plain");
  REGISTER_MIME("vsd", "application/vnd.visio");
  REGISTER_MIME("wav", "audio/wav");
  REGISTER_MIME("weba", "audio/webm");
  REGISTER_MIME("webm", "video/webm");
  REGISTER_MIME("webp", "image/webp");
  REGISTER_MIME("woff", "font/woff");
  REGISTER_MIME("woff2", "font/woff2");
  REGISTER_MIME("xhtml", "application/xhtml+xml");
  REGISTER_MIME("xls", "application/vnd.ms-excel");
  REGISTER_MIME("xlsx","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
  REGISTER_MIME("xml", "application/xml");
  REGISTER_MIME("xul", "application/vnd.mozilla.xul+xml");
  REGISTER_MIME("zip", "application/zip");
  /* clang-format on */
}

#undef REGISTER_MIME

/* *****************************************************************************
Constructor / Destructor
***************************************************************************** */

FIO_SFUNC void fio___http_cleanup(void *ignr_) {
  (void)ignr_;
#if FIO_HTTP_CACHE_LIMIT
  for (size_t i = 0; i < 2; ++i) {
    const char *names[] = {"cookie names", "header values"};
    FIO_LOG_DEBUG2(
        "freeing %zu strings from %s cache (capacity was: %zu)",
        fio___http_str_cache_count(&FIO___HTTP_STRING_CACHE[i].cache),
        names[i],
        fio___http_str_cache_capa(&FIO___HTTP_STRING_CACHE[i].cache));
#ifdef FIO_LOG_LEVEL_DEBUG
    if (FIO_LOG_LEVEL_DEBUG == FIO_LOG_LEVEL) {
      FIO_MAP_EACH(fio___http_str_cache,
                   (&FIO___HTTP_STRING_CACHE[i].cache),
                   pos) {
        fprintf(stderr, "\t \"%s\" (%zu bytes)\n", pos.key.buf, pos.key.len);
      }
    }
#endif
    fio___http_str_cache_destroy(&FIO___HTTP_STRING_CACHE[i].cache);
    FIO___LOCK_DESTROY(FIO___HTTP_STRING_CACHE[i].lock);
    (void)names; /* if unused */
  }
#endif /* FIO_HTTP_CACHE_LIMIT */
  FIO_LOG_DEBUG2("(%d) HTTP MIME hash storage count/capa: %zu / %zu",
                 fio_getpid(),
                 FIO___HTTP_MIMETYPES.count,
                 fio___http_mime_map_capa(&FIO___HTTP_MIMETYPES));
  fio___http_mime_map_destroy(&FIO___HTTP_MIMETYPES);
}

FIO_CONSTRUCTOR(fio___http_str_cache_static_builder) {
  fio___http_str_cached_init();
  fio_state_callback_add(FIO_CALL_AT_EXIT, fio___http_cleanup, NULL);
  fio_http_mime_register_essential();
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#undef FIO___HTTP_TIME_DIV
#undef FIO___HTTP_TIME_UNIT

#endif /* FIO_EXTERN_COMPLETE */

#undef FIO_HTTP_HANDLE
#endif /* FIO_HTTP_HANDLE */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_HTTP1_PARSER       /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                                HTTP/1.1 Parser




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_HTTP1_PARSER) && !defined(H___FIO_HTTP1_PARSER___H) &&         \
    (defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN))
/* *****************************************************************************
The HTTP/1.1 provides static functions only, always as part or implementation.
***************************************************************************** */
#define H___FIO_HTTP1_PARSER___H

/* *****************************************************************************
HTTP/1.x Parser API
***************************************************************************** */

/** The HTTP/1.1 parser type */
typedef struct fio_http1_parser_s fio_http1_parser_s;
/** Initialization value for the parser */
#define FIO_HTTP1_PARSER_INIT ((fio_http1_parser_s){0})

/**
 * Parses HTTP/1.x data, calling any callbacks.
 *
 * Returns bytes consumed or `FIO_HTTP1_PARSER_ERROR` (`(size_t)-1`) on error.
 */
FIO_SFUNC size_t fio_http1_parse(fio_http1_parser_s *p,
                                 fio_buf_info_s buf,
                                 void *udata);

/** Returns true if the parser is waiting to parse a new request/response .*/
FIO_IFUNC size_t fio_http1_parser_is_empty(fio_http1_parser_s *p);

/** The error return value for fio_http1_parse. */
#define FIO_HTTP1_PARSER_ERROR ((size_t)-1)

/** Returns the number of bytes of payload still expected to be received. */
FIO_IFUNC size_t fio_http1_expected(fio_http1_parser_s *p);
/** A return value for `fio_http1_expected` when chunked data is expected. */
#define FIO_HTTP1_EXPECTED_CHUNKED ((size_t)(-1))

/* *****************************************************************************
HTTP/1.x callbacks (to be implemented by parser user)
***************************************************************************** */

/** called when either a request or a response was received. */
static void fio_http1_on_complete(void *udata);
/** called when a request method is parsed. */
static int fio_http1_on_method(fio_buf_info_s method, void *udata);
/** called when a response status is parsed. the status_str is the string
 * without the prefixed numerical status indicator.*/
static int fio_http1_on_status(size_t istatus,
                               fio_buf_info_s status,
                               void *udata);
/** called when a request URL is parsed. */
static int fio_http1_on_url(fio_buf_info_s path, void *udata);
/** called when a the HTTP/1.x version is parsed. */
static int fio_http1_on_version(fio_buf_info_s version, void *udata);
/** called when a header is parsed. */
static int fio_http1_on_header(fio_buf_info_s name,
                               fio_buf_info_s value,
                               void *udata);
/** called when the special content-length header is parsed. */
static int fio_http1_on_header_content_length(fio_buf_info_s name,
                                              fio_buf_info_s value,
                                              size_t content_length,
                                              void *udata);
/** called when `Expect` arrives and may require a 100 continue response. */
static int fio_http1_on_expect(void *udata);
/** called when a body chunk is parsed. */
static int fio_http1_on_body_chunk(fio_buf_info_s chunk, void *udata);

/* *****************************************************************************
Implementation Stage Helpers
***************************************************************************** */

/* parsing stage 0 - read first line (proxy?). */
static int fio_http1___start(fio_http1_parser_s *p,
                             fio_buf_info_s *buf,
                             void *udata);
/* parsing stage 1 - read headers. */
static int fio_http1___read_header(fio_http1_parser_s *p,
                                   fio_buf_info_s *buf,
                                   void *udata);
/* parsing stage 2 - read body. */
static int fio_http1___read_body(fio_http1_parser_s *p,
                                 fio_buf_info_s *buf,
                                 void *udata);
/* parsing stage 2 - read chunked body. */
static int fio_http1___read_body_chunked(fio_http1_parser_s *p,
                                         fio_buf_info_s *buf,
                                         void *udata);
/* parsing stage 1 - read headers. */
static int fio_http1___read_trailer(fio_http1_parser_s *p,
                                    fio_buf_info_s *buf,
                                    void *udata);
/* completed parsing. */
static int fio_http1___finish(fio_http1_parser_s *p,
                              fio_buf_info_s *buf,
                              void *udata);

/* *****************************************************************************
HTTP Parser Type
***************************************************************************** */

/** The HTTP/1.1 parser type implementation */
struct fio_http1_parser_s {
  int (*fn)(fio_http1_parser_s *, fio_buf_info_s *, void *);
  size_t expected;
};

/** Returns true if the parser is waiting to parse a new request/response .*/
FIO_IFUNC size_t fio_http1_parser_is_empty(fio_http1_parser_s *p) {
  return !p->fn || p->fn == fio_http1___start;
}

/** Returns the number of bytes of payload still expected to be received. */
FIO_IFUNC size_t fio_http1_expected(fio_http1_parser_s *p) {
  return p->expected;
}

/* *****************************************************************************
Main Parsing Loop
***************************************************************************** */

FIO_SFUNC size_t fio_http1_parse(fio_http1_parser_s *p,
                                 fio_buf_info_s buf,
                                 void *udata) {
  int i = 0;
  char *buf_start = buf.buf;
  if (!buf.len)
    return 0;
  if (!p->fn)
    p->fn = fio_http1___start;
  while (!(i = p->fn(p, &buf, udata)))
    ;
  if (i < 0)
    return FIO_HTTP1_PARSER_ERROR;
  return buf.buf - buf_start;
}

/* completed parsing. */
static int fio_http1___finish(fio_http1_parser_s *p,
                              fio_buf_info_s *buf,
                              void *udata) {
  (void)buf;
  *p = (fio_http1_parser_s){0};
  fio_http1_on_complete(udata);
  return 1;
}

/* *****************************************************************************
Reading the first line
***************************************************************************** */

/* parsing stage 0 - read first line (TODO: proxy protocol support?). */
static int fio_http1___start(fio_http1_parser_s *p,
                             fio_buf_info_s *buf,
                             void *udata) {
  /* find line start/end and test */
  fio_buf_info_s wrd[3];
  char *start = buf->buf;
  char *tmp;
  while ((start[0] == ' ' || start[0] == '\r' || start[0] == '\n') &&
         start < buf->buf + buf->len) /* skip white space */
    ++start;
  if (start == buf->buf + buf->len) {
    buf->buf = start;
    return 1;
  }
  char *eol = (char *)FIO_MEMCHR(start, '\n', buf->len);
  if (!eol)
    return 1;
  if (start + 13 > eol) /* test for minimal data GET HTTP/1 or ### HTTP/1 */
    return -1;

  /* prep next stage */
  buf->len -= (eol - buf->buf) + 1;
  buf->buf = eol + 1;
  eol -= eol[-1] == '\r';

  /* parse first line */
  /* request: method path version ; response: version code txt */
  if (!(tmp = (char *)FIO_MEMCHR(start, ' ', (size_t)(eol - start))))
    return -1;
  wrd[0] = FIO_BUF_INFO2(start, (size_t)(tmp - start));
  start = tmp + 1;
  if (!(tmp = (char *)FIO_MEMCHR(start, ' ', eol - start)))
    return -1;
  wrd[1] = FIO_BUF_INFO2(start, (size_t)(tmp - start));
  start = tmp + 1;
  if (start >= eol)
    return -1;
  wrd[2] = FIO_BUF_INFO2(start, (size_t)(eol - start));
  if (fio_c2i(wrd[1].buf[0]) < 10) /* test if path or code */
    goto parse_response_line;
  if (wrd[2].len > 14)
    wrd[2].len = 14;
  if (fio_http1_on_method(wrd[0], udata))
    return -1;
  if (fio_http1_on_url(wrd[1], udata))
    return -1;
  if (fio_http1_on_version(wrd[2], udata))
    return -1;
  return (p->fn = fio_http1___read_header)(p, buf, udata);

parse_response_line:
  if (wrd[0].len > 14)
    wrd[0].len = 14;
  if (fio_http1_on_version(wrd[0], udata))
    return -1;
  if (fio_http1_on_status(fio_atol10u(&wrd[1].buf), wrd[2], udata))
    return -1;
  return (p->fn = fio_http1___read_header)(p, buf, udata);
}

/* *****************************************************************************
Reading Headers
***************************************************************************** */

/* parsing stage 1 - read headers (after `expect` header). */
static int fio_http1___read_header_post_expect(fio_http1_parser_s *p,
                                               fio_buf_info_s *buf,
                                               void *udata);

/* handle headers before calling callback. */
static inline int fio_http1___on_header(fio_http1_parser_s *p,
                                        fio_buf_info_s name,
                                        fio_buf_info_s value,
                                        void *udata) {
  /* test for special headers */
  switch (name.len) {
  case 6: /* test for "expect" */
    if (value.len == 12 && fio_buf2u32u(name.buf) == fio_buf2u32u("expe") &&
        fio_buf2u32u(name.buf + 2) == fio_buf2u32u("pect") &&
        fio_buf2u64u(value.buf) == fio_buf2u64u("100-cont") &&
        fio_buf2u32u(value.buf + 8) == fio_buf2u32u("inue")) { /* Expect */
      p->fn = fio_http1___read_header_post_expect;
      return 0;
    }
    break;
  case 14: /* test for "content-length" */
    if (fio_buf2u64u(name.buf) == fio_buf2u64u("content-") &&
        fio_buf2u64u(name.buf + 6) == fio_buf2u64u("t-length")) {
      char *tmp = value.buf;
      uint64_t clen = fio_atol10u(&tmp);
      if (tmp != value.buf + value.len)
        return -1;
      if (p->expected)
        return 0 - (p->expected != clen);
      p->expected = clen;
      return 0 -
             (fio_http1_on_header_content_length(name, value, clen, udata) ==
              -1);
    }
    break;
  case 17: /* test for "transfer-encoding" (chunked?) */
    if (value.len >= 7 && (name.buf[16] == 'g') &&
        !((fio_buf2u64u(name.buf) ^ fio_buf2u64u("transfer")) |
          (fio_buf2u64u(name.buf + 8) ^ fio_buf2u64u("-encodin")))) {
      char *c_start = value.buf + value.len - 7;
      if ((fio_buf2u32u(c_start) | 0x20202020UL) == fio_buf2u32u("chun") &&
          (fio_buf2u32u(c_start + 3) | 0x20202020UL) == fio_buf2u32u("nked")) {
        if (p->expected && p->expected != FIO_HTTP1_EXPECTED_CHUNKED)
          return -1;
        p->expected = FIO_HTTP1_EXPECTED_CHUNKED;
        /* endpoint does not need to know if the body was chunked or not */
        if (value.len == 7)
          return 0;
        if (c_start[-1] != ' ' && c_start[-1] != ',' && c_start[-1] != '\t')
          return -1;
        while (
            (c_start[-1] == ' ' || c_start[-1] == ',' || c_start[-1] == '\t') &&
            c_start > value.buf)
          --c_start;
        if (c_start == value.buf)
          return 0;
        value.len = c_start - value.buf;
      }
    }
    break;
  }
  /* perform callback */
  return 0 - (fio_http1_on_header(name, value, udata) == -1);
}

/* handle trailers (chunked encoding only) before calling callback. */
static inline int fio_http1___on_trailer(fio_http1_parser_s *p,
                                         fio_buf_info_s name,
                                         fio_buf_info_s value,
                                         void *udata) {
  (void)p;
  fio_buf_info_s forbidden[] = {
      FIO_BUF_INFO1((char *)"authorization"),
      FIO_BUF_INFO1((char *)"cache-control"),
      FIO_BUF_INFO1((char *)"content-encoding"),
      FIO_BUF_INFO1((char *)"content-length"),
      FIO_BUF_INFO1((char *)"content-range"),
      FIO_BUF_INFO1((char *)"content-type"),
      FIO_BUF_INFO1((char *)"expect"),
      FIO_BUF_INFO1((char *)"host"),
      FIO_BUF_INFO1((char *)"max-forwards"),
      FIO_BUF_INFO1((char *)"set-cookie"),
      FIO_BUF_INFO1((char *)"te"),
      FIO_BUF_INFO1((char *)"trailer"),
      FIO_BUF_INFO1((char *)"transfer-encoding"),
      FIO_BUF_INFO2(NULL, 0),
  }; /* known forbidden headers in trailer */
  for (size_t i = 0; forbidden[i].buf; ++i) {
    if (FIO_BUF_INFO_IS_EQ(name, forbidden[i]))
      return -1;
  }
  return fio_http1_on_header(name, value, udata);
}

/* returns either a lower case (ASCI) or the original char. */
static uint8_t fio_http1_tolower(uint8_t c) {
  if ((c - ((uint8_t)'A' - 1U)) < ((uint8_t)'Z' - (uint8_t)'A'))
    c |= 32;
  return c;
}

/* seeks to the ':' divisor while testing and converting to downcase. */
static char *fio_http1___seek_header_div(char *p) {
  /* this is the subset of the forbidden chars that allows UTF-8 headers */
  static const _Bool forbidden_name_chars[256] = {
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  for (;;) {
    *p = (char)fio_http1_tolower((uint8_t)(*p));
    ++p;
    if (FIO_UNLIKELY(forbidden_name_chars[((uint8_t)(*p))]))
      return p;
  }
}

/* extract header name and value from a line and pass info to handler */
static inline int fio_http1___read_header_line(
    fio_http1_parser_s *p,
    fio_buf_info_s *buf,
    void *udata,
    int (*handler)(fio_http1_parser_s *,
                   fio_buf_info_s,
                   fio_buf_info_s,
                   void *)) {
  for (;;) {
    char *start = buf->buf;
    char *eol = (char *)FIO_MEMCHR(start, '\n', buf->len);
    char *div;
    fio_buf_info_s name, value;
    if (!eol)
      return 1;

    buf->len -= (eol - buf->buf) + 1;
    buf->buf = eol + 1;
    eol -= (eol[-1] == '\r');
    if (FIO_UNLIKELY(eol == start))
      goto headers_finished;

    div = fio_http1___seek_header_div(start);
    if (div[0] != ':')
      return -1;
    name = FIO_BUF_INFO2(start, (size_t)(div - start));
    do {
      ++div;
    } while (*div == ' ' || *div == '\t');

    if (div != eol)
      while (eol[-1] == ' ' || eol[-1] == '\t')
        --eol;
    value = FIO_BUF_INFO2((div == eol) ? NULL : div, (size_t)(eol - div));
    int r = handler(p, name, value, udata);
    if (FIO_UNLIKELY(r))
      return r;
  }

headers_finished:
  if (p->fn == fio_http1___read_header_post_expect && p->expected &&
      fio_http1_on_expect(udata))
    goto expect_failed;
  p->fn = (!p->expected)         ? fio_http1___finish
          : (!(p->expected + 1)) ? fio_http1___read_body_chunked
                                 : fio_http1___read_body;
  return p->fn(p, buf, udata);

expect_failed:
  *p = (fio_http1_parser_s){0};
  return 1;
}

/* parsing stage 1 - read headers. */
static int fio_http1___read_header(fio_http1_parser_s *p,
                                   fio_buf_info_s *buf,
                                   void *udata) {
  return fio_http1___read_header_line(p, buf, udata, fio_http1___on_header);
}

/* parsing stage 1 - read headers (after `expect` header). */
static int fio_http1___read_header_post_expect(fio_http1_parser_s *p,
                                               fio_buf_info_s *buf,
                                               void *udata) {
  return fio_http1___read_header_line(p, buf, udata, fio_http1___on_header);
}

/* parsing stage 1 - read headers. */
static int fio_http1___read_trailer(fio_http1_parser_s *p,
                                    fio_buf_info_s *buf,
                                    void *udata) {
  return fio_http1___read_header_line(p, buf, udata, fio_http1___on_trailer);
}

/* *****************************************************************************
Reading the Body
***************************************************************************** */

/* parsing stage 2 - read body - known content length. */
static int fio_http1___read_body(fio_http1_parser_s *p,
                                 fio_buf_info_s *buf,
                                 void *udata) {
  if (!buf->len)
    return 1;
  if (buf->len >= p->expected) {
    buf->len = p->expected;
    if (fio_http1_on_body_chunk(*buf, udata))
      return -1;
    buf->buf += buf->len;
    return fio_http1___finish(p, buf, udata);
  }
  if (fio_http1_on_body_chunk(*buf, udata))
    return -1;
  buf->buf += buf->len;
  p->expected -= buf->len;
  buf->len = 0;
  return 1;
}

/* *****************************************************************************
Reading the Body (chunked)
***************************************************************************** */

/* parsing stage 2 - read chunked body - read chunk data. */
static int fio_http1___read_body_chunked_read(fio_http1_parser_s *p,
                                              fio_buf_info_s *buf,
                                              void *udata) {
  if (!buf->len)
    return 1;
  if (buf->len >= p->expected) {
    if (fio_http1_on_body_chunk(FIO_BUF_INFO2(buf->buf, p->expected), udata))
      return -1;
    buf->buf += p->expected;
    buf->len -= p->expected;
    p->fn = fio_http1___read_body_chunked;
    return 0;
  }
  if (fio_http1_on_body_chunk(buf[0], udata))
    return -1;
  p->expected -= buf->len;
  buf->buf += buf->len;
  return 1;
}

/* parsing stage 2 - read chunked body - read next chunk length. */
static int fio_http1___read_body_chunked(fio_http1_parser_s *p,
                                         fio_buf_info_s *buf,
                                         void *udata) {
  (void)udata;
  if (buf->len < 3)
    return 1;
  { /* remove possible extra EOL after chunk payload */
    size_t tmp = (buf->buf[0] == '\r');
    tmp += (buf->buf[tmp] == '\n');
    buf->len -= tmp;
    buf->buf += tmp;
  }

  // if (!FIO_MEMCHR(buf->buf, '\n', buf->len)) /* prevent read overflow? */
  //   return 1;

  char *eol = buf->buf;
  size_t expected = fio_atol16u(&eol); /* may read overflow, tests after */
  if (eol == buf->buf)
    return -1;
  eol += (eol[0] == '\r');
  if (eol >= buf->buf + buf->len)
    return 1; /* read overflowed */
  if (eol[0] != '\n')
    return -1;
  ++eol;
  p->expected = expected;
  if (p->expected) {
    /* further data expected */
    buf->len -= eol - buf->buf;
    buf->buf = eol;
    return (p->fn = fio_http1___read_body_chunked_read)(p, buf, udata);
  }
  if ((eol + 1 < buf->buf + buf->len) && (eol[0] == '\r' || eol[0] == '\n')) {
    /* no trailers, finish now. */
    eol += (eol[0] == '\r');
    ++eol;
    buf->len -= eol - buf->buf;
    buf->buf = eol;
    return fio_http1___finish(p, buf, udata);
  }
  /* possible trailers */
  buf->len -= eol - buf->buf;
  buf->buf = eol;
  return (p->fn = fio_http1___read_trailer)(p, buf, udata);
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#undef FIO_HTTP1_PARSER
#endif /* FIO_HTTP1_PARSER && FIO_EXTERN_COMPLETE*/
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_BITWISE            /* Development inclusion - ignore line */
#define FIO_RAND               /* Development inclusion - ignore line */
#define FIO_WEBSOCKET_PARSER   /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                              WebSocket Parser




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_WEBSOCKET_PARSER) && !defined(H___FIO_WEBSOCKET_PARSER___H) && \
    (defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN))
/* *****************************************************************************
The parser provides static functions only, always as part or implementation.
***************************************************************************** */
#define H___FIO_WEBSOCKET_PARSER___H

/* *****************************************************************************
WebSocket Parsing API
***************************************************************************** */

typedef struct fio_websocket_parser_s fio_websocket_parser_s;
/**
 * Parses WebSocket data, calling any callbacks.
 *
 * Returns bytes consumed or `FIO_WEBSOCKET_PARSER_ERROR` (`(size_t)-1`) on
 * error.
 */
FIO_SFUNC size_t fio_websocket_parse(fio_websocket_parser_s *p,
                                     fio_buf_info_s buf,
                                     void *udata);

// FIO_SFUNC

/** The parsers return value on error. */
#define FIO_WEBSOCKET_PARSER_ERROR ((size_t)-1)

/* *****************************************************************************
WebSocket Parsing Callbacks
***************************************************************************** */

/** Called when a message frame was received. */
FIO_SFUNC void fio_websocket_on_message(void *udata,
                                        fio_buf_info_s msg,
                                        unsigned char is_text);

/**
 * Called when the parser needs to copy the message to an external buffer.
 *
 * MUST return the external buffer, as it may need to be unmasked.
 *
 * Partial message length may be equal to zero (`partial.len == 0`).
 */
FIO_SFUNC fio_buf_info_s fio_websocket_write_partial(void *udata,
                                                     fio_buf_info_s partial,
                                                     size_t more_expected);

/** Called when the permessage-deflate extension requires decompression. */
FIO_SFUNC fio_buf_info_s fio_websocket_decompress(void *udata,
                                                  fio_buf_info_s msg);

/** Called when a `ping` message was received. */
FIO_SFUNC void fio_websocket_on_protocol_ping(void *udata, fio_buf_info_s msg);

/** Called when a `pong` message was received. */
FIO_SFUNC void fio_websocket_on_protocol_pong(void *udata, fio_buf_info_s msg);

/** Called when a `close` message was received. */
FIO_SFUNC void fio_websocket_on_protocol_close(void *udata, fio_buf_info_s msg);

/* *****************************************************************************
WebSocket Formatting API
***************************************************************************** */
/**
 * Returns the length of the buffer required to wrap a message `len` long
 *
 * Client connections should add 4 to this number to accommodate for the mask.
 */
FIO_IFUNC uint64_t fio_websocket_wrapped_len(uint64_t len);

/**
 * Wraps a WebSocket server message and writes it to the target buffer.
 *
 * The `first` and `last` flags can be used to support message fragmentation.
 *
 * * target: the target buffer to write to.
 * * msg:    the message to be wrapped.
 * * len:    the message length.
 * * opcode: set to 1 for UTF-8 message, 2 for binary, etc'.
 * * first:  set to 1 if `msg` points the beginning of the message.
 * * last:   set to 1 if `msg + len` ends the message.
 * * client: set to 1 to use client mode (data  masking).
 *
 * Further opcode values:
 * * %x0 denotes a continuation frame
 * *  %x1 denotes a text frame
 * *  %x2 denotes a binary frame
 * *  %x3-7 are reserved for further non-control frames
 * *  %x8 denotes a connection close
 * *  %x9 denotes a ping
 * *  %xA denotes a pong
 * *  %xB-F are reserved for further control frames
 *
 * Returns the number of bytes written. Always `websocket_wrapped_len(len)`
 */
FIO_SFUNC uint64_t fio_websocket_server_wrap(void *target,
                                             const void *msg,
                                             uint64_t len,
                                             unsigned char opcode,
                                             unsigned char first,
                                             unsigned char last,
                                             unsigned char rsv);

/**
 * Wraps a WebSocket client message and writes it to the target buffer.
 *
 * The `first` and `last` flags can be used to support message fragmentation.
 *
 * * target: the target buffer to write to.
 * * msg:    the message to be wrapped.
 * * len:    the message length.
 * * opcode: set to 1 for UTF-8 message, 2 for binary, etc'.
 * * first:  set to 1 if `msg` points the beginning of the message.
 * * last:   set to 1 if `msg + len` ends the message.
 * * client: set to 1 to use client mode (data  masking).
 *
 * Returns the number of bytes written. Always `websocket_wrapped_len(len) + 4`
 */
FIO_SFUNC uint64_t fio_websocket_client_wrap(void *target,
                                             const void *msg,
                                             uint64_t len,
                                             unsigned char opcode,
                                             unsigned char first,
                                             unsigned char last,
                                             unsigned char rsv);

/* *****************************************************************************
API - Parsing (unwrapping)
***************************************************************************** */

/* *****************************************************************************

                                Implementation

***************************************************************************** */

/** returns the length of the buffer required to wrap a message `len` long */
FIO_IFUNC uint64_t fio_websocket_wrapped_len(uint64_t len) {
  return len + 2ULL + ((len > 125) << 1) +
         ((0ULL - (len > ((1UL << 16) - 1))) & 6ULL);
}

/* *****************************************************************************
Message Wrapping
***************************************************************************** */

FIO_IFUNC uint64_t fio_websocket_header(void *target,
                                        uint64_t message_len,
                                        uint32_t mask,
                                        unsigned char opcode,
                                        unsigned char first,
                                        unsigned char last,
                                        unsigned char rsv) {
  ((uint8_t *)target)[0] = 0U |
                           /*fin*/ ((last & 1U) << 7) |
                           /* opcode */ ((16U - !!first) & (opcode & 15U)) |
                           /* rsv */ ((rsv & 7) << 4);
  ((uint8_t *)target)[1] = ((!!mask) << 7U);
  size_t mask_l = ((!!mask) << 2);
  if (message_len < 126) {
    ((uint8_t *)target)[1] |= message_len;
    if (mask)
      fio_u2buf32u(((uint8_t *)target + 2), mask);
    return 2 + mask_l;
  } else if (message_len < (1UL << 16)) {
    /* head is 4 bytes */
    ((uint8_t *)target)[1] |= 126;
    fio_u2buf16_be(((uint8_t *)target + 2), message_len);
    if (mask)
      fio_u2buf32u(((uint8_t *)target + 4), mask);
    return 4 + mask_l;
  } else {
    /* Really Long Message  */
    ((uint8_t *)target)[1] |= 127;
    fio_u2buf64_be(((uint8_t *)target + 2), message_len);
    if (mask)
      fio_u2buf32u(((uint8_t *)target + 10), mask);
    return 10 + mask_l;
  }
}

/**
 * Wraps a WebSocket server message and writes it to the target buffer.
 *
 * The `first` and `last` flags can be used to support message fragmentation.
 *
 * * target: the target buffer to write to.
 * * msg:    the message to be wrapped.
 * * len:    the message length.
 * * opcode: set to 1 for UTF-8 message, 2 for binary, etc'.
 * * first:  set to 1 if `msg` points the beginning of the message.
 * * last:   set to 1 if `msg + len` ends the message.
 * * client: set to 1 to use client mode (data  masking).
 *
 * Further opcode values:
 * * %x0 denotes a continuation frame
 * *  %x1 denotes a text frame
 * *  %x2 denotes a binary frame
 * *  %x3-7 are reserved for further non-control frames
 * *  %x8 denotes a connection close
 * *  %x9 denotes a ping
 * *  %xA denotes a pong
 * *  %xB-F are reserved for further control frames
 *
 * Returns the number of bytes written. Always `websocket_wrapped_len(len)`
 */
FIO_SFUNC uint64_t fio_websocket_server_wrap(void *restrict target,
                                             const void *restrict msg,
                                             uint64_t len,
                                             unsigned char opcode,
                                             unsigned char first,
                                             unsigned char last,
                                             unsigned char rsv) {
  uint64_t r = fio_websocket_header(target, len, 0, opcode, first, last, rsv);
  FIO_MEMCPY(((uint8_t *)target) + r, msg, len);
  r += len;
  return r;
}

/**
 * Wraps a WebSocket client message and writes it to the target buffer.
 *
 * The `first` and `last` flags can be used to support message fragmentation.
 *
 * * target: the target buffer to write to.
 * * msg:    the message to be wrapped.
 * * len:    the message length.
 * * opcode: set to 1 for UTF-8 message, 2 for binary, etc'.
 * * first:  set to 1 if `msg` points the beginning of the message.
 * * last:   set to 1 if `msg + len` ends the message.
 *
 * Returns the number of bytes written. Always `websocket_wrapped_len(len) +
 * 4`
 */
FIO_SFUNC uint64_t fio_websocket_client_wrap(void *restrict target,
                                             const void *restrict msg,
                                             uint64_t len,
                                             unsigned char opcode,
                                             unsigned char first,
                                             unsigned char last,
                                             unsigned char rsv) {
  uint64_t mask = (fio_rand64() | 0x01020408ULL) & 0xFFFFFFFFULL; /* non-zero */
  mask |= mask << 32;
  uint64_t r = fio_websocket_header(target,
                                    len,
                                    (uint32_t)mask,
                                    opcode,
                                    first,
                                    last,
                                    rsv);
  fio_xmask_cpy((((char *)target) + r), (const char *)msg, len, mask);
  r += len;
  return r;
}

/* *****************************************************************************
WebSocket Parser Type
***************************************************************************** */

/** The WebSocket parser type implementation */
struct fio_websocket_parser_s {
  int (*fn)(fio_websocket_parser_s *, fio_buf_info_s *, void *);
  uint64_t start_at;
  uint64_t expect;
  uint32_t mask;
  uint8_t first;
  uint8_t current;
  uint8_t must_mask;
};

/* *****************************************************************************
Frame Consumption
***************************************************************************** */
FIO_SFUNC int fio___websocket_consume_header(fio_websocket_parser_s *p,
                                             fio_buf_info_s *buf,
                                             void *udata);

FIO_SFUNC int fio___websocket_consume_frame_partial(fio_websocket_parser_s *p,
                                                    fio_buf_info_s *buf,
                                                    void *udata) {
  fio_websocket_write_partial(udata, *buf, (p->expect -= buf->len));
  buf->buf += buf->len;
  buf->len = 0;
  return 1;
}

FIO_SFUNC int fio___websocket_consume_frame_finish(fio_websocket_parser_s *p,
                                                   fio_buf_info_s *buf,
                                                   void *udata) {
  fio_buf_info_s msg = FIO_BUF_INFO2(buf->buf, p->expect);
  buf->buf += p->expect;
  buf->len -= p->expect;
  p->expect = 0;
  msg = fio_websocket_write_partial(udata, msg, 0);
  if (!msg.buf) /* protocol error response from callback */
    return -1;
  fio_xmask(msg.buf + p->start_at,
            msg.len - p->start_at,
            (((uint64_t)p->mask) << 32) | (uint64_t)p->mask);
  p->start_at += msg.len;
  p->fn = fio___websocket_consume_header;
  if (!(p->current & 128)) /* done? if not, consume next frame */
    return 0;
  /* done */
  if (p->first & 64) { /* RSV1 set: decompress */
    msg = fio_websocket_decompress(udata, msg);
    if (!msg.buf)
      return -1;
  }
  size_t cond = (p->first & 15);
  *p = (fio_websocket_parser_s){.fn = fio___websocket_consume_header};
  switch (cond) {
  case 0: return -1;         /* continuation - error? */
  case 1: /* fall through */ /* text / data frame */
  case 2: fio_websocket_on_message(udata, msg, (cond & 1)); return 1;
  case 8: fio_websocket_on_protocol_close(udata, msg); return 1;
  case 9: fio_websocket_on_protocol_ping(udata, msg); return 1;
  case 10: fio_websocket_on_protocol_pong(udata, msg); return 1;
  default:
    FIO_LOG_DDEBUG2("ERROR: WebSocket protocol error - unknown opcode %u\n",
                    (unsigned int)(p->first & 15));
    return -1;
  }
  return 1;
}

FIO_SFUNC int fio___websocket_consume_frame(fio_websocket_parser_s *p,
                                            fio_buf_info_s *buf,
                                            void *udata) {
  return (p->expect > buf->len
              ? fio___websocket_consume_frame_partial
              : fio___websocket_consume_frame_finish)(p, buf, udata);
}

/* *****************************************************************************
Header Consumption
***************************************************************************** */
FIO_SFUNC int fio___websocket_consume_header(fio_websocket_parser_s *p,
                                             fio_buf_info_s *buf,
                                             void *udata) {
  if (buf->len < 2)
    return 1;
  const uint8_t mask_f = (((uint8_t *)buf->buf)[1] >> 7) & 1;
  const uint8_t mask_l = (mask_f << 2);
  const uint8_t info = (uint8_t)(buf->buf[0]);
  uint8_t len_indicator = ((((uint8_t *)buf->buf)[1]) & 127U);
  switch (len_indicator) {
  case 126:
    if (buf->len < 8UL)
      return 1;
    p->expect = fio_buf2u16_be(buf->buf + 2);
    p->mask = (0ULL - mask_f) & fio_buf2u32u(buf->buf + 4);
    buf->buf += 4 + mask_l;
    buf->len -= 4 + mask_l;
    break;

  case 127:
    if (buf->len < 14UL)
      return 1;
    p->expect = fio_buf2u64_be(buf->buf + 2);
    if (p->expect & 0xFF00000000000000ULL)
      return -1; /* really?! */
    p->mask = (0ULL - mask_f) & fio_buf2u32u(buf->buf + 10);
    buf->buf += 10 + mask_l;
    buf->len -= 10 + mask_l;
    break;

  default:
    if (buf->len < (2ULL + mask_l))
      return 1;
    p->expect = len_indicator;
    p->mask = mask_f ? fio_buf2u32u(buf->buf + 2) : 0;
    buf->buf += 2 + mask_l;
    buf->len -= 2 + mask_l;
    break;
  }
  if (p->first) {
    p->current = info;
    if ((info & 15)) /* continuation frame == 0 ; is it missing? */
      return -1;
  } else {
    p->first = p->current = info;
    p->start_at = 0;
    if (!(info & 15)) /* continuation frame == 0 ; where's the first? */
      return -1;
  }
  if (p->must_mask && !p->mask)
    return -1;
  return (p->fn = fio___websocket_consume_frame)(p, buf, udata);
}
/* *****************************************************************************
Main Parsing Loop
***************************************************************************** */

FIO_SFUNC size_t fio_websocket_parse(fio_websocket_parser_s *p,
                                     fio_buf_info_s buf,
                                     void *udata) {
  int i = 0;
  char *buf_start = buf.buf;
  if (!buf.len)
    return 0;
  if (!p->fn)
    p->fn = fio___websocket_consume_header;
  while (!(i = p->fn(p, &buf, udata)))
    ;
  if (i < 0)
    return FIO_WEBSOCKET_PARSER_ERROR;
  return buf.buf - buf_start;
}

/* *****************************************************************************
Reading the first line
***************************************************************************** */

/* *****************************************************************************
Cleanup
***************************************************************************** */

#undef FIO_WEBSOCKET_PARSER
#endif /* FIO_WEBSOCKET_PARSER && FIO_EXTERN_COMPLETE */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_HTTP               /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                  HTTP Implementation for FIO_SERVER




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_HTTP) && !defined(H___FIO_HTTP___H) &&                         \
    !defined(FIO___RECURSIVE_INCLUDE)
#define H___FIO_HTTP___H
/* *****************************************************************************
HTTP Setting Defaults
***************************************************************************** */

#ifndef FIO_HTTP_DEFAULT_MAX_HEADER_SIZE
#define FIO_HTTP_DEFAULT_MAX_HEADER_SIZE 32768 /* (1UL << 15) */
#endif
#ifndef FIO_HTTP_DEFAULT_MAX_LINE_LEN
#define FIO_HTTP_DEFAULT_MAX_LINE_LEN 8192 /* (1UL << 13) */
#endif
#ifndef FIO_HTTP_DEFAULT_MAX_BODY_SIZE
#define FIO_HTTP_DEFAULT_MAX_BODY_SIZE 33554432 /* (1UL << 25) */
#endif
#ifndef FIO_HTTP_DEFAULT_WS_MAX_MSG_SIZE
#define FIO_HTTP_DEFAULT_WS_MAX_MSG_SIZE 262144 /* (1UL << 18) */
#endif
#ifndef FIO_HTTP_DEFAULT_TIMEOUT
#define FIO_HTTP_DEFAULT_TIMEOUT 50
#endif
#ifndef FIO_HTTP_DEFAULT_TIMEOUT_LONG
#define FIO_HTTP_DEFAULT_TIMEOUT_LONG 50
#endif

#ifndef FIO_HTTP_SHOW_CONTENT_LENGTH_HEADER
/** Adds a "content-length" header to the HTTP handle (usually redundant). */
#define FIO_HTTP_SHOW_CONTENT_LENGTH_HEADER 0
#endif

#ifndef FIO_HTTP_WEBSOCKET_WRITE_VALIDITY_TEST_LIMIT
/** UTF-8 validity tests will be performed only for data shorter than this. */
#define FIO_HTTP_WEBSOCKET_WRITE_VALIDITY_TEST_LIMIT ((1UL << 16) - 10UL)
#endif

#ifndef FIO_WEBSOCKET_STATS
/* If true, logs longest WebSocket round-trips (using FIO_LOG_INFO). */
#define FIO_WEBSOCKET_STATS 0
#endif

/* *****************************************************************************
HTTP Listen
***************************************************************************** */
typedef struct fio_http_settings_s {
  /** Called before body uploads, when a client sends an `Expect` header. */
  void (*pre_http_body)(fio_http_s *h);
  /** Callback for HTTP requests (server) or responses (client). */
  void (*on_http)(fio_http_s *h);
  /** Called when a request / response cycle is finished with no Upgrade. */
  void (*on_finish)(fio_http_s *h);
  /** (optional) the callback to be performed when the HTTP service closes. */
  void (*on_stop)(struct fio_http_settings_s *settings);

  /** Authenticate EventSource (SSE) requests, return non-zero to deny.*/
  int (*on_authenticate_sse)(fio_http_s *h);
  /** Authenticate WebSockets Upgrade requests, return non-zero to deny.*/
  int (*on_authenticate_websocket)(fio_http_s *h);

  /** Called once a WebSocket / SSE connection upgrade is complete. */
  void (*on_open)(fio_http_s *h);

  /** Called when a WebSocket message is received. */
  void (*on_message)(fio_http_s *h, fio_buf_info_s msg, uint8_t is_text);
  /** Called when an EventSource event is received. */
  void (*on_eventsource)(fio_http_s *h,
                         fio_buf_info_s id,
                         fio_buf_info_s event,
                         fio_buf_info_s data);
  /** Called when an EventSource reconnect event requests an ID. */
  void (*on_eventsource_reconnect)(fio_http_s *h, fio_buf_info_s id);

  /** Called for WebSocket / SSE connections when outgoing buffer is empty. */
  void (*on_ready)(fio_http_s *h);
  /** Called for open WebSocket / SSE connections during shutting down. */
  void (*on_shutdown)(fio_http_s *h);
  /** Called after a WebSocket / SSE connection is closed (for cleanup). */
  void (*on_close)(fio_http_s *h);

  /** Default opaque user data for HTTP handles (fio_http_s). */
  void *udata;
  /** Optional SSL/TLS support. */
  fio_io_functions_s *tls_io_func;
  /** Optional SSL/TLS support. */
  fio_io_tls_s *tls;
  /** Optional HTTP task queue (for multi-threading HTTP responses) */
  fio_io_async_s *queue;
  /**
   * A public folder for file transfers - allows to circumvent any application
   * layer logic and simply serve static files.
   *
   * Supports automatic `gz` pre-compressed alternatives.
   */
  fio_str_info_s public_folder;
  /**
   * The max-age value (in seconds) for caching static files send from
   * `public_folder`.
   *
   * Defaults to 0 (not sent).
   */
  size_t max_age;
  /**
   * The maximum total of bytes for the overall size of the request string and
   * headers, combined.
   *
   * Defaults to FIO_HTTP_DEFAULT_MAX_HEADER_SIZE bytes.
   */
  uint32_t max_header_size;
  /**
   * The maximum number of bytes allowed per header / request line.
   *
   * Defaults to FIO_HTTP_DEFAULT_MAX_LINE_LEN bytes.
   */
  uint32_t max_line_len;
  /**
   * The maximum size of an HTTP request's body (posting / downloading).
   *
   * Defaults to FIO_HTTP_DEFAULT_MAX_BODY_SIZE bytes.
   */
  size_t max_body_size;
  /**
   * The maximum websocket message size/buffer (in bytes) for Websocket
   * connections. Defaults to FIO_HTTP_DEFAULT_WS_MAX_MSG_SIZE bytes.
   */
  size_t ws_max_msg_size;
  /** reserved for future use. */
  intptr_t reserved1;
  /** reserved for future use. */
  intptr_t reserved2;
  /**
   * An HTTP/1.x connection timeout.
   *
   * Defaults to FIO_HTTP_DEFAULT_TIMEOUT seconds.
   *
   * Note: the connection might be closed (by other side) before timeout occurs.
   */
  uint8_t timeout;
  /**
   * Timeout for the WebSocket connections in seconds. Defaults to
   * FIO_HTTP_DEFAULT_TIMEOUT_LONG seconds.
   *
   * A ping will be sent whenever the timeout is reached.
   *
   * Connections are only closed when a ping cannot be sent (the network layer
   * fails). Pongs are ignored.
   */
  uint8_t ws_timeout;
  /**
   * Timeout for EventSource (SSE) connections in seconds. Defaults to
   * FIO_HTTP_DEFAULT_TIMEOUT_LONG seconds.
   *
   * A ping will be sent whenever the timeout is reached.
   *
   * Connections are only closed when a ping cannot be sent (the network layer
   * fails).
   */
  uint8_t sse_timeout;
  /** Timeout for client connections (only relevant in client mode). */
  uint8_t connect_timeout;
  /** Logging flag - set to TRUE to log HTTP requests. */
  uint8_t log;
} fio_http_settings_s;

/** Listens to HTTP / WebSockets / SSE connections on `url`. */
SFUNC void *fio_http_listen(const char *url, fio_http_settings_s settings);

/** Listens to HTTP / WebSockets / SSE connections on `url`. */
#define fio_http_listen(url, ...)                                              \
  fio_http_listen(url, (fio_http_settings_s){__VA_ARGS__})

/** Allows all clients to connect (bypasses authentication). */
SFUNC int FIO_HTTP_AUTHENTICATE_ALLOW(fio_http_s *h);

/** Returns the IO object associated with the HTTP object (request only). */
SFUNC fio_io_s *fio_http_io(fio_http_s *);

/** Macro helper for HTTP handle pub/sub subscriptions. */
#define fio_http_subscribe(h, ...)                                             \
  fio_subscribe(.io = fio_http_io(h), __VA_ARGS__)

/** Connects to HTTP / WebSockets / SSE connections on `url`. */
SFUNC fio_io_s *fio_http_connect(const char *url,
                                 fio_http_s *h,
                                 fio_http_settings_s settings);

/** Connects to HTTP / WebSockets / SSE connections on `url`. */
#define fio_http_connect(url, h, ...)                                          \
  fio_http_connect(url, h, (fio_http_settings_s){__VA_ARGS__})

/** Returns the HTTP settings associated with the HTTP object, if any. */
SFUNC fio_http_settings_s *fio_http_settings(fio_http_s *);

/* *****************************************************************************
WebSocket Helpers - HTTP Upgraded Connections
***************************************************************************** */

/** Writes a WebSocket message. Fails if connection wasn't upgraded yet. */
SFUNC int fio_http_websocket_write(fio_http_s *h,
                                   const void *buf,
                                   size_t len,
                                   uint8_t is_text);

/**
 * Sets a specific on_message callback for this connection.
 *
 * Returns -1 on error (i.e., upgrade still in negotiation).
 */
SFUNC int fio_http_on_message_set(fio_http_s *h,
                                  void (*on_message)(fio_http_s *,
                                                     fio_buf_info_s,
                                                     uint8_t));

/** Optional WebSocket subscription callback. */
SFUNC void FIO_HTTP_WEBSOCKET_SUBSCRIBE_DIRECT(fio_msg_s *msg);
/** Optional WebSocket subscription callback - all messages are UTF-8 valid. */
SFUNC void FIO_HTTP_WEBSOCKET_SUBSCRIBE_DIRECT_TEXT(fio_msg_s *msg);
/** Optional WebSocket subscription callback - messages may be non-UTF-8. */
SFUNC void FIO_HTTP_WEBSOCKET_SUBSCRIBE_DIRECT_BINARY(fio_msg_s *msg);

/* *****************************************************************************
EventSource (SSE) Helpers - HTTP Upgraded Connections
***************************************************************************** */

/** Named arguments for fio_http_sse_write. */
typedef struct {
  /** The message's `id` data (if any). */
  fio_buf_info_s id;
  /** The message's `event` data (if any). */
  fio_buf_info_s event;
  /** The message's `data` data (if any). */
  fio_buf_info_s data;
} fio_http_sse_write_args_s;

/** Writes an SSE message (UTF-8). Fails if connection wasn't upgraded yet. */
SFUNC int fio_http_sse_write(fio_http_s *h, fio_http_sse_write_args_s args);

/** Writes an SSE message (UTF-8). Fails if connection wasn't upgraded yet. */
#define fio_http_sse_write(h, ...)                                             \
  fio_http_sse_write((h), ((fio_http_sse_write_args_s){__VA_ARGS__}))

/** Optional EventSource subscription callback - messages MUST be UTF-8. */
SFUNC void FIO_HTTP_SSE_SUBSCRIBE_DIRECT(fio_msg_s *msg);

/* *****************************************************************************
Module Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

/*
REMEMBER:
========

All memory allocations should use:
* FIO_MEM_REALLOC_(ptr, old_size, new_size, copy_len)
* FIO_MEM_FREE_(ptr, size)

*/

/* *****************************************************************************
HTTP Settings Validation
***************************************************************************** */

static void fio___http_default_on_http_request(fio_http_s *h) {
  fio_http_send_error_response(h, 404);
}
static void fio___http_default_noop(fio_http_s *h) { ((void)h); }
static int fio___http_default_authenticate(fio_http_s *h) {
  ((void)h);
  return -1;
}

// on_queue
static void fio___http_default_on_stop(struct fio_http_settings_s *settings) {
  ((void)settings);
}

static void fio___http_default_close(fio_http_s *h) {
  fio_io_close(fio_http_io(h));
}

/** Called when a WebSocket message is received. */
static void fio___http_default_on_message(fio_http_s *h,
                                          fio_buf_info_s msg,
                                          uint8_t is_text) {
  (void)h, (void)msg, (void)is_text;
}
/** Called when an EventSource event is received. */
static void fio___http_default_on_eventsource(fio_http_s *h,
                                              fio_buf_info_s id,
                                              fio_buf_info_s event,
                                              fio_buf_info_s data) {
  (void)h, (void)id, (void)event, (void)data;
}
/** Called when an EventSource event is received. */
static void fio___http_default_on_eventsource_redirect(fio_http_s *h,
                                                       fio_buf_info_s id,
                                                       fio_buf_info_s event,
                                                       fio_buf_info_s data);

/** Called when an EventSource reconnect event requests an ID. */
static void fio___http_default_on_eventsource_reconnect(fio_http_s *h,
                                                        fio_buf_info_s id) {
  (void)h, (void)id;
}

static void http_settings_validate(fio_http_settings_s *s, int is_client) {
  if (!s->pre_http_body)
    s->pre_http_body = fio___http_default_noop;

  if (!s->on_http)
    s->on_http = is_client ? fio___http_default_noop
                           : fio___http_default_on_http_request;
  if (!s->on_finish)
    s->on_finish = fio___http_default_noop;
  if (!s->on_stop)
    s->on_stop = fio___http_default_on_stop;
  if (!s->on_authenticate_sse)
    s->on_authenticate_sse = is_client ? FIO_HTTP_AUTHENTICATE_ALLOW
                                       : fio___http_default_authenticate;
  if (!s->on_authenticate_websocket)
    s->on_authenticate_websocket = is_client ? FIO_HTTP_AUTHENTICATE_ALLOW
                                             : fio___http_default_authenticate;
  if (!s->on_open)
    s->on_open = fio___http_default_noop;
  if (!s->on_open)
    s->on_open = fio___http_default_noop;
  if (!s->on_message)
    s->on_message = fio___http_default_on_message;
  if (!s->on_eventsource)
    s->on_eventsource = (s->on_message == fio___http_default_on_message
                             ? fio___http_default_on_eventsource
                             : fio___http_default_on_eventsource_redirect);
  if (!s->on_eventsource_reconnect)
    s->on_eventsource_reconnect = fio___http_default_on_eventsource_reconnect;
  if (!s->on_ready)
    s->on_ready = fio___http_default_noop;
  if (!s->on_shutdown)
    s->on_shutdown = fio___http_default_noop;
  if (!s->on_close)
    s->on_close = fio___http_default_noop;
  if (!s->max_header_size)
    s->max_header_size = FIO_HTTP_DEFAULT_MAX_HEADER_SIZE;
  if (!s->max_line_len)
    s->max_line_len = FIO_HTTP_DEFAULT_MAX_LINE_LEN;
  if (!s->max_body_size)
    s->max_body_size = FIO_HTTP_DEFAULT_MAX_BODY_SIZE;
  if (!s->ws_max_msg_size)
    s->ws_max_msg_size = FIO_HTTP_DEFAULT_WS_MAX_MSG_SIZE;
  if (!s->timeout)
    s->timeout = FIO_HTTP_DEFAULT_TIMEOUT;
  if (!s->ws_timeout)
    s->ws_timeout = FIO_HTTP_DEFAULT_TIMEOUT_LONG;
  if (!s->sse_timeout)
    s->sse_timeout = s->ws_timeout;

  if (s->max_header_size < s->max_line_len)
    s->max_header_size = s->max_line_len;

  if (s->public_folder.buf) {
    if (s->public_folder.len > 1 &&
        s->public_folder.buf[s->public_folder.len - 1] == '/' &&
        !(s->public_folder.len == 2 && s->public_folder.buf[0] == '~'))
      --s->public_folder.len;
    if (!fio_filename_is_folder(s->public_folder.buf)) {
      FIO_LOG_ERROR(
          "HTTP public folder is not a folder, setting ignored.\n\t%s",
          s->public_folder.buf);
      s->public_folder = ((fio_str_info_s){0});
    }
  }
}

/* *****************************************************************************
HTTP Protocols used by the HTTP module
***************************************************************************** */

typedef enum fio___http_protocol_selector_e {
  FIO___HTTP_PROTOCOL_ACCEPT = 0,
  FIO___HTTP_PROTOCOL_HTTP1,
  FIO___HTTP_PROTOCOL_HTTP2,
  FIO___HTTP_PROTOCOL_WS,
  FIO___HTTP_PROTOCOL_SSE,
  FIO___HTTP_PROTOCOL_NONE
} fio___http_protocol_selector_e;

/* *****************************************************************************
HTTP Protocol Container (vtable + settings storage)
***************************************************************************** */
#define FIO___RECURSIVE_INCLUDE 1

typedef struct {
  fio_http_settings_s settings;
  void (*on_http_callback)(void *, void *);
  fio_queue_s *queue;
  struct {
    fio_io_protocol_s protocol;
    fio_http_controller_s controller;
  } state[FIO___HTTP_PROTOCOL_NONE + 1];
  char public_folder_buf[];
} fio___http_protocol_s;
#include FIO_INCLUDE_FILE

#define FIO_REF_NAME             fio___http_protocol
#define FIO_REF_FLEX_TYPE        char
#define FIO_REF_CONSTRUCTOR_ONLY 1
#define FIO_REF_DESTROY(o)                                                     \
  do {                                                                         \
    if (o.settings.tls)                                                        \
      fio_io_tls_free(o.settings.tls);                                         \
    if (o.settings.on_stop)                                                    \
      o.settings.on_stop(&o.settings);                                         \
  } while (0)
#include FIO_INCLUDE_FILE

FIO_IFUNC fio___http_protocol_s *fio___http_protocol_init(
    fio___http_protocol_s *p,
    const char *url,
    fio_http_settings_s s,
    bool is_client);
/* *****************************************************************************
HTTP Connection Container
***************************************************************************** */

struct fio___http_connection_http_s {
  void (*on_http_callback)(void *, void *);
  void (*on_http)(fio_http_s *h);
  void (*on_finish)(fio_http_s *h);
  fio_http1_parser_s parser;
  fio_str_info_s buf;
  uint32_t max_header;
};
struct fio___http_connection_ws_s {
  void (*on_message)(fio_http_s *h, fio_buf_info_s msg, uint8_t is_text);
  void (*on_ready)(fio_http_s *h);
  fio_websocket_parser_s parser;
  char *msg;
  uint16_t code;
};
struct fio___http_connection_sse_s {
  void (*on_message)(fio_http_s *h,
                     fio_buf_info_s id,
                     fio_buf_info_s event,
                     fio_buf_info_s data);
  void (*on_ready)(fio_http_s *h);
  fio_buf_info_s id;
  fio_buf_info_s event;
  char *data;
};

/** Connection objects for managing HTTP / WebSocket connection state. */
typedef struct {
  fio_io_s *io;
  fio_http_s *h;
  fio_http_settings_s *settings;
  fio_queue_s *queue;
  void *udata;
  union {
    struct fio___http_connection_http_s http;
    struct fio___http_connection_ws_s ws;
    struct fio___http_connection_sse_s sse;
  } state;
  uint32_t len;
  uint32_t capa;
  uint8_t log;
  uint8_t suspend;
  uint8_t is_client;
  char buf[];
} fio___http_connection_s;

#define FIO_REF_NAME             fio___http_connection
#define FIO_REF_CONSTRUCTOR_ONLY 1
#define FIO_REF_FLEX_TYPE        char
#define FIO_REF_DESTROY(o)                                                     \
  do {                                                                         \
    fio___http_protocol_free(                                                  \
        FIO_PTR_FROM_FIELD(fio___http_protocol_s, settings, o.settings));      \
  } while (0)
#include FIO_INCLUDE_FILE

#undef FIO___RECURSIVE_INCLUDE

/* *****************************************************************************
Revisit defaults
***************************************************************************** */

/** Called when an EventSource event is received. */
static void fio___http_default_on_eventsource_redirect(fio_http_s *h,
                                                       fio_buf_info_s id,
                                                       fio_buf_info_s event,
                                                       fio_buf_info_s data) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  c->settings->on_message(h, data, 1);
  (void)h, (void)id, (void)event, (void)data;
}

/* *****************************************************************************
HTTP Request handling / handling
***************************************************************************** */

FIO_SFUNC void fio___http_perform_user_callback(void *cb_, void *h_) {
  union {
    void (*fn)(fio_http_s *);
    void *ptr;
  } cb = {.ptr = cb_};
  fio_http_s *h = (fio_http_s *)h_;
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (FIO_LIKELY(fio_io_is_open(c->io)))
    cb.fn(h);
  fio_http_free(h);
}

FIO_SFUNC void fio___http_perform_user_upgrade_callback_websocket(void *cb_,
                                                                  void *h_) {
  union {
    int (*fn)(fio_http_s *);
    void *ptr;
  } cb = {.ptr = cb_};
  fio_http_s *h = (fio_http_s *)h_;
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  struct fio___http_connection_http_s old = c->state.http;
  if (cb.fn(h))
    goto refuse_upgrade;
  if (c->h) /* request after WebSocket Upgrade? an attack vector? */
    goto refuse_upgrade;
#if HAVE_ZLIB && 0           /* TODO: logs and fix extension handling logic */
  FIO_HTTP_HEADER_EACH_VALUE(/* TODO: setup WebSocket extension */
                             h,
                             1,
                             FIO_STR_INFO2((char *)"sec-websocket-extensions",
                                           24),
                             val) {
    FIO_LOG_DDEBUG2("WebSocket extension requested: %.*s",
                    (int)val.len,
                    val.buf);
    if (!FIO_STR_INFO_IS_EQ(val,
                            FIO_STR_INFO2((char *)"permessage-deflate", 18)))
      continue;
    size_t client_bits = 0, server_bits = 0;
    FIO_HTTP_HEADER_VALUE_EACH_PROPERTY(val, p) {
      FIO_LOG_DDEBUG2("\t %.*s: %.*s",
                      (int)p.name.len,
                      p.name.buf,
                      (int)p.value.len,
                      p.value.buf);
      if (FIO_STR_INFO_IS_EQ(p.name,
                             FIO_STR_INFO2((char *)"client_max_window_bits",
                                           22))) { /* used by chrome */
        char *iptr = p.value.buf;
        client_bits = iptr ? fio_atol10u(&iptr) : 0;
        if (client_bits < 8 || client_bits > 15)
          client_bits = (size_t)-1;
      }
      if (FIO_STR_INFO_IS_EQ(
              p.name,
              FIO_STR_INFO2((char *)"server_max_window_bits", 22))) {
        char *iptr = p.value.buf;
        server_bits = iptr ? fio_atol10u(&iptr) : 0;
        if (server_bits < 8 || server_bits > 15)
          server_bits = (size_t)-1;
      }
    }
    if (client_bits)
      ; /* TODO */
    if (server_bits)
      ; /* TODO */
    break;
  } /* HAVE_ZLIB */
#endif
  fio_http_upgrade_websocket(h);
  return;

refuse_upgrade:
  c->state.http = old;
  if (fio_http_send_error_response(h, 403))
    fio_io_free(c->io);
  fio_http_free(h);
}

FIO_SFUNC void fio___http_perform_user_upgrade_callback_sse(void *cb_,
                                                            void *h_) {
  union {
    int (*fn)(fio_http_s *);
    void *ptr;
  } cb = {.ptr = cb_};
  fio_http_s *h = (fio_http_s *)h_;
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (cb.fn(h))
    goto refuse_upgrade;
  if (c->h) /* request after eventsource? an attack vector? */
    goto refuse_upgrade;
  fio_http_upgrade_sse(h);
  return;

refuse_upgrade:
  if (fio_http_send_error_response(h, 403))
    fio_io_free(c->io);
  fio_http_free(h);
}

FIO_IFUNC int fio___http_on_http_test4upgrade(fio_http_s *h,
                                              fio___http_connection_s *c) {
  union {
    int (*fn)(fio_http_s *);
    void *ptr;
  } cb;
  if (fio_http_websocket_requested(h))
    goto websocket_requested;
  if (fio_http_sse_requested(h))
    goto sse_requested;
  return 0;
websocket_requested:
  cb.fn = c->settings->on_authenticate_websocket;
  fio_queue_push(c->queue,
                 fio___http_perform_user_upgrade_callback_websocket,
                 cb.ptr,
                 (void *)h);
  return -1;

sse_requested:
  cb.fn = c->settings->on_authenticate_sse;
  fio_queue_push(c->queue,
                 fio___http_perform_user_upgrade_callback_sse,
                 cb.ptr,
                 (void *)h);
  return -1;

#if 0
http2_requested:
  // Connection: Upgrade, HTTP2-Settings
  // Upgrade: h2c
  // HTTP2-Settings: <base64url encoding of HTTP/2 SETTINGS payload>
  return 0; /* allowed to ignore upgrade request */
#endif
}

FIO_SFUNC void fio___http_on_http_direct(void *h_, void *ignr) {
  fio_http_s *h = (fio_http_s *)h_;
  fio_http_status_set(h, 200);
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (fio___http_on_http_test4upgrade(h, c))
    return;
  union {
    void (*fn)(fio_http_s *);
    void *ptr;
  } cb = {.fn = c->state.http.on_http};
  fio_queue_push(c->queue, fio___http_perform_user_callback, cb.ptr, (void *)h);
  (void)ignr;
}

FIO_SFUNC void fio___http_on_http_with_public_folder(void *h_, void *ignr) {
  fio_http_s *h = (fio_http_s *)h_;
  fio_http_status_set(h, 200);
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (fio___http_on_http_test4upgrade(h, c))
    return;
  if ((fio_http_method(h).len != 4 || (fio_buf2u32u(fio_http_method(h).buf) |
                                       0x20202020UL) != fio_buf2u32u("post")) &&
      !fio_http_static_file_response(h,
                                     c->settings->public_folder,
                                     fio_http_path(h),
                                     c->settings->max_age)) {
    fio_http_free(h);
    return;
  }
  union {
    void (*fn)(fio_http_s *);
    void *ptr;
  } cb = {.fn = c->state.http.on_http};
  fio_queue_push(c->queue, fio___http_perform_user_callback, cb.ptr, (void *)h);
  (void)ignr;
}

FIO_SFUNC void fio___http_perform_user_callback_client(void *cb_, void *h_) {
  fio_http_s *h = (fio_http_s *)h_;
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  fio___http_perform_user_callback(cb_, h_);
  fio_io_free(c->io);
}

FIO_SFUNC void fio___http_on_http_client(void *h_, void *ignr) {
  fio_http_s *h = (fio_http_s *)h_;
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  size_t pr = FIO___HTTP_PROTOCOL_WS;
  union {
    void (*fn)(fio_http_s *);
    void *ptr;
  } cb = {.fn = c->state.http.on_http};

  /* TODO! review WS and SSE responses. */
  if (fio_http_websocket_accepted(h))
    goto websocket_accepted;
  if (fio_http_sse_accepted(h))
    goto sse_accepted;
  fio_queue_push(c->queue,
                 fio___http_perform_user_callback_client,
                 cb.ptr,
                 (void *)h);
  return;
  (void)ignr;

sse_accepted:
  pr = FIO___HTTP_PROTOCOL_SSE;

websocket_accepted:
  c->h = h; /* was set to NULL in `on_http_complete` */
  fio_http_controller_set(
      c->h,
      &(FIO_PTR_FROM_FIELD(fio___http_protocol_s, settings, c->settings)
            ->state[pr]
            .controller));
  fio_io_protocol_set(
      c->io,
      &(FIO_PTR_FROM_FIELD(fio___http_protocol_s, settings, c->settings)
            ->state[pr]
            .protocol));

  FIO_LOG_DDEBUG2("(%d) Client %s upgrade complete for fd %d",
                  fio_io_pid(),
                  (fio_http_is_websocket(h) ? "WebSocket" : "SSE"),
                  fio_io_fd(c->io));

  fio_io_free(c->io); /* fio_dup called by fio_http1_on_complete */
  c->suspend = 0;
  fio_io_unsuspend(c->io);
}

/* *****************************************************************************
ALPN Helpers
***************************************************************************** */

FIO_SFUNC void fio___http_on_select_h1(fio_io_s *io) {
  FIO_LOG_DDEBUG2("TLS ALPN HTTP/1.1 selected for %p", io);
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(io);
  fio_io_protocol_set(
      io,
      &(FIO_PTR_FROM_FIELD(fio___http_protocol_s, settings, c->settings)
            ->state[FIO___HTTP_PROTOCOL_HTTP1]
            .protocol));
}
FIO_SFUNC void fio___http_on_select_h2(fio_io_s *io) {
  FIO_LOG_ERROR("TLS ALPN HTTP/2 not supported for %p", io);
  (void)io;
}

/* *****************************************************************************
HTTP Listen
***************************************************************************** */

static void fio___http_listen_on_start(fio_io_protocol_s *protocol, void *u) {
  (void)u;
  fio___http_protocol_s *p = (fio___http_protocol_s *)protocol;
  p->queue = ((p->settings.queue && p->settings.queue->q) ? p->settings.queue->q
                                                          : fio_io_queue());
}

static void fio___http_listen_on_stop(fio_io_protocol_s *p, void *u) {
  (void)u;
  fio___http_protocol_free(
      FIO_PTR_FROM_FIELD(fio___http_protocol_s,
                         state[FIO___HTTP_PROTOCOL_ACCEPT].protocol,
                         p));
}

void fio_http_listen___(void); /* IDE marker */
SFUNC void *fio_http_listen FIO_NOOP(const char *url, fio_http_settings_s s) {
  http_settings_validate(&s, 0);
  fio___http_protocol_s *p = fio___http_protocol_new(s.public_folder.len + 1);
  fio___http_protocol_init(p, url, s, 0);
  void *listener =
      fio_io_listen(.url = url,
                    .protocol = &p->state[FIO___HTTP_PROTOCOL_ACCEPT].protocol,
                    .tls = s.tls,
                    .on_start = fio___http_listen_on_start,
                    .on_stop = fio___http_listen_on_stop,
                    .queue_for_accept = p->settings.queue);
  return listener;
}

/* *****************************************************************************
HTTP Connect
***************************************************************************** */

static void fio___http_connect_on_failed(fio_io_protocol_s *p, void *udata) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  fio_http_free(c->h);
  c->h = NULL;
  fio___http_connection_free(c);
  (void)p;
}

void fio_http_connect___(void); /* IDE Marker */
/** Connects to HTTP / WebSockets / SSE connections on `url`. */
SFUNC fio_io_s *fio_http_connect FIO_NOOP(const char *url,
                                          fio_http_s *h,
                                          fio_http_settings_s s) {
  FIO_STR_INFO_TMP_VAR(origin, 4096);
  http_settings_validate(&s, 1);
  fio_url_s u = (fio_url_s){0};
  if (url)
    u = fio_url_parse(url, strlen(url));

  if (!h)
    h = fio_http_new();
  if (!fio_http_path(h).len)
    fio_http_path_set(h,
                      u.path.len ? FIO_BUF2STR_INFO(u.path)
                                 : FIO_STR_INFO2((char *)"/", 1));
  if (!fio_http_query(h).len && u.query.len)
    fio_http_query_set(h, FIO_BUF2STR_INFO(u.query));
  if (!fio_http_method(h).len)
    fio_http_method_set(h, FIO_STR_INFO2((char *)"GET", 3));
  if (u.host.len) {
    fio_http_request_header_set_if_missing(h,
                                           FIO_STR_INFO2((char *)"host", 4),
                                           FIO_BUF2STR_INFO(u.host));
    /* Origin header */
    fio_string_write2(
        &origin,
        NULL,
        FIO_STRING_WRITE_STR2("https", (size_t)(4 + fio_url_is_tls(u).tls)),
        FIO_STRING_WRITE_STR2("://", 3U),
        FIO_STRING_WRITE_STR_INFO(u.host),
        FIO_STRING_WRITE_STR2(":", (size_t)(!!u.port.len)),
        FIO_STRING_WRITE_STR_INFO(u.port));
  }

  /* test for ws:// or wss:// - WebSocket scheme */
  if ((u.scheme.len == 2 ||
       (u.scheme.len == 3 && ((u.scheme.buf[2] | 0x20) == 's'))) &&
      (fio_buf2u16u(u.scheme.buf) | 0x2020) == fio_buf2u16u("ws")) {
    fio_http_request_header_set_if_missing(h,
                                           FIO_STR_INFO2((char *)"origin", 6),
                                           origin);
    fio_http_websocket_set_request(h);
  }
  /* test for sse:// or sses:// - Server Sent Events scheme */
  else if ((u.scheme.len == 3 ||
            (u.scheme.len == 4 && ((u.scheme.buf[3] | 0x20) == 's'))) &&
           (fio_buf2u32u(u.scheme.buf) | fio_buf2u32u("\x20\x20\x20\xFF")) ==
               fio_buf2u32u("sse\xFF")) {
    fio_http_request_header_set_if_missing(h,
                                           FIO_STR_INFO2((char *)"origin", 6),
                                           origin);
    fio_http_sse_set_request(h);
  }

  /* TODO: test for and attempt to re-use connection */
  // if (fio_http_cdata(h)) { }

  fio___http_protocol_s *p = fio___http_protocol_new(u.host.len);
  fio___http_protocol_init(p, url, s, 1);
  fio___http_connection_s *c =
      fio___http_connection_new(p->settings.max_line_len);
  FIO_ASSERT_ALLOC(c);
  *c = (fio___http_connection_s){
      .io = NULL,
      .h = h,
      .settings = &(p->settings),
      .queue = p->queue,
      .udata = p->settings.udata,
      .state.http =
          {
              .on_http_callback = p->on_http_callback,
              .on_http = p->settings.on_http,
              .on_finish = p->settings.on_finish,
              .max_header = p->settings.max_header_size,
          },
      .capa = p->settings.max_line_len,
      .log = p->settings.log,
      .is_client = 1,
  };
  fio_http_controller_set(h, &p->state[FIO___HTTP_PROTOCOL_HTTP1].controller);
  if (!fio_http_udata(h)) /* avoid overwriting existing `udata` if set */
    fio_http_udata_set(h, c->udata);
  fio_http_cdata_set(h, fio___http_connection_dup(c));
  return fio_io_connect(url,
                        .protocol =
                            &p->state[FIO___HTTP_PROTOCOL_HTTP1].protocol,
                        .on_failed = fio___http_connect_on_failed,
                        .udata = c,
                        .tls = s.tls,
                        .timeout = s.connect_timeout);
}

/* *****************************************************************************
HTTP/1.1 Request / Response Completed
***************************************************************************** */

/** called when either a request or a response was received. */
static void fio_http1_on_complete(void *udata) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  fio_io_dup(c->io); /* make sure the IO and its data are valid in callback */
  fio_io_suspend(c->io);
  fio_http_s *h = c->h;
  c->h = NULL;
  c->suspend = 1;
  // fio_io_defer(c->state.http.on_http_callback, h, NULL);
  fio_queue_push(fio_io_queue(), c->state.http.on_http_callback, h);
}

/* *****************************************************************************
HTTP/1.1 Parser callbacks
***************************************************************************** */

FIO_IFUNC void fio___http_request_too_big(fio___http_connection_s *c) {
  fio_http_s *h = c->h;
  fio_io_dup(c->io); /* sending the response will result in fio_undup */
  fio_io_suspend(c->io);
  c->h = NULL;
  c->suspend = 1;
  if (fio_http_send_error_response(h, 413))
    fio_io_free(c->io); /* response not sent, we need to fio_undup */
  fio_http_free(h);
}

FIO_IFUNC void fio_http1_attach_handle(fio___http_connection_s *c) {
  c->h = fio_http_new();
  FIO_ASSERT_ALLOC(c->h);
  fio_http_controller_set(
      c->h,
      &(FIO_PTR_FROM_FIELD(fio___http_protocol_s, settings, c->settings))
           ->state[FIO___HTTP_PROTOCOL_HTTP1]
           .controller);
  fio_http_udata_set(c->h, c->udata);
  fio_http_cdata_set(c->h, fio___http_connection_dup(c));
}

/** called when a request method is parsed. */
static int fio_http1_on_method(fio_buf_info_s method, void *udata) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  if (c->h)
    return -1;
  fio_http1_attach_handle(c);
  fio_http_method_set(c->h, FIO_BUF2STR_INFO(method));
  return 0;
}
/** called when a response status is parsed. the status_str is the string
 * without the prefixed numerical status indicator.*/
static int fio_http1_on_status(size_t istatus,
                               fio_buf_info_s status,
                               void *udata) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  fio_http_clear_response(c->h, istatus != 301 && istatus != 302);
  fio_http_status_set(c->h, istatus);
  return 0;
  (void)status;
}
/** called when a request URL is parsed. */
static int fio_http1_on_url(fio_buf_info_s url, void *udata) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  fio_url_s u = fio_url_parse(url.buf, url.len);
  if (!u.path.len || u.path.buf[0] != '/')
    return -1;
  fio_http_path_set(c->h, FIO_BUF2STR_INFO(u.path));
  if (u.query.len)
    fio_http_query_set(c->h, FIO_BUF2STR_INFO(u.query));
  if (u.host.len)
    (!(c->h) ? fio_http_request_header_set
             : fio_http_response_header_set)(c->h,
                                             FIO_STR_INFO1((char *)"host"),
                                             FIO_BUF2STR_INFO(u.host));
  return 0;
}
/** called when a the HTTP/1.x version is parsed. */
static int fio_http1_on_version(fio_buf_info_s version, void *udata) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  FIO_ASSERT_DEBUG(c->h, "on_version called without a pre-existing handle!");
  if (!c->h)
    return -1;
  fio_http_version_set(c->h, FIO_BUF2STR_INFO(version));
  return 0;
}
/** called when a header is parsed. */
static int fio_http1_on_header(fio_buf_info_s name,
                               fio_buf_info_s value,
                               void *udata) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  if (!c->h)
    return 0; /* ignore possible post-error response headers */
  (!fio_http_status(c->h)
       ? fio_http_request_header_add
       : fio_http_response_header_add)(c->h,
                                       FIO_BUF2STR_INFO(name),
                                       FIO_BUF2STR_INFO(value));
  return 0;
}
/** called when the special content-length header is parsed. */
static int fio_http1_on_header_content_length(fio_buf_info_s name,
                                              fio_buf_info_s value,
                                              size_t content_length,
                                              void *udata) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  fio_http_s *h = c->h;
  if (!h)
    return 0;
  if (content_length > c->settings->max_body_size)
    goto too_big;
  if (content_length)
    fio_http_body_expect(c->h, content_length);
#if FIO_HTTP_SHOW_CONTENT_LENGTH_HEADER
  (!(h->status) ? fio_http_request_header_add
                : fio_http_response_header_add)(h,
                                                FIO_BUF2STR_INFO(name),
                                                FIO_BUF2STR_INFO(value));
#endif
  return 0;
too_big:
  fio___http_request_too_big(c);
  return 0; /* should we disconnect (return -1), or not? */
  (void)name, (void)value;
}
/** called when `Expect` arrives and may require a 100 continue response. */
static int fio_http1_on_expect(void *udata) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  const fio_buf_info_s response =
      FIO_BUF_INFO1((char *)"HTTP/1.1 100 Continue\r\n\r\n");
  fio_http_s *h = c->h;
  if (!h)
    return 1;
  c->h = NULL;
  /* TODO: test for body size violation and deny request if payload too big. */
  if (FIO_HTTP1_EXPECTED_CHUNKED != fio_http1_expected(&c->state.http.parser) &&
      c->settings->max_body_size > fio_http1_expected(&c->state.http.parser))
    goto payload_too_big;
  c->settings->pre_http_body(h);
  if (fio_http_status(h))
    goto response_sent;
  c->h = h;
  fio_io_write2(c->io, .buf = response.buf, .len = response.len, .copy = 0);
  return 0; /* TODO?: improve support for `expect` headers? */
payload_too_big:
  fio_io_dup(c->io);
  if (fio_http_send_error_response(h, 413))
    fio_io_free(c->io); /* response not sent, we need to fio_undup */
                        /* fall through */
response_sent:
  // c->h = NULL;
  fio_http_free(h);
  return 1;
}

/** called when a body chunk is parsed. */
static int fio_http1_on_body_chunk(fio_buf_info_s chunk, void *udata) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  if (!c->h)
    return -1; /* close connection if a large payload is unstoppable */
  if (c->is_client &&
      (fio_http_status(c->h) == 301 || fio_http_status(c->h) == 302))
    return 0; /* don't overwrite client payload on redirect */
  if (chunk.len + fio_http_body_length(c->h) > c->settings->max_body_size)
    goto too_big;
  fio_http_body_write(c->h, chunk.buf, chunk.len);
  return 0;
too_big:
  fio___http_request_too_big(c);
  return 0;
}

/* *****************************************************************************
HTTP/1.1 Accepting new connections (tests for special HTTP/2 pre-knowledge)
***************************************************************************** */

/** Called when an IO is attached to a protocol. */
FIO_SFUNC void fio___http_on_attach_accept(fio_io_s *io) {

  fio___http_protocol_s *p =
      FIO_PTR_FROM_FIELD(fio___http_protocol_s,
                         state[FIO___HTTP_PROTOCOL_ACCEPT].protocol,
                         fio_io_protocol(io));
  fio___http_protocol_dup(p);
  // p->queue = fio_io_queue();

  const uint32_t capa = p->settings.max_line_len;
  fio___http_connection_s *c = fio___http_connection_new(capa);
  FIO_ASSERT_ALLOC(c);
  *c = (fio___http_connection_s){
      .io = io,
      .settings = &(p->settings),
      .queue =
          ((p->settings.queue && p->settings.queue->q) ? p->settings.queue->q
                                                       : fio_io_queue()),
      .udata = p->settings.udata,
      .state.http =
          {
              .on_http_callback = p->on_http_callback,
              .on_http = p->settings.on_http,
              .on_finish = p->settings.on_finish,
              .max_header = p->settings.max_header_size,
          },
      .capa = capa,
      .log = p->settings.log,
  };
  fio_io_udata_set(io, (void *)c);
  FIO_LOG_DDEBUG2("(%d) HTTP accepted a new connection (%p)",
                  (int)fio_thread_getpid(),
                  c->io);
#if 0 /* skip pre-knowledge test? */
  fio_io_protocol_set(
      io,
      &(FIO_PTR_FROM_FIELD(fio___http_protocol_s, settings, c->settings)
            ->state[FIO___HTTP_PROTOCOL_HTTP1]
            .protocol));
#endif
}

/** Called when a data is available. */
FIO_SFUNC void fio___http1_accept_on_data(fio_io_s *io) {
  const fio_buf_info_s prior_knowledge = FIO_BUF_INFO2(
      (char *)"\x50\x52\x49\x20\x2a\x20\x48\x54\x54\x50\x2f\x32\x2e\x30"
              "\x0d\x0a\x0d\x0a\x53\x4d\x0d\x0a\x0d\x0a",
      24);
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(io);
  fio_io_protocol_s *phttp_new;
  size_t r = fio_io_read(io, c->buf + c->len, c->capa - c->len);
  if (!r) /* nothing happened */
    return;
  c->len = (uint32_t)r;
  if (prior_knowledge.buf[0] != c->buf[0] ||
      FIO_MEMCMP(
          prior_knowledge.buf,
          c->buf,
          (c->len > prior_knowledge.len ? prior_knowledge.len : c->len))) {
    /* no prior knowledge, switch to HTTP/1.1 */
    phttp_new =
        &(FIO_PTR_FROM_FIELD(fio___http_protocol_s, settings, c->settings)
              ->state[FIO___HTTP_PROTOCOL_HTTP1]
              .protocol);
    fio_io_protocol_set(io, phttp_new);
    return;
  }
  if (c->len < prior_knowledge.len) /* wait for more data */
    return;

  if (c->len > prior_knowledge.len)
    FIO_MEMMOVE(c->buf,
                c->buf + prior_knowledge.len,
                c->len - prior_knowledge.len);
  c->len -= prior_knowledge.len;
  phttp_new = &(FIO_PTR_FROM_FIELD(fio___http_protocol_s, settings, c->settings)
                    ->state[FIO___HTTP_PROTOCOL_HTTP2]
                    .protocol);

  fio_io_protocol_set(io, phttp_new);
}

FIO_SFUNC void fio___http_on_close(void *buf, void *udata) {
  FIO_LOG_DDEBUG2("(%d) HTTP connection closed for %p",
                  (int)fio_thread_getpid(),
                  udata);
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  c->io = NULL;
  fio_http_free(c->h);
  fio___http_connection_free(c);
  (void)buf;
}

/* *****************************************************************************
HTTP/1.1 Protocol
***************************************************************************** */

FIO_SFUNC int fio___http1_process_data(fio_io_s *io,
                                       fio___http_connection_s *c) {
  (void)io, (void)c;
  size_t consumed = fio_http1_parse(&c->state.http.parser,
                                    FIO_BUF_INFO2(c->buf, c->len),
                                    (void *)c);
  if (!consumed)
    return -1;
  if (consumed == FIO_HTTP1_PARSER_ERROR)
    goto http1_error;
  c->len -= consumed;
  if (c->len)
    FIO_MEMMOVE(c->buf, c->buf + consumed, c->len);
  if (c->suspend)
    return -1;
  return 0;

http1_error:
  FIO_LOG_DDEBUG2("HTTP/1.1 parser error! disconnecting client at %d",
                  fio_io_fd(io));
  if (c->h) {
    fio_http_s *h = c->h;
    c->h = NULL;
    if (!c->is_client) {
      fio_io_dup(c->io);
      if (fio_http_send_error_response(h, 400))
        fio_io_free(c->io);
    }
    fio_http_free(h);
  }
  fio_io_close(io);
  return -1;
}

// /** Called when a data is available. */
FIO_SFUNC void fio___http1_on_data(fio_io_s *io) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(io);
  size_t r;
  for (;;) {
    if (c->capa == c->len)
      return;
    if (!(r = fio_io_read(io, c->buf + c->len, c->capa - c->len)))
      return;
    c->len += r;
    if (fio___http1_process_data(io, c))
      return;
  }
}

// /** Called when an IO is attached to a protocol. */
FIO_SFUNC void fio___http1_on_attach(fio_io_s *io) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(io);
  if (c->len)
    fio___http1_process_data(io, c);
  return;
}

/* *****************************************************************************
HTTP/1.1 Client Protocol
***************************************************************************** */

/** Iterates through all cookies. A non-zero return will stop iteration. */
FIO_SFUNC int fio_http1___write_client_cookie_callback(fio_http_s *h,
                                                       fio_str_info_s name,
                                                       fio_str_info_s value,
                                                       void *udata) {
  fio_str_info_s *buf = (fio_str_info_s *)udata;
  fio_string_write2(buf,
                    FIO_STRING_REALLOC,
                    FIO_STRING_WRITE_STR2("cookie:", 7),
                    FIO_STRING_WRITE_STR_INFO(name),
                    FIO_STRING_WRITE_STR2("=", 1),
                    FIO_STRING_WRITE_STR_INFO(value),
                    FIO_STRING_WRITE_STR2("\r\n", 2));
  return 0;
  (void)h;
}

/** called by the HTTP handle for each header. */
FIO_SFUNC int fio_http1___write_header_callback(fio_http_s *h,
                                                fio_str_info_s name,
                                                fio_str_info_s value,
                                                void *out_) {
  (void)h;
  /* manually copy, as this is an "all or nothing" copy (no truncation) */
  fio_str_info_s *out = (fio_str_info_s *)out_;
  return fio_string_write2(out,
                           FIO_STRING_REALLOC,
                           FIO_STRING_WRITE_STR2(name.buf, name.len),
                           FIO_STRING_WRITE_STR2(":", 1),
                           FIO_STRING_WRITE_STR2(value.buf, value.len),
                           FIO_STRING_WRITE_STR2("\r\n", 2));
}

FIO_SFUNC void fio___http1_send_request(fio_http_s *h) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (!c->io || !fio_io_is_open(c->io))
    return;
  fio_str_info_s buf = FIO_STR_INFO2(NULL, 0);
  /* set Content-Length (client is never streaming) */
  if (fio_http_body_length(h)) {
    char ibuf[32];
    fio_str_info_s k = FIO_STR_INFO2((char *)"content-length", 14);
    fio_str_info_s v = FIO_STR_INFO3(ibuf, 0, 32);
    v.len = fio_digits10u(fio_http_body_length(h));
    fio_ltoa10u(v.buf, fio_http_body_length(h), v.len);
    fio_http_request_header_set(h, k, v);
  }
  { /* set sensible defaults for common headers (Accept, User-Agent) */
    fio_http_request_header_set_if_missing(h,
                                           FIO_STR_INFO1((char *)"accept"),
                                           FIO_STR_INFO1((char *)"*/*"));
    fio_http_request_header_set_if_missing(
        h,
        FIO_STR_INFO1((char *)"user-agent"),
        FIO_STR_INFO1((char *)"facil.io/" FIO_VERSION_STRING));
  }
  { /* write status string */
    fio_str_info_s method = fio_http_method(h);
    fio_str_info_s path = fio_http_path(h);
    fio_str_info_s version = fio_http_version(h);
    if (!path.len)
      path = FIO_STR_INFO1((char *)"/");
    if ((version.len - 1) > 15)
      version = FIO_STR_INFO1((char *)"HTTP/1.1");
    fio_string_write2(&buf,
                      FIO_STRING_REALLOC,
                      FIO_STRING_WRITE_STR_INFO(method),
                      FIO_STRING_WRITE_STR2(" ", 1),
                      FIO_STRING_WRITE_STR_INFO(path),
                      FIO_STRING_WRITE_STR2(" ", 1),
                      FIO_STRING_WRITE_STR_INFO(version),
                      FIO_STRING_WRITE_STR2("\r\n", 2));
  }
  /* write headers */
  fio_http_request_header_each(h, fio_http1___write_header_callback, &buf);
  /* write cookies */
  fio_http_cookie_each(h, fio_http1___write_client_cookie_callback, &buf);
  fio_string_write(&buf, FIO_STRING_REALLOC, "\r\n", 2);
  /* send data (moves memory ownership) */
  fio_io_write2(c->io,
                .buf = buf.buf,
                .len = buf.len,
                .dealloc = FIO_STRING_FREE,
                .copy = 0);
  /* make sure we listen to incoming data */
  c->suspend = 0;
  fio_io_unsuspend(c->io);
  /* Write Body */
  if (!fio_http_body_length(h))
    return;
  fio_http_body_seek(h, 0);
  if (fio_http_body_fd(h) == -1) {
    buf = fio_http_body_read(h, (size_t)-1);
    fio_io_write2(c->io,
                  .buf = (char *)fio_http_dup(h),
                  .len = buf.len,
                  .offset = (size_t)((char *)h - buf.buf),
                  .dealloc = (void (*)(void *))fio_http_free);
  } else {
    fio_io_write2(c->io,
                  .fd = fio_http_body_fd(h),
                  .len = fio_http_body_length(h),
                  .copy = 1);
  }
}

FIO_SFUNC void fio___http1_on_attach_client(fio_io_s *io) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(io);
  // c->io = fio_io_dup(io);
  c->io = io;
  fio___http1_send_request(c->h);
  if (c->len)
    fio___http1_process_data(io, c);
  return;
}

/* *****************************************************************************
HTTP/1 Controller
***************************************************************************** */
FIO_SFUNC int fio___http_controller_get_fd(fio_http_s *h) {
  return fio_io_fd(fio_http_io(h));
}

/** Informs the controller that request / response headers must be sent. */
FIO_SFUNC void fio___http_controller_http1_send_headers(fio_http_s *h) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (!c->io || !fio_io_is_open(c->io))
    return;
  fio_str_info_s buf = FIO_STR_INFO2(NULL, 0);
  { /* write status string */
    fio_str_info_s ver = fio_http_version(h);
    fio_str_info_s status = fio_http_status2str(fio_http_status(h));
    if (ver.len > 15) {
      FIO_LOG_ERROR("HTTP/1.1 client version string too long!");
      ver = FIO_STR_INFO1((char *)"HTTP/1.1");
    }
    fio_string_write2(&buf,
                      FIO_STRING_REALLOC,
                      FIO_STRING_WRITE_STR2(ver.buf, ver.len),
                      FIO_STRING_WRITE_STR2(" ", 1),
                      FIO_STRING_WRITE_NUM(fio_http_status(h)),
                      FIO_STRING_WRITE_STR2(" ", 1),
                      FIO_STRING_WRITE_STR2(status.buf, status.len),
                      FIO_STRING_WRITE_STR2("\r\n", 2));
  }

  /* write headers */
  fio_http_response_header_each(h, fio_http1___write_header_callback, &buf);
  /* write cookies */
  fio_http_set_cookie_each(h, fio_http1___write_header_callback, &buf);
  /* add streaming headers? */
  if (fio_http_is_streaming(h))
    fio_string_write(&buf,
                     FIO_STRING_REALLOC,
                     "transfer-encoding: chunked\r\n",
                     28);
  fio_string_write(&buf, FIO_STRING_REALLOC, "\r\n", 2);
  /* send data (move memory ownership)? */
  c->state.http.buf = buf;
  return;
  fio_io_write2(c->io,
                .buf = buf.buf,
                .len = buf.len,
                .dealloc = FIO_STRING_FREE,
                .copy = 0);
}
/** called by the HTTP handle for each body chunk (or to finish a response. */
FIO_SFUNC void fio___http_controller_http1_write_body(
    fio_http_s *h,
    fio_http_write_args_s args) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (!c->io || !fio_io_is_open(c->io))
    goto no_write_err;
  if (fio_http_is_streaming(h))
    goto stream_chunk;
  if (c->state.http.buf.len) {
    if (args.buf && args.len) {
      fio_string_write(&c->state.http.buf,
                       FIO_STRING_REALLOC,
                       (char *)args.buf + args.offset,
                       args.len);
      if (args.dealloc)
        args.dealloc((void *)args.buf);
    }
    fio_io_write2(c->io,
                  .buf = (void *)c->state.http.buf.buf,
                  .len = c->state.http.buf.len,
                  .dealloc = FIO_STRING_FREE);
    c->state.http.buf = FIO_STR_INFO0;
    return;
  }

  fio_io_write2(c->io,
                .buf = (void *)args.buf,
                .fd = args.fd,
                .len = args.len,
                .offset = args.offset,
                .dealloc = args.dealloc,
                .copy = (uint8_t)args.copy);
  return;

stream_chunk:
  if (args.len) { /* print chunk header */
    if (c->state.http.buf.len) {
      fio_io_write2(c->io,
                    .buf = (void *)c->state.http.buf.buf,
                    .len = c->state.http.buf.len,
                    .dealloc = FIO_STRING_FREE);
      fio_string_write2(&c->state.http.buf,
                        FIO_STRING_REALLOC,
                        FIO_STRING_WRITE_HEX(args.len),
                        FIO_STRING_WRITE_STR2("\r\n", 2));
      fio_io_write2(c->io,
                    .buf = (void *)c->state.http.buf.buf,
                    .len = c->state.http.buf.len,
                    .dealloc = FIO_STRING_FREE);
      c->state.http.buf = FIO_STR_INFO0;
    } else {
      char buf[24];
      fio_str_info_s i = FIO_STR_INFO3(buf, 0, 24);
      fio_string_write_hex(&i, NULL, args.len);
      fio_string_write(&i, NULL, "\r\n", 2);
      fio_io_write2(c->io, .buf = (void *)i.buf, .len = i.len, .copy = 1);
    }
  } else {
    if (c->state.http.buf.len) {
      fio_io_write2(c->io,
                    .buf = (void *)c->state.http.buf.buf,
                    .len = c->state.http.buf.len,
                    .dealloc = FIO_STRING_FREE);
      c->state.http.buf = FIO_STR_INFO0;
    }
    if (args.buf || (uint32_t)(args.fd + 1) > 0U)
      FIO_LOG_ERROR("HTTP1 streaming requires a correctly pre-determined "
                    "length per chunk.");
    else
      goto no_write_err;
  }
  fio_io_write2(c->io,
                .buf = (void *)args.buf,
                .fd = args.fd,
                .len = args.len,
                .offset = args.offset,
                .dealloc = args.dealloc,
                .copy = (uint8_t)args.copy);
  /* print chunk trailer */
  {
    fio_buf_info_s trailer = FIO_BUF_INFO2((char *)"\r\n", 2);
    fio_io_write2(c->io, .buf = trailer.buf, .len = trailer.len, .copy = 1);
  }
  return;

no_write_err:
  if (args.buf) {
    if (args.dealloc)
      args.dealloc((void *)args.buf);
  } else if (args.fd != -1) {
    close(args.fd);
  }
}

FIO_SFUNC void fio___http_controller_http1_on_finish_task(void *c_,
                                                          void *upgraded) {
  fio___http_connection_s *c = (fio___http_connection_s *)c_;
  c->suspend = 0;
  if (c->state.http.buf.len) {
    fio_io_write2(c->io,
                  .buf = (void *)c->state.http.buf.buf,
                  .len = c->state.http.buf.len,
                  .dealloc = FIO_STRING_FREE);
    c->state.http.buf = FIO_STR_INFO0;
  }

  if (upgraded)
    goto upgraded;

  if (fio_io_is_open(c->io)) {
    /* TODO: test for connection:close header and h->status values */
    fio___http1_process_data(c->io, c);
  }
  if (!c->suspend)
    fio_io_unsuspend(c->io);
  fio_io_free(c->io);
  return;

upgraded:
  if (c->h || !fio_io_is_open(c->io))
    goto something_is_wrong;
  c->h = (fio_http_s *)upgraded;
  {
    const size_t pr_i = fio_http_is_websocket(c->h) ? FIO___HTTP_PROTOCOL_WS
                                                    : FIO___HTTP_PROTOCOL_SSE;
    fio_http_controller_set(
        c->h,
        &(FIO_PTR_FROM_FIELD(fio___http_protocol_s, settings, c->settings)
              ->state[pr_i]
              .controller));
    fio_io_protocol_set(
        c->io,
        &(FIO_PTR_FROM_FIELD(fio___http_protocol_s, settings, c->settings)
              ->state[pr_i]
              .protocol));
    if (pr_i == FIO___HTTP_PROTOCOL_SSE) {
      fio_str_info_s last_id =
          fio_http_request_header(c->h,
                                  FIO_STR_INFO2((char *)"last-event-id", 13),
                                  0);
      if (last_id.buf)
        c->settings->on_eventsource_reconnect(c->h, FIO_STR2BUF_INFO(last_id));
    }
  }
  fio_io_unsuspend(c->io);
  fio_io_free(c->io);
  return;

something_is_wrong:
  if (fio_io_is_open(c->io))
    FIO_LOG_DEBUG2("(%d) Connection upgrade went wrong for fd %d - closing",
                   fio_io_pid(),
                   fio_io_fd(c->io));
  fio_io_protocol_set(c->io, NULL); /* make zombie, timeout will clear it. */
  fio_io_free(c->io);
  fio___http_connection_free(c); /* free HTTP connection element */
}

/** called once a request / response had finished */
FIO_SFUNC void fio___http_controller_http1_on_finish(fio_http_s *h) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (fio_http_is_streaming(h))
    fio_io_write2(c->io, .buf = (char *)"0\r\n\r\n", .len = 5, .copy = 1);
  if (c->log)
    fio_http_write_log(h);
  if (fio_http_is_upgraded(h))
    goto upgraded;
  /* once the function returns, `h` may be freed (auto-finish on free).
   * so we must call this callback here (sync), no matter the thread */
  c->state.http.on_finish(h);
  fio_io_defer(fio___http_controller_http1_on_finish_task, (void *)(c), NULL);
  return;

upgraded:
  fio_io_defer(fio___http_controller_http1_on_finish_task,
               (void *)(c),
               (void *)h);
}

/* *****************************************************************************
HTTP/2 Protocol (disconnect, as HTTP/2 is unsupported)
***************************************************************************** */

// /** Called when an IO is attached to a protocol. */
// void (*on_attach)(fio_io_s *io);
// /** Called when a data is available. */
// void (*on_data)(fio_io_s *io);
// /** called once all pending `fio_io_write` calls are finished. */
// void (*on_ready)(fio_io_s *io);
// /** Called after the connection was closed, and pending tasks
// completed.
// */ void (*on_close)(void *udata);

/* *****************************************************************************
HTTP/2 Controller (TODO!)
***************************************************************************** */

// /** Called when an HTTP handle is freed. */
// void (*on_destroyed)(fio_http_s *h, void *cdata);
// /** Informs the controller that request / response headers must be
// sent.
// */ void (*send_headers)(fio_http_s *h);
// /** called by the HTTP handle for each body chunk (or to finish a
// response.
// */ void (*write_body)(fio_http_s *h, fio_http_write_args_s args);
// /** called once a request / response had finished */
// void (*on_finish)(fio_http_s *h);

/* *****************************************************************************
Authentication Helper
***************************************************************************** */

/** Allows all clients to connect (bypasses authentication). */
SFUNC int FIO_HTTP_AUTHENTICATE_ALLOW(fio_http_s *h) {
  ((void)h);
  return 0;
}

/* *****************************************************************************
WebSocket Parser Callbacks
***************************************************************************** */

FIO_SFUNC int fio___websocket_process_data(fio_io_s *io,
                                           fio___http_connection_s *c);

FIO_SFUNC void fio___websocket_on_message_finalize(void *c_, void *ignr_) {
  fio___http_connection_s *c = (fio___http_connection_s *)c_;
  c->suspend = 0;
  if (c->len)
    fio___websocket_process_data(c->io, c);
  fio_io_unsuspend(c->io);
  fio_io_free(c->io);
  fio___http_connection_free(c);
  (void)ignr_;
}

FIO_SFUNC void fio___websocket_on_message_task(void *c_, void *is_text) {
  fio___http_connection_s *c = (fio___http_connection_s *)c_;
  c->state.ws.on_message(c->h,
                         fio_bstr_buf(c->state.ws.msg),
                         (uint8_t)(uintptr_t)is_text);
  fio_bstr_free(c->state.ws.msg);
  c->state.ws.msg = NULL;
  fio_io_defer(fio___websocket_on_message_finalize, c, NULL);
}

/** Called when a message frame was received. */
FIO_SFUNC void fio_websocket_on_message(void *udata,
                                        fio_buf_info_s msg,
                                        unsigned char is_text) {
  /* TODO: suspend IO and queue in async queue? */
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  // c->state.ws.on_message(c->h,
  //                        fio_bstr_buf(c->state.ws.msg),
  //                        (uint8_t)(uintptr_t)is_text);
  // fio_bstr_free(c->state.ws.msg);
  // c->state.ws.msg = NULL;
  // c->suspend = 0;
  // fio___websocket_process_data(c->io, c);
  // if (!c->suspend)
  //   fio_io_unsuspend(c->io);
  // return; /* TODO: FIXME! */
  fio_io_dup(c->io);
  fio___http_connection_dup(c);
  fio_io_suspend(c->io);
  c->suspend = 1;
  fio_queue_push(c->queue,
                 fio___websocket_on_message_task,
                 udata,
                 (void *)(uintptr_t)is_text);
  (void)msg;
}

/**
 * Called when the parser needs to copy the message to an external buffer.
 *
 * MUST return the external buffer, as it may need to be unmasked.
 *
 * Partial message length may be equal to zero (`partial.len == 0`).
 */
FIO_SFUNC fio_buf_info_s fio_websocket_write_partial(void *udata,
                                                     fio_buf_info_s partial,
                                                     size_t more_expected) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  if (!c->state.ws.msg && more_expected)
    c->state.ws.msg = fio_bstr_reserve(NULL, more_expected + partial.len);
  c->state.ws.msg = fio_bstr_write(c->state.ws.msg, partial.buf, partial.len);
  return fio_bstr_buf(c->state.ws.msg);
}

/** Called when the permessage-deflate extension requires decompression. */
FIO_SFUNC fio_buf_info_s fio_websocket_decompress(void *udata,
                                                  fio_buf_info_s msg) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  FIO_LOG_ERROR("WebSocket permessage-deflate not yet implemented!");
  (void)c;
  return msg;
}

/** Called when a `ping` message was received. */
FIO_SFUNC void fio_websocket_on_protocol_ping(void *udata, fio_buf_info_s msg) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  if (msg.len < 248) {
    char buf[256];
    size_t len =
        (c->is_client
             ? fio_websocket_client_wrap
             : fio_websocket_server_wrap)(buf, msg.buf, msg.len, 0x0A, 1, 1, 0);
    fio_io_write2(c->io, .buf = buf, .len = len, .copy = 1);
  } else {
    char *pong = fio_bstr_reserve(NULL, msg.len + 11);
    size_t len = (c->is_client ? fio_websocket_client_wrap
                               : fio_websocket_server_wrap)(pong,
                                                            msg.buf,
                                                            msg.len,
                                                            0x0A,
                                                            1,
                                                            1,
                                                            0);
    pong = fio_bstr_len_set(pong, len);
    fio_io_write2(c->io,
                  .buf = pong,
                  .len = len,
                  .dealloc = (void (*)(void *))fio_bstr_free);
  }
  fio_bstr_free(c->state.ws.msg);
  c->state.ws.msg = NULL;
}

/** Called when a `pong` message was received. */
FIO_SFUNC void fio_websocket_on_protocol_pong(void *udata, fio_buf_info_s msg) {
#if (DEBUG - 1 + 1) || (FIO_WEBSOCKET_STATS - 1 + 1)
  {
    char *pos = msg.buf;
    static uint64_t longest = 0;
    uint64_t ping_time = fio_io_last_tick() - fio_atol16u(&pos);
    if (ping_time < (1 << 16) && longest < ping_time) {
      longest = ping_time;
      FIO_LOG_INFO("WebSocket longest ping round-trip detected as: %zums",
                   (size_t)ping_time);
    }
  }
#endif
  FIO_LOG_DDEBUG2("Pong (%zu): %s", msg.len, msg.buf);
  (void)msg; /* do nothing */
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  fio_bstr_free(c->state.ws.msg);
  c->state.ws.msg = NULL;
}

/** Called when a `close` message was received. */
FIO_SFUNC void fio_websocket_on_protocol_close(void *udata,
                                               fio_buf_info_s msg) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  char buf[32];
  size_t len = fio_websocket_server_wrap(buf, NULL, 0, 0x08, 1, 1, 0);
  fio_io_write(c->io, buf, len);
  if (msg.len > 1)
    c->state.ws.code = fio_buf2u16_be(msg.buf);
  fio_io_close(c->io);
  if (msg.len > 2)
    FIO_LOG_DDEBUG2("WebSocket %p closed with error message: %s",
                    c->io,
                    msg.buf + 2);
  (void)msg;
}

/* *****************************************************************************
WebSocket Protocol
***************************************************************************** */

FIO_SFUNC int fio___websocket_process_data(fio_io_s *io,
                                           fio___http_connection_s *c) {
  (void)io, (void)c;
  size_t consumed = fio_websocket_parse(&c->state.ws.parser,
                                        FIO_BUF_INFO2(c->buf, c->len),
                                        (void *)c);
  if (!consumed)
    return -1;
  if (consumed == FIO_WEBSOCKET_PARSER_ERROR)
    goto ws_error;
  c->len -= consumed;
  if (c->len)
    FIO_MEMMOVE(c->buf, c->buf + consumed, c->len);
  if (c->suspend)
    return -1;
  return 0;

ws_error:
  FIO_LOG_DDEBUG2("WebSocket protocol error?");
  fio_websocket_on_protocol_close((void *)c, ((fio_buf_info_s){0}));
  return -1;
}

/** Called when a data is available. */
FIO_SFUNC void fio___websocket_on_data(fio_io_s *io) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(io);
  size_t r;
  for (;;) {
    if (c->capa == c->len)
      return;
    if (!(r = fio_io_read(io, c->buf + c->len, c->capa - c->len)))
      return;
    c->len += r;
    if (fio___websocket_process_data(io, c))
      return;
  }
}

FIO_SFUNC void fio___websocket_on_ready(fio_io_s *io) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(io);
  fio_http_s *h = c->h;
  if (!h)
    return;
  c->state.ws.on_ready(h);
}

FIO_SFUNC void fio___websocket_on_timeout(fio_io_s *io) {
  char buf[32];
  char tm[20] = "0x00000000000000000";
  fio_ltoa16u(tm + 2, fio_io_last_tick(), 16);
  size_t len = fio_websocket_server_wrap(buf, tm, 18, 0x09, 1, 1, 0);
  fio_io_write(io, buf, len);
}

FIO_SFUNC void fio___websocket_on_shutdown(fio_io_s *io) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(io);
  c->settings->on_shutdown(c->h);
  fio_websocket_on_protocol_close(c, ((fio_buf_info_s){0}));
}

/** Called when an IO is attached to a protocol. */
FIO_SFUNC void fio___websocket_on_attach(fio_io_s *io) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(io);
  fio_http_s *h = c->h;
  c->state.ws = (struct fio___http_connection_ws_s){
      .on_message = c->settings->on_message,
      .on_ready = c->settings->on_ready,
      .parser = {.must_mask = !c->is_client},
  };
  c->settings->on_open(h);
  fio___websocket_process_data(io, c);
}

/** Called after the connection was closed, and pending tasks completed. */
FIO_SFUNC void fio___websocket_on_close(void *buf, void *udata) {
  FIO_LOG_DDEBUG2("(%d) WebSocket connection closed for %p",
                  (int)fio_thread_getpid(),
                  udata);
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  c->io = NULL;
  fio_bstr_free(c->state.ws.msg);
  if (c->h) {
    fio_http_status_set(c->h, (size_t)(c->state.ws.code));
    c->settings->on_close(c->h);
    c->settings->on_finish(c->h);
    fio_http_free(c->h);
  }
  fio___http_connection_free(c);
  (void)buf;
}

/**
 * Sets a specific on_message callback for this connection.
 *
 * Returns -1 on error (i.e., upgrade still in negotiation).
 */
SFUNC int fio_http_on_message_set(fio_http_s *h,
                                  void (*on_message)(fio_http_s *,
                                                     fio_buf_info_s,
                                                     uint8_t)) {
  if (!h)
    return -1;
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (!c)
    return -1;
  if (!on_message)
    on_message = c->settings->on_message;
  c->state.ws.on_message = on_message;
  return 0;
}

/* *****************************************************************************
WebSocket Writing / Subscription Helpers
***************************************************************************** */

FIO_IFUNC void fio___http_websocket_subscribe_imp(fio_msg_s *msg,
                                                  uint8_t is_text) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(msg->io);
  if (!c)
    return;
  fio_http_websocket_write(c->h, msg->message.buf, msg->message.len, is_text);
}

/** Optional WebSocket subscription callback - all messages are UTF-8 valid. */
SFUNC void FIO_HTTP_WEBSOCKET_SUBSCRIBE_DIRECT_TEXT(fio_msg_s *msg) {
  fio___http_websocket_subscribe_imp(msg, 1);
}
/** Optional WebSocket subscription callback - messages may be non-UTF-8. */
SFUNC void FIO_HTTP_WEBSOCKET_SUBSCRIBE_DIRECT_BINARY(fio_msg_s *msg) {
  fio___http_websocket_subscribe_imp(msg, 0);
}

/** Optional WebSocket subscription callback. */
SFUNC void FIO_HTTP_WEBSOCKET_SUBSCRIBE_DIRECT(fio_msg_s *msg) {
  ((msg->message.len < FIO_HTTP_WEBSOCKET_WRITE_VALIDITY_TEST_LIMIT) &&
           (fio_string_utf8_valid(
               FIO_STR_INFO2((char *)msg->message.buf, msg->message.len)))
       ? FIO_HTTP_WEBSOCKET_SUBSCRIBE_DIRECT_TEXT
       : FIO_HTTP_WEBSOCKET_SUBSCRIBE_DIRECT_BINARY)(msg);
}

/* *****************************************************************************
EventSource (SSE) Helpers - HTTP Upgraded Connections
***************************************************************************** */

void fio_http_sse_write___(void); /* IDE Marker */
/** Writes an SSE message (UTF-8). Fails if connection wasn't upgraded yet. */
SFUNC int fio_http_sse_write FIO_NOOP(fio_http_s *h,
                                      fio_http_sse_write_args_s args) {
  if (!args.data.len || !h || !fio_http_is_sse(h))
    return -1;
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (!c || !c->io)
    return -1;
  char *payload =
      fio_bstr_reserve(NULL, args.id.len + args.event.len + args.data.len + 22);
  if (args.id.len)
    payload = fio_bstr_write2(payload,
                              FIO_STRING_WRITE_STR2("id:", 3),
                              FIO_STRING_WRITE_STR2(args.id.buf, args.id.len),
                              FIO_STRING_WRITE_STR2("\r\n", 2));
  if (args.event.len)
    payload =
        fio_bstr_write2(payload,
                        FIO_STRING_WRITE_STR2("event:", 6),
                        FIO_STRING_WRITE_STR2(args.event.buf, args.event.len),
                        FIO_STRING_WRITE_STR2("\r\n", 2));
  { /* separate lines (add "data:" at beginning of each new line) */
    char *pos;
    while (args.data.len &&
           (pos = (char *)FIO_MEMCHR(args.data.buf, '\n', args.data.len))) {
      const size_t len = (pos + 1) - args.data.buf;
      pos -= (pos[-1] == '\r');
      payload = fio_bstr_write2(
          payload,
          FIO_STRING_WRITE_STR2("data:", 5),
          FIO_STRING_WRITE_STR2(args.data.buf, (size_t)(pos - args.data.buf)),
          FIO_STRING_WRITE_STR2("\r\n", 2));
      args.data.buf += len;
      args.data.len -= len;
    }
  }
  /* write reminder */
  if (args.data.len)
    payload =
        fio_bstr_write2(payload,
                        FIO_STRING_WRITE_STR2("data:", 5),
                        FIO_STRING_WRITE_STR2(args.data.buf, args.data.len),
                        FIO_STRING_WRITE_STR2("\r\n", 2));
  /* event ends on empty line */
  payload = fio_bstr_write(payload, "\r\n", 2);
  fio_io_write2(c->io,
                .buf = payload,
                .len = fio_bstr_len(payload),
                .dealloc = (void (*)(void *))fio_bstr_free);
  return 0;
}

/** Optional EventSource subscription callback - messages MUST be UTF-8. */
SFUNC void FIO_HTTP_SSE_SUBSCRIBE_DIRECT(fio_msg_s *msg) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(msg->io);
  if (!c)
    return;
  FIO_STR_INFO_TMP_VAR(id_str, 64);
  fio_string_write_hex(&id_str, NULL, msg->id);
  fio_http_sse_write(c->h,
                     .id = FIO_STR2BUF_INFO(id_str),
                     .event = FIO_STR2BUF_INFO(msg->channel),
                     .data = FIO_STR2BUF_INFO(msg->message));
}

/* *****************************************************************************
WebSocket Writing / Subscription Helpers
***************************************************************************** */

SFUNC int fio_http_websocket_write(fio_http_s *h,
                                   const void *buf,
                                   size_t len,
                                   uint8_t is_text) {
  if (!h || !fio_http_is_websocket(h))
    return -1;
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (!c)
    return -1;
  is_text = (!!is_text);
  is_text |= (!is_text) << 1;
  uint8_t rsv = 0;
  if (len < 512) { /* fast-path: no allocation, no compression */
    char tmp[520];
    size_t wlen =
        (c->is_client
             ? fio_websocket_client_wrap
             : fio_websocket_server_wrap)(tmp, buf, len, is_text, 1, 1, rsv);
    fio_io_write2(c->io, .buf = tmp, .len = wlen, .copy = 1);
    return 0;
  }
#if HAVE_ZLIB /* TODO: compress? */
  // if(c->state.ws.deflate) ;
#endif
  char *payload =
      fio_bstr_reserve(NULL,
                       fio_websocket_wrapped_len(len) + (c->is_client << 2));
  payload = fio_bstr_len_set(
      payload,
      (c->is_client
           ? fio_websocket_client_wrap
           : fio_websocket_server_wrap)(payload, buf, len, is_text, 1, 1, rsv));
  fio_io_write2(c->io,
                .buf = payload,
                .len = fio_bstr_len(payload),
                .dealloc = (void (*)(void *))fio_bstr_free);
  return 0 - !fio_io_is_open(c->io);
}

/* *****************************************************************************
WebSocket Controller
***************************************************************************** */

/* Called by the HTTP handle for each body chunk (or to finish a response). */
FIO_SFUNC void fio___http_controller_ws_write_body(fio_http_s *h,
                                                   fio_http_write_args_s args) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (args.buf && args.len < FIO_HTTP_WEBSOCKET_WRITE_VALIDITY_TEST_LIMIT) {
    unsigned char is_text =
        !!fio_string_utf8_valid(FIO_STR_INFO2((char *)args.buf, args.len));
    fio_http_websocket_write(h, (void *)args.buf, args.len, is_text);
    if (args.dealloc)
      args.dealloc((void *)args.buf);
    return;
  }
  char header[16];
  ((uint8_t *)header)[0] = 0 | 2 | 128;
  if (args.len < 126) {
    ((uint8_t *)header)[1] = args.len;
    fio_io_write(c->io, header, 2);
  } else if (args.len < (1UL << 16)) {
    /* head is 4 bytes */
    ((uint8_t *)header)[1] = 126 | ((!!c->is_client) << 7);
    fio_u2buf16_be(((uint8_t *)header + 2), args.len);
    fio_io_write(c->io, header, 4);
  } else {
    /* Really Long Message  */
    ((uint8_t *)header)[1] = 127 | ((!!c->is_client) << 7);
    fio_u2buf64_be(((uint8_t *)header + 2), args.len);
    fio_io_write(c->io, header, 10);
  }
  fio_io_write2(c->io,
                .buf = (void *)args.buf,
                .fd = args.fd,
                .len = args.len,
                .offset = args.offset,
                .dealloc = args.dealloc,
                .copy = (uint8_t)args.copy);
}

/* *****************************************************************************
EventSource / SSE Protocol (TODO!)
***************************************************************************** */

FIO_SFUNC void fio___sse_consume_data(fio___http_connection_s *c) {
  /* TODO: Fix Me! parse and process SSE data */
  FIO_LOG_DEBUG2("SSE data processing:\n%.*s", (int)c->len, c->buf);
  struct fio___http_connection_sse_s *sse = &c->state.sse;
  const char *next_line = c->buf;
  const char *stop = c->buf + c->len;
  for (; next_line < stop;) {
    char *line = (char *)next_line;
    const char *eol =
        (const char *)FIO_MEMCHR(next_line, '\n', stop - next_line);
    if (!eol)
      break;
    next_line = eol + 1;
    eol -= (eol > c->buf && eol[-1] == '\n');
    eol -= (eol > c->buf && eol[-1] == '\r');
    if (eol == line) { /* empty line, end of input? */
      if (sse->data || sse->event.buf || sse->id.buf) {
        sse->on_message(c->h, sse->id, sse->event, fio_bstr_buf(sse->data));
        fio_bstr_free(sse->data);
        sse->data = NULL;
        sse->event = sse->id = FIO_BUF_INFO0;
      }
      continue;
    }
    if (line[0] == ':') /* comment */
      continue;
    const size_t line_len = (size_t)(eol - line);
    if (line_len > 2 && line[2] == ':') { /* id */
      const char *start = line + 3;
      start += (start[0] == ' ' || start[0] == '\t');
      if ((line[0] |= 32) == 'i' && (line[1] |= 32) == 'd')
        sse->id = FIO_BUF_INFO2((char *)start, (size_t)(eol - start));

    } else if (line_len > 4 && line[4] == ':') { /* data */
      const char *start = line + 5;
      start += (start[0] == ' ' || start[0] == '\t');
      if ((fio_buf2u32u(line) | 0x20202020U) == fio_buf2u32u("data")) {
        if (fio_bstr_len(sse->data) + (size_t)(eol - start) >
            c->settings->ws_max_msg_size)
          goto breach;
        sse->data = fio_bstr_write2(
            sse->data,
            FIO_STRING_WRITE_STR2("\r\n", ((size_t) !!sse->data << 1)),
            FIO_STRING_WRITE_STR2(start, (size_t)(eol - start)));
      }

    } else if (line_len > 5 && line[5] == ':') { /* event */
      const char *start = line + 3;
      start += (start[0] == ' ' || start[0] == '\t');
      if ((line[0] |= 32) == 'e' &&
          (fio_buf2u32u(line + 1) | 0x20202020U) == fio_buf2u32u("vent"))
        sse->event = FIO_BUF_INFO2((char *)start, (size_t)(eol - start));

    } else if (!FIO_MEMCHR(line, ':', line_len))
      goto error;
  }
  FIO_ASSERT(next_line <= stop, "overflow on next line read");
  if (next_line > stop)
    next_line = stop;
  c->len -= next_line - c->buf;
  if (c->len)
    FIO_MEMMOVE(c->buf, next_line, c->len);
  return;

error:
  FIO_LOG_ERROR("SSE incoming data malformed!");
  FIO_LOG_DEBUG2("data dump:\n%.*s", (int)c->len, c->buf);
  fio_io_close(c->io);
  return;

breach:
  FIO_LOG_SECURITY("SSE incoming data payload too large!");
  fio_io_close(c->io);
}

/** Called when a data is available. */
FIO_SFUNC void fio___sse_on_data(fio_io_s *io) {
  FIO_LOG_DDEBUG2("(%d) Reading SSE data from socket", fio_io_pid());
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(io);
  size_t r;
  for (;;) {
    if (c->len + 2 > c->capa)
      goto error;
    if (!(r = fio_io_read(io, c->buf + c->len, c->capa - c->len)))
      return;
    c->len += r;
    fio___sse_consume_data(c);
  }
error:
  FIO_LOG_ERROR("Incoming SSE data too long (HTTP line limit set at %zu)!",
                c->capa);
  fio_io_close(io);
}

/** Called when an IO is attached to a protocol. */
static void fio___sse_on_attach(fio_io_s *io) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(io);
  fio_http_s *h = c->h;
  c->state.sse = (struct fio___http_connection_sse_s){
      .on_message = c->settings->on_eventsource,
      .on_ready = c->settings->on_ready,
  };
  c->settings->on_open(h);
  FIO_LOG_DDEBUG2("(%d) SSE attached; buffer length (unread): %zu",
                  fio_io_pid(),
                  c->len);
  if (c->len && c->is_client)
    fio___sse_consume_data(c);
}

FIO_SFUNC void fio___sse_on_timeout(fio_io_s *io) {
  char buf[32] = ":ping 0x0000000000000000\r\n\r\n";
  fio_ltoa16u(buf + 8, fio_io_last_tick(), 16);
  buf[24] = '\r'; /* overwrite written NUL character */
  fio_io_write(io, buf, 28);
}

FIO_SFUNC void fio___sse_on_shutdown(fio_io_s *io) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_io_udata(io);
  c->settings->on_shutdown(c->h);
  // fio_websocket_on_protocol_close(c, ((fio_buf_info_s){0}));
}

/** Called after the connection was closed, and pending tasks completed. */
FIO_SFUNC void fio___sse_on_close(void *buf, void *udata) {
  fio___http_connection_s *c = (fio___http_connection_s *)udata;
  FIO_LOG_DDEBUG2("(%d) SSE connection closed for %p", fio_io_pid(), c->io);
  c->io = NULL;
  fio_bstr_free(c->state.sse.data);
  if (c->h) {
    c->settings->on_close(c->h);
    c->settings->on_finish(c->h);
    fio_http_free(c->h);
  }
  fio___http_connection_free(c);
  (void)buf;
}

/* *****************************************************************************
EventSource / SSE Controller (TODO!)
***************************************************************************** */

/* called by the HTTP handle for each body chunk (or to finish a response. */
FIO_SFUNC void fio___http_controller_sse_write_body(
    fio_http_s *h,
    fio_http_write_args_s args) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (args.buf && args.len) {
    fio_http_sse_write(c->h, .data = FIO_BUF_INFO2((char *)args.buf, args.len));
  }
  if (args.dealloc && args.buf)
    args.dealloc((void *)args.buf);
  if (!args.buf && (unsigned)(args.fd + 1) > 1)
    close(args.fd);
}
/* *****************************************************************************
Connection Lost
***************************************************************************** */

FIO_SFUNC void fio___http_controller_on_destroyed_task(void *c_, void *ignr_) {
  fio___http_connection_s *c = (fio___http_connection_s *)c_;
  fio___http_connection_free(c);
  (void)ignr_;
}

FIO_SFUNC void fio___http_controller_http1_on_finish_client_task(void *c_,
                                                                 void *h_) {
  fio___http_connection_s *c = (fio___http_connection_s *)c_;
  fio_http_s *h = (fio_http_s *)h_;
  c->settings->on_finish(h);
  fio_http_free(h);
  fio___http_connection_free(c);
}

FIO_SFUNC void fio___http_controller_http1_on_finish_client(fio_http_s *h) {
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  /* on_finish should be called after the `on_close` or after on_http */
  if (!fio_http_is_upgraded(h)) {
    /* on_finish always manually called here */
    fio_io_defer(fio___http_controller_http1_on_finish_client_task,
                 (void *)fio___http_connection_dup(c),
                 (void *)fio_http_dup(h));
  }
}

/** Called when an HTTP handle is freed. */
FIO_SFUNC void fio__http_controller_on_destroyed(fio_http_s *h) {
  if (!(fio_http_is_upgraded(h) | fio_http_is_finished(h))) {
    /* auto-finish if freed without finishing */
    if (!fio_http_status(h))
      fio_http_status_set(h, 500); /* ignored if headers already sent */
    fio_http_write_args_s args = {.finish = 1}; /* never sets upgrade flag */
    fio_http_write FIO_NOOP(h, args);
  }
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  if (c->state.http.buf.buf)
    FIO_STRING_FREE2(c->state.http.buf);
  c->state.http.buf = FIO_STR_INFO0;
  fio_queue_push(fio_io_queue(),
                 fio___http_controller_on_destroyed_task,
                 fio_http_cdata(h));
}

/** Called when an HTTP handle is freed (no auto-finish, post upgrade). */
FIO_SFUNC void fio__http_controller_on_destroyed2(fio_http_s *h) {
  fio_queue_push(fio_io_queue(),
                 fio___http_controller_on_destroyed_task,
                 fio_http_cdata(h));
}

/** Called when an HTTP handle is freed. */
FIO_SFUNC void fio__http_controller_on_destroyed_client(fio_http_s *h) {
  fio_queue_push(fio_io_queue(),
                 fio___http_controller_on_destroyed_task,
                 fio_http_cdata(h));
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  c->state.http.on_finish(h);
  c->h = NULL;
  if (c->io)
    fio_io_close(c->io);
  fio_queue_push(fio_io_queue(), fio___http_controller_on_destroyed_task, c);
}

/* *****************************************************************************
The Protocols at play
***************************************************************************** */

/** Returns a facil.io protocol object with the proper protocol callbacks. */
FIO_IFUNC fio_io_protocol_s FIO_NOOP
fio___http_protocol_get(fio___http_protocol_selector_e s, int is_client) {
  fio_io_protocol_s r = {0};
  (void)is_client, (void)s;
  switch (s) {
  case FIO___HTTP_PROTOCOL_ACCEPT:
    r = (fio_io_protocol_s){.on_attach = fio___http_on_attach_accept,
                            .on_data = fio___http1_accept_on_data,
                            .on_close = fio___http_on_close};
    return r;
  case FIO___HTTP_PROTOCOL_HTTP1:
    if (is_client) {
      r = (fio_io_protocol_s){.on_attach = fio___http1_on_attach_client,
                              .on_data = fio___http1_on_data,
                              .on_close = fio___http_on_close};
    } else {
      r = (fio_io_protocol_s){.on_attach = fio___http1_on_attach,
                              .on_data = fio___http1_on_data,
                              .on_close = fio___http_on_close};
    }
    return r;
  case FIO___HTTP_PROTOCOL_HTTP2:
    r = (fio_io_protocol_s){.on_close = fio___http_on_close};
    return r;
  case FIO___HTTP_PROTOCOL_WS:
    r = (fio_io_protocol_s){
        .on_attach = fio___websocket_on_attach,
        .on_data = fio___websocket_on_data,
        .on_ready = fio___websocket_on_ready,
        .on_close = fio___websocket_on_close,
        .on_shutdown = fio___websocket_on_shutdown,
        .on_timeout = fio___websocket_on_timeout,
        .on_pubsub = FIO_HTTP_WEBSOCKET_SUBSCRIBE_DIRECT,
    };
    return r;
  case FIO___HTTP_PROTOCOL_SSE:
    r = (fio_io_protocol_s){
        .on_attach = fio___sse_on_attach,
        .on_data = (is_client ? fio___sse_on_data : NULL),
        .on_ready = fio___websocket_on_ready,
        .on_close = fio___sse_on_close,
        .on_shutdown = fio___sse_on_shutdown,
        .on_timeout = fio___sse_on_timeout,
        .on_pubsub = FIO_HTTP_SSE_SUBSCRIBE_DIRECT,
    };
    return r;
  case FIO___HTTP_PROTOCOL_NONE: /* fall through*/
    r = (fio_io_protocol_s){.on_close = fio___http_on_close};
    return r;
  default:
    FIO_LOG_ERROR("internal function `fio___http_protocol_get` called with "
                  "illegal arguments!");
    return r;
  }
}

/** Returns an http controller object with the proper protocol callbacks. */
FIO_IFUNC fio_http_controller_s
fio___http_controller_get(fio___http_protocol_selector_e s, int is_client) {
  fio_http_controller_s r = {0};
  (void)is_client, (void)s;
  switch (s) {
  case FIO___HTTP_PROTOCOL_ACCEPT:
    r = (fio_http_controller_s){
        .on_destroyed = fio__http_controller_on_destroyed,
        .send_headers = fio___http_controller_http1_send_headers,
        .write_body = fio___http_controller_http1_write_body,
        .on_finish = fio___http_controller_http1_on_finish,
        .close_io = fio___http_default_close,
        .get_fd = fio___http_controller_get_fd,
    };
    return r;
  case FIO___HTTP_PROTOCOL_HTTP1:
    if (is_client) {
      r = (fio_http_controller_s){
          .on_destroyed = fio__http_controller_on_destroyed_client,
          .on_finish = fio___http_controller_http1_on_finish_client,
          .close_io = fio___http_default_close,
          .get_fd = fio___http_controller_get_fd,
      };
    } else {
      r = (fio_http_controller_s){
          .on_destroyed = fio__http_controller_on_destroyed,
          .send_headers = fio___http_controller_http1_send_headers,
          .write_body = fio___http_controller_http1_write_body,
          .on_finish = fio___http_controller_http1_on_finish,
          .close_io = fio___http_default_close,
          .get_fd = fio___http_controller_get_fd,
      };
    }
    return r;
  case FIO___HTTP_PROTOCOL_HTTP2:
    r = (fio_http_controller_s){
        .on_destroyed = fio__http_controller_on_destroyed,
        .close_io = fio___http_default_close,
        .get_fd = fio___http_controller_get_fd,
    };
    return r;
  case FIO___HTTP_PROTOCOL_WS:
    r = (fio_http_controller_s){
        .on_destroyed = fio__http_controller_on_destroyed2,
        .write_body = fio___http_controller_ws_write_body,
        .close_io = fio___http_default_close,
        .get_fd = fio___http_controller_get_fd,
    };
    return r;
  case FIO___HTTP_PROTOCOL_SSE:
    r = (fio_http_controller_s){
        .on_destroyed = fio__http_controller_on_destroyed2,
        .write_body = fio___http_controller_sse_write_body,
        .close_io = fio___http_default_close,
        .get_fd = fio___http_controller_get_fd,
    };
    return r;
  case FIO___HTTP_PROTOCOL_NONE:
    r = (fio_http_controller_s){
        .on_destroyed = fio__http_controller_on_destroyed2,
        .close_io = fio___http_default_close,
        .get_fd = fio___http_controller_get_fd,
    };
    return r;
  default:
    FIO_LOG_ERROR("internal function `fio___http_controller_get` called with "
                  "illegal arguments!");
    return r;
  }
}

FIO_IFUNC fio___http_protocol_s *fio___http_protocol_init(
    fio___http_protocol_s *p,
    const char *url,
    fio_http_settings_s s,
    bool is_client) {
  int should_free_tls = !s.tls;
  FIO_ASSERT_ALLOC(p);
  for (size_t i = 0; i < FIO___HTTP_PROTOCOL_NONE + 1; ++i) {
    p->state[i].protocol =
        fio___http_protocol_get((fio___http_protocol_selector_e)i, is_client);
    // p->state[i].protocol.iomem_size =
    //     sizeof(fio___http_connection_s) + s.max_line_len;
    p->state[i].controller =
        fio___http_controller_get((fio___http_protocol_selector_e)i, is_client);
  }
  for (size_t i = 0; i < FIO___HTTP_PROTOCOL_NONE; ++i)
    p->state[i].protocol.timeout = (unsigned)s.ws_timeout * 1000U;
  p->state[FIO___HTTP_PROTOCOL_SSE].protocol.timeout =
      (unsigned)s.sse_timeout * 1000U;
  p->state[FIO___HTTP_PROTOCOL_ACCEPT].protocol.timeout =
      (unsigned)s.timeout * 1000U;
  p->state[FIO___HTTP_PROTOCOL_HTTP1].protocol.timeout =
      (unsigned)s.timeout * 1000U;
  p->state[FIO___HTTP_PROTOCOL_NONE].protocol.timeout =
      (unsigned)s.timeout * 1000U;
  if (url) {
    fio_url_s u = fio_url_parse(url, strlen(url));
    s.tls = fio_io_tls_from_url(s.tls, u);
    if (s.tls) {
      s.tls = fio_io_tls_dup(s.tls);
      /* fio_io_tls_alpn_add(s.tls, "h2", fio___http_on_select_h2); // not yet
       */
      // fio_io_tls_alpn_add(s.tls, "http/1.1", fio___http_on_select_h1);
      fio_io_functions_s tmp_fn = fio_io_tls_default_functions(NULL);
      if (!s.tls_io_func)
        s.tls_io_func = &tmp_fn;
      for (size_t i = 0; i < FIO___HTTP_PROTOCOL_NONE + 1; ++i)
        p->state[i].protocol.io_functions = *s.tls_io_func;
      if (should_free_tls)
        fio_io_tls_free(s.tls);
    }
  }
  p->settings = s;
  p->on_http_callback = is_client ? fio___http_on_http_client
                        : (p->settings.public_folder.len)
                            ? fio___http_on_http_with_public_folder
                            : fio___http_on_http_direct;
  p->settings.public_folder.buf = p->public_folder_buf;
  p->queue = fio_io_queue();

  if (s.public_folder.len)
    FIO_MEMCPY(p->public_folder_buf, s.public_folder.buf, s.public_folder.len);
  return p;
}
/* *****************************************************************************
HTTP Helpers
***************************************************************************** */

/** Returns the IO object associated with the HTTP object (request only). */
SFUNC fio_io_s *fio_http_io(fio_http_s *h) {
  if (!h)
    return NULL;
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  return c->io;
}

/** Returns the HTTP settings associated with the HTTP object, if any. */
SFUNC fio_http_settings_s *fio_http_settings(fio_http_s *h) {
  if (!h)
    return NULL;
  fio___http_connection_s *c = (fio___http_connection_s *)fio_http_cdata(h);
  return c->settings;
}

/* *****************************************************************************
Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_HTTP
#endif /* FIO_HTTP */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_MODULE_NAME module /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                  A Template for New Types / Modules




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_MODULE_NAME) /* && !defined(FIO___RECURSIVE_INCLUDE) */

/* *****************************************************************************
Module Settings

At this point, define any MACROs and customizable settings available to the
developer.
***************************************************************************** */

/* *****************************************************************************
Pointer Tagging Support: !!! valid only for dynamic types, filename 2xx XXX.h
***************************************************************************** */

#ifdef FIO_PTR_TAG_TYPE
#define FIO_MODULE_PTR FIO_PTR_TAG_TYPE
#else
#define FIO_MODULE_PTR FIO_NAME(FIO_MODULE_NAME, s) *
#endif

#define FIO___UNTAG_T FIO_NAME(FIO_MODULE_NAME, s)

/* *****************************************************************************
Module API
***************************************************************************** */

typedef struct {
  /* module's type(s) if any */
  void *data;
} FIO_NAME(FIO_MODULE_NAME, s);

/* at this point publish (declare only) the public API */

#ifndef FIO_MODULE_INIT
/* Initialization macro. */
#define FIO_MODULE_INIT                                                        \
  { 0 }
#endif

/* do we have a constructor? */
#ifndef FIO_REF_CONSTRUCTOR_ONLY

/* Allocates a new object on the heap and initializes it's memory. */
SFUNC FIO_MODULE_PTR FIO_NAME(FIO_MODULE_NAME, new)(void);

/* Frees any internal data AND the object's container! */
SFUNC int FIO_NAME(FIO_MODULE_NAME, free)(FIO_MODULE_PTR obj);

#endif /* FIO_REF_CONSTRUCTOR_ONLY */

/** Destroys the object, reinitializing its container. */
SFUNC void FIO_NAME(FIO_MODULE_NAME, destroy)(FIO_MODULE_PTR obj);

/* *****************************************************************************
Module Implementation - inlined static functions
***************************************************************************** */
/*
REMEMBER:
========

All short term / type memory allocations should use:
* FIO_MEM_REALLOC_(ptr, old_size, new_size, copy_len)
* FIO_MEM_FREE_(ptr, size)

All long-term / system memory allocations should use:
* FIO_MEM_REALLOC(ptr, old_size, new_size, copy_len)
* FIO_MEM_FREE(ptr, size)

Module and File Names:
======================

00# XXX.h - the module is a core module, independent or doesn't define a type
1## XXX.h - the module doesn't define a type, but requires memory allocations
2## XXX.h - the module defines a type
3## XXX.h - hashes / crypto.
4## XXX.h - server related modules
5## XXX.h - FIOBJ related modules
9## XXX.h - testing (usually use 902 XXX.h unless tests depend on other tests)

When
*/

/* *****************************************************************************
Module Implementation - possibly externed functions.
***************************************************************************** */
#if defined(FIO_EXTERN_COMPLETE) || !defined(FIO_EXTERN)

FIO_LEAK_COUNTER_DEF(FIO_MODULE_NAME)

/* do we have a constructor? */
#ifndef FIO_REF_CONSTRUCTOR_ONLY
/* Allocates a new object on the heap and initializes it's memory. */
SFUNC FIO_MODULE_PTR FIO_NAME(FIO_MODULE_NAME, new)(void) {
  FIO_NAME(FIO_MODULE_NAME, s) *o =
      (FIO_NAME(FIO_MODULE_NAME, s) *)FIO_MEM_REALLOC_(NULL, 0, sizeof(*o), 0);
  if (!o)
    return (FIO_MODULE_PTR)NULL;
  FIO_LEAK_COUNTER_ON_ALLOC(FIO_MODULE_NAME);
  *o = (FIO_NAME(FIO_MODULE_NAME, s))FIO_MODULE_INIT;
  return (FIO_MODULE_PTR)FIO_PTR_TAG(o);
}
/* Frees any internal data AND the object's container! */
SFUNC int FIO_NAME(FIO_MODULE_NAME, free)(FIO_MODULE_PTR obj) {
  FIO_PTR_TAG_VALID_OR_RETURN(obj, 0);
  FIO_NAME(FIO_MODULE_NAME, destroy)(obj);
  FIO_NAME(FIO_MODULE_NAME, s) *o =
      FIO_PTR_TAG_GET_UNTAGGED(FIO___UNTAG_T, obj);
  FIO_LEAK_COUNTER_ON_FREE(FIO_MODULE_NAME);
  FIO_MEM_FREE_(o, sizeof(*o));
  return 0;
}
#endif /* FIO_REF_CONSTRUCTOR_ONLY */

/* Frees any internal data AND the object's container! */
SFUNC void FIO_NAME(FIO_MODULE_NAME, destroy)(FIO_MODULE_PTR obj) {
  FIO_PTR_TAG_VALID_OR_RETURN_VOID(obj);
  FIO_NAME(FIO_MODULE_NAME, s) *o =
      FIO_PTR_TAG_GET_UNTAGGED(FIO___UNTAG_T, obj);
  /* TODO: add destruction logic */

  *o = (FIO_NAME(FIO_MODULE_NAME, s))FIO_MODULE_INIT;
  return;
}

/* *****************************************************************************
Module Testing - Please place testing in a dedicated testing file if possible.
***************************************************************************** */
#if 0
#ifdef FIO_TEST_ALL

FIO_SFUNC void FIO_NAME_TEST(stl, FIO_MODULE_NAME)(void) {
  /*
   * TODO: test module here
   */
}

#endif /* FIO_TEST_ALL */
#endif /* 0 */
/* *****************************************************************************
Module Cleanup
***************************************************************************** */

#endif /* FIO_EXTERN_COMPLETE */
#undef FIO_MODULE_PTR
#undef FIO_MODULE_NAME
#undef FIO___UNTAG_T
#endif /* FIO_MODULE_NAME */
/* *****************************************************************************




                            Common Cleanup




***************************************************************************** */

/* *****************************************************************************
Common cleanup
***************************************************************************** */
#ifndef FIO___RECURSIVE_INCLUDE

/* undefine FIO_EXTERN only if its value indicates it is temporary. */
#if (FIO_EXTERN + 1) < 3
#undef FIO_EXTERN
#endif
#if (FIO_EXTERN_COMPLETE + 1) < 3
#undef FIO_EXTERN_COMPLETE
#endif

#undef SFUNC
#undef IFUNC
#undef SFUNC_
#undef IFUNC_

#undef FIO_MALLOC_TMP_USE_SYSTEM
#undef FIO_MEM_REALLOC_
#undef FIO_MEM_FREE_
#undef FIO_MEM_REALLOC_IS_SAFE_
#undef FIO_MEMORY_NAME /* postponed due to possible use in macros */

#undef FIO___LOCK_TYPE
#undef FIO___LOCK_INIT
#undef FIO___LOCK_LOCK
#undef FIO___LOCK_LOCK_TRY
#undef FIO___LOCK_UNLOCK
#undef FIO_USE_THREAD_MUTEX_TMP

#else

#undef SFUNC
#undef IFUNC
#define SFUNC SFUNC_
#define IFUNC IFUNC_

#endif /* !FIO___RECURSIVE_INCLUDE */

/* *****************************************************************************
C++ extern end
***************************************************************************** */
/* support C++ */
#ifdef __cplusplus
}
#endif

/* *****************************************************************************
Recursive inclusion / cleanup
***************************************************************************** */
#if !defined(FIO___RECURSIVE_INCLUDE) && defined(FIO___INCLUDE_AGAIN)
/* recursive include statement */
#undef FIO___INCLUDE_AGAIN
#include FIO_INCLUDE_FILE
#else
#ifdef FIO_EVERYTHING___REMOVE_EXTERN
#undef FIO_EXTERN
#undef FIO_EVERYTHING___REMOVE_EXTERN
#endif
#ifdef FIO_EVERYTHING___REMOVE_EXTERN_COMPLETE
#undef FIO_EXTERN_COMPLETE
#undef FIO_EVERYTHING___REMOVE_EXTERN_COMPLETE
#endif

#endif /* !defined(FIO___RECURSIVE_INCLUDE) && defined(FIO___INCLUDE_AGAIN) */
/* *****************************************************************************






                            Start Test Code






***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_TESTS_START___H)
#define H___FIO_TESTS_START___H
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************
C++ extern start
***************************************************************************** */
/* support C++ */
#ifdef __cplusplus
extern "C" {
#endif

FIO_SFUNC void fio_test_dynamic_types(void);

FIO_SFUNC uintptr_t fio___dynamic_types_test_tag(uintptr_t i) { return i | 1; }
FIO_SFUNC uintptr_t fio___dynamic_types_test_untag(uintptr_t i) {
  return i & (~((uintptr_t)1UL));
}

#define FIO_TEST_REPEAT (1ULL << 12U)

/* *****************************************************************************
Memory Allocator Tests
***************************************************************************** */
#define FIO___TEST_REINCLUDE

#define FIO_MEMORY_NAME                   fio_mem_test_safe
#define FIO_MEMORY_INITIALIZE_ALLOCATIONS 1
#undef FIO_MEMORY_USE_THREAD_MUTEX
#define FIO_MEMORY_USE_THREAD_MUTEX 0
#define FIO_MEMORY_ARENA_COUNT      4
#include FIO_INCLUDE_FILE

#define FIO_MEMORY_NAME                   fio_mem_test_unsafe
#define FIO_MEMORY_INITIALIZE_ALLOCATIONS 0
#undef FIO_MEMORY_USE_THREAD_MUTEX
#define FIO_MEMORY_USE_THREAD_MUTEX 0
#define FIO_MEMORY_ARENA_COUNT      4
#include FIO_INCLUDE_FILE

#undef FIO___TEST_REINCLUDE
/* *****************************************************************************
Dynamically Produced Test Types
***************************************************************************** */
#define FIO___TEST_REINCLUDE

static int ary____test_was_destroyed = 0;
#define FIO_ARRAY_NAME    ary____test
#define FIO_ARRAY_TYPE    int
#define FIO_REF_NAME      ary____test
#define FIO_REF_INIT(obj) obj = (ary____test_s)FIO_ARRAY_INIT
#define FIO_REF_DESTROY(obj)                                                   \
  do {                                                                         \
    ary____test_destroy(&obj);                                                 \
    ary____test_was_destroyed = 1;                                             \
  } while (0)
#define FIO_PTR_TAG(p)   fio___dynamic_types_test_tag(((uintptr_t)p))
#define FIO_PTR_UNTAG(p) fio___dynamic_types_test_untag(((uintptr_t)p))
#include FIO_INCLUDE_FILE

#define FIO_ARRAY_NAME                 ary2____test
#define FIO_ARRAY_TYPE                 uint8_t
#define FIO_ARRAY_TYPE_INVALID         0xFF
#define FIO_ARRAY_TYPE_COPY(dest, src) (dest) = (src)
#define FIO_ARRAY_TYPE_DESTROY(obj)    (obj = FIO_ARRAY_TYPE_INVALID)
#define FIO_ARRAY_TYPE_CMP(a, b)       (a) == (b)
#define FIO_PTR_TAG(p)                 fio___dynamic_types_test_tag(((uintptr_t)p))
#define FIO_PTR_UNTAG(p)               fio___dynamic_types_test_untag(((uintptr_t)p))
#include FIO_INCLUDE_FILE

/* test all defaults */
#define FIO_ARRAY_NAME ary3____test
#include FIO_INCLUDE_FILE

#define FIO_UMAP_NAME   uset___test_size_t
#define FIO_MEMORY_NAME uset___test_size_t_mem
#define FIO_MAP_KEY     size_t
#define FIO_MAP_TEST
#include FIO_INCLUDE_FILE
#define FIO_UMAP_NAME   umap___test_size
#define FIO_MEMORY_NAME umap___test_size_mem
#define FIO_MAP_KEY     size_t
#define FIO_MAP_VALUE   size_t
#define FIO_MAP_TEST
#include FIO_INCLUDE_FILE
#define FIO_OMAP_NAME   omap___test_size_t
#define FIO_MEMORY_NAME omap___test_size_t_mem
#define FIO_MAP_KEY     size_t
#define FIO_MAP_ORDERED 1
#define FIO_MAP_TEST
#include FIO_INCLUDE_FILE
#define FIO_OMAP_NAME   omap___test_size_lru
#define FIO_MEMORY_NAME omap___test_size_lru_mem
#define FIO_MAP_KEY     size_t
#define FIO_MAP_VALUE   size_t
#define FIO_MAP_LRU     (1UL << 24)
#define FIO_MAP_TEST
#include FIO_INCLUDE_FILE

#define FIO_STR_NAME fio_big_str
#define FIO_STR_WRITE_TEST_FUNC
#include FIO_INCLUDE_FILE

#define FIO_STR_SMALL fio_small_str
#define FIO_STR_WRITE_TEST_FUNC
#include FIO_INCLUDE_FILE

#undef FIO___TEST_REINCLUDE
/* *****************************************************************************
Environment printout
***************************************************************************** */
#ifndef FIO_PRINT_SIZE_OF
#define FIO_PRINT_SIZE_OF(T)                                                   \
  fprintf(stderr, "\t%-19s%zu Bytes\n", #T, sizeof(T))
#endif

FIO_SFUNC void FIO_NAME_TEST(stl, type_sizes)(void) {
  switch (sizeof(void *)) {
  case 2:
    fprintf(stderr, "* 16bit words size (unexpected, unknown effects).\n");
    break;
  case 4:
    fprintf(stderr, "* 32bit words size (some features might be slower).\n");
    break;
  case 8: fprintf(stderr, "* 64bit words size okay.\n"); break;
  case 16: fprintf(stderr, "* 128bit words size... wow!\n"); break;
  default:
    fprintf(stderr, "* Unknown words size %zubit!\n", sizeof(void *) << 3);
    break;
  }
  fprintf(stderr, "* Using the following type sizes:\n");
  FIO_PRINT_SIZE_OF(char);
  FIO_PRINT_SIZE_OF(short);
  FIO_PRINT_SIZE_OF(int);
  FIO_PRINT_SIZE_OF(float);
  FIO_PRINT_SIZE_OF(long);
  FIO_PRINT_SIZE_OF(double);
  FIO_PRINT_SIZE_OF(size_t);
  FIO_PRINT_SIZE_OF(void *);
  FIO_PRINT_SIZE_OF(uintmax_t);
  FIO_PRINT_SIZE_OF(long double);
#ifdef __SIZEOF_INT128__
  FIO_PRINT_SIZE_OF(__uint128_t);
#endif
  FIO_PRINT_SIZE_OF(fio_thread_t);
  FIO_PRINT_SIZE_OF(fio_thread_mutex_t);
#if FIO_OS_POSIX || defined(_SC_PAGESIZE)
  long page = sysconf(_SC_PAGESIZE);
  if (page > 0) {
    fprintf(stderr, "\t%-17s%ld bytes.\n", "Page", page);
    if (page != (1UL << FIO_MEM_PAGE_SIZE_LOG))
      FIO_LOG_INFO("unexpected page size != 4096\n          "
                   "facil.io could be recompiled with:\n          "
                   "`CFLAGS=\"-DFIO_MEM_PAGE_SIZE_LOG=%.0lf\"`",
                   log2(page));
  }
#endif /* FIO_OS_POSIX */
}
/* *****************************************************************************

***************************************************************************** */
#endif /* H___FIO_TESTS_START___H */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_ATOL Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_ATOL_TEST___H)
#define H___FIO_ATOL_TEST___H
#ifndef H___FIO_ATOL___H
#define FIO_ATOL
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

#define FIO_ATOL_TEST_MAX 1048576

FIO_IFUNC int64_t FIO_NAME_TEST(stl, atol_time)(void) {
  struct timespec t;
  clock_gettime(CLOCK_MONOTONIC, &t);
  return ((int64_t)t.tv_sec * 1000000) + (int64_t)t.tv_nsec / 1000;
}

FIO_SFUNC double fio___aton_float_wrapper(char **pstr) {
  fio_aton_s r = fio_aton(pstr);
  if (r.is_float)
    return r.f;
  return (double)r.i;
}

FIO_SFUNC double fio___strtod_wrapper(char **pstr) {
  return strtod(*pstr, pstr);
}

FIO_SFUNC void FIO_NAME_TEST(stl, aton_speed)(void) {
  struct {
    const char *n;
    double (*fn)(char **);
  } to_test[] = {
      {.n = "fio_aton", .fn = fio___aton_float_wrapper},
      {.n = "strtod  ", .fn = fio___strtod_wrapper},
  };
  const char *floats[] = {
      "inf",
      "nan",
      "-inf",
      "-nan",
      "infinity",
      "1E+1000",
      "1E-1000",
      "1E+10",
      "1E-10",
      "-1E10",
      "-1e10",
      "-1E+10",
      "-1E-10",
      "1.234E+10",
      "1.234E-10",
      "1.79769e+308",
      "2.22507e-308",
      "1.79769e+308",
      "2.22507e-308",
      "4.9406564584124654e-324",
      "2.2250738585072009e-308",
      "2.2250738585072014e-308",
      "1.7976931348623157e+308",
      "2.171e-308",
      "2.2250738585072012e-308", /* possible infinit loop bug for strtod */
      "1.0020284025808569e-134",
      "1.00000000000000011102230246251565404236316680908203124",
      "72057594037927928.0",
      "7205759403792793200001e-5",
      "5708990770823839207320493820740630171355185152001e-3",
      "0x10.1p0",
      "0x1.8p1",
      "0x1.8p5",
      "0x4.0p5",
      "0x1.0p50a",
      "0x1.0p500",
      "0x1.0P-1074",
      "0x3a.0P-1074",
      "0x0.f9c7573d7fe52p-1022",
  };
  printf("* Testing fio_aton/strtod performance:\n");
  /* Sanity Test */
  bool rounding_errors_detected = 0;
  for (size_t n_i = 0; n_i < sizeof(floats) / sizeof(floats[0]); ++n_i) {
    union {
      double f;
      uint64_t u64;
    } u1, u2;
    char *tmp = (char *)floats[n_i];
    u1.f = to_test[0].fn(&tmp);
    for (size_t fn_i = 1; fn_i < sizeof(to_test) / sizeof(to_test[0]); ++fn_i) {
      char *tmp2 = (char *)floats[n_i];
      u2.f = to_test[fn_i].fn(&tmp2);
      if (tmp2 == tmp) {
        if ((isnan(u1.f) && isnan(u2.f)) || u1.u64 == u2.u64)
          continue;
        rounding_errors_detected = 1;
#ifdef DEBUG
        FIO_LOG_WARNING("Rounding error for %s:\n\t%.17g ?= %.17g",
                        floats[n_i],
                        u1.f,
                        u2.f);
#endif
        if (u1.u64 + 1 == u2.u64)
          continue;
        if (u2.u64 + 1 == u1.u64)
          continue;
      }
      FIO_ASSERT(tmp2 == tmp && u1.u64 == u2.u64,
                 "Sanity test failed for %s\n\t %.17g ?!= %.17g\n\t %s ?!= %s",
                 (char *)floats[n_i],
                 u1.f,
                 u2.f,
                 tmp,
                 tmp2);
    }
  }
  /* Speed Test */
  for (size_t fn_i = 0; fn_i < sizeof(to_test) / sizeof(to_test[0]); ++fn_i) {
    double unused;
    printf("\t%s\t", to_test[fn_i].n);
    int64_t start = FIO_NAME_TEST(stl, atol_time)();
    for (size_t i = 0; i < (FIO_ATOL_TEST_MAX / 10); ++i) {
      for (size_t n_i = 0; n_i < sizeof(floats) / sizeof(floats[0]); ++n_i) {
        char *tmp = (char *)floats[n_i];
        unused = to_test[fn_i].fn(&tmp);
        FIO_COMPILER_GUARD;
      }
    }
    (void)unused;
    int64_t end = FIO_NAME_TEST(stl, atol_time)();
    printf("%lld us\n", (long long int)(end - start));
  }
  if (rounding_errors_detected)
    FIO_LOG_WARNING("Single bit rounding errors detected when comparing "
                    "`fio_aton` to `strtod`.\n");
}

FIO_SFUNC size_t sprintf_wrapper(char *dest, int64_t num, uint8_t base) {
  switch (base) {
  case 2: /* overflow - unsupported */
  case 8: /* overflow - unsupported */
  case 10: return snprintf(dest, 256, "%" PRId64, num);
  case 16:
    if (num >= 0)
      return snprintf(dest, 256, "0x%.16" PRIx64, num);
    return snprintf(dest, 256, "-0x%.8" PRIx64, (0 - num));
  }
  return snprintf(dest, 256, "%" PRId64, num);
}

FIO_SFUNC int64_t strtoll_wrapper(char **pstr) {
  return strtoll(*pstr, pstr, 0);
}
FIO_SFUNC int64_t fio_aton_wrapper(char **pstr) {
  fio_aton_s r = fio_aton(pstr);
  if (r.is_float)
    return (int64_t)r.f;
  return r.i;
}

FIO_SFUNC void FIO_NAME_TEST(stl, atol_speed)(const char *name,
                                              int64_t (*a2l)(char **),
                                              size_t (*l2a)(char *,
                                                            int64_t,
                                                            uint8_t)) {
  int64_t start;
  int64_t tw = 0;
  int64_t trt = 0;
  char buf[1024];
  struct {
    const char *str;
    const char *prefix;
    uint8_t prefix_len;
    uint8_t base;
  } * pb, b[] = {
              {.str = "Base 10", .base = 10},
              {.str = "Hex    ", .prefix = "0x", .prefix_len = 2, .base = 16},
              {.str = "Binary ", .prefix = "0b", .prefix_len = 2, .base = 2},
              // {.str = "Oct    ", .prefix = "0", .prefix_len = 1, .base = 8},
              /* end marker */
              {.str = NULL},
          };
  fprintf(stderr, "    * %s test performance:\n", name);
  if (l2a == sprintf_wrapper)
    b[2].str = NULL;
  for (pb = b; pb->str; ++pb) {
    start = FIO_NAME_TEST(stl, atol_time)();
    for (int64_t i = -FIO_ATOL_TEST_MAX; i < FIO_ATOL_TEST_MAX; ++i) {
      char *bf = buf + pb->prefix_len;
      size_t len = l2a(bf, i, pb->base);
      bf[len] = 0;
      if (bf[0] == '-') {
        for (int pre_test = 0; pre_test < pb->prefix_len; ++pre_test) {
          if (bf[pre_test + 1] == pb->prefix[pre_test])
            continue;
          FIO_MEMCPY(buf, pb->prefix, pb->prefix_len);
          bf = buf;
          break;
        }
      } else {
        for (int pre_test = 0; pre_test < pb->prefix_len; ++pre_test) {
          if (bf[pre_test] == pb->prefix[pre_test])
            continue;
          FIO_MEMCPY(buf, pb->prefix, pb->prefix_len);
          bf = buf;
          break;
        }
      }
      FIO_COMPILER_GUARD; /* don't optimize this loop */
      int64_t n = a2l(&bf);
      bf = buf;
      FIO_ASSERT(n == i,
                 "roundtrip error for %s: %s != %lld (got %lld stopped: %s)",
                 name,
                 buf,
                 i,
                 a2l(&bf),
                 bf);
    }
    trt = FIO_NAME_TEST(stl, atol_time)() - start;
    start = FIO_NAME_TEST(stl, atol_time)();
    for (int64_t i = -FIO_ATOL_TEST_MAX; i < FIO_ATOL_TEST_MAX; ++i) {
      char *bf = buf + pb->prefix_len;
      size_t len = l2a(bf, i, pb->base);
      bf[len] = 0;
      if (bf[0] == '-') {
        for (int pre_test = 0; pre_test < pb->prefix_len; ++pre_test) {
          if (bf[pre_test + 1] == pb->prefix[pre_test])
            continue;
          FIO_MEMCPY(buf, pb->prefix, pb->prefix_len);
          bf = buf;
          break;
        }
      } else {
        for (int pre_test = 0; pre_test < pb->prefix_len; ++pre_test) {
          if (bf[pre_test] == pb->prefix[pre_test])
            continue;
          FIO_MEMCPY(buf, pb->prefix, pb->prefix_len);
          bf = buf;
          break;
        }
      }
      FIO_COMPILER_GUARD; /* don't optimize this loop */
    }
    tw = FIO_NAME_TEST(stl, atol_time)() - start;
    // clang-format off
    fprintf(stderr, "        - %s roundtrip   %zd us\n", pb->str, (size_t)trt);
    fprintf(stderr, "        - %s write       %zd us\n", pb->str, (size_t)tw);
    fprintf(stderr, "        - %s read (calc) %zd us\n", pb->str, (size_t)(trt - tw));
    // clang-format on
  }
}

FIO_SFUNC void FIO_NAME_TEST(stl, atol)(void) {
  fprintf(stderr, "* Testing fio_atol and fio_ltoa.\n");
  char buffer[1024];
  for (int i = 0 - FIO_ATOL_TEST_MAX; i < FIO_ATOL_TEST_MAX; ++i) {
    size_t tmp = fio_ltoa(buffer, i, 0);
    FIO_ASSERT(tmp > 0, "fio_ltoa returned length error");
    char *tmp2 = buffer;
    int i2 = (int)fio_atol(&tmp2);
    FIO_ASSERT(tmp2 > buffer, "fio_atol pointer motion error (1:%i)", i);
    FIO_ASSERT(i == i2,
               "fio_ltoa-fio_atol roundtrip error %lld != %lld",
               i,
               i2);
  }
  for (size_t bit = 0; bit < sizeof(int64_t) * 8; ++bit) {
    uint64_t i = (uint64_t)1 << bit;
    size_t tmp = fio_ltoa(buffer, (int64_t)i, 0);
    FIO_ASSERT(tmp > 0, "fio_ltoa return length error");
    buffer[tmp] = 0;
    char *tmp2 = buffer;
    int64_t i2 = fio_atol(&tmp2);
    FIO_ASSERT(tmp2 > buffer, "fio_atol pointer motion error (2:%zu)", bit);
    FIO_ASSERT((int64_t)i == i2,
               "fio_ltoa-fio_atol roundtrip error %lld != %lld",
               i,
               i2);
  }
  for (unsigned char i = 0; i < 36; ++i) {
    FIO_ASSERT(i == fio_c2i(fio_i2c(i)), "fio_c2i / fio_i2c roundtrip error.");
  }
  for (size_t i = 1; i < (1ULL << 10); ++i) {
    union {
      double d;
      void *p;
    } e[2], r[2];
    e[0].d = (1.0 + i);
    e[1].d = (1.0 - i);
    r[0].d = fio_i2d(1LL + i, 0);
    r[1].d = fio_i2d(1LL - i, 0);
    FIO_ASSERT(e[0].d == r[0].d,
               "fio_i2d failed at (1+%zu) %g != %g\n\t%p != %p",
               i,
               e[0].d,
               r[0].d,
               e[0].p,
               r[0].p);
    FIO_ASSERT(e[1].d == r[1].d,
               "fio_i2d failed at (1-%zu) %g != %g\n\t%p != %p",
               i,
               e[1].d,
               r[1].d,
               e[1].p,
               r[1].p);
  }
  for (size_t i = 1; i < (~0ULL); i = ((i << 1U) | 1U)) {
    union {
      double d;
      void *p;
    } tst[2];
    tst[0].d = fio_u2d(i, 0);
    tst[1].d = (double)i;
    char buf[128];
    buf[0] = 'x';
    fio_ltoa16u(buf + 1, i, 16);
    buf[17] = 0;
    FIO_ASSERT(tst[0].d == tst[0].d,
               "fio_u2d failed (%s) %g != %g\n\t%p != %p",
               buf,
               tst[0].d,
               tst[1].d,
               tst[0].p,
               tst[1].p);
  }
#if 1 || !(DEBUG - 1 + 1)
  {
    uint64_t start, end, rep = (1ULL << 22);
    int64_t u64[128] = {0};
    double dbl[128] = {0.0};
    double rtest;
    fprintf(stderr, "* Testing fio_i2d conversion overhead.\n");
    start = fio_time_micro();
    for (size_t i = 0; i < rep; ++i) {
      u64[i & 127] -= i;
      FIO_COMPILER_GUARD;
      dbl[i & 127] += 2.0 * u64[i & 127];
      FIO_COMPILER_GUARD;
    }
    end = fio_time_micro();
    fprintf(stderr, "\t- C cast:  %zuus\n", (size_t)(end - start));
    rtest = dbl[127];
    FIO_MEMSET(u64, 0, sizeof(u64));
    FIO_MEMSET(dbl, 0, sizeof(dbl));
    start = fio_time_micro();
    for (size_t i = 0; i < rep; ++i) {
      u64[i & 127] -= i;
      FIO_COMPILER_GUARD;
      dbl[i & 127] += fio_i2d((int64_t)u64[i & 127], 1);
      FIO_COMPILER_GUARD;
    }
    end = fio_time_micro();
    fprintf(stderr, "\t- fio_i2d: %zuus\n", (size_t)(end - start));
    FIO_ASSERT(rtest == dbl[127], "fio_i2d results not the same as C cast?");
    start = fio_time_micro();
    for (size_t i = 0; i < rep; ++i) {
      u64[i & 127] -= i;
      FIO_COMPILER_GUARD;
      dbl[i & 127] += fio_u2d((int64_t)u64[i & 127], 1);
      FIO_COMPILER_GUARD;
    }
    end = fio_time_micro();
    fprintf(stderr, "\t- fio_u2d: %zuus\n", (size_t)(end - start));
  }
#endif
  fprintf(stderr, "* Testing fio_atol samples.\n");
#define TEST_ATOL(s_, n)                                                       \
  do {                                                                         \
    char *s = (char *)s_;                                                      \
    char *p = (char *)(s);                                                     \
    int64_t r = fio_atol(&p);                                                  \
    FIO_ASSERT(r == (n),                                                       \
               "fio_atol test error! %s => %zd (not %zd)",                     \
               ((char *)(s)),                                                  \
               (size_t)r,                                                      \
               (size_t)n);                                                     \
    FIO_ASSERT((s) + FIO_STRLEN((s)) == p,                                     \
               "fio_atol test error! %s reading position not at end "          \
               "(!%zu == %zu)\n\t0x%p - 0x%p",                                 \
               (s),                                                            \
               (size_t)FIO_STRLEN((s)),                                        \
               (size_t)(p - (s)),                                              \
               (void *)p,                                                      \
               (void *)s);                                                     \
    char buf[96];                                                              \
    buf[0] = '0';                                                              \
    buf[1] = 'b';                                                              \
    buf[fio_ltoa(buf + 2, n, 2) + 2] = 0;                                      \
    p = buf;                                                                   \
    FIO_ASSERT(fio_atol(&p) == (n),                                            \
               "fio_ltoa base 2 test error! "                                  \
               "%s != %s (%zd)",                                               \
               buf,                                                            \
               ((char *)(s)),                                                  \
               (size_t)((p = buf), fio_atol(&p)));                             \
    fio_ltoa(buf, n, 8);                                                       \
    p = buf;                                                                   \
    p += buf[0] == '-';                                                        \
    FIO_ASSERT((r = (int64_t)fio_atol8u(&p)) ==                                \
                   ((buf[0] == '-') ? (0 - (n)) : (n)),                        \
               "fio_ltoa base 8 test error! "                                  \
               "%s != %s (%zd)",                                               \
               buf,                                                            \
               ((char *)(s)),                                                  \
               (size_t)r);                                                     \
    buf[fio_ltoa(buf, n, 10)] = 0;                                             \
    p = buf;                                                                   \
    FIO_ASSERT(fio_atol(&p) == (n),                                            \
               "fio_ltoa base 10 test error! "                                 \
               "%s != %s (%zd)",                                               \
               buf,                                                            \
               ((char *)(s)),                                                  \
               (size_t)((p = buf), fio_atol(&p)));                             \
    buf[0] = '0';                                                              \
    buf[1] = 'x';                                                              \
    buf[fio_ltoa(buf + 2, n, 16) + 2] = 0;                                     \
    p = buf;                                                                   \
    FIO_ASSERT(fio_atol(&p) == (n),                                            \
               "fio_ltoa base 16 test error! "                                 \
               "%s != %s (%zd)",                                               \
               buf,                                                            \
               ((char *)(s)),                                                  \
               (size_t)((p = buf), fio_atol(&p)));                             \
  } while (0)

  TEST_ATOL("0x1", 1);
  TEST_ATOL("-0x1", -1);
  TEST_ATOL("-0xa", -10);                                  /* sign before hex */
  TEST_ATOL("0xe5d4c3b2a1908770", -1885667171979196560LL); /* sign within hex */
  TEST_ATOL("0b00000000000011", 3);
  TEST_ATOL("-0b00000000000011", -3);
  TEST_ATOL("0b0000000000000000000000000000000000000000000000000", 0);
  TEST_ATOL("0", 0);
  TEST_ATOL("1", 1);
  TEST_ATOL("2", 2);
  TEST_ATOL("-2", -2);
  TEST_ATOL("0000000000000000000000000000000000000000000000042", 34); /* oct */
  TEST_ATOL("9223372036854775807", 9223372036854775807LL); /* INT64_MAX */
  TEST_ATOL("9223372036854775808",
            9223372036854775807LL); /* INT64_MAX overflow protection */
  TEST_ATOL("9223372036854775999",
            9223372036854775807LL); /* INT64_MAX overflow protection */
  TEST_ATOL("9223372036854775806",
            9223372036854775806LL); /* almost INT64_MAX */
#undef TEST_ATOL

#define TEST_LTOA_DIGITS10(num, digits)                                        \
  FIO_ASSERT(fio_digits10(num) == digits,                                      \
             "fio_digits10 failed for " #num " != (%zu)",                      \
             (size_t)fio_digits10(num));                                       \
  {                                                                            \
    char *number_str__ = (char *)#num;                                         \
    char *pstr__ = number_str__;                                               \
    FIO_ASSERT(fio_atol10(&pstr__) == num, "fio_atol10 failed for " #num);     \
  }
  TEST_LTOA_DIGITS10(1LL, 1);
  TEST_LTOA_DIGITS10(22LL, 2);
  TEST_LTOA_DIGITS10(333LL, 3);
  TEST_LTOA_DIGITS10(4444LL, 4);
  TEST_LTOA_DIGITS10(55555LL, 5);
  TEST_LTOA_DIGITS10(666666LL, 6);
  TEST_LTOA_DIGITS10(7777777LL, 7);
  TEST_LTOA_DIGITS10(88888888LL, 8);
  TEST_LTOA_DIGITS10(999999999LL, 9);
  TEST_LTOA_DIGITS10(-1LL, (1 + 1));
  TEST_LTOA_DIGITS10(-22LL, (2 + 1));
  TEST_LTOA_DIGITS10(-333LL, (3 + 1));
  TEST_LTOA_DIGITS10(-4444LL, (4 + 1));
  TEST_LTOA_DIGITS10(-55555LL, (5 + 1));
  TEST_LTOA_DIGITS10(-666666LL, (6 + 1));
  TEST_LTOA_DIGITS10(-7777777LL, (7 + 1));
  TEST_LTOA_DIGITS10(-88888888LL, (8 + 1));
  TEST_LTOA_DIGITS10(-999999999LL, (9 + 1));
  TEST_LTOA_DIGITS10(-9223372036854775807LL, (19 + 1));
#undef TEST_LTOA_DIGITS10

#define TEST_LTOA_DIGITS16(num, digits)                                        \
  FIO_ASSERT(fio_digits16u(num) == digits,                                     \
             "fio_digits16u failed for " #num " != (%zu)",                     \
             (size_t)fio_digits16u(num));                                      \
  {                                                                            \
    char *number_str__ = (char *)#num;                                         \
    char *pstr__ = number_str__;                                               \
    FIO_ASSERT(fio_atol16u(&pstr__) == (uint64_t)(num),                        \
               "fio_atol16u failed for " #num " != %zu",                       \
               ((pstr__ = number_str__), (size_t)fio_atol16u(&pstr__)));       \
  }
  TEST_LTOA_DIGITS16(0x00ULL, 2);
  TEST_LTOA_DIGITS16(0x10ULL, 2);
  TEST_LTOA_DIGITS16(0x100ULL, 4);
  TEST_LTOA_DIGITS16(0x10000ULL, 6);
  TEST_LTOA_DIGITS16(0xFFFFFFULL, 6);
  TEST_LTOA_DIGITS16(0x1000000ULL, 8);
  TEST_LTOA_DIGITS16(0x10000000ULL, 8);
  TEST_LTOA_DIGITS16(0x100000000ULL, 10);
  TEST_LTOA_DIGITS16(0x10000000000ULL, 12);
  TEST_LTOA_DIGITS16(0x1000000000000ULL, 14);
  TEST_LTOA_DIGITS16(0x100000000000000ULL, 16);
  TEST_LTOA_DIGITS16(0xFF00000000000000ULL, 16);
#undef TEST_LTOA_DIGITS16

#define TEST_LTOA_DIGITS_BIN(num, digits)                                      \
  FIO_ASSERT(fio_digits_bin(num) == digits,                                    \
             "fio_digits_bin failed for " #num " != (%zu)",                    \
             (size_t)fio_digits_bin(num));

  TEST_LTOA_DIGITS_BIN(0x00ULL, 1);
  TEST_LTOA_DIGITS_BIN(-0x01ULL, 64);
  TEST_LTOA_DIGITS_BIN(0x10ULL, 6);
  TEST_LTOA_DIGITS_BIN(0x100ULL, 10);
  TEST_LTOA_DIGITS_BIN(0x10000ULL, 18);
  TEST_LTOA_DIGITS_BIN(0x20000ULL, 18);
  TEST_LTOA_DIGITS_BIN(0xFFFFFFULL, 24);
  TEST_LTOA_DIGITS_BIN(0x1000000ULL, 26);
  TEST_LTOA_DIGITS_BIN(0x10000000ULL, 30);
  TEST_LTOA_DIGITS_BIN(0x100000000ULL, 34);
  TEST_LTOA_DIGITS_BIN(0x10000000000ULL, 42);
  TEST_LTOA_DIGITS_BIN(0x1000000000000ULL, 50);
  TEST_LTOA_DIGITS_BIN(0x100000000000000ULL, 58);
  TEST_LTOA_DIGITS_BIN(0xFF00000000000000ULL, 64);
#undef TEST_LTOA_DIGITS_BIN

  FIO_NAME_TEST(stl, atol_speed)("fio_atol/fio_ltoa", fio_atol, fio_ltoa);
  FIO_NAME_TEST(stl, atol_speed)
  ("fio_aton/fio_ltoa", fio_aton_wrapper, fio_ltoa);

  FIO_NAME_TEST(stl, atol_speed)
  ("system strtoll/sprintf", strtoll_wrapper, sprintf_wrapper);
  FIO_NAME_TEST(stl, aton_speed)();

#define TEST_DOUBLE(s, d, stop)                                                \
  do {                                                                         \
    union {                                                                    \
      double d_;                                                               \
      uint64_t as_i;                                                           \
    } pn, pn1, pn2;                                                            \
    pn2.d_ = (double)d;                                                        \
    char *p = (char *)(s);                                                     \
    char *p1 = (char *)(s);                                                    \
    char *p2 = (char *)(s);                                                    \
    double r = fio_atof(&p);                                                   \
    fio_aton_s num_result = fio_aton(&p1);                                     \
    double r2 = num_result.is_float ? num_result.f : (double)num_result.i;     \
    double std = strtod(p2, &p2);                                              \
    (void)std;                                                                 \
    pn.d_ = r;                                                                 \
    pn1.d_ = r2;                                                               \
    FIO_ASSERT(                                                                \
        *p == stop || p == p2,                                                 \
        "atof float parsing didn't stop at correct position! %x != %x\n%s",    \
        *p,                                                                    \
        stop,                                                                  \
        (s));                                                                  \
    FIO_ASSERT(*p1 == stop || p1 == p2,                                        \
               "aton float parsing didn't stop at correct position!\n\t%s"     \
               "\n\t%x != %x",                                                 \
               s,                                                              \
               *p1,                                                            \
               stop);                                                          \
    if (((double)d == r && (double)d == r2) || (r == std && r2 == std)) {      \
      /** fprintf(stderr, "Okay for %s\n", s); */                              \
    } else if ((pn2.as_i + 1) == (pn.as_i) || (pn.as_i + 1) == pn2.as_i) {     \
      if (FIO_LOG_LEVEL == FIO_LOG_LEVEL_DEBUG)                                \
        FIO_LOG_WARNING("Single bit rounding error detected (%s1): %s\n",      \
                        ((pn2.as_i + 1) == (pn.as_i) ? "-" : "+"),             \
                        s);                                                    \
    } else if ((pn1.as_i + 1) == (pn.as_i) || (pn.as_i + 1) == pn1.as_i) {     \
      if (FIO_LOG_LEVEL == FIO_LOG_LEVEL_DEBUG)                                \
        FIO_LOG_WARNING("aton Single bit rounding error detected (%s1): %s\n"  \
                        "\t%g != %g",                                          \
                        ((pn1.as_i + 1) == (pn.as_i) ? "-" : "+"),             \
                        s,                                                     \
                        r2,                                                    \
                        std);                                                  \
    } else if (r == 0.0 && (double)d != 0.0 && !isnan((double)d)) {            \
      if (FIO_LOG_LEVEL == FIO_LOG_LEVEL_DEBUG)                                \
        FIO_LOG_WARNING("float range limit marked before: %s\n", s);           \
    } else if (r2 == 0.0 && (double)d != 0.0 && !isnan((double)d)) {           \
      if (FIO_LOG_LEVEL == FIO_LOG_LEVEL_DEBUG)                                \
        FIO_LOG_WARNING("aton float range limit marked before: %s\n", s);      \
    } else {                                                                   \
      char f_buf[256];                                                         \
      pn.d_ = std;                                                             \
      pn2.d_ = r;                                                              \
      size_t tmp_pos = fio_ltoa(f_buf, pn2.as_i, 2);                           \
      f_buf[tmp_pos++] = '\n';                                                 \
      tmp_pos += fio_ltoa(f_buf + tmp_pos, pn.as_i, 2);                        \
      f_buf[tmp_pos++] = '\n';                                                 \
      fio_ltoa(f_buf + tmp_pos, pn1.as_i, 2);                                  \
      FIO_ASSERT(0,                                                            \
                 "Float error bigger than a single bit rounding error."        \
                 "\n\tString: %s"                                              \
                 "\n\texp. "                                                   \
                 "vs. act.:\nstd %.19g\natof %.19g\naton %.19g\nBinary:\n%s",  \
                 s,                                                            \
                 std,                                                          \
                 r,                                                            \
                 r2,                                                           \
                 f_buf);                                                       \
    }                                                                          \
  } while (0)

  fprintf(stderr, "* Testing fio_atof & fio_aton samples.\n");

  /* A few hex-float examples  */
  TEST_DOUBLE("0x10.1p0", 0x10.1p0, 0);
  TEST_DOUBLE("0x1.8p1", 0x1.8p1, 0);
  TEST_DOUBLE("0x1.8p5", 0x1.8p5, 0);
  TEST_DOUBLE("0x4.0p5", 0x4.0p5, 0);
  TEST_DOUBLE("0x1.0p50a", 0x1.0p50, 'a');
  TEST_DOUBLE("0x1.0p500", 0x1.0p500, 0);
  TEST_DOUBLE("0x1.0P-1074", 0x1.0P-1074, 0);
  TEST_DOUBLE("0x3a.0P-1074", 0x3a.0P-1074, 0);

  /* These numbers were copied from https://gist.github.com/mattn/1890186 */
  TEST_DOUBLE(".1", 0.1, 0);
  TEST_DOUBLE("  .", 0, 0);
  TEST_DOUBLE("  1.2e3", 1.2e3, 0);
  TEST_DOUBLE(" +1.2e3", 1.2e3, 0);
  TEST_DOUBLE("1.2e3", 1.2e3, 0);
  TEST_DOUBLE("+1.2e3", 1.2e3, 0);
  TEST_DOUBLE("+1.e3", 1000, 0);
  TEST_DOUBLE("-1.2e3", -1200, 0);
  TEST_DOUBLE("-1.2e3.5", -1200, '.');
  TEST_DOUBLE("-1.2e", -1.2, 0);
  TEST_DOUBLE("--1.2e3.5", 0, '-');
  TEST_DOUBLE("--1-.2e3.5", 0, '-');
  TEST_DOUBLE("-a", 0, 'a');
  TEST_DOUBLE("a", 0, 'a');
  TEST_DOUBLE(".1e", 0.1, 0);
  TEST_DOUBLE(".1e3", 100, 0);
  TEST_DOUBLE(".1e-3", 0.1e-3, 0);
  TEST_DOUBLE(".1e-", 0.1, 0);
  TEST_DOUBLE(" .e-", 0, 0);
  TEST_DOUBLE(" .e", 0, 0);
  TEST_DOUBLE(" e", 0, 0);
  TEST_DOUBLE(" e0", 0, 0);
  TEST_DOUBLE(" ee", 0, 'e');
  TEST_DOUBLE(" -e", 0, 0);
  TEST_DOUBLE(" .9", 0.9, 0);
  TEST_DOUBLE(" ..9", 0, '.');
  TEST_DOUBLE("007", 7, 0);
  TEST_DOUBLE("0.09e02", 9, 0);
  /* http://thread.gmane.org/gmane.editors.vim.devel/19268/ */
  TEST_DOUBLE("0.9999999999999999999999999999999999", 1, 0);
  TEST_DOUBLE("2.2250738585072010e-308", 2.225073858507200889e-308, 0);
  TEST_DOUBLE("2.2250738585072013e-308", 2.225073858507201383e-308, 0);
  TEST_DOUBLE("9214843084008499", 9214843084008499, 0);
  TEST_DOUBLE("30078505129381147446200", 3.007850512938114954e+22, 0);

  /* These numbers were copied from https://github.com/miloyip/rapidjson */
  TEST_DOUBLE("0.0", 0.0, 0);
  TEST_DOUBLE("-0.0", -0.0, 0);
  TEST_DOUBLE("1.0", 1.0, 0);
  TEST_DOUBLE("-1.0", -1.0, 0);
  TEST_DOUBLE("1.5", 1.5, 0);
  TEST_DOUBLE("-1.5", -1.5, 0);
  TEST_DOUBLE("3.1416", 3.1416, 0);
  TEST_DOUBLE("1E10", 1E10, 0);
  TEST_DOUBLE("1e10", 1e10, 0);
  TEST_DOUBLE("100000000000000000000000000000000000000000000000000000000000"
              "000000000000000000000",
              1E80,
              0);
  TEST_DOUBLE("1E+10", 1E+10, 0);
  TEST_DOUBLE("1E-10", 1E-10, 0);
  TEST_DOUBLE("-1E10", -1E10, 0);
  TEST_DOUBLE("-1e10", -1e10, 0);
  TEST_DOUBLE("-1E+10", -1E+10, 0);
  TEST_DOUBLE("-1E-10", -1E-10, 0);
  TEST_DOUBLE("1.234E+10", 1.234E+10, 0);
  TEST_DOUBLE("1.234E-10", 1.234E-10, 0);
  TEST_DOUBLE("1.79769e+308", 1.79769e+308, 0);
  TEST_DOUBLE("2.22507e-308", 2.22507e-308, 0);
  TEST_DOUBLE("-1.79769e+308", -1.79769e+308, 0);
  TEST_DOUBLE("-2.22507e-308", -2.22507e-308, 0);
  TEST_DOUBLE("4.9406564584124654e-324", 4.9406564584124654e-324, 0);
  TEST_DOUBLE("2.2250738585072009e-308", 2.2250738585072009e-308, 0);
  TEST_DOUBLE("2.2250738585072014e-308", 2.2250738585072014e-308, 0);
  TEST_DOUBLE("1.7976931348623157e+308", 1.7976931348623157e+308, 0);
  TEST_DOUBLE("1e-10000", 0.0, 0);
  TEST_DOUBLE("18446744073709551616", 18446744073709551616.0, 0);

  TEST_DOUBLE("-9223372036854775809", -9223372036854775809.0, 0);

  TEST_DOUBLE("0.9868011474609375", 0.9868011474609375, 0);
  TEST_DOUBLE("123e34", 123e34, 0);
  TEST_DOUBLE("45913141877270640000.0", 45913141877270640000.0, 0);
  TEST_DOUBLE("2.2250738585072011e-308", 2.2250738585072011e-308, 0);
  TEST_DOUBLE("1e-214748363", 0.0, 0);
  TEST_DOUBLE("1e-214748364", 0.0, 0);
  TEST_DOUBLE("0.017976931348623157e+310, 1", 1.7976931348623157e+308, ',');

  TEST_DOUBLE("2.2250738585072012e-308", 2.2250738585072014e-308, 0);
  TEST_DOUBLE("2.22507385850720113605740979670913197593481954635164565e-308",
              2.2250738585072014e-308,
              0);

  TEST_DOUBLE("0.999999999999999944488848768742172978818416595458984375",
              1.0,
              0);
  TEST_DOUBLE("0.999999999999999944488848768742172978818416595458984376",
              1.0,
              0);
  TEST_DOUBLE("1.00000000000000011102230246251565404236316680908203125",
              1.0,
              0);
  TEST_DOUBLE("1.00000000000000011102230246251565404236316680908203124",
              1.0,
              0);

  TEST_DOUBLE("72057594037927928.0", 72057594037927928.0, 0);
  TEST_DOUBLE("72057594037927936.0", 72057594037927936.0, 0);
  TEST_DOUBLE("72057594037927932.0", 72057594037927936.0, 0);
  TEST_DOUBLE("7205759403792793200001e-5", 72057594037927936.0, 0);

  TEST_DOUBLE("9223372036854774784.0", 9223372036854774784.0, 0);
  TEST_DOUBLE("9223372036854775808.0", 9223372036854775808.0, 0);
  TEST_DOUBLE("9223372036854775296.0", 9223372036854775808.0, 0);
  TEST_DOUBLE("922337203685477529600001e-5", 9223372036854775808.0, 0);

  TEST_DOUBLE("10141204801825834086073718800384",
              10141204801825834086073718800384.0,
              0);
  TEST_DOUBLE("10141204801825835211973625643008",
              10141204801825835211973625643008.0,
              0);
  TEST_DOUBLE("10141204801825834649023672221696",
              10141204801825835211973625643008.0,
              0);
  TEST_DOUBLE("1014120480182583464902367222169600001e-5",
              10141204801825835211973625643008.0,
              0);

  TEST_DOUBLE("5708990770823838890407843763683279797179383808",
              5708990770823838890407843763683279797179383808.0,
              0);
  TEST_DOUBLE("5708990770823839524233143877797980545530986496",
              5708990770823839524233143877797980545530986496.0,
              0);
  TEST_DOUBLE("5708990770823839207320493820740630171355185152",
              5708990770823839524233143877797980545530986496.0,
              0);
  TEST_DOUBLE("5708990770823839207320493820740630171355185152001e-3",
              5708990770823839524233143877797980545530986496.0,
              0);
#undef TEST_DOUBLE
#if !DEBUG
  {
    clock_t start, stop;
    fio_memcpy15x(buffer, "1234567890.123", 14);
    buffer[14] = 0;
    volatile size_t r = 0;
    start = clock();
    for (int i = 0; i < (FIO_ATOL_TEST_MAX << 3); ++i) {
      char *pos = buffer;
      r += fio_atol(&pos);
      FIO_COMPILER_GUARD;
      // FIO_ASSERT(r == exp, "fio_atol failed during speed test");
    }
    stop = clock();
    fprintf(stderr,
            "* fio_atol speed test completed in %zu cycles\n",
            (size_t)(stop - start));
    r = 0;

    start = clock();
    for (int i = 0; i < (FIO_ATOL_TEST_MAX << 3); ++i) {
      char *pos = buffer;
      r += strtol(pos, NULL, 10);
      FIO_COMPILER_GUARD;
      // FIO_ASSERT(r == exp, "system strtol failed during speed test");
    }
    stop = clock();
    fprintf(stderr,
            "* system atol speed test completed in %zu cycles\n",
            (size_t)(stop - start));
  }
#endif /* !DEBUG */
}
#undef FIO_ATOL_TEST_MAX

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        Atomics Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_ATOMIC_TEST___H)
#define H___FIO_ATOMIC_TEST___H
#ifndef H___FIO_ATOMIC___H
#define FIO_ATOMIC
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

FIO_SFUNC void FIO_NAME_TEST(stl, atomics)(void) {
  fprintf(stderr, "* Testing atomic operation macros.\n");
  struct fio___atomic_test_s {
    size_t w;
    unsigned long l;
    unsigned short s;
    unsigned char c;
  } s = {0}, r1 = {0}, r2 = {0};
  fio_lock_i lock = FIO_LOCK_INIT;

  r1.c = fio_atomic_add(&s.c, 1);
  r1.s = fio_atomic_add(&s.s, 1);
  r1.l = fio_atomic_add(&s.l, 1);
  r1.w = fio_atomic_add(&s.w, 1);
  FIO_ASSERT(r1.c == 0 && s.c == 1, "fio_atomic_add failed for c");
  FIO_ASSERT(r1.s == 0 && s.s == 1, "fio_atomic_add failed for s");
  FIO_ASSERT(r1.l == 0 && s.l == 1, "fio_atomic_add failed for l");
  FIO_ASSERT(r1.w == 0 && s.w == 1, "fio_atomic_add failed for w");
  r2.c = fio_atomic_add_fetch(&s.c, 1);
  r2.s = fio_atomic_add_fetch(&s.s, 1);
  r2.l = fio_atomic_add_fetch(&s.l, 1);
  r2.w = fio_atomic_add_fetch(&s.w, 1);
  FIO_ASSERT(r2.c == 2 && s.c == 2, "fio_atomic_add_fetch failed for c");
  FIO_ASSERT(r2.s == 2 && s.s == 2, "fio_atomic_add_fetch failed for s");
  FIO_ASSERT(r2.l == 2 && s.l == 2, "fio_atomic_add_fetch failed for l");
  FIO_ASSERT(r2.w == 2 && s.w == 2, "fio_atomic_add_fetch failed for w");
  r1.c = fio_atomic_sub(&s.c, 1);
  r1.s = fio_atomic_sub(&s.s, 1);
  r1.l = fio_atomic_sub(&s.l, 1);
  r1.w = fio_atomic_sub(&s.w, 1);
  FIO_ASSERT(r1.c == 2 && s.c == 1, "fio_atomic_sub failed for c");
  FIO_ASSERT(r1.s == 2 && s.s == 1, "fio_atomic_sub failed for s");
  FIO_ASSERT(r1.l == 2 && s.l == 1, "fio_atomic_sub failed for l");
  FIO_ASSERT(r1.w == 2 && s.w == 1, "fio_atomic_sub failed for w");
  r2.c = fio_atomic_sub_fetch(&s.c, 1);
  r2.s = fio_atomic_sub_fetch(&s.s, 1);
  r2.l = fio_atomic_sub_fetch(&s.l, 1);
  r2.w = fio_atomic_sub_fetch(&s.w, 1);
  FIO_ASSERT(r2.c == 0 && s.c == 0, "fio_atomic_sub_fetch failed for c");
  FIO_ASSERT(r2.s == 0 && s.s == 0, "fio_atomic_sub_fetch failed for s");
  FIO_ASSERT(r2.l == 0 && s.l == 0, "fio_atomic_sub_fetch failed for l");
  FIO_ASSERT(r2.w == 0 && s.w == 0, "fio_atomic_sub_fetch failed for w");
  fio_atomic_add(&s.c, 1);
  fio_atomic_add(&s.s, 1);
  fio_atomic_add(&s.l, 1);
  fio_atomic_add(&s.w, 1);
  r1.c = fio_atomic_exchange(&s.c, 99);
  r1.s = fio_atomic_exchange(&s.s, 99);
  r1.l = fio_atomic_exchange(&s.l, 99);
  r1.w = fio_atomic_exchange(&s.w, 99);
  FIO_ASSERT(r1.c == 1 && s.c == 99, "fio_atomic_exchange failed for c");
  FIO_ASSERT(r1.s == 1 && s.s == 99, "fio_atomic_exchange failed for s");
  FIO_ASSERT(r1.l == 1 && s.l == 99, "fio_atomic_exchange failed for l");
  FIO_ASSERT(r1.w == 1 && s.w == 99, "fio_atomic_exchange failed for w");
  // clang-format off
  FIO_ASSERT(!fio_atomic_compare_exchange_p(&s.c, &r1.c, &r1.c), "fio_atomic_compare_exchange_p didn't fail for c");
  FIO_ASSERT(!fio_atomic_compare_exchange_p(&s.s, &r1.s, &r1.s), "fio_atomic_compare_exchange_p didn't fail for s");
  FIO_ASSERT(!fio_atomic_compare_exchange_p(&s.l, &r1.l, &r1.l), "fio_atomic_compare_exchange_p didn't fail for l");
  FIO_ASSERT(!fio_atomic_compare_exchange_p(&s.w, &r1.w, &r1.w), "fio_atomic_compare_exchange_p didn't fail for w");
  r1.c = 1;s.c = 99; r1.s = 1;s.s = 99; r1.l = 1;s.l = 99; r1.w = 1;s.w = 99; /* ignore system spefcific behavior. */
  r1.c = fio_atomic_compare_exchange_p(&s.c,&s.c, &r1.c);
  r1.s = fio_atomic_compare_exchange_p(&s.s,&s.s, &r1.s);
  r1.l = fio_atomic_compare_exchange_p(&s.l,&s.l, &r1.l);
  r1.w = fio_atomic_compare_exchange_p(&s.w,&s.w, &r1.w);
  FIO_ASSERT(r1.c == 1 && s.c == 1, "fio_atomic_compare_exchange_p failed for c (%zu got %zu)", (size_t)s.c, (size_t)r1.c);
  FIO_ASSERT(r1.s == 1 && s.s == 1, "fio_atomic_compare_exchange_p failed for s (%zu got %zu)", (size_t)s.s, (size_t)r1.s);
  FIO_ASSERT(r1.l == 1 && s.l == 1, "fio_atomic_compare_exchange_p failed for l (%zu got %zu)", (size_t)s.l, (size_t)r1.l);
  FIO_ASSERT(r1.w == 1 && s.w == 1, "fio_atomic_compare_exchange_p failed for w (%zu got %zu)", (size_t)s.w, (size_t)r1.w);
  // clang-format on

  uint64_t val = 1;
  FIO_ASSERT(fio_atomic_and(&val, 2) == 1,
             "fio_atomic_and should return old value");
  FIO_ASSERT(val == 0, "fio_atomic_and should update value");
  FIO_ASSERT(fio_atomic_xor(&val, 1) == 0,
             "fio_atomic_xor should return old value");
  FIO_ASSERT(val == 1, "fio_atomic_xor_fetch should update value");
  FIO_ASSERT(fio_atomic_xor_fetch(&val, 1) == 0,
             "fio_atomic_xor_fetch should return new value");
  FIO_ASSERT(val == 0, "fio_atomic_xor should update value");
  FIO_ASSERT(fio_atomic_or(&val, 2) == 0,
             "fio_atomic_or should return old value");
  FIO_ASSERT(val == 2, "fio_atomic_or should update value");
  FIO_ASSERT(fio_atomic_or_fetch(&val, 1) == 3,
             "fio_atomic_or_fetch should return new value");
  FIO_ASSERT(val == 3, "fio_atomic_or_fetch should update value");
#if !_MSC_VER /* don't test missing MSVC features */
  FIO_ASSERT(fio_atomic_nand_fetch(&val, 4) == ~0ULL,
             "fio_atomic_nand_fetch should return new value");
  FIO_ASSERT(val == ~0ULL, "fio_atomic_nand_fetch should update value");
  val = 3ULL;
  FIO_ASSERT(fio_atomic_nand(&val, 4) == 3ULL,
             "fio_atomic_nand should return old value");
  FIO_ASSERT(val == ~0ULL, "fio_atomic_nand_fetch should update value");
#endif /* !_MSC_VER */
  FIO_ASSERT(!fio_is_locked(&lock),
             "lock should be initialized in unlocked state");
  FIO_ASSERT(!fio_trylock(&lock), "fio_trylock should succeed");
  FIO_ASSERT(fio_trylock(&lock), "fio_trylock should fail");
  FIO_ASSERT(fio_is_locked(&lock), "lock should be engaged");
  fio_unlock(&lock);
  FIO_ASSERT(!fio_is_locked(&lock), "lock should be released");
  fio_lock(&lock);
  FIO_ASSERT(fio_is_locked(&lock), "lock should be engaged (fio_lock)");
  for (uint8_t i = 1; i < 8; ++i) {
    FIO_ASSERT(!fio_is_group_locked(&lock, FIO_LOCK_SUBLOCK(i)),
               "group lock flagged, but wasn't engaged (%u - %p)",
               (unsigned int)i,
               (void *)(uintptr_t)lock);
  }
  fio_unlock(&lock);
  FIO_ASSERT(!fio_is_locked(&lock), "lock should be released");
  lock = FIO_LOCK_INIT;
  for (size_t i = 0; i < 8; ++i) {
    FIO_ASSERT(!fio_is_group_locked(&lock, FIO_LOCK_SUBLOCK(i)),
               "group lock should be initialized in unlocked state");
    FIO_ASSERT(!fio_trylock_group(&lock, FIO_LOCK_SUBLOCK(i)),
               "fio_trylock_group should succeed");
    FIO_ASSERT(fio_trylock_group(&lock, FIO_LOCK_SUBLOCK(i)),
               "fio_trylock should fail");
    FIO_ASSERT(fio_trylock_full(&lock), "fio_trylock_full should fail");
    FIO_ASSERT(fio_is_group_locked(&lock, FIO_LOCK_SUBLOCK(i)),
               "sub-lock %d should be engaged",
               i);
    {
      uint8_t g =
          fio_trylock_group(&lock, FIO_LOCK_SUBLOCK(1) | FIO_LOCK_SUBLOCK(3));
      FIO_ASSERT((i != 1 && i != 3 && !g) || ((i == 1 || i == 3) && g),
                 "fio_trylock_group should succeed / fail");
      if (!g)
        fio_unlock_group(&lock, FIO_LOCK_SUBLOCK(1) | FIO_LOCK_SUBLOCK(3));
    }
    for (uint8_t j = 1; j < 8; ++j) {
      FIO_ASSERT(i == j || !fio_is_group_locked(&lock, FIO_LOCK_SUBLOCK(j)),
                 "another group lock was flagged, though it wasn't engaged");
    }
    FIO_ASSERT(fio_is_group_locked(&lock, FIO_LOCK_SUBLOCK(i)),
               "lock should remain engaged");
    fio_unlock_group(&lock, FIO_LOCK_SUBLOCK(i));
    FIO_ASSERT(!fio_is_group_locked(&lock, FIO_LOCK_SUBLOCK(i)),
               "group lock should be released");
    FIO_ASSERT(!fio_trylock_full(&lock), "fio_trylock_full should succeed");
    fio_unlock_full(&lock);
    FIO_ASSERT(!lock, "fio_unlock_full should unlock all");
  }
}
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_CLI Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_CLI_TEST___H)
#define H___FIO_CLI_TEST___H
#ifndef H___FIO_CLI___H
#define FIO_CLI
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

FIO_SFUNC void FIO_NAME_TEST(stl, cli)(void) {
  const char *argv[] = {
      "appname",
      "-i11",
      "-i2=2",
      "-i3",
      "3",
      "-t,u",
      "-s",
      "test",
      "unnamed",
  };
  const int argc = sizeof(argv) / sizeof(argv[0]);
  fprintf(stderr, "* Testing CLI helpers.\n");
  { /* avoid macro for C++ */
    fio___cli_line_s arguments[] = {
        FIO_CLI_INT("-integer1 -i1 first integer"),
        FIO_CLI_INT("-integer2 -i2 second integer"),
        FIO_CLI_INT("-integer3 -i3 third integer"),
        FIO_CLI_INT("-integer4 -i4 (4) fourth integer"),
        FIO_CLI_INT("-integer5 -i5 (\"5\") fifth integer"),
        FIO_CLI_BOOL("-boolean -t boolean"),
        FIO_CLI_BOOL("-boolean2 -u boolean"),
        FIO_CLI_BOOL("-boolean_false -f boolean"),
        FIO_CLI_STRING("-str -s a string"),
        FIO_CLI_PRINT_HEADER("Printing stuff"),
        FIO_CLI_PRINT_LINE("does nothing, but shouldn't crash either"),
        FIO_CLI_PRINT("does nothing, but shouldn't crash either"),
        {(fio_cli_arg_e)0},
    };
    fio_cli_start FIO_NOOP(argc, argv, 0, -1, NULL, arguments);
  }
  FIO_ASSERT(fio_cli_get_i("-i2") == 2, "CLI second integer error.");
  FIO_ASSERT(fio_cli_get_i("-i3") == 3, "CLI third integer error.");
  FIO_ASSERT(fio_cli_get_i("-i4") == 4,
             "CLI fourth integer error (%s).",
             fio_cli_get("-i4"));
  FIO_ASSERT(fio_cli_get_i("-i5") == 5,
             "CLI fifth integer error (%s).",
             fio_cli_get("-i5"));
  FIO_ASSERT(fio_cli_get_i("-i1") == 1, "CLI first integer error.");
  FIO_ASSERT(fio_cli_get_i("-i2") == fio_cli_get_i("-integer2"),
             "CLI second integer error.");
  FIO_ASSERT(fio_cli_get_i("-i3") == fio_cli_get_i("-integer3"),
             "CLI third integer error.");
  FIO_ASSERT(fio_cli_get_i("-i1") == fio_cli_get_i("-integer1"),
             "CLI first integer error.");
  FIO_ASSERT(fio_cli_get_i("-t") == 1, "CLI boolean true error.");
  FIO_ASSERT(fio_cli_get_i("-u") == 1, "CLI boolean 2 true error.");
  FIO_ASSERT(fio_cli_get_i("-f") == 0, "CLI boolean false error.");
  FIO_ASSERT(!strcmp(fio_cli_get("-s"), "test"), "CLI string error.");
  FIO_ASSERT(fio_cli_unnamed_count() == 1, "CLI unnamed count error.");
  FIO_ASSERT(!strcmp(fio_cli_unnamed(0), "unnamed"), "CLI unnamed error.");
  fio_cli_set("-manual", "okay");
  FIO_ASSERT(!strcmp(fio_cli_get("-manual"), "okay"), "CLI set/get error.");
  fio_cli_end();
  FIO_ASSERT(fio_cli_get_i("-i1") == 0, "CLI cleanup error.");
}
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                                Core Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_CORE_TEST___H)
#define H___FIO_CORE_TEST___H

FIO_SFUNC void FIO_NAME_TEST(stl, core)(void) {
  fprintf(stderr, "* Testing fio_memcpy primitives.\n");
  {
    struct {
      void *(*fn)(void *, const void *, size_t);
      const char *name;
      size_t len;
    } tests[] = {
        {fio_memcpy7x, "fio_memcpy7x", 7},
        {fio_memcpy15x, "fio_memcpy15x", 15},
        {fio_memcpy31x, "fio_memcpy31x", 31},
        {fio_memcpy63x, "fio_memcpy63x", 63},
        {fio_memcpy127x, "fio_memcpy127x", 127},
        {fio_memcpy255x, "fio_memcpy255x", 255},
        {fio_memcpy511x, "fio_memcpy511x", 511},
        {fio_memcpy1023x, "fio_memcpy1023x", 1023},
        {fio_memcpy2047x, "fio_memcpy2047x", 2047},
        {fio_memcpy4095x, "fio_memcpy4095x", 4095},
        {NULL},
    };
    char buf[(4096 << 1) + 64];
    fio_rand_bytes(buf + (4096 + 32), (4096 + 32));
    for (size_t ifn = 0; tests[ifn].fn; ++ifn) {
      /* test all x primitives */
      size_t len = tests[ifn].len;
      for (size_t i = 0; i < 31; ++i) {
        memset(buf, 0, 4096 + 32);
        buf[i + len] = '\xFF';
        tests[ifn].fn(buf + i, buf + (4096 + 32), len);
        FIO_ASSERT(!memcmp(buf + i, buf + (4096 + 32), len),
                   "%s failed @ %zu\n",
                   tests[ifn].name,
                   i);
        FIO_ASSERT(fio_ct_is_eq(buf + i, buf + (4096 + 32), len),
                   "fio_ct_is_eq claims that %s failed @ %zu\n",
                   tests[ifn].name,
                   i);
        FIO_ASSERT(buf[i + len] == '\xFF', "%s overflow?", tests[ifn].name);
      }
    }
  }
  fprintf(stderr, "* Testing fio_bswapX macros.\n");
  FIO_ASSERT(fio_bswap16(0x0102) == (uint16_t)0x0201, "fio_bswap16 failed");
  FIO_ASSERT(fio_bswap32(0x01020304) == (uint32_t)0x04030201,
             "fio_bswap32 failed");
  FIO_ASSERT(fio_bswap64(0x0102030405060708ULL) == 0x0807060504030201ULL,
             "fio_bswap64 failed");

  fprintf(stderr, "* Testing fio_lrotX and fio_rrotX macros.\n");
  {
    uint64_t tmp = 1;
    tmp = FIO_RROT(tmp, 1);
    FIO_COMPILER_GUARD;
    FIO_ASSERT(tmp == ((uint64_t)1 << ((sizeof(uint64_t) << 3) - 1)),
               "fio_rrot failed");
    tmp = FIO_LROT(tmp, 3);
    FIO_COMPILER_GUARD;
    FIO_ASSERT(tmp == ((uint64_t)1 << 2), "fio_lrot failed");
    tmp = 1;
    tmp = fio_rrot32((uint32_t)tmp, 1);
    FIO_COMPILER_GUARD;
    FIO_ASSERT(tmp == ((uint64_t)1 << 31), "fio_rrot32 failed");
    tmp = fio_lrot32((uint32_t)tmp, 3);
    FIO_COMPILER_GUARD;
    FIO_ASSERT(tmp == ((uint64_t)1 << 2), "fio_lrot32 failed");
    tmp = 1;
    tmp = fio_rrot64(tmp, 1);
    FIO_COMPILER_GUARD;
    FIO_ASSERT(tmp == ((uint64_t)1 << 63), "fio_rrot64 failed");
    tmp = fio_lrot64(tmp, 3);
    FIO_COMPILER_GUARD;
    FIO_ASSERT(tmp == ((uint64_t)1 << 2), "fio_lrot64 failed");
  }
  for (size_t i = 0; i < 63; ++i) {
#if !defined(__has_builtin) || !__has_builtin(__builtin_ctzll) ||              \
    !__has_builtin(__builtin_clzll)
    FIO_ASSERT(fio___single_bit_index_unsafe((1ULL << i)) == i,
               "bit index map[%zu] error != %zu",
               (size_t)(1ULL << i),
               i);
#endif
    FIO_ASSERT(fio_bits_msb_index(((1ULL << i) | 1)) == i,
               "fio_bits_msb_index(%zu) != %zu",
               ((1ULL << i)),
               (size_t)fio_bits_msb_index(((1ULL << i) | 1)));
    FIO_ASSERT(fio_bits_lsb_index(((~0ULL) << i)) == i,
               "fio_bits_lsb_index(%zu) != %zu",
               1,
               (size_t)fio_bits_lsb_index(((~0ULL) << i)));
  }

  fprintf(stderr, "* Testing fio_buf2uX and fio_u2bufX helpers.\n");
#define FIO___BITMAP_TEST_BITS(itype, utype, bits)                             \
  for (size_t i = 0; i < (bits); ++i) {                                        \
    char tmp_buf[32];                                                          \
    itype n = ((utype)1 << i);                                                 \
    FIO_NAME2(fio_u, buf##bits##u)(tmp_buf, n);                                \
    itype r = FIO_NAME2(fio_buf, u##bits##u)(tmp_buf);                         \
    FIO_ASSERT(r == n,                                                         \
               "roundtrip failed for U" #bits " at bit %zu\n\t%zu != %zu",     \
               i,                                                              \
               (size_t)n,                                                      \
               (size_t)r);                                                     \
    FIO_ASSERT(!memcmp(tmp_buf, &n, (bits) >> 3),                              \
               "memory ordering implementation error for U" #bits "!");        \
  }
  FIO___BITMAP_TEST_BITS(int8_t, uint8_t, 8);
  FIO___BITMAP_TEST_BITS(int16_t, uint16_t, 16);
  FIO___BITMAP_TEST_BITS(int32_t, uint32_t, 32);
  FIO___BITMAP_TEST_BITS(int64_t, uint64_t, 64);
#undef FIO___BITMAP_TEST_BITS

  fprintf(stderr, "* Testing constant-time helpers.\n");
  FIO_ASSERT(fio_ct_true(0) == 0, "fio_ct_true(0) should be zero!");
  for (uintptr_t i = 1; i; i <<= 1) {
    FIO_ASSERT(fio_ct_true(i) == 1,
               "fio_ct_true(%p) should be true!",
               (void *)i);
  }
  for (uintptr_t i = 1; i + 1 != 0; i = (i << 1) | 1) {
    FIO_ASSERT(fio_ct_true(i) == 1,
               "fio_ct_true(%p) should be true!",
               (void *)i);
  }
  FIO_ASSERT(fio_ct_true(((uintptr_t)~0ULL)) == 1,
             "fio_ct_true(%p) should be true!",
             (void *)(uintptr_t)(~0ULL));

  FIO_ASSERT(fio_ct_false(0) == 1, "fio_ct_false(0) should be true!");
  for (uintptr_t i = 1; i; i <<= 1) {
    FIO_ASSERT(fio_ct_false(i) == 0,
               "fio_ct_false(%p) should be zero!",
               (void *)i);
  }
  for (uintptr_t i = 1; i + 1 != 0; i = (i << 1) | 1) {
    FIO_ASSERT(fio_ct_false(i) == 0,
               "fio_ct_false(%p) should be zero!",
               (void *)i);
  }
  FIO_ASSERT(fio_ct_false(((uintptr_t)~0ULL)) == 0,
             "fio_ct_false(%p) should be zero!",
             (void *)(uintptr_t)(~0ULL));
  FIO_ASSERT(fio_ct_true(8), "fio_ct_true should be true.");
  FIO_ASSERT(!fio_ct_true(0), "fio_ct_true should be false.");
  FIO_ASSERT(!fio_ct_false(8), "fio_ct_false should be false.");
  FIO_ASSERT(fio_ct_false(0), "fio_ct_false should be true.");
  FIO_ASSERT(fio_ct_if_bool(0, 1, 2) == 2,
             "fio_ct_if_bool selection error (false).");
  FIO_ASSERT(fio_ct_if_bool(1, 1, 2) == 1,
             "fio_ct_if_bool selection error (true).");
  FIO_ASSERT(fio_ct_if(0, 1, 2) == 2, "fio_ct_if selection error (false).");
  FIO_ASSERT(fio_ct_if(8, 1, 2) == 1, "fio_ct_if selection error (true).");
  FIO_ASSERT(fio_ct_max(1, 2) == 2, "fio_ct_max error.");
  FIO_ASSERT(fio_ct_max(2, 1) == 2, "fio_ct_max error.");
  FIO_ASSERT(fio_ct_max(-1, 2) == 2, "fio_ct_max error.");
  FIO_ASSERT(fio_ct_max(2, -1) == 2, "fio_ct_max error.");
  FIO_ASSERT(fio_ct_max(1, -2) == 1, "fio_ct_max error.");
  FIO_ASSERT(fio_ct_max(-2, 1) == 1, "fio_ct_max error.");
  FIO_ASSERT(fio_ct_max(-1, -2) == -1, "fio_ct_max error.");
  FIO_ASSERT(fio_ct_max(-2, -1) == -1, "fio_ct_max error.");
  {
    uint8_t bitmap[1024];
    FIO_MEMSET(bitmap, 0, 1024);
    fprintf(stderr, "* Testing bitmap helpers.\n");
    FIO_ASSERT(!fio_bit_get(bitmap, 97), "fio_bit_get should be 0.");
    fio_bit_set(bitmap, 97);
    FIO_ASSERT(fio_bit_get(bitmap, 97) == 1,
               "fio_bit_get should be 1 after being set");
    FIO_ASSERT(!fio_bit_get(bitmap, 96),
               "other bits shouldn't be effected by set.");
    FIO_ASSERT(!fio_bit_get(bitmap, 98),
               "other bits shouldn't be effected by set.");
    fio_bit_flip(bitmap, 96);
    fio_bit_flip(bitmap, 97);
    FIO_ASSERT(!fio_bit_get(bitmap, 97), "fio_bit_get should be 0 after flip.");
    FIO_ASSERT(fio_bit_get(bitmap, 96) == 1,
               "other bits shouldn't be effected by flip");
    fio_bit_unset(bitmap, 96);
    fio_bit_flip(bitmap, 97);
    FIO_ASSERT(!fio_bit_get(bitmap, 96),
               "fio_bit_get should be 0 after unset.");
    FIO_ASSERT(fio_bit_get(bitmap, 97) == 1,
               "other bits shouldn't be effected by unset");
    fio_bit_unset(bitmap, 96);
  }
  {
    uint8_t bitmap[1024];
    FIO_MEMSET(bitmap, 0, 1024);
    fprintf(stderr, "* Testing atomic bitmap helpers.\n");
    FIO_ASSERT(!fio_atomic_bit_get(bitmap, 97),
               "fio_atomic_bit_get should be 0.");
    fio_atomic_bit_set(bitmap, 97);
    FIO_ASSERT(fio_atomic_bit_get(bitmap, 97) == 1,
               "fio_atomic_bit_get should be 1 after being set");
    FIO_ASSERT(!fio_atomic_bit_get(bitmap, 96),
               "other bits shouldn't be effected by set.");
    FIO_ASSERT(!fio_atomic_bit_get(bitmap, 98),
               "other bits shouldn't be effected by set.");
    fio_atomic_bit_flip(bitmap, 96);
    fio_atomic_bit_flip(bitmap, 97);
    FIO_ASSERT(!fio_atomic_bit_get(bitmap, 97),
               "fio_atomic_bit_get should be 0 after flip.");
    FIO_ASSERT(fio_atomic_bit_get(bitmap, 96) == 1,
               "other bits shouldn't be effected by flip");
    fio_atomic_bit_unset(bitmap, 96);
    fio_atomic_bit_flip(bitmap, 97);
    FIO_ASSERT(!fio_atomic_bit_get(bitmap, 96),
               "fio_atomic_bit_get should be 0 after unset.");
    FIO_ASSERT(fio_atomic_bit_get(bitmap, 97) == 1,
               "other bits shouldn't be effected by unset");
    fio_atomic_bit_unset(bitmap, 96);
  }
  {
    fprintf(stderr, "* Testing popcount and hemming distance calculation.\n");
    for (int i = 0; i < 64; ++i) {
      FIO_ASSERT(fio_popcount((uint64_t)1 << i) == 1,
                 "fio_popcount error for 1 bit");
    }
    for (int i = 0; i < 63; ++i) {
      FIO_ASSERT(fio_popcount((uint64_t)3 << i) == 2,
                 "fio_popcount error for 2 bits");
    }
    for (int i = 0; i < 62; ++i) {
      FIO_ASSERT(fio_popcount((uint64_t)7 << i) == 3,
                 "fio_popcount error for 3 bits");
    }
    for (int i = 0; i < 59; ++i) {
      FIO_ASSERT(fio_popcount((uint64_t)21 << i) == 3,
                 "fio_popcount error for 3 alternating bits");
    }
    for (int i = 0; i < 64; ++i) {
      FIO_ASSERT(fio_hemming_dist(((uint64_t)1 << i) - 1, 0) == i,
                 "fio_hemming_dist error at %d",
                 i);
    }
  }
  {
    struct test_s {
      int a;
      char force_padding;
      int b;
    } stst = {.a = 1};

    struct test_s *stst_p = FIO_PTR_FROM_FIELD(struct test_s, b, &stst.b);
    FIO_ASSERT(stst_p == &stst, "FIO_PTR_FROM_FIELD failed to retrace pointer");
  }
  {
    fprintf(stderr, "* Testing fio_xmask.\n");
    char data[128], buf[256];
    uint64_t mask;
    uint64_t counter;
    do {
      mask = fio_rand64();
      counter = fio_rand64();
    } while (fio_has_zero_byte64(mask) || !counter);
    fio_rand_bytes(data, 128);
    const size_t len = 127;
    for (uint8_t i = 0; i < 16; ++i) {
      FIO_MEMCPY(buf + i, data, len);
      buf[len + i] = '\xFF';
      fio_xmask(buf + i, len, mask);
      FIO_ASSERT(buf[len + i] == '\xFF', "fio_xmask overflow?");
      FIO_ASSERT(memcmp(buf + i, data, len), "fio_xmask masking error");
      FIO_ASSERT(memcmp(buf + i, data, 8), "fio_xmask didn't mask data head?");
      FIO_ASSERT(
          !(len & 7) ||
              memcmp(buf + i + (len & (~7U)), data + (len & (~7U)), (len & 7)),
          "fio_xmask mask didn't mask data's tail?");
      fio_xmask(buf + i, len, mask);
      FIO_ASSERT(!memcmp(buf + i, data, len), "fio_xmask rountrip error");
      fio_xmask(buf + i, len, mask);
      FIO_MEMMOVE(buf + i + 1, buf + i, len);
      fio_xmask(buf + i + 1, len, mask);
      FIO_ASSERT(!memcmp(buf + i + 1, data, len),
                 "fio_xmask rountrip (with move) error");
    }
  }
  {
    fprintf(stderr, "* Testing Core UTF-8 Support (Macros).\n");
    struct {
      const char *buf;
      size_t clen;
      bool expect_fail;
    } utf8_core_tests[] = {
        {"\xf0\x9f\x92\x85", 4},
        {"\xf0\x9f\x92\x95", 4},
        {"\xe2\x9d\xa4", 3},
        {"\xE1\x9A\x80", 3},
        {"\xE2\x80\x80", 3},
        {"\xE2\x80\x81", 3},
        {"\xE2\x80\x82", 3},
        {"\xE2\x80\x83", 3},
        {"\xE2\x80\x84", 3},
        {"\xE2\x80\x85", 3},
        {"\xE2\x80\x86", 3},
        {"\xE2\x80\x87", 3},
        {"\xE2\x80\x88", 3},
        {"\xE2\x80\x89", 3},
        {"\xE2\x80\x8A", 3},
        {"\xE2\x80\xA8", 3},
        {"\xE2\x80\xA9", 3},
        {"\xE2\x80\xAF", 3},
        {"\xE2\x81\x9F", 3},
        {"\xE3\x80\x80", 3},
        {"\xEF\xBB\xBF", 3},
        {"\xc6\x92", 2},
        {"\xC2\xA0", 2},
        {"\x09", 1},
        {"\x0A", 1},
        {"\x0B", 1},
        {"\x0C", 1},
        {"\x0D", 1},
        {"\x20", 1},
        {"Z", 1},
        {"\0", 1},
        {"\xf0\x9f\x92\x35", 4, 1},
        {"\xf0\x9f\x32\x95", 4, 1},
        {"\xf0\x3f\x92\x95", 4, 1},
        {"\xFE\x9f\x92\x95", 4, 1},
        {"\xE1\x9A\x30", 3, 1},
        {"\xE1\x3A\x80", 3, 1},
        {"\xf0\x9A\x80", 3, 1},
        {"\xc6\x32", 2, 1},
        {"\xf0\x92", 2, 1},
        {0},
    };
    for (size_t i = 0; utf8_core_tests[i].buf; ++i) {
      char *pos = (char *)utf8_core_tests[i].buf;
      FIO_ASSERT(utf8_core_tests[i].expect_fail ||
                     (size_t)fio_utf8_char_len(pos) == utf8_core_tests[i].clen,
                 "fio_utf8_char_len failed on %s ([%zu] == %X), %d != %u",
                 utf8_core_tests[i].buf,
                 i,
                 (unsigned)(uint8_t)utf8_core_tests[i].buf[0],
                 (int)fio_utf8_char_len(pos),
                 (unsigned)utf8_core_tests[i].clen);
      uint32_t value = 0, validate = 0;
      void *tst_str = NULL;
      fio_memcpy7x(&tst_str, utf8_core_tests[i].buf, utf8_core_tests[i].clen);
#if __LITTLE_ENDIAN__
      tst_str = (void *)(uintptr_t)fio_lton32((uint32_t)(uintptr_t)tst_str);
#endif
      value = fio_utf8_read(&pos);
      uint32_t val_len = fio_utf8_code_len(value); /* val_len 0 (fail) == 1 */
      FIO_ASSERT(!utf8_core_tests[i].expect_fail ||
                     (!value && pos == utf8_core_tests[i].buf &&
                      !fio_utf8_char_len(utf8_core_tests[i].buf)),
                 "Failed to detect invalid UTF-8");
      if (utf8_core_tests[i].expect_fail)
        continue;
      char output[32];
      pos = output;
      pos += fio_utf8_write(pos, value);
      FIO_ASSERT(val_len == utf8_core_tests[i].clen,
                 "fio_utf8_read + fio_utf8_code_len failed on %s / %p (%zu "
                 "len => %zu != %zu)",
                 utf8_core_tests[i].buf,
                 tst_str,
                 (size_t)value,
                 val_len,
                 utf8_core_tests[i].clen);
      pos = output;
      validate = fio_utf8_read(&pos);
      FIO_ASSERT(validate == value && (value > 0 || !utf8_core_tests[i].buf[0]),
                 "fio_utf8_read + fio_utf8_write roundtrip failed on [%zu] %s\n"
                 "\t %zu != %zu",
                 i,
                 utf8_core_tests[i].buf,
                 validate,
                 value);
    }
  }
  {
    fprintf(stderr,
            "* Testing Basic Multi-Precision add / sub / mul for fio_uXXX "
            "(fio_u256).\n");

    char *buf[1024];

    fio_u256 a = fio_u256_init64(2);
    fio_u256 b = fio_u256_init64(3);
    fio_u512 expected = fio_u512_init64(6);

    fio_u512 result = {0};
    fio_u256_mul(&result, &a, &b);

    FIO_ASSERT(!FIO_MEMCMP(&result, &expected, sizeof(result)),
               "2 * 3 should be 6");
    FIO_ASSERT(!fio_u512_cmp(&result, &expected),
               "fio_u512_cmp failed for result 6.");

    a = fio_u256_init64(2, 2);
    expected = fio_u512_init64(6, 6);
    fio_u256_mul(&result, &a, &b);
    FIO_ASSERT(!FIO_MEMCMP(&result, &expected, sizeof(result)),
               "2,2 * 3 should be 6,6");
    FIO_ASSERT(!fio_u512_cmp(&result, &expected),
               "fio_u512_cmp failed for result 6,6.");

    a = fio_u256_init64(2, 0x8000000000000000);
    expected = fio_u512_init64(6, 0x8000000000000000, 1);
    fio_u256_mul(&result, &a, &b);
    FIO_ASSERT(!FIO_MEMCMP(&result, &expected, sizeof(result)),
               "2,0x8... * 3 should be 6,0x8..., 1");
    FIO_ASSERT(!fio_u512_cmp(&result, &expected),
               "fio_u512_cmp failed for result 6,0x8..., 1");

    a = fio_u256_init64(0xFFFFFFFFFFFFFFFF,
                        0xFFFFFFFFFFFFFFFF,
                        0xFFFFFFFFFFFFFFFF,
                        0xFFFFFFFFFFFFFFFF); // Max value
    b = fio_u256_init64(0xFFFFFFFFFFFFFFFF,
                        0xFFFFFFFFFFFFFFFF,
                        0xFFFFFFFFFFFFFFFF,
                        0xFFFFFFFFFFFFFFFF); // Max value
    expected = fio_u512_init64(0x1,
                               0,
                               0,
                               0,
                               0xFFFFFFFFFFFFFFFE,
                               0xFFFFFFFFFFFFFFFF,
                               0xFFFFFFFFFFFFFFFF,
                               0xFFFFFFFFFFFFFFFF);
    fio_u256_mul(&result, &a, &b);
    buf[fio_u512_hex_write((char *)buf, &result)] = 0;

    FIO_ASSERT(!FIO_MEMCMP(&result, &expected, sizeof(result)),
               "Max * Max should be (Max << 256) + 1\n\t0x%s",
               buf);
    FIO_ASSERT(!fio_u512_cmp(&result, &expected),
               "fio_u512_cmp failed for Max * Max result.");
  }
  {
    fprintf(stderr,
            "* Testing Basic vector operations for fio_uXXX (fio_u256).\n");
    for (uint64_t a = 1; a; a = ((a << 2) | (((a >> 62) & 1) ^ 1))) {
      for (uint64_t b = 2; b; b = ((b << 2) | (((b >> 62) & 2) ^ 2))) {
        uint64_t expected[8] = {1, ~0, 4, ~0};
        uint64_t na[4] = {a, a, a, a};
        uint64_t nb[4] = {b, b, b, b};
        fio_u512 result = fio_u512_init64(~0, 1, ~0, 4);
        fio_u256 ua = fio_u256_init64(a, a, a, a);
        fio_u256 ub = fio_u256_init64(b, b, b, b);

        fio_u64x4_add(expected, na, nb);
        fio_u256_add64(&result.u256[0], &ua, &ub);
        FIO_ASSERT(
            !memcmp(result.u256[0].u64, expected, sizeof(result.u256[0].u64)),
            "Basic vector ADD error");

        fio_u64x4_sub(expected, na, nb);
        fio_u256_sub64(&result.u256[0], &ua, &ub);
        FIO_ASSERT(
            !memcmp(result.u256[0].u64, expected, sizeof(result.u256[0].u64)),
            "Basic vector SUB error");

        fio_u64x4_mul(expected, na, nb);
        fio_u256_mul64(&result.u256[0], &ua, &ub);
        FIO_ASSERT(
            !memcmp(result.u256[0].u64, expected, sizeof(result.u256[0].u64)),
            "Basic vector MUL error");

        /* the following will probably never detect an error */

        (void)fio_math_add(expected, na, nb, 4);
        (void)fio_u256_add(&result.u256[0], &ua, &ub);
        FIO_ASSERT(
            !memcmp(result.u256[0].u64, expected, sizeof(result.u256[0].u64)),
            "Multi-Precision ADD error");

        (void)fio_math_sub(expected, na, nb, 4);
        (void)fio_u256_sub(&result.u256[0], &ua, &ub);
        FIO_ASSERT(
            !memcmp(result.u256[0].u64, expected, sizeof(result.u256[0].u64)),
            "Multi-Precision SUB error");

        fio___math_mul_long(expected, na, nb, 4); /* test possible difference */
        fio_u256_mul(&result, &ua, &ub);
        FIO_ASSERT(!memcmp(result.u64, expected, sizeof(result.u64)),
                   "Multi-Precision MUL error");
      }
    }
  }
}
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_MODULE_NAME Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_MODULE_NAME_TEST___H)
#define H___FIO_MODULE_NAME_TEST___H
// #ifndef H___FIO_MODULE_NAME___H
// #define FIO_MODULE_NAME
// #define FIO___TEST_REINCLUDE
// #include FIO_INCLUDE_FILE
// #undef FIO___TEST_REINCLUDE
// #endif

FIO_SFUNC void FIO_NAME_TEST(stl, FIO_MODULE_NAME)(void) {}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_FILES Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_FILES_TEST___H)
#define H___FIO_FILES_TEST___H
#ifndef H___FIO_FILES___H
#define FIO_FILES
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

FIO_SFUNC void FIO_NAME_TEST(stl, files)(void) {
  fprintf(stderr, "* Testing file utilities (partial).\n");
  struct {
    const char *str;
    fio_filename_s result;
  } filename_test[] = {
      // clang-format off
      {.str = "/", .result = {.folder = FIO_BUF_INFO2((char*)0, 1), .basename = FIO_BUF_INFO2(NULL, 0), .ext = FIO_BUF_INFO2(NULL, 0)}},
      {.str = "/.", .result = {.folder = FIO_BUF_INFO2((char*)0, 1), .basename = FIO_BUF_INFO2((char*)1, 1), .ext = FIO_BUF_INFO2(NULL, 0)}},
      {.str = "/..", .result = {.folder = FIO_BUF_INFO2((char*)0, 1), .basename = FIO_BUF_INFO2((char*)1, 2), .ext = FIO_BUF_INFO2(NULL, 0)}},
      {.str = "name", .result = {.folder = FIO_BUF_INFO2(NULL, 0), .basename = FIO_BUF_INFO2(0, 4), .ext = FIO_BUF_INFO2(NULL, 0)}},
      {.str = "name.ext", .result = {.folder = FIO_BUF_INFO2(NULL, 0), .basename = FIO_BUF_INFO2((char*)0, 4), .ext = FIO_BUF_INFO2((char*)5, 3)}},
      {.str = ".name", .result = {.folder = FIO_BUF_INFO2(NULL, 0), .basename = FIO_BUF_INFO2((char*)0, 5), .ext = FIO_BUF_INFO2(NULL, 0)}},
      {.str = "/.name", .result = {.folder = FIO_BUF_INFO2((char*)0, 1), .basename = FIO_BUF_INFO2((char*)1, 5), .ext = FIO_BUF_INFO2(NULL, 0)}},
      {.str = "/my_folder/.name", .result = {.folder = FIO_BUF_INFO2((char*)0, 11), .basename = FIO_BUF_INFO2((char*)11, 5), .ext = FIO_BUF_INFO2(NULL, 0)}},
      {.str = "/my_folder/name.ext", .result = {.folder = FIO_BUF_INFO2((char*)0, 11), .basename = FIO_BUF_INFO2((char*)11, 4), .ext = FIO_BUF_INFO2((char*)16, 3)}},
      {.str = NULL}, // clang-format on
  };
  for (size_t i = 0; filename_test[i].str; ++i) {
    fio_filename_s r = fio_filename_parse(filename_test[i].str);
    FIO_ASSERT(
        r.folder.len == filename_test[i].result.folder.len &&
            r.basename.len == filename_test[i].result.basename.len &&
            r.ext.len == filename_test[i].result.ext.len &&
            ((!r.folder.buf && !filename_test[i].result.folder.len) ||
             r.folder.buf == (filename_test[i].str +
                              (size_t)filename_test[i].result.folder.buf)) &&
            ((!r.basename.buf && !filename_test[i].result.basename.len) ||
             r.basename.buf ==
                 (filename_test[i].str +
                  (size_t)filename_test[i].result.basename.buf)) &&
            ((!r.ext.buf && !filename_test[i].result.ext.len) ||
             r.ext.buf == (filename_test[i].str +
                           (size_t)filename_test[i].result.ext.buf)),
        "fio_filename_parse error for %s"
        "\n\t folder:    (%zu) %.*s (%p)"
        "\n\t basename:  (%zu) %.*s (%p)"
        "\n\t extension: (%zu) %.*s (%p)",
        filename_test[i].str,
        r.folder.len,
        (int)r.folder.len,
        (r.folder.buf ? r.folder.buf : "null"),
        r.folder.buf,
        r.basename.len,
        (int)r.basename.len,
        (r.basename.buf ? r.basename.buf : "null"),
        r.basename.buf,
        r.ext.len,
        (int)r.ext.len,
        (r.ext.buf ? r.ext.buf : "null"),
        r.ext.buf);
  }
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_FIOBJ Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_FIOBJ_TEST___H)
#define H___FIO_FIOBJ_TEST___H
#ifndef H___FIO_FIOBJ___H
#define FIO_FIOBJ
#define FIOBJ_MALLOC
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

#define FIOBJ_TEST_REPETITIONS 4096

FIO_SFUNC int FIO_NAME_TEST(stl, fiobj_task)(fiobj_each_s *e) {
  static size_t index = 0;
  if (!e) {
    index = 0;
    return -1;
  }
  int *expect = (int *)e->udata;
  FIO_ASSERT(e->key == FIOBJ_INVALID, "key is set in an Array loop?");
  if (expect[index] == -1) {
    FIO_ASSERT(FIOBJ_TYPE(e->value) == FIOBJ_T_ARRAY,
               "each2 ordering issue [%zu] (array).",
               index);
  } else {
    FIO_ASSERT(FIO_NAME2(fiobj, i)(e->value) == expect[index],
               "each2 ordering issue [%zu] (number) %ld != %d",
               index,
               FIO_NAME2(fiobj, i)(e->value),
               expect[index]);
  }
  ++index;
  return 0;
}

FIO_SFUNC void FIO_NAME_TEST(stl, fiobj)(void) {
  FIOBJ o = FIOBJ_INVALID;
  if (!FIOBJ_MARK_MEMORY_ENABLED) {
    FIO_LOG_WARNING("FIOBJ defined without allocation counter. "
                    "Tests might not be complete.");
  }
  /* primitives - (in)sanity */
  {
    fprintf(stderr, "* Testing FIOBJ primitives.\n");
    FIO_ASSERT(FIOBJ_TYPE(o) == FIOBJ_T_NULL,
               "invalid FIOBJ type should be FIOBJ_T_NULL.");
    FIO_ASSERT(!FIO_NAME_BL(fiobj, eq)(o, FIO_NAME(fiobj, FIOBJ___NAME_NULL)()),
               "invalid FIOBJ is NOT a fiobj_null().");
    FIO_ASSERT(!FIO_NAME_BL(fiobj, eq)(fiobj_true(),
                                       FIO_NAME(fiobj, FIOBJ___NAME_NULL)()),
               "fiobj_true() is NOT fiobj_null().");
    FIO_ASSERT(!FIO_NAME_BL(fiobj, eq)(fiobj_false(),
                                       FIO_NAME(fiobj, FIOBJ___NAME_NULL)()),
               "fiobj_false() is NOT fiobj_null().");
    FIO_ASSERT(!FIO_NAME_BL(fiobj, eq)(fiobj_false(), fiobj_true()),
               "fiobj_false() is NOT fiobj_true().");
    FIO_ASSERT(FIOBJ_TYPE(FIO_NAME(fiobj, FIOBJ___NAME_NULL)()) == FIOBJ_T_NULL,
               "fiobj_null() type should be FIOBJ_T_NULL.");
    FIO_ASSERT(FIOBJ_TYPE(fiobj_true()) == FIOBJ_T_TRUE,
               "fiobj_true() type should be FIOBJ_T_TRUE.");
    FIO_ASSERT(FIOBJ_TYPE(fiobj_false()) == FIOBJ_T_FALSE,
               "fiobj_false() type should be FIOBJ_T_FALSE.");
    FIO_ASSERT(FIO_NAME_BL(fiobj, eq)(FIO_NAME(fiobj, FIOBJ___NAME_NULL)(),
                                      FIO_NAME(fiobj, FIOBJ___NAME_NULL)()),
               "fiobj_null() should be equal to self.");
    FIO_ASSERT(FIO_NAME_BL(fiobj, eq)(fiobj_true(), fiobj_true()),
               "fiobj_true() should be equal to self.");
    FIO_ASSERT(FIO_NAME_BL(fiobj, eq)(fiobj_false(), fiobj_false()),
               "fiobj_false() should be equal to self.");
  }
  {
    fprintf(stderr, "* Testing FIOBJ integers.\n");
    uint8_t allocation_flags = 0;
    for (uint8_t bit = 0; bit < (sizeof(intptr_t) * 8) - 4; ++bit) {
      uintptr_t i = ((uintptr_t)1 << bit) + 1;
      uintptr_t m = (uintptr_t)0 - i;
      o = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), new)((intptr_t)i);
      FIO_ASSERT(FIOBJ_TYPE_CLASS(o) == FIOBJ_T_NUMBER,
                 "FIOBJ integer allocation wasn't supposed to happen for %zd",
                 (size_t)i);
      o = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), new)((intptr_t)m);
      FIO_ASSERT(FIOBJ_TYPE_CLASS(o) == FIOBJ_T_NUMBER,
                 "FIOBJ integer allocation wasn't supposed to happen for %zd",
                 (size_t)m);
    }
    for (uint8_t bit = 0; bit < (sizeof(intptr_t) * 8); ++bit) {
      uintptr_t i = (uintptr_t)1 << bit;
      o = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), new)((intptr_t)i);
      FIO_ASSERT(FIO_NAME2(fiobj, i)(o) == (intptr_t)i,
                 "Number not reversible at bit %d (%zd != %zd)!",
                 (int)bit,
                 (ssize_t)FIO_NAME2(fiobj, i)(o),
                 (ssize_t)i);
      fio_str_info_s str = FIO_NAME2(fiobj, cstr)(o);
      char *str_buf = str.buf;
      FIO_ASSERT(fio_atol(&str_buf) == (intptr_t)i,
                 "Number atol not reversible at bit %d (%s != %zd)!",
                 (int)bit,
                 str.buf,
                 (ssize_t)i);
      allocation_flags |= (FIOBJ_TYPE_CLASS(o) == FIOBJ_T_NUMBER) ? 1 : 2;
      fiobj_free(o);
    }
    FIO_ASSERT(allocation_flags == 3,
               "no bits are allocated / no allocations optimized away (%d)",
               (int)allocation_flags);
  }
  {
    fprintf(stderr, "* Testing FIOBJ floats.\n");
    uint8_t allocation_flags = 0;
    for (uint8_t bit = 0; bit < (sizeof(double) * 8); ++bit) {
      union {
        double d;
        uint64_t i;
      } punned;
      punned.i = (uint64_t)1 << bit;
      o = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), new)(punned.d);
      FIO_ASSERT(FIO_NAME2(fiobj, f)(o) == punned.d,
                 "Float not reversible at bit %d (%lf != %lf)!",
                 (int)bit,
                 FIO_NAME2(fiobj, f)(o),
                 punned.d);

      fio_str_info_s str = FIO_NAME2(fiobj, cstr)(o);
      char buf_tmp[32];
      FIO_ASSERT(fio_ftoa(buf_tmp, FIO_NAME2(fiobj, f)(o), 10) == str.len,
                 "fio_atof length didn't match Float's fiobj2cstr length.");
      FIO_ASSERT(!memcmp(str.buf, buf_tmp, str.len),
                 "fio_atof string didn't match Float's fiobj2cstr.");
      allocation_flags |= (FIOBJ_TYPE_CLASS(o) == FIOBJ_T_FLOAT) ? 1 : 2;
      fiobj_free(o);
    }
    FIO_ASSERT(allocation_flags == 3,
               "no bits are allocated / no allocations optimized away (%d)",
               (int)allocation_flags);
  }
  {
    fprintf(stderr, "* Testing FIOBJ each2.\n");
    FIOBJ a = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), new)();
    o = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), new)();
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(o, a);
    for (size_t i = 1; i < 10; ++i) // 1, 2, 3 ... 10
    {
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)
      (a, FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), new)(i));
      if (i % 3 == 0) {
        a = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), new)();
        FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(o, a);
      }
    }
    int expectation[] =
        {-1 /* array */, -1, 1, 2, 3, -1, 4, 5, 6, -1, 7, 8, 9, -1};
    size_t c =
        fiobj_each2(o, FIO_NAME_TEST(stl, fiobj_task), (void *)expectation);
    FIO_ASSERT(c == FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), count)(o) +
                        9 + 1,
               "each2 repetition count error");
    fiobj_free(o);
    FIO_NAME_TEST(stl, fiobj_task)(NULL);
  }
  {
    fprintf(stderr, "* Testing FIOBJ JSON handling.\n");
    char json[] =
        "                    "
        "\n# comment 1"
        "\n// comment 2"
        "\n/* comment 3 */"
        "{\"true\":true,\"false\":false,\"null\":null,\"array\":[1,2,3,4.2,"
        "\"five\"],"
        "\"string\":\"hello\\tjson\\bworld!\\r\\n\",\"hash\":{\"true\":true,"
        "\"false\":false},\"array2\":[1,2,3,4.2,\"five\",{\"hash\":true},[{"
        "\"hash\":{\"true\":true}}]]}";
    o = fiobj_json_parse2(json, FIO_STRLEN(json), NULL);
    FIO_ASSERT(o, "JSON parsing failed - no data returned.");
    FIO_ASSERT(fiobj_json_find2(o, (char *)"array2[6][0].hash.true", 22) ==
                   fiobj_true(),
               "fiobj_json_find2 failed");
    FIOBJ j = FIO_NAME2(fiobj, json)(FIOBJ_INVALID, o, 0);
#ifdef DEBUG
    fprintf(stderr, "JSON: %s\n", FIO_NAME2(fiobj, cstr)(j).buf);
#endif
    FIO_ASSERT(FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(j) ==
                   FIO_STRLEN(json + 61),
               "JSON roundtrip failed (length error %zu != %zu).\n%s\n%s",
               (size_t)FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(j),
               (size_t)FIO_STRLEN(json + 61),
               FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(j),
               json + 61);
    FIO_ASSERT(!memcmp(json + 61,
                       FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(j),
                       FIO_STRLEN(json + 61)),
               "JSON roundtrip failed (data error).");
    fiobj_free(o);
    fiobj_free(j);
    o = FIOBJ_INVALID;
  }
  {
    fprintf(stderr, "* Testing FIOBJ array equality test (fiobj_is_eq).\n");
    FIOBJ a1 = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), new)();
    FIOBJ a2 = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), new)();
    FIOBJ n1 = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), new)();
    FIOBJ n2 = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), new)();
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(a1, fiobj_null());
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(a2, fiobj_null());
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(n1, fiobj_true());
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(n2, fiobj_true());
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(a1, n1);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(a2, n2);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)
    (a1, FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), new_cstr)("test", 4));
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)
    (a2, FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), new_cstr)("test", 4));
    FIO_ASSERT(FIO_NAME_BL(fiobj, eq)(a1, a2), "equal arrays aren't equal?");
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(n1, fiobj_null());
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(n2, fiobj_false());
    FIO_ASSERT(!FIO_NAME_BL(fiobj, eq)(a1, a2), "unequal arrays are equal?");
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), remove)(n1, -1, NULL);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), remove)(n2, -1, NULL);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), remove)(a1, 0, NULL);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), remove)(a2, -1, NULL);
    FIO_ASSERT(!FIO_NAME_BL(fiobj, eq)(a1, a2), "unequal arrays are equal?");
    fiobj_free(a1);
    fiobj_free(a2);
  }
  {
    fprintf(stderr, "* Testing FIOBJ array ownership.\n");
    FIOBJ a = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), new)();
    for (size_t i = 1; i <= FIOBJ_TEST_REPETITIONS; ++i) {
      FIOBJ tmp = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING),
                           new_cstr)("number: ", 8);
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write_i)(tmp, i);
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(a, tmp);
    }
    FIOBJ shifted = FIOBJ_INVALID;
    FIOBJ popped = FIOBJ_INVALID;
    FIOBJ removed = FIOBJ_INVALID;
    FIOBJ set = FIOBJ_INVALID;
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), shift)(a, &shifted);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), pop)(a, &popped);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), set)
    (a, 1, fiobj_true(), &set);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), remove)(a, 2, &removed);
    fiobj_free(a);
    if (1) {
      FIO_ASSERT(
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(popped) ==
                  FIO_STRLEN(
                      "number: " FIO_MACRO2STR(FIOBJ_TEST_REPETITIONS)) &&
              !memcmp(
                  "number: " FIO_MACRO2STR(FIOBJ_TEST_REPETITIONS),
                  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(popped),
                  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(popped)),
          "Object popped from Array lost it's value %s",
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(popped));
      FIO_ASSERT(FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(shifted) ==
                         9 &&
                     !memcmp("number: 1",
                             FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING),
                                      ptr)(shifted),
                             9),
                 "Object shifted from Array lost it's value %s",
                 FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(shifted));
      FIO_ASSERT(
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(set) == 9 &&
              !memcmp("number: 3",
                      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(set),
                      9),
          "Object retrieved from Array using fiobj_array_set() lost it's "
          "value %s",
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(set));
      FIO_ASSERT(
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(removed) == 9 &&
              !memcmp(
                  "number: 4",
                  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(removed),
                  9),
          "Object retrieved from Array using fiobj_array_set() lost it's "
          "value %s",
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(removed));
    }
    fiobj_free(shifted);
    fiobj_free(popped);
    fiobj_free(set);
    fiobj_free(removed);
  }
  {
    fprintf(stderr, "* Testing FIOBJ array ownership after concat.\n");
    FIOBJ a1, a2;
    a1 = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), new)();
    a2 = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), new)();
    for (size_t i = 0; i < FIOBJ_TEST_REPETITIONS; ++i) {
      FIOBJ str = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), new)();
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write_i)(str, i);
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(a1, str);
    }
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), concat)(a2, a1);
    fiobj_free(a1);
    for (size_t i = 0; i < FIOBJ_TEST_REPETITIONS; ++i) {
      FIOBJ_STR_TEMP_VAR(tmp);
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write_i)(tmp, i);
      FIO_ASSERT(
          FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(
              FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), get)(a2, i)) ==
              FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(tmp),
          "string length zeroed out - string freed?");
      FIO_ASSERT(
          !memcmp(
              FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(tmp),
              FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(
                  FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), get)(a2, i)),
              FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(tmp)),
          "string data error - string freed?");
      FIOBJ_STR_TEMP_DESTROY(tmp);
    }
    fiobj_free(a2);
  }
  {
    fprintf(stderr, "* Testing FIOBJ hash ownership.\n");
    o = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), new)();
    for (size_t i = 1; i <= FIOBJ_TEST_REPETITIONS; ++i) {
      FIOBJ tmp = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING),
                           new_cstr)("number: ", 8);
      FIOBJ k = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), new)(i);
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write_i)(tmp, i);
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), set)
      (o, k, fiobj_dup(tmp), NULL);
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), set_if_missing)(o, k, tmp);
      fiobj_free(k);
    }

    FIOBJ set = FIOBJ_INVALID;
    FIOBJ removed = FIOBJ_INVALID;
    FIOBJ k = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), new)(1);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), remove)(o, k, &removed);
    fiobj_free(k);
    k = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), new)(2);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), set)(o, k, fiobj_true(), &set);
    fiobj_free(k);
    FIO_ASSERT(set, "fiobj_hash_set didn't copy information to old pointer?");
    FIO_ASSERT(removed,
               "fiobj_hash_remove didn't copy information to old pointer?");
    // fiobj_hash_set(o, uintptr_t hash, FIOBJ key, FIOBJ value, FIOBJ *old)
    FIO_ASSERT(
        FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(removed) ==
                FIO_STRLEN("number: 1") &&
            !memcmp(
                "number: 1",
                FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(removed),
                FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(removed)),
        "Object removed from Hash lost it's value %s",
        FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(removed));
    FIO_ASSERT(
        FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(set) ==
                FIO_STRLEN("number: 2") &&
            !memcmp("number: 2",
                    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(set),
                    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(set)),
        "Object removed from Hash lost it's value %s",
        FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(set));

    fiobj_free(removed);
    fiobj_free(set);
    fiobj_free(o);
  }

#if FIOBJ_MARK_MEMORY
  {
    fprintf(stderr, "* Testing FIOBJ for memory leaks.\n");
    FIOBJ a = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), new)();
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), reserve)(a, 64);
    for (uint8_t bit = 0; bit < (sizeof(intptr_t) * 8); ++bit) {
      uintptr_t i = (uintptr_t)1 << bit;
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)
      (a, FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_NUMBER), new)((intptr_t)i));
    }
    FIOBJ h = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), new)();
    FIOBJ key = FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), new)();
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)(key, "array", 5);
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), set)(h, key, a);
    FIO_ASSERT(FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_HASH), get)(h, key) == a,
               "FIOBJ Hash retrieval failed");
    FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)(a, key);
    if (0) {
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)
      (a, FIO_NAME(fiobj, FIOBJ___NAME_NULL)());
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)
      (a, fiobj_true());
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)
      (a, fiobj_false());
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_ARRAY), push)
      (a, FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_FLOAT), new)(0.42));

      FIOBJ json = FIO_NAME2(fiobj, json)(FIOBJ_INVALID, h, 0);
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write)(json, "\n", 1);
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), reserve)
      (json,
       FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(json)
           << 1); /* prevent memory realloc */
      FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), write_escape)
      (json,
       FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), ptr)(json),
       FIO_NAME(FIO_NAME(fiobj, FIOBJ___NAME_STRING), len)(json) - 1);
      fprintf(stderr, "%s\n", FIO_NAME2(fiobj, cstr)(json).buf);
      fiobj_free(json);
    }
    fiobj_free(h);
    FIOBJ_MARK_MEMORY_PRINT();
    FIO_ASSERT(FIOBJ_MARK_MEMORY_ALLOC_COUNTER ==
                   FIOBJ_MARK_MEMORY_FREE_COUNTER,
               "FIOBJ leak detected (freed %zu/%zu)",
               FIOBJ_MARK_MEMORY_FREE_COUNTER,
               FIOBJ_MARK_MEMORY_ALLOC_COUNTER);
  }
#endif
  fprintf(stderr, "* Passed.\n");
}
#undef FIOBJ_TEST_REPETITIONS
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_GLOB_MATCH Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_GLOB_MATCH_TEST___H)
#define H___FIO_GLOB_MATCH_TEST___H

#ifndef H___FIO_GLOB_MATCH___H
#define FIO_GLOB_MATCH
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

FIO_SFUNC void FIO_NAME_TEST(stl, glob_matching)(void) {
  struct {
    char *pat;
    char *str;
    uint8_t expect;
  } t[] = {
      // clang-format off
      /* test empty string */
      {.pat = (char *)"", .str = (char *)"", .expect = 1},
      /* test exact match */
      {.pat = (char *)"a", .str = (char *)"a", .expect = 1},
      /* test empty pattern */
      {.pat = (char *)"", .str = (char *)"a", .expect = 0},
      /* test longer pattern */
      {.pat = (char *)"a", .str = (char *)"", .expect = 0},
      /* test empty string with glob pattern */
      {.pat = (char *)"*", .str = (char *)"", .expect = 1},
      /* test glob pattern */
      {.pat = (char *)"*", .str = (char *)"Whatever", .expect = 1},
      /* test glob pattern at end */
      {.pat = (char *)"W*", .str = (char *)"Whatever", .expect = 1},
      /* test glob pattern as bookends */
      {.pat = (char *)"*Whatever*", .str = (char *)"Whatever", .expect = 1},
      /* test glob pattern in the middle */
      {.pat = (char *)"W*er", .str = (char *)"Whatever", .expect = 1},
      /* test glob pattern in the middle - empty match*/
      {.pat = (char *)"W*hatever", .str = (char *)"Whatever", .expect = 1},
      /* test glob pattern in the middle  - no match */
      {.pat = (char *)"W*htever", .str = (char *)"Whatever", .expect = 0},
      /* test partial match with glob at end */
      {.pat = (char *)"h*", .str = (char *)"Whatever", .expect = 0},
      /* test partial match with glob in the middle */
      {.pat = (char *)"h*er", .str = (char *)"Whatever", .expect = 0},
      /* test glob match with "?"  */
      {.pat = (char *)"?h*er", .str = (char *)"Whatever", .expect = 1},
      /* test "?" for length restrictions */
      {.pat = (char *)"?", .str = (char *)"Whatever", .expect = 0},
      /* test ? in the middle */
      {.pat = (char *)"What?ver", .str = (char *)"Whatever", .expect = 1},
      /* test letter list */
      {.pat = (char *)"[ASW]hat?ver", .str = (char *)"Whatever", .expect = 1},
      /* test letter range */
      {.pat = (char *)"[A-Z]hat?ver", .str = (char *)"Whatever", .expect = 1},
      /* test letter range (fail) */
      {.pat = (char *)"[a-z]hat?ver", .str = (char *)"Whatever", .expect = 0},
      /* test inverted letter range */
      {.pat = (char *)"[!a-z]hat?ver", .str = (char *)"Whatever", .expect = 1},
      /* test inverted list */
      {.pat = (char *)"[!F]hat?ver", .str = (char *)"Whatever", .expect = 1},
      /* test escaped range */
      {.pat = (char *)"[!a-z\\]]hat?ver", .str = (char *)"Whatever", .expect = 1},
      /* test "?" after range (no skip) */
      {.pat = (char *)"[A-Z]?at?ver", .str = (char *)"Whatever", .expect = 1},
      /* test error after range (no skip) */
      {.pat = (char *)"[A-Z]Fat?ver", .str = (char *)"Whatever", .expect = 0},
      /* end of test marker */
      {.pat = (char *)NULL, .str = (char *)NULL, .expect = 0},
      // clang-format on
  };
  fprintf(stderr, "* Testing glob matching.\n");
  for (size_t i = 0; t[i].pat; ++i) {
    fio_str_info_s p = FIO_STR_INFO1(t[i].pat);
    fio_str_info_s s = FIO_STR_INFO1(t[i].str);
    FIO_ASSERT(t[i].expect == fio_glob_match(p, s),
               "glob matching error for:\n\t String: %s\n\t Pattern: %s",
               s.buf,
               p.buf);
  }
}
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        fio_http_s Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_HTTP_HANDLE_TEST___H)
#define H___FIO_HTTP_HANDLE_TEST___H
// #ifndef H___FIO_MODULE_NAME___H
// #define FIO_MODULE_NAME
// #define FIO___TEST_REINCLUDE
// #include FIO_INCLUDE_FILE
// #undef FIO___TEST_REINCLUDE
// #endif

FIO_SFUNC void FIO_NAME_TEST(stl, http_s)(void) {
  fprintf(stderr, "* Testing HTTP handle (fio_http_s).\n");
  fio_http_s *h = fio_http_new();
  FIO_ASSERT(!fio_http_cdata(h), "fio_http_cdata should start as NULL");
  fio_http_cdata_set(h, (void *)(uintptr_t)42);
  FIO_ASSERT((uintptr_t)fio_http_cdata(h) == 42,
             "fio_http_cdata roundtrip error");
  FIO_ASSERT(!fio_http_udata(h), "fio_http_udata should start as NULL");
  fio_http_udata_set(h, (void *)(uintptr_t)43);
  FIO_ASSERT((uintptr_t)fio_http_udata(h) == 43,
             "fio_http_udata roundtrip error");
  FIO_ASSERT(!fio_http_udata2(h), "fio_http_udata2 should start as NULL");
  fio_http_udata2_set(h, (void *)(uintptr_t)44);
  FIO_ASSERT((uintptr_t)fio_http_udata2(h) == 44,
             "fio_http_udata2 roundtrip error");

  FIO_ASSERT(!fio_http_status(h), "fio_http_status should start as NULL");
  fio_http_status_set(h, 101);
  FIO_ASSERT((uintptr_t)fio_http_status(h) == 101,
             "fio_http_status roundtrip error");

  FIO_ASSERT(!fio_http_method(h).buf, "fio_http_method should start as empty");
  fio_http_method_set(h, FIO_STR_INFO1((char *)"POST"));
  FIO_ASSERT(
      FIO_STR_INFO_IS_EQ(fio_http_method(h), FIO_STR_INFO1((char *)"POST")),
      "fio_http_method roundtrip error");

  FIO_ASSERT(!fio_http_path(h).buf, "fio_http_path should start as empty");
  fio_http_path_set(h, FIO_STR_INFO1((char *)"/path"));
  FIO_ASSERT(
      FIO_STR_INFO_IS_EQ(fio_http_path(h), FIO_STR_INFO1((char *)"/path")),
      "fio_http_path roundtrip error");

  FIO_ASSERT(!fio_http_query(h).buf, "fio_http_query should start as empty");
  fio_http_query_set(h, FIO_STR_INFO1((char *)"query=null"));
  FIO_ASSERT(FIO_STR_INFO_IS_EQ(fio_http_query(h),
                                FIO_STR_INFO1((char *)"query=null")),
             "fio_http_query roundtrip error");

  FIO_ASSERT(!fio_http_version(h).buf,
             "fio_http_version should start as empty");
  fio_http_version_set(h, FIO_STR_INFO1((char *)"HTTP/1.1"));
  FIO_ASSERT(FIO_STR_INFO_IS_EQ(fio_http_version(h),
                                FIO_STR_INFO1((char *)"HTTP/1.1")),
             "fio_http_version roundtrip error");

  { /* test multiple header support */
    fio_str_info_s test_data[] = {
        FIO_STR_INFO1((char *)"header-name"),
        FIO_STR_INFO1(
            (char *)"a long enough value to require memory allocation 001"),
        FIO_STR_INFO1(
            (char *)"a long enough value to require memory allocation 002"),
        FIO_STR_INFO1(
            (char *)"a long enough value to require memory allocation 003"),
        FIO_STR_INFO1(
            (char *)"a long enough value to require memory allocation 004"),
        FIO_STR_INFO1(
            (char *)"a long enough value to require memory allocation 005"),
        FIO_STR_INFO1(
            (char *)"a long enough value to require memory allocation 006"),
        FIO_STR_INFO1(
            (char *)"a long enough value to require memory allocation 007"),
        FIO_STR_INFO1(
            (char *)"a long enough value to require memory allocation 008"),
    };
    size_t count = sizeof(test_data) / sizeof(test_data[0]);
    FIO_ASSERT(!fio_http_request_header(h, test_data[0], 0).buf,
               "fio_http_request_header should start as empty");
    FIO_ASSERT(!fio_http_response_header(h, test_data[0], 0).buf,
               "fio_http_response_header should start as empty");
    for (size_t i = 1; i < count; ++i) {
      FIO_ASSERT(!fio_http_request_header(h, test_data[0], i - 1ULL).buf,
                 "fio_http_request_header index (%zu) should start as empty",
                 (size_t)(i - 1ULL));
      FIO_ASSERT(!fio_http_response_header(h, test_data[0], i - 1ULL).buf,
                 "fio_http_response_header index (%zu) should start as empty",
                 (size_t)(i - 1ULL));
      fio_str_info_s req_h =
          fio_http_request_header_add(h, test_data[0], test_data[i]);
      fio_str_info_s res_h =
          fio_http_response_header_add(h, test_data[0], test_data[i]);
      FIO_ASSERT(FIO_STR_INFO_IS_EQ(req_h, test_data[i]),
                 "fio_http_request_header_set error");
      FIO_ASSERT(FIO_STR_INFO_IS_EQ(res_h, test_data[i]),
                 "fio_http_response_header_set error");
      req_h = fio_http_request_header(h, test_data[0], i - 1ULL);
      res_h = fio_http_response_header(h, test_data[0], i - 1ULL);
      FIO_ASSERT(FIO_STR_INFO_IS_EQ(req_h, test_data[i]),
                 "fio_http_request_header_set error");
      FIO_ASSERT(FIO_STR_INFO_IS_EQ(res_h, test_data[i]),
                 "fio_http_response_header_set error");
    }
    for (size_t i = 0; i < count - 1; ++i) {
      fio_str_info_s req_h = fio_http_request_header(h, test_data[0], i);
      fio_str_info_s res_h = fio_http_response_header(h, test_data[0], i);
      FIO_ASSERT(FIO_STR_INFO_IS_EQ(req_h, test_data[i + 1]),
                 "fio_http_request_header_set error");
      FIO_ASSERT(FIO_STR_INFO_IS_EQ(res_h, test_data[i + 1]),
                 "fio_http_response_header_set error");
    }
    fio_http_request_header_set(h, test_data[0], test_data[1]);
    fio_http_response_header_set(h, test_data[0], test_data[1]);
    FIO_ASSERT(!fio_http_request_header(h, test_data[0], 1ULL).buf,
               "fio_http_request_header_set index should reset header values");
    FIO_ASSERT(!fio_http_response_header(h, test_data[0], 1ULL).buf,
               "fio_http_response_header_set index should reset header values");
  }
  { /* test body writer */
    size_t written = 0;
    do {
      union {
        char buf[32];
        uint64_t u64[4];
        void *p[4];
      } w, r;
      fio_rand_bytes(r.buf, sizeof(r.buf));
      fio_http_body_write(h, r.buf, sizeof(r.buf));
      fio_http_body_seek(h, written);
      fio_str_info_s got = fio_http_body_read(h, sizeof(r.buf));
      FIO_MEMSET(w.buf, 0, sizeof(w.buf));
      FIO_MEMCPY(w.buf, got.buf, got.len);
      written += sizeof(r.buf);
      FIO_ASSERT(written == fio_http_body_length(h),
                 "fio_http_body_length error (%zu != %zu)",
                 fio_http_body_length(h),
                 written);
      FIO_ASSERT(FIO_STR_INFO_IS_EQ(FIO_STR_INFO2(r.buf, sizeof(r.buf)), got),
                 "fio_http_body_write-fio_http_body_read roundtrip error @ %zu"
                 "\n\t expected (32):\t%p%p%p%p)"
                 "\n\t got (%zu):     \t%p%p%p%p)",
                 written - sizeof(r.buf),
                 r.p[0],
                 r.p[1],
                 r.p[2],
                 r.p[3],
                 got.len,
                 w.p[0],
                 w.p[1],
                 w.p[2],
                 w.p[3]);
    } while (written < (FIO_HTTP_BODY_RAM_LIMIT << 1));
    fio_http_body_seek(h, 0);
    fio_http_body_write(h, "\n1234", 5);
    fio_str_info_s ln = fio_http_body_read_until(h, '\n', 0);
    FIO_ASSERT(ln.buf && ln.len && ln.buf[ln.len - 1] == '\n',
               "fio_http_body_read_until token error");
  }

  /* almost done, just make sure reference counting doesn't destroy object */
  fio_http_free(fio_http_dup(h));
  FIO_ASSERT(
      (uintptr_t)fio_http_udata2(h) == 44 &&
          FIO_STR_INFO_IS_EQ(fio_http_method(h), FIO_STR_INFO1((char *)"POST")),
      "fio_http_s reference counting shouldn't object");

  fio_http_free(h);
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_IMAP_CORE Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_IMAP_CORE_TEST___H)
#define H___FIO_IMAP_CORE_TEST___H

#ifndef H___FIO_IMAP_CORE___H
#define FIO_IMAP_CORE
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

#define FIO_IMAP_TESTER_IMAP_HASH(n)   ((n)[0] | ((n)[0] << 9))
#define FIO_IMAP_TESTER_IMAP_CMP(a, b) (*(a) == *(b))
#define FIO_IMAP_TESTER_IMAP_VALID(n)  ((n)[0])
FIO_TYPEDEF_IMAP_ARRAY(fio_imap_tester,
                       size_t,
                       uint32_t, /* good for up to 65K objects */
                       FIO_IMAP_TESTER_IMAP_HASH,
                       FIO_IMAP_TESTER_IMAP_CMP,
                       FIO_IMAP_TESTER_IMAP_VALID)

#undef FIO_IMAP_TESTER_IMAP_HASH
#undef FIO_IMAP_TESTER_IMAP_CMP
#undef FIO_IMAP_TESTER_IMAP_VALID

FIO_SFUNC void FIO_NAME_TEST(stl, imap_core)(void) {
  fprintf(stderr, "* Testing core indexed array type (imap).\n");
  fio_imap_tester_s a = {0};
  fio_imap_tester_reserve(&a, 1024);
  FIO_ASSERT(fio_imap_tester_capa(&a) >= 1024 &&
                 fio_imap_tester_capa(&a) < 4096,
             "fio_imap_tester_reserve failed");
  for (size_t val = 1; val < 4096; ++val) {
    size_t *pobj = fio_imap_tester_set(&a, val, 1);
    FIO_ASSERT(a.count == val, "imap array count failed at set %zu!", val);
    size_t *ptmp = fio_imap_tester_set(&a, val, 0);
    FIO_ASSERT(ptmp == pobj,
               "fio_imap_tester_set should return pointer to existing item");
    ptmp = fio_imap_tester_set(&a, val, 0);
    FIO_ASSERT(ptmp == pobj,
               "fio_imap_tester_set should return pointer to existing item");
    ptmp = fio_imap_tester_set(&a, val, 0);
    FIO_ASSERT(ptmp == pobj,
               "fio_imap_tester_set should return pointer to existing item");
    FIO_ASSERT(a.count == val, "imap array double-set error %zu!", val);
    FIO_ASSERT(fio_imap_tester_get(&a, val) == pobj &&
                   fio_imap_tester_get(&a, val)[0] == val,
               "imap array get failed for %zu!",
               val);
  }
  for (size_t val = 1; val < 4096; ++val) {
    FIO_ASSERT(fio_imap_tester_get(&a, val) &&
                   fio_imap_tester_get(&a, val)[0] == val,
               "imap array get failed for %zu (2)!",
               val);
  }
  for (size_t val = 4096; --val;) {
    FIO_ASSERT(fio_imap_tester_get(&a, val) &&
                   fio_imap_tester_get(&a, val)[0] == val,
               "imap array get failed for %zu (2)!",
               val);
    fio_imap_tester_remove(&a, val);
    FIO_ASSERT((size_t)(a.count + 1) == val,
               "imap array count failed at remove %zu!",
               val);
    FIO_ASSERT(!fio_imap_tester_get(&a, val),
               "imap array get should fail after remove for %zu!",
               val);
  }
  fio_imap_tester_destroy(&a);
}
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                            Server Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_SERVER_TEST___H)
#define H___FIO_SERVER_TEST___H
#ifndef H___FIO_SERVER___H
#define FIO_SERVER
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif
/* *****************************************************************************
Test TLS support
***************************************************************************** */

FIO_SFUNC int FIO_NAME_TEST(FIO_NAME_TEST(stl, io),
                            tls_each_cert)(fio_io_tls_each_s *e,
                                           const char *nm,
                                           const char *public_cert_file,
                                           const char *private_key_file,
                                           const char *pk_password) {
  size_t *result = (size_t *)e->udata2;
  *result += 0x01U;
  const size_t step = result[0] & 0xFF;
  struct {
    const char *s[4];
  } d =
      {
          {nm, public_cert_file, private_key_file, pk_password},
      },
    ex = {{NULL, "cert.pem", "key.pem", "1234"}};
  FIO_ASSERT(nm && nm[0] == (char)('0' + step), "nm error for tls_each_cert");
  for (size_t i = 1; i < 4; ++i) {
    FIO_ASSERT(d.s[i] && ex.s[i] && FIO_STRLEN(ex.s[i]) == FIO_STRLEN(d.s[i]) &&
                   !memcmp(ex.s[i], d.s[i], FIO_STRLEN(d.s[i])),
               "tls_each_cert string error for argument %zu",
               i);
  }
  return 0;
}
FIO_SFUNC int FIO_NAME_TEST(FIO_NAME_TEST(stl, io),
                            tls_each_alpn)(fio_io_tls_each_s *e,
                                           const char *nm,
                                           void (*fn)(fio_io_s *)) {
  size_t *result = (size_t *)e->udata2;
  *result += 0x0100U;
  const size_t step = (result[0] >> 8) & 0xFF;
  FIO_ASSERT(nm && nm[0] == (char)('0' + step), "nm error for tls_each_alpn");
  FIO_ASSERT((uintptr_t)fn == step, "fn value error for tls_each_alpn");
  return 0;
}
FIO_SFUNC int FIO_NAME_TEST(FIO_NAME_TEST(stl, io),
                            tls_each_trust)(fio_io_tls_each_s *e,
                                            const char *nm) {

  size_t *result = (size_t *)e->udata2;
  *result += 0x010000U;
  const size_t step = (result[0] >> 16) & 0xFF;
  FIO_ASSERT(nm && nm[0] == (char)('0' + step), "nm error for tls_each_trust");
  return 0;
}

FIO_SFUNC void FIO_NAME_TEST(FIO_NAME_TEST(stl, io),
                             tls_each_alpn_cb)(fio_io_s *io) {
  ((size_t *)io)[0]++;
}

FIO_SFUNC void FIO_NAME_TEST(FIO_NAME_TEST(stl, io), tls_helpers)(void) {
  fprintf(stderr, "   * Testing fio_io_tls_s helpers.\n");
  struct {
    const char *nm;
    const char *public_cert_file;
    const char *private_key_file;
    const char *pk_password;
  } tls_test_cert_data[] = {
      {
          .nm = "1",
          .public_cert_file = "c.pem",
          .private_key_file = "k.pem",
          .pk_password = NULL,
      },
      {
          .nm = "2",
          .public_cert_file = "cert.pem",
          .private_key_file = "key.pem",
          .pk_password = "1234",
      },
      {
          .nm = "1",
          .public_cert_file = "cert.pem",
          .private_key_file = "key.pem",
          .pk_password = "1234",
      },
      {
          .nm = "3",
          .public_cert_file = "cert.pem",
          .private_key_file = "key.pem",
          .pk_password = "1234",
      },
      {NULL},
  };
  struct {
    const char *nm;
    void (*fn)(fio_io_s *);
  } tls_test_alpn_data[] = {
      {
          .nm = "1",
          .fn = (void (*)(fio_io_s *))(uintptr_t)3,
      },
      {
          .nm = "2",
          .fn = (void (*)(fio_io_s *))(uintptr_t)2,
      },
      {
          .nm = "1",
          .fn = (void (*)(fio_io_s *))(uintptr_t)1,
      },
      {NULL},
  };
  struct {
    const char *nm;
  } tls_test_trust_data[] = {
      {
          .nm = "1",
      },
      {
          .nm = "2",
      },
      {NULL},
  };
  size_t counter = 0;
  void *data_containers[] = {
      (void *)&tls_test_cert_data,
      (void *)&tls_test_alpn_data,
      (void *)&tls_test_trust_data,
      NULL,
  };
  fio_io_tls_s *t = fio_io_tls_new();
  FIO_ASSERT(t, "fio_io_tls_new should return a valid fio_io_tls_s object");
  for (size_t i = 0; tls_test_cert_data[i].nm; ++i) {
    fio_io_tls_s *r =
        fio_io_tls_cert_add(t,
                            tls_test_cert_data[i].nm,
                            tls_test_cert_data[i].public_cert_file,
                            tls_test_cert_data[i].private_key_file,
                            tls_test_cert_data[i].pk_password);
    FIO_ASSERT(r == t, "`fio_io_tls_X_add` functions should return `self`.");
  }
  for (size_t i = 0; tls_test_alpn_data[i].nm; ++i) {
    fio_io_tls_s *r = fio_io_tls_alpn_add(t,
                                          tls_test_alpn_data[i].nm,
                                          tls_test_alpn_data[i].fn);
    FIO_ASSERT(r == t, "`fio_io_tls_X_add` functions should return `self`.");
  }
  for (size_t i = 0; tls_test_trust_data[i].nm; ++i) {
    fio_io_tls_s *r = fio_io_tls_trust_add(t, tls_test_trust_data[i].nm);
    FIO_ASSERT(r == t, "`fio_io_tls_X_add` functions should return `self`.");
  }

  fio_io_tls_each(
      t,
      .udata = data_containers,
      .udata2 = &counter,
      .each_cert = FIO_NAME_TEST(FIO_NAME_TEST(stl, io), tls_each_cert),
      .each_alpn = FIO_NAME_TEST(FIO_NAME_TEST(stl, io), tls_each_alpn),
      .each_trust = FIO_NAME_TEST(FIO_NAME_TEST(stl, io), tls_each_trust));
  FIO_ASSERT(counter == 0x020203, "fio_io_tls_each iteration count error.");
  fio_io_tls_alpn_add(t,
                      "tst",
                      FIO_NAME_TEST(FIO_NAME_TEST(stl, io), tls_each_alpn_cb));
  counter = 0;
  fio_io_tls_alpn_select(t, "tst", 3, (fio_io_s *)&counter);
  FIO_ASSERT(counter == 1, "fio_io_tls_alpn_select failed.");
  fio_io_tls_free(t);

  const struct {
    fio_buf_info_s url;
    size_t is_tls;
  } url_tests[] = {
      {FIO_BUF_INFO1((char *)"ws://ex.com"), 0},
      {FIO_BUF_INFO1((char *)"wss://ex.com"), 1},
      {FIO_BUF_INFO1((char *)"sse://ex.com"), 0},
      {FIO_BUF_INFO1((char *)"sses://ex.com"), 1},
      {FIO_BUF_INFO1((char *)"http://ex.com"), 0},
      {FIO_BUF_INFO1((char *)"https://ex.com"), 1},
      {FIO_BUF_INFO1((char *)"tcp://ex.com"), 0},
      {FIO_BUF_INFO1((char *)"tcps://ex.com"), 1},
      {FIO_BUF_INFO1((char *)"udp://ex.com"), 0},
      {FIO_BUF_INFO1((char *)"udps://ex.com"), 1},
      {FIO_BUF_INFO1((char *)"tls://ex.com"), 1},
      {FIO_BUF_INFO1((char *)"ws://ex.com/?TLSN"), 0},
      {FIO_BUF_INFO1((char *)"ws://ex.com/?TLS"), 1},
      {FIO_BUF_INFO0, 0},
  };
  for (size_t i = 0; url_tests[i].url.buf; ++i) {
    t = NULL;
    fio_url_s u = fio_url_parse(url_tests[i].url.buf, url_tests[i].url.len);
    t = fio_io_tls_from_url(t, u);
    FIO_ASSERT((!url_tests[i].is_tls && !t) || (url_tests[i].is_tls && t),
               "fio_io_tls_from_url result error @ %s",
               url_tests[i].url.buf);
    fio_io_tls_free(t);
  }
}

/* *****************************************************************************
Test IO ENV support
***************************************************************************** */

/* State callback test task */
FIO_SFUNC void FIO_NAME_TEST(FIO_NAME_TEST(stl, io),
                             env_on_close)(void *udata) {
  size_t *p = (size_t *)udata;
  ++p[0];
}

/* State callback tests */
FIO_SFUNC void FIO_NAME_TEST(FIO_NAME_TEST(stl, io), env)(void) {
  fprintf(stderr, "   * Testing fio_env.\n");
  size_t a = 0, b = 0, c = 0;
  fio___io_env_safe_s env = FIO___IO_ENV_SAFE_INIT;
  fio___io_env_safe_set(
      &env,
      (char *)"a_key",
      5,
      1,
      (fio___io_env_obj_s){
          .on_close = FIO_NAME_TEST(FIO_NAME_TEST(stl, io), env_on_close),
          .udata = &a},
      1);
  FIO_ASSERT(fio___io_env_safe_get(&env, (char *)"a_key", 5, 1) == &a,
             "fio___io_env_safe_set/get round-trip error!");
  fio___io_env_safe_set(
      &env,
      (char *)"a_key",
      5,
      2,
      (fio___io_env_obj_s){
          .on_close = FIO_NAME_TEST(FIO_NAME_TEST(stl, io), env_on_close),
          .udata = &a},
      2);
  fio___io_env_safe_set(
      &env,
      (char *)"a_key",
      5,
      3,
      (fio___io_env_obj_s){
          .on_close = FIO_NAME_TEST(FIO_NAME_TEST(stl, io), env_on_close),
          .udata = &a},
      1);
  fio___io_env_safe_set(
      &env,
      (char *)"b_key",
      5,
      1,
      (fio___io_env_obj_s){
          .on_close = FIO_NAME_TEST(FIO_NAME_TEST(stl, io), env_on_close),
          .udata = &b},
      1);
  fio___io_env_safe_set(
      &env,
      (char *)"c_key",
      5,
      1,
      (fio___io_env_obj_s){
          .on_close = FIO_NAME_TEST(FIO_NAME_TEST(stl, io), env_on_close),
          .udata = &c},
      1);
  fio___io_env_safe_unset(&env, (char *)"a_key", 5, 3);
  FIO_ASSERT(!a,
             "unset should have removed an object without calling callback.");
  fio___io_env_safe_remove(&env, (char *)"a_key", 5, 3);
  FIO_ASSERT(!a, "remove after unset should have no side-effects.");
  fio___io_env_safe_remove(&env, (char *)"a_key", 5, 2);
  FIO_ASSERT(a == 1, "remove should call callbacks.");
  fio___io_env_safe_destroy(&env);
  FIO_ASSERT(a == 2 && b == 1 && c == 1, "destroy should call callbacks.");
}

/* *****************************************************************************
Test Server Modules
***************************************************************************** */

FIO_SFUNC void FIO_NAME_TEST(stl, io)(void) {
  fprintf(stderr, "* Testing fio_io units (TODO).\n");
  FIO_PRINT_SIZE_OF(fio_io_protocol_s);
  FIO_PRINT_SIZE_OF(fio_io_s);
  FIO_NAME_TEST(FIO_NAME_TEST(stl, io), env)();
  FIO_NAME_TEST(FIO_NAME_TEST(stl, io), tls_helpers)();
}
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        Math Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_MATH_TEST___H)
#define H___FIO_MATH_TEST___H
#ifndef H___FIO_MATH___H
#define FIO_MATH
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif
FIO_SFUNC void FIO_NAME_TEST(stl, math)(void) {
  fprintf(stderr,
          "* Testing multi-precision math operations "
          "(partial).\n");

  { /* Test add/sub carry */
    uint64_t a, c;
    a = fio_math_addc64(1ULL, 1ULL, 1ULL, &c);
    FIO_ASSERT(a == 3 && c == 0,
               "fio_math_addc64(1ULL, 1ULL, 1ULL, &c) failed");
    a = fio_math_addc64(~(uint64_t)0ULL, 1ULL, 0ULL, &c);
    FIO_ASSERT(!a && c == 1,
               "fio_math_addc64(~(uint64_t)0ULL, 1ULL, "
               "0ULL, &c) failed");
    c = 0;
    a = fio_math_addc64(~(uint64_t)0ULL, 1ULL, 1ULL, &c);
    FIO_ASSERT(a == 1 && c == 1,
               "fio_math_addc64(~(uint64_t)0ULL, 1ULL, "
               "1ULL, &c) failed");
    c = 0;
    a = fio_math_addc64(~(uint64_t)0ULL, 0ULL, 1ULL, &c);
    FIO_ASSERT(!a && c == 1,
               "fio_math_addc64(~(uint64_t)0ULL, 0ULL, "
               "1ULL, &c) failed");
    a = fio_math_subc64(3ULL, 1ULL, 1ULL, &c);
    FIO_ASSERT(a == 1 && c == 0, "fio_math_subc64 failed");
    a = fio_math_subc64(~(uint64_t)0ULL, 1ULL, 0ULL, &c);
    FIO_ASSERT(c == 0,
               "fio_math_subc64(~(uint64_t)0ULL, 1ULL, "
               "0ULL, &c) failed");
    a = fio_math_subc64(0ULL, ~(uint64_t)0ULL, 1ULL, &c);
    FIO_ASSERT(!a && c == 1,
               "fio_math_subc64(0ULL, ~(uint64_t)0ULL, "
               "1ULL, &c) failed "
               "(%llu, %llu)",
               a,
               c);
    a = fio_math_subc64(0ULL, 1ULL, 0ULL, &c);
    FIO_ASSERT(a == ~(uint64_t)0ULL && c == 1,
               "fio_math_subc64(0ULL, 1ULL, 0ULL, &c) failed");
  }

  { /* Test division */
    uint64_t n = 0, d = 1;
    for (size_t i = 0; i < 64; ++i) {
      n = (n << 7) ^ 0xAA;
      for (size_t j = 0; j < 64; ++j) {
        d = (d << 3) ^ 0xAA;
        uint64_t q, r;
        FIO_COMPILER_GUARD;
        fio_math_div(&q, &r, &n, &d, 1);
        FIO_COMPILER_GUARD;
        FIO_ASSERT(q == (n / d),
                   "fio_math_div failed quotient for "
                   "0x%llX / 0x%llX (Q=0x%llX "
                   "R=0x%llX)",
                   (long long)n,
                   (long long)d,
                   (long long)q,
                   (long long)r);
        FIO_ASSERT((q * d) + r == n,
                   "fio_math_div failed remainder for "
                   "0x%llX / 0x%llX (Q=0x%llX "
                   "R=0x%llX)",
                   (long long)n,
                   (long long)d,
                   (long long)q,
                   (long long)r);
      }
    }
  }
  { /* Test bit shifting */
    uint64_t a[] = {0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0};
    uint64_t b[] = {0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFF, 1};
    uint64_t c[3];
    fio_math_shl(c, a, 1, 3);
    FIO_ASSERT(!memcmp(b, c, sizeof(c)),
               "left shift failed, %llX:%llX:%llX",
               c[0],
               c[1],
               c[2]);
    fio_math_shr(c, c, 1, 3);
    FIO_ASSERT(!memcmp(a, c, sizeof(c)),
               "right shift failed, %llX:%llX:%llX",
               c[0],
               c[1],
               c[2]);
    fio_math_shl(c, a, 128, 3);
    FIO_ASSERT(!c[0] && !c[1] && !(~c[2]),
               "left shift failed, %llX:%llX:%llX",
               c[0],
               c[1],
               c[2]);
    FIO_ASSERT(fio_math_msb_index(a, 3) == 127,
               "fio_math_msb_index(a) failed %zu",
               fio_math_msb_index(a, 3));
    FIO_ASSERT(fio_math_lsb_index(a, 3) == 0,
               "fio_math_lsb_index(a) failed %zu",
               fio_math_lsb_index(a, 3));
    FIO_ASSERT(fio_math_msb_index(b, 3) == 128,
               "fio_math_msb_index(b) failed %zu",
               fio_math_msb_index(b, 3));
    FIO_ASSERT(fio_math_lsb_index(b, 3) == 1,
               "fio_math_lsb_index(b) failed %zu",
               fio_math_lsb_index(b, 3));
  }
  { /* Test vectors (partial) */
    fio_u128 v128 = {{0}};
    fio_u256 v256 = {{0}};
    fio_u512 v512 = {{0}};
#define FIO_VTEST_ACT_CONST(opt, val)                                          \
  fio_u128_c##opt##64(&v128, &v128, val);                                      \
  fio_u256_c##opt##64(&v256, &v256, val);                                      \
  fio_u512_c##opt##64(&v512, &v512, val);
#define FIO_VTEST_ACT(opt, val)                                                \
  fio_u128_##opt##64(&v128, &v128, &((fio_u128){.u64 = {val, val}}));          \
  fio_u256_##opt##64(&v256,                                                    \
                     &v256,                                                    \
                     &((fio_u256){.u64 = {val, val, val, val}}));              \
  fio_u512_##opt##64(                                                          \
      &v512,                                                                   \
      &v512,                                                                   \
      &((fio_u512){.u64 = {val, val, val, val, val, val, val, val}}));
#define FIO_VTEST_ACT_BIG(opt, val)                                            \
  fio_u128_c##opt##64(&v128, &v128, val);                                      \
  fio_u256_##opt(&v256, &v256, &((fio_u256){.u64 = {val, val, val, val}}));    \
  fio_u512_c##opt##64(&v512, &v512, val);

#define FIO_VTEST_IS_EQ(val)                                                   \
  (v128.u64[0] == val && v128.u64[1] == val && v256.u64[0] == val &&           \
   v256.u64[1] == val && v256.u64[2] == val && v256.u64[3] == val &&           \
   v512.u64[0] == val && v512.u64[1] == val && v512.u64[2] == val &&           \
   v512.u64[3] == val && v512.u64[4] == val && v512.u64[5] == val &&           \
   v512.u64[6] == val && v512.u64[7] == val)

    FIO_VTEST_ACT_CONST(add, 1);
    FIO_VTEST_ACT_CONST(mul, 31);
    FIO_VTEST_ACT_BIG(and, 15);
    FIO_ASSERT(FIO_VTEST_IS_EQ(15),
               "fio_u128 / fio_u256 / fio_u512 failed "
               "with constant vec. operations");
    FIO_VTEST_ACT(sub, 15);
    FIO_VTEST_ACT(add, 1);
    FIO_VTEST_ACT(mul, 31);
    FIO_VTEST_ACT_BIG(and, 15);
    FIO_ASSERT(FIO_VTEST_IS_EQ(15),
               "fio_u128 / fio_u256 / fio_u512 failed "
               "with vector operations");
    FIO_ASSERT(fio_u128_reduce_add64(&v128) == 30 &&
                   fio_u256_reduce_add64(&v256) == 60 &&
                   fio_u512_reduce_add64(&v512) == 120,
               "fio_u128 / fio_u256 / fio_u512 reduce "
               "(add) failed");
    FIO_ASSERT(FIO_VTEST_IS_EQ(15), " reduce had side-effects!");

    fio_u256_add64(&v256, &v256, &(fio_u256){.u64 = {1, 2, 3, 0}});
    FIO_ASSERT(v256.u64[0] == 16 && v256.u64[1] == 17 && v256.u64[2] == 18 &&
                   v256.u64[3] == 15,
               "fio_u256_add64 failed");
    // v256 = fio_u256_shuffle64(v256, 3, 0, 1, 2);
    // FIO_ASSERT(v256.u64[0] == 15 && v256.u64[1] == 16 && v256.u64[2] == 17 &&
    //                v256.u64[3] == 18,
    //            "fio_u256_shuffle64 failed");
  }
}
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_MEMALT Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_MEMALT_TEST___H)
#define H___FIO_MEMALT_TEST___H

#ifndef H___FIO_MEMALT___H
#define FIO_MEMALT
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

FIO_SFUNC void FIO_NAME_TEST(stl, memalt)(void) {
  uint64_t start, end;
  fprintf(stderr, "* Testing memcpy, memchr and memset alternatives.\n");

  { /* test fio_memcpy possible overflow. */
    uint64_t buf1[64];
    uint8_t *buf = (uint8_t *)buf1;
    fio_memset(buf1, ~(uint64_t)0, sizeof(*buf1) * 64);
    char *data =
        (char *)"This should be an uneven amount of characters, say 53";
    fio_memcpy(buf, data, FIO_STRLEN(data));
    FIO_ASSERT(!memcmp(buf, data, FIO_STRLEN(data)) &&
                   buf[FIO_STRLEN(data)] == 0xFF,
               "fio_memcpy should not overflow or underflow on uneven "
               "amounts of bytes.");
  }
  { /* test fio_memcpy as memmove */
    fprintf(stderr, "* testing fio_memcpy with overlapping memory (memmove)\n");
    char *msg = (char *)"fio_memcpy should work also as memmove, "
                        "so undefined behavior should not occur. "
                        "Should be true for larger offsets too. At least over "
                        "128 Bytes.";
    size_t len = FIO_STRLEN(msg);
    char buf[512];
    for (size_t offset = 1; offset < len; ++offset) {
      memset(buf, 0, sizeof(buf));
      memmove(buf, msg, len);
      fio_memcpy(buf + offset, buf, len);
      FIO_ASSERT(!memcmp(buf + offset, msg, len),
                 "fio_memcpy failed on overlapping data (offset +%d, len %zu)",
                 offset,
                 len);
      memset(buf, 0, sizeof(buf));
      memmove(buf + offset, msg, len);
      fio_memcpy(buf, buf + offset, len);
      FIO_ASSERT(!memcmp(buf, msg, len),
                 "fio_memcpy failed on overlapping data (offset -%d, len %zu)",
                 offset,
                 len);
    }
  }
  { /* test fio_memcmp */
    for (size_t i = 0; i < 4096; ++i) {
      uint64_t a = fio_rand64(), b = fio_rand64();
      int s = memcmp(&a, &b, sizeof(a));
      int f = fio_memcmp(&a, &b, sizeof(a));
      FIO_ASSERT((s < 0 && f < 0) || (s > 0 && f > 0) || (!s && !f),
                 "fio_memcmp != memcmp (result meaning, not value).");
      FIO_ASSERT(fio_ct_is_eq(&a, &b, sizeof(a)) == (!s),
                 "fio_ct_is_eq differs from memcmp result");
    }
  }
  { /* test fio_memchr and fio_strlen */
    char membuf[4096];
    memset(membuf, 0xff, 4096);
    membuf[4095] = 0;
    for (size_t i = 0; i < 4095; ++i) {
      membuf[i] = 0;
      char *result = (char *)fio_memchr(membuf, 0, 4096);
      size_t len = fio_strlen(membuf);
      membuf[i] = (char)((i & 0xFFU) | 1U);
      FIO_ASSERT(result == membuf + i, "fio_memchr failed.");
      FIO_ASSERT(len == i, "fio_strlen failed (%zu != %zu).", len, i);
    }
  }
#ifndef DEBUG
  const size_t base_repetitions = 8192;
  fprintf(stderr, "* Speed testing core memcpy primitives:\n");
  {
    struct {
      void *(*fn)(void *, const void *);
      size_t bytes;
    } tests[] = {
        {fio_memcpy8, 8},
        {fio_memcpy16, 16},
        {fio_memcpy32, 32},
        {fio_memcpy64, 64},
        {fio_memcpy128, 128},
        {fio_memcpy256, 256},
        {fio_memcpy512, 512},
        {fio_memcpy1024, 1024},
        {fio_memcpy2048, 2048},
        {fio_memcpy4096, 4096},
        {NULL},
    };
    char buf[4096 * 2];
    memset(buf, 0x80, 4096 * 2);
    for (size_t i = 0; tests[i].bytes; ++i) {
      start = fio_time_micro();
      for (size_t r = 0; r < (base_repetitions << 4); ++r) {
        tests[i].fn(buf, buf + 4096);
        FIO_COMPILER_GUARD;
      }
      end = fio_time_micro();
      fprintf(stderr,
              "\tfio_memcpy%zu\tmemcpy(a,b,%zu)   \t%zuus\t",
              tests[i].bytes,
              tests[i].bytes,
              (size_t)(end - start));
      start = fio_time_micro();
      for (size_t r = 0; r < (base_repetitions << 4); ++r) {
        memcpy(buf, buf + 4096, tests[i].bytes);
        FIO_COMPILER_GUARD;
      }
      end = fio_time_micro();
      fprintf(stderr, "%zuus\n", (size_t)(end - start));
    }
  }
  {
    fprintf(stderr, "\n");
    struct {
      void *(*fn)(void *, const void *, size_t);
      size_t bytes;
    } tests[] = {
        {fio_memcpy7x, 7},
        {fio_memcpy15x, 15},
        {fio_memcpy31x, 31},
        {fio_memcpy63x, 63},
        {fio_memcpy127x, 127},
        {fio_memcpy255x, 255},
        {fio_memcpy511x, 511},
        {fio_memcpy1023x, 1023},
        {fio_memcpy2047x, 2047},
        {fio_memcpy4095x, 4095},
        {NULL},
    };
    char buf[4096 * 2];
    memset(buf, 0x80, 4096 * 2);
    for (size_t i = 0; tests[i].bytes; ++i) {
      start = fio_time_micro();
      for (size_t r = 0; r < (base_repetitions << 4); ++r) {
        tests[i].fn(buf, buf + 4096, ((tests[i].bytes + r) & tests[i].bytes));
        FIO_COMPILER_GUARD;
      }
      end = fio_time_micro();
      fprintf(stderr,
              "\tfio_memcpy%zux\tmemcpy(a,b,%zu)   \t%zuus\t",
              tests[i].bytes,
              tests[i].bytes,
              (size_t)(end - start));
      start = fio_time_micro();
      for (size_t r = 0; r < (base_repetitions << 4); ++r) {
        memcpy(buf, buf + 4096, ((tests[i].bytes + r) & tests[i].bytes));
        FIO_COMPILER_GUARD;
      }
      end = fio_time_micro();
      fprintf(stderr, "%zuus\n", (size_t)(end - start));
    }
  }
  fprintf(stderr, "* Speed testing memset:\n");

  for (size_t len_i = 5; len_i < 20; ++len_i) {
    const size_t repetitions = base_repetitions
                               << (len_i < 15 ? (15 - (len_i & 15)) : 0);
    const size_t mem_len = (1ULL << len_i);
    void *mem = malloc(mem_len + 32);
    FIO_ASSERT_ALLOC(mem);
    uint64_t sig = (uintptr_t)mem;
    sig ^= sig >> 13;
    sig ^= sig << 17;
    sig ^= sig << 29;
    sig ^= sig << 31;
    for (size_t rlen = mem_len - 1; rlen < mem_len + 2; ++rlen) {
      start = fio_time_micro();
      for (size_t i = 0; i < repetitions; ++i) {
        memset(mem, (int)sig, rlen);
        FIO_COMPILER_GUARD;
      }
      end = fio_time_micro();
      fprintf(stderr,
              "\tsystem memset\t(%zu bytes):\t%zuus\t/ %zu\n",
              rlen,
              (size_t)(end - start),
              repetitions);

      start = fio_time_micro();
      for (size_t i = 0; i < repetitions; ++i) {
        fio_memset(mem, sig, rlen);
        FIO_COMPILER_GUARD;
      }
      end = fio_time_micro();
      fio___memset_test_aligned(mem,
                                sig,
                                rlen,
                                "fio_memset sanity test FAILED");
      fprintf(stderr,
              "\tfio_memset\t(%zu bytes):\t%zuus\t/ %zu\n",
              rlen,
              (size_t)(end - start),
              repetitions);
    }
    free(mem);
  }

  fprintf(stderr, "* Speed testing memcpy:\n");

  for (int len_i = 5; len_i < 21; ++len_i) {
    const size_t repetitions = base_repetitions
                               << (len_i < 15 ? (15 - (len_i & 15)) : 0);
    for (size_t mem_len = (1ULL << len_i) - 1; mem_len <= (1ULL << len_i) + 1;
         ++mem_len) {
      void *mem = malloc(mem_len << 1);
      FIO_ASSERT_ALLOC(mem);
      uint64_t sig = (uintptr_t)mem;
      sig ^= sig >> 13;
      sig ^= sig << 17;
      sig ^= sig << 29;
      sig ^= sig << 31;
      fio_memset(mem, sig, mem_len);

      start = fio_time_micro();
      for (size_t i = 0; i < repetitions; ++i) {
        memcpy((char *)mem + mem_len, mem, mem_len);
        FIO_COMPILER_GUARD;
      }
      end = fio_time_micro();
      fprintf(stderr,
              "\tsystem memcpy\t(%zu bytes):\t%zuus\t/ %zu\n",
              mem_len,
              (size_t)(end - start),
              repetitions);

      start = fio_time_micro();
      for (size_t i = 0; i < repetitions; ++i) {
        fio_memcpy((char *)mem + mem_len, mem, mem_len);
        FIO_COMPILER_GUARD;
      }
      end = fio_time_micro();
      fio___memset_test_aligned((char *)mem + mem_len,
                                sig,
                                mem_len,
                                "fio_memcpy sanity test FAILED");
      fprintf(stderr,
              "\tfio_memcpy\t(%zu bytes):\t%zuus\t/ %zu\n",
              mem_len,
              (size_t)(end - start),
              repetitions);

      // size_t threads_used = 0;
      // start = fio_time_micro();
      // for (size_t i = 0; i < repetitions; ++i) {
      //   threads_used = fio_thread_memcpy((char *)mem + mem_len, mem,
      //   mem_len); if (threads_used == 1)
      //     break;
      //   FIO_COMPILER_GUARD;
      // }
      // end = fio_time_micro();
      // fio___memset_test_aligned((char *)mem + mem_len,
      //                           sig,
      //                           mem_len,
      //                           "fio_thread_memcpy sanity test FAILED");
      // fprintf(stderr,
      //         "   fio_thread_memcpy (%zut)\t(%zu bytes):\t%zu"
      //         "us\t/ %zu\n", threads_used, mem_len, (size_t)(end
      //         - start), repetitions);

      free(mem);
    }
  }

  fprintf(stderr, "* Speed testing memchr:\n");

  for (int len_i = 2; len_i < 20; ++len_i) {
    const size_t repetitions = base_repetitions
                               << (len_i < 15 ? (15 - (len_i & 15)) : 0);
    const size_t mem_len = (1ULL << len_i) - 1;
    size_t token_index = ((mem_len >> 1) + (mem_len >> 2)) + 1;
    void *mem = malloc(mem_len + 2);
    FIO_ASSERT_ALLOC(mem);
    fio_memset(mem, ((uint64_t)0x0101010101010101ULL * 0x80), mem_len + 1);
    ((uint8_t *)mem)[mem_len + 1] = 0;
    ((uint8_t *)mem)[token_index >> 1] = 0xFFU;       /* edge case? */
    ((uint8_t *)mem)[(token_index >> 1) + 1] = 0x01U; /* edge case? */
    ((uint8_t *)mem)[(token_index >> 1) + 2] = 0x7FU; /* edge case? */
    ((uint8_t *)mem)[token_index] = 0;
    ((uint8_t *)mem)[token_index + 1] = 0;
    FIO_ASSERT(memchr((char *)mem + 1, 0, mem_len) ==
                   fio_memchr((char *)mem + 1, 0, mem_len),
               "fio_memchr != memchr");
    ((uint8_t *)mem)[token_index] = (char)0x80;
    ((uint8_t *)mem)[token_index + 1] = (char)0x80;

    token_index = mem_len;
    start = fio_time_micro();
    for (size_t i = 0; i < repetitions; ++i) {
      char *result = (char *)memchr((char *)mem, 0, mem_len);
      FIO_ASSERT(result == ((char *)mem + token_index) ||
                     (!result && token_index == mem_len),
                 "memchr failed? @ %zu",
                 token_index);
      FIO_COMPILER_GUARD;
      ((uint8_t *)mem)[token_index] = 0x80;
      token_index = (token_index - 1) & ((1ULL << len_i) - 1);
      ((uint8_t *)mem)[token_index] = 0;
    }
    end = fio_time_micro();
    ((uint8_t *)mem)[token_index] = 0x80;
    fprintf(stderr,
            "\tsystem memchr\t(up to %zu bytes):\t%zuus\t/ %zu\n",
            mem_len,
            (size_t)(end - start),
            repetitions);

    token_index = mem_len;
    start = fio_time_micro();
    for (size_t i = 0; i < repetitions; ++i) {
      char *result = (char *)fio_memchr((char *)mem, 0, mem_len);
      FIO_ASSERT(result == ((char *)mem + token_index) ||
                     (!result && token_index == mem_len),
                 "fio_memchr failed? @ %zu",
                 token_index);
      FIO_COMPILER_GUARD;
      ((uint8_t *)mem)[token_index] = 0x80;
      token_index = (token_index - 1) & ((1ULL << len_i) - 1);
      ((uint8_t *)mem)[token_index] = 0;
    }
    end = fio_time_micro();
    ((uint8_t *)mem)[token_index] = 0x80;
    fprintf(stderr,
            "\tfio_memchr\t(up to %zu bytes):\t%zuus\t/ %zu\n",
            mem_len,
            (size_t)(end - start),
            repetitions);

    free(mem);
  }

  fprintf(stderr, "* Speed testing memcmp:\n");

  for (int len_i = 2; len_i < 21; ++len_i) {
    const size_t repetitions = base_repetitions
                               << (len_i < 13 ? (15 - (len_i & 15)) : 2);
    const size_t mem_len = (1ULL << len_i);
    char *mem = (char *)malloc((mem_len << 1) + 128);
    FIO_ASSERT_ALLOC(mem);
    uint64_t sig = (uintptr_t)mem;
    sig ^= sig >> 13;
    sig ^= sig << 17;
    sig ^= sig << 29;
    sig ^= sig << 31;
    char *a = mem;
    char *b = mem + mem_len + 32;
    fio_memset(a, sig, mem_len);
    a[mem_len] = 'A';
    fio_memset(b, sig, mem_len);
    b[mem_len] = 'B';
    size_t twister = 0;

    if (mem_len > 64) {
      for (size_t i = 0; i < 64; ++i) {
        FIO_ASSERT(!fio_memcmp(a + i, b + i, mem_len - i),
                   "fio_memcmp sanity test FAILED (%zu eq)",
                   mem_len);
        FIO_ASSERT(fio_ct_is_eq(a + i, b + i, mem_len - i),
                   "fio_ct_is_eq sanity test FAILED (%zu eq)",
                   mem_len);
      }
    } else {
      FIO_ASSERT(!fio_memcmp(a, b, mem_len),
                 "fio_memcmp sanity test FAILED (%zu eq)",
                 mem_len);
      FIO_ASSERT(fio_ct_is_eq(a, b, mem_len),
                 "fio_ct_is_eq sanity test FAILED (%zu eq)",
                 mem_len);
    }
    {
      mem[mem_len - 2]--;
      if (mem_len > 64) {
        for (size_t i = 0; i < 64; ++i) {
          int r1 = fio_memcmp(a + i, b + i, mem_len - i);
          int r2 = memcmp(a + i, b + i, mem_len - i);
          FIO_ASSERT((r1 > 0 && r2 > 0) | (r1 < 0 && r2 < 0),
                     "fio_memcmp sanity test FAILED (%zu !eq)",
                     mem_len);
          FIO_ASSERT(!fio_ct_is_eq(a, b, mem_len),
                     "fio_ct_is_eq sanity test FAILED (%zu !eq)",
                     mem_len);
        }
      } else {
        int r1 = fio_memcmp(a, b, mem_len);
        int r2 = memcmp(a, b, mem_len);
        FIO_ASSERT((r1 > 0 && r2 > 0) | (r1 < 0 && r2 < 0),
                   "fio_memcmp sanity test FAILED (%zu !eq)",
                   mem_len);
        FIO_ASSERT(!fio_ct_is_eq(a, b, mem_len),
                   "fio_ct_is_eq sanity test FAILED (%zu !eq)",
                   mem_len);
      }
      mem[mem_len - 2]++;
    }

    FIO_MEMCPY(b, a, mem_len); /* shouldn't be needed, but anyway */
    twister = mem_len - 3;
    start = fio_time_micro();
    for (size_t i = 0; i < repetitions; ++i) {
      int cmp = memcmp(a, b, mem_len);
      FIO_COMPILER_GUARD;
      if (cmp) {
        ++mem[twister--];
        twister &= ((1ULL << (len_i - 1)) - 1);
      } else {
        --mem[twister];
      }
    }
    end = fio_time_micro();
    fprintf(stderr,
            "\tsystem memcmp\t(up to %zu bytes):\t%zuus\t/ %zu\n",
            mem_len,
            (size_t)(end - start),
            repetitions);

    FIO_MEMCPY(b, a, mem_len); /* shouldn't be needed, but anyway */
    twister = mem_len - 3;
    start = fio_time_micro();
    for (size_t i = 0; i < repetitions; ++i) {
      int cmp = fio_memcmp(a, b, mem_len);
      FIO_COMPILER_GUARD;
      if (cmp) {
        ++mem[twister--];
        twister &= ((1ULL << (len_i - 1)) - 1);
      } else {
        --mem[twister];
      }
    }
    end = fio_time_micro();
    fprintf(stderr,
            "\tfio_memcmp\t(up to %zu bytes):\t%zuus\t/ %zu\n",
            mem_len,
            (size_t)(end - start),
            repetitions);

    FIO_MEMCPY(b, a, mem_len); /* shouldn't be needed, but anyway */
    twister = mem_len - 3;
    start = fio_time_micro();
    for (size_t i = 0; i < repetitions; ++i) {
      int cmp = fio_ct_is_eq(a, b, mem_len);
      FIO_COMPILER_GUARD;
      if (!cmp) {
        ++mem[twister--];
        twister &= ((1ULL << (len_i - 1)) - 1);
      } else {
        --mem[twister];
      }
    }
    end = fio_time_micro();
    fprintf(stderr,
            "\tfio_ct_is_eq\t(up to %zu bytes):\t%zuus\t/ %zu\n",
            mem_len,
            (size_t)(end - start),
            repetitions);

    free(mem);
  }

  fprintf(stderr, "* Speed testing strlen:\n");

  for (int len_i = 2; len_i < 20; ++len_i) {
    const size_t repetitions = base_repetitions
                               << (len_i < 15 ? (15 - (len_i & 15)) : 0);
    const size_t mem_len = (1ULL << len_i) - 1;
    size_t token_index = ((mem_len >> 1) + (mem_len >> 2)) + 1;
    void *mem = malloc(mem_len + 1);
    FIO_ASSERT_ALLOC(mem);
    fio_memset(mem, ((uint64_t)0x0101010101010101ULL * 0x80), mem_len + 1);
    ((uint8_t *)mem)[token_index >> 1] = 0xFFU;       /* edge case? */
    ((uint8_t *)mem)[(token_index >> 1) + 1] = 0x01U; /* edge case? */
    ((uint8_t *)mem)[(token_index >> 1) + 2] = 0x7FU; /* edge case? */
    ((uint8_t *)mem)[token_index] = 0;
    ((uint8_t *)mem)[token_index + 1] = 0;
    FIO_ASSERT(fio_strlen((char *)mem + 1) == strlen((char *)mem + 1),
               "fio_strlen != strlen");
    FIO_ASSERT(fio_strlen((char *)mem) == strlen((char *)mem),
               "fio_strlen != strlen");
    ((uint8_t *)mem)[token_index] = 0x80U;
    ((uint8_t *)mem)[token_index + 1] = 0x80U;
    ((uint8_t *)mem)[mem_len] = 0;
    FIO_ASSERT(fio_strlen((char *)mem) == strlen((char *)mem) &&
                   fio_strlen((char *)mem) == mem_len,
               "fio_strlen != strlen");

    token_index = mem_len - 1;
    ((uint8_t *)mem)[token_index] = 0;
    start = fio_time_micro();
    for (size_t i = 0; i < repetitions; ++i) {
      size_t result = strlen((char *)mem);
      FIO_ASSERT(result == token_index, "strlen failed? @ %zu", token_index);
      FIO_COMPILER_GUARD;
      ((uint8_t *)mem)[token_index] = 0x80;
      token_index = (token_index - 1) & ((1ULL << len_i) - 1);
      token_index -= (token_index == mem_len);
      ((uint8_t *)mem)[token_index] = 0;
    }
    end = fio_time_micro();
    ((uint8_t *)mem)[token_index] = 0x80;
    fprintf(stderr,
            "\tsystem strlen\t(up to %zu bytes):\t%zuus\t/ %zu\n",
            mem_len,
            (size_t)(end - start),
            repetitions);

    token_index = mem_len - 1;
    ((uint8_t *)mem)[token_index] = 0;
    start = fio_time_micro();
    for (size_t i = 0; i < repetitions; ++i) {
      size_t result = fio_strlen((char *)mem);
      FIO_ASSERT(result == token_index,
                 "fio_strlen failed? @ %zu",
                 token_index);
      FIO_COMPILER_GUARD;
      ((uint8_t *)mem)[token_index] = 0x80;
      token_index = (token_index - 1) & ((1ULL << len_i) - 1);
      token_index -= token_index == mem_len;
      ((uint8_t *)mem)[token_index] = 0;
    }
    end = fio_time_micro();
    ((uint8_t *)mem)[token_index] = 0x80;
    fprintf(stderr,
            "\tfio_strlen\t(up to %zu bytes):\t%zuus\t/ %zu\n",
            mem_len,
            (size_t)(end - start),
            repetitions);

    free(mem);
  }
#endif /* DEBUG */
  ((void)start), ((void)end);
}
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_MUSTACHE Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_MUSTACHE_TEST___H)
// #define H___FIO_MUSTACHE_TEST___H
// #ifndef H___FIO_MUSTACHE___H
// #define FIO_MUSTACHE
// #define FIO___TEST_REINCLUDE
// #include FIO_INCLUDE_FILE
// #undef FIO___TEST_REINCLUDE
// #endif

FIO_SFUNC void FIO_NAME_TEST(stl, mustache)(void) {
  fprintf(stderr, "* Testing mustache template parser.\n");
  char *example1 = (char *)"This is a {{tag}}, and so is {{ this_one }}.";
  char *example2 = (char *)"{{tag}} and {{ incomplete}";
  fio_mustache_s *m = fio_mustache_load(.data = FIO_BUF_INFO1(example1));
  FIO_ASSERT(m, "valid example load failed!");
  char *result = (char *)fio_mustache_build(m, .ctx = NULL);
  FIO_ASSERT(result, "a valid fio_mustache_build returned NULL");
  FIO_ASSERT(
      FIO_BUF_INFO_IS_EQ(fio_bstr_buf(result),
                         FIO_BUF_INFO1((char *)"This is a , and so is .")),
      "valid example result failed: %s",
      result);
  fio_bstr_free(result);
  fio_mustache_free(m);
  fprintf(stderr, "\terror should print on next line.\n");
  m = fio_mustache_load(.data = FIO_BUF_INFO1(example2));
  FIO_ASSERT(!m, "invalid example load returned an object.");
  fio_mustache_free(m);
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_POLL Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_POLL_TEST___H)
#define H___FIO_POLL_TEST___H
#ifndef H___FIO_POLL___H
#define FIO_POLL
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

#if FIO_POLL_ENGINE == FIO_POLL_ENGINE_EPOLL
FIO_SFUNC void FIO_NAME_TEST(stl, poll)(void) {
  fprintf(stderr,
          "* SKIPPED testing file descriptor polling (engine: epoll).\n");
}

#elif FIO_POLL_ENGINE == FIO_POLL_ENGINE_KQUEUE
FIO_SFUNC void FIO_NAME_TEST(stl, poll)(void) {
  fprintf(stderr,
          "* SKIPPED testing file descriptor polling (engine: kqueue).\n");
}

#elif FIO_POLL_ENGINE == FIO_POLL_ENGINE_POLL
FIO_SFUNC void FIO_NAME_TEST(stl, poll)(void) {
  fprintf(
      stderr,
      "* Testing file descriptor monitoring (poll setup / cleanup only).\n");
  fio_poll_s p;
  fio_poll_init(&p, NULL);
  short events[4] = {POLLOUT, POLLIN, POLLOUT | POLLIN, POLLOUT | POLLIN};
  for (int i = 128; i--;) {
    FIO_ASSERT(!fio_poll_monitor(&p, i, (void *)(uintptr_t)i, events[(i & 3)]),
               "fio_poll_monitor failed for fd %d",
               i);
  }
  for (int i = 128; i--;) {
    if ((i & 3) == 3) {
      FIO_ASSERT(!fio_poll_forget(&p, i), "fio_poll_forget failed at %d", i);
      FIO_ASSERT(fio_poll_forget(&p, i),
                 "fio_poll_forget didn't forget previous %d",
                 i);
    }
  }
  fio_poll_destroy(&p);
}

#endif
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_PUBSUB Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_PUBSUB_TEST___H)
#define H___FIO_PUBSUB_TEST___H
#ifndef H___FIO_PUBSUB___H
#define FIO_PUBSUB
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

/* *****************************************************************************
Encryption Testing
***************************************************************************** */

FIO_SFUNC void FIO_NAME_TEST(stl, pubsub_encryption)(void) {
  fprintf(stderr, "* Testing pub/sub encryption / decryption.\n");
  fio_publish_args_s origin = {.channel = FIO_BUF_INFO1((char *)"my channel"),
                               .message = FIO_BUF_INFO1((char *)"my message"),
                               .filter = 0xAA,
                               .is_json =
                                   FIO___PUBSUB_JSON | FIO___PUBSUB_CLUSTER};
  fio___pubsub_message_s *enc = fio___pubsub_message_author(origin);
  fio___pubsub_message_encrypt(enc);
  FIO_ASSERT(FIO_BUF_INFO_IS_EQ(enc->data.channel, origin.channel),
             "channel info error");
  FIO_ASSERT(FIO_BUF_INFO_IS_EQ(enc->data.message, origin.message),
             "message info error");
  FIO_ASSERT(enc->data.filter == origin.filter, "filter info error");
  FIO_ASSERT(enc->data.is_json == origin.is_json, "flags info error");
  FIO_MEM_STACK_WIPE(2);

  fio___pubsub_message_s *dec = fio___pubsub_message_alloc(enc->data.udata);
  FIO_MEMCPY(dec->data.udata,
             enc->data.udata,
             origin.channel.len + origin.message.len +
                 FIO___PUBSUB_MESSAGE_OVERHEAD);
  dec->data.udata = enc->data.udata;
  FIO_ASSERT(!fio___pubsub_message_decrypt(dec), "decryption failed");
  FIO_ASSERT(enc->data.filter == dec->data.filter,
             "(pubsub) filter enc/dec error");
  FIO_ASSERT(enc->data.is_json == dec->data.is_json,
             "(pubsub) is_json enc/dec error");
  FIO_ASSERT(enc->data.id == dec->data.id, "(pubsub) id enc/dec error");
  FIO_ASSERT(enc->data.published == dec->data.published,
             "(pubsub) published enc/dec error");
  FIO_ASSERT(FIO_BUF_INFO_IS_EQ(enc->data.channel, dec->data.channel),
             "(pubsub) channel enc/dec error");
  FIO_ASSERT(FIO_BUF_INFO_IS_EQ(enc->data.message, dec->data.message),
             "(pubsub) message enc/dec error");
  fio___pubsub_message_free(enc);
  fio___pubsub_message_free(dec);
}

/* *****************************************************************************
Round Trip Testing
***************************************************************************** */

FIO_SFUNC void FIO_NAME_TEST(stl, pubsub_on_message)(fio_msg_s *msg) {
  ((int *)(msg->udata))[0] += 1;
}
FIO_SFUNC void FIO_NAME_TEST(stl, pubsub_on_unsubscribe)(void *udata) {
  ((int *)(udata))[0] -= 1;
}

FIO_SFUNC void FIO_NAME_TEST(stl, pubsub_roundtrip)(void) {
  fprintf(stderr, "* Testing pub/sub round-trip.\n");
  uintptr_t sub_handle = 0;
  int state = 0, expected = 0, delta = 0;
  fio_buf_info_s test_channel = FIO_BUF_INFO1((char *)"pubsub_test_channel");
  fio_subscribe_args_s sub[] = {
      {
          .channel = test_channel,
          .on_message = FIO_NAME_TEST(stl, pubsub_on_message),
          .on_unsubscribe = FIO_NAME_TEST(stl, pubsub_on_unsubscribe),
          .udata = &state,
          .filter = -127,
      },
      {
          .channel = test_channel,
          .on_message = FIO_NAME_TEST(stl, pubsub_on_message),
          .on_unsubscribe = FIO_NAME_TEST(stl, pubsub_on_unsubscribe),
          .udata = &state,
          .subscription_handle_ptr = &sub_handle,
          .filter = -127,
      },
      {
          .channel = FIO_BUF_INFO1((char *)"pubsub_*"),
          .on_message = FIO_NAME_TEST(stl, pubsub_on_message),
          .on_unsubscribe = FIO_NAME_TEST(stl, pubsub_on_unsubscribe),
          .udata = &state,
          .filter = -127,
          .is_pattern = 1,
      },
  };
  const int sub_count = (sizeof(sub) / sizeof(sub[0]));

#define FIO___PUBLISH2TEST()                                                   \
  fio_publish(.engine = FIO_PUBSUB_CLUSTER,                                    \
              .channel = test_channel,                                         \
              .filter = -127);                                                 \
  expected += delta;                                                           \
  fio_queue_perform_all(fio_io_queue());

  for (int i = 0; i < sub_count; ++i) {
    fio_subscribe FIO_NOOP(sub[i]);
    ++delta;
    FIO_ASSERT(state == expected, "subscribe shouldn't affect state (%d)", i);
    FIO___PUBLISH2TEST();
    FIO_ASSERT(state == expected, "pub/sub test state incorrect (1-%d)", i);
    FIO___PUBLISH2TEST();
    FIO_ASSERT(state == expected, "pub/sub test state incorrect (2-%d)", i);
  }
  for (int i = 0; i < sub_count; ++i) {
    if (fio_unsubscribe FIO_NOOP(sub[i]))
      FIO_LOG_WARNING("fio_unsubscribe returned an error value");
    --delta;
    --expected;
    fio_queue_perform_all(fio_io_queue());
    FIO_ASSERT(state == expected, "unsubscribe should call callback (%i)", i);
    FIO___PUBLISH2TEST();
    FIO_ASSERT(state == expected, "pub/sub test state incorrect (3-%d)", i);
    FIO___PUBLISH2TEST();
    FIO_ASSERT(state == expected, "pub/sub test state incorrect (4-%d)", i);
  }
#undef FIO___PUBLISH2TEST
}

/* *****************************************************************************

***************************************************************************** */

FIO_SFUNC void FIO_NAME_TEST(stl, pubsub)(void) {
  FIO_NAME_TEST(stl, pubsub_encryption)();
  FIO_NAME_TEST(stl, pubsub_roundtrip)();
  fio___io_cleanup_at_exit(NULL);
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_QUEUE Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_QUEUE_TEST___H)
#define H___FIO_QUEUE_TEST___H
#ifndef H___FIO_QUEUE___H
#define FIO_QUEUE
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

#ifndef FIO___QUEUE_TEST_PRINT
#define FIO___QUEUE_TEST_PRINT 1
#endif

#define FIO___QUEUE_TOTAL_COUNT (512 * 1024)

typedef struct {
  fio_queue_s *q;
  uintptr_t count;
  uintptr_t *counter;
} fio___queue_test_s;

FIO_SFUNC void fio___queue_test_sample_task(void *i_count, void *unused2) {
  (void)(unused2);
  fio_atomic_add((uintptr_t *)i_count, 1);
}

FIO_SFUNC void fio___queue_test_counter_task(void *i_count1, void *i_count2) {
  static intptr_t counter = 0;
  if (!i_count1 && !i_count2) {
    counter = 0;
    return;
  }
  FIO_ASSERT((intptr_t)i_count1 == (intptr_t)counter + 1,
             "udata1 value error in task");
  FIO_ASSERT((intptr_t)i_count2 == (intptr_t)counter + 2,
             "udata2 value error in task");
  ++counter;
}

FIO_SFUNC void fio___queue_test_sched_sample_task(void *t_, void *i_count) {
  fio___queue_test_s *t = (fio___queue_test_s *)t_;
  size_t i = (size_t)(uintptr_t)i_count;
  FIO_ASSERT(!fio_queue_push(t->q,
                             .fn = fio___queue_test_sample_task,
                             .udata1 = t->counter),
             "Couldn't push task!");
  --i;
  if (!i)
    return;
  if ((i & 1)) {
    FIO_ASSERT(
        !fio_queue_push(t->q, fio___queue_test_sched_sample_task, t, (void *)i),
        "Couldn't push task!");
  } else {
    FIO_ASSERT(!fio_queue_push_urgent(t->q,
                                      fio___queue_test_sched_sample_task,
                                      t,
                                      (void *)i),
               "Couldn't push task!");
  }
}

FIO_SFUNC int fio___queue_test_timer_task(void *i_count, void *unused2) {
  fio_atomic_add((uintptr_t *)i_count, 1);
  return (unused2 ? -1 : 0);
}

FIO_SFUNC void FIO_NAME_TEST(stl, queue)(void) {
  fprintf(stderr, "* Testing facil.io task scheduling (fio_queue)\n");
  /* ************** testing queue ************** */
  fio_queue_s *q = fio_queue_new();
  fio_queue_s q2;

  fprintf(stderr, "\t- size of queue object (fio_queue_s): %zu\n", sizeof(*q));
  fprintf(stderr,
          "\t- size of queue ring buffer (per allocation): %zu\n",
          sizeof(q->mem));
  fprintf(stderr,
          "\t- event slots per queue allocation: %zu\n",
          (size_t)FIO_QUEUE_TASKS_PER_ALLOC);

  /* test task user data integrity. */
  fio___queue_test_counter_task(NULL, NULL);
  for (size_t i = 0; i < (FIO_QUEUE_TASKS_PER_ALLOC << 2); ++i) {
    fio_queue_push(q,
                   .fn = fio___queue_test_counter_task,
                   .udata1 = (void *)(i + 1),
                   .udata2 = (void *)(i + 2));
  }
  fio_queue_perform_all(q);
  fio_queue_perform_all(q);
  for (size_t i = (FIO_QUEUE_TASKS_PER_ALLOC << 2);
       i < (FIO_QUEUE_TASKS_PER_ALLOC << 3);
       ++i) {
    fio_queue_push(q,
                   .fn = fio___queue_test_counter_task,
                   .udata1 = (void *)(i + 1),
                   .udata2 = (void *)(i + 2));
  }
  fio_queue_perform_all(q);
  fio_queue_perform_all(q);
  FIO_ASSERT(!fio_queue_count(q) && fio_queue_perform(q) == -1,
             "fio_queue_perform_all didn't perform all");

  const size_t max_threads = 12; // assumption / pure conjuncture...
  uintptr_t i_count;
  uint64_t start, end;
  i_count = 0;
  start = fio_time_milli();
  for (size_t i = 0; i < FIO___QUEUE_TOTAL_COUNT; i++) {
    fio___queue_test_sample_task(&i_count, NULL);
  }
  end = fio_time_milli();
  if (FIO___QUEUE_TEST_PRINT) {
    fprintf(stderr,
            "\t- Queueless (direct call) counter: %lu ms with i_count = %lu\n",
            (unsigned long)(end - start),
            (unsigned long)i_count);
  }
  size_t i_count_should_be = i_count;
  i_count = 0;
  start = fio_time_milli();
  for (size_t i = 0; i < FIO___QUEUE_TOTAL_COUNT; i++) {
    fio_queue_push(q,
                   .fn = fio___queue_test_sample_task,
                   .udata1 = (void *)&i_count);
  }
  fio_queue_perform_all(q);
  fio_queue_perform_all(q);
  fio_queue_perform_all(q);
  end = fio_time_milli();
  if (FIO___QUEUE_TEST_PRINT) {
    fprintf(stderr,
            "\t- single task counter: %lu ms with i_count = %lu\n",
            (unsigned long)(end - start),
            (unsigned long)i_count);
  }
  FIO_ASSERT(i_count == i_count_should_be, "ERROR: queue count invalid\n");

  if (FIO___QUEUE_TEST_PRINT) {
    fprintf(stderr, "\n");
  }

  for (size_t i = 1; i < 32 && FIO___QUEUE_TOTAL_COUNT >> i; ++i) {
    fio___queue_test_s info = {
        .q = q,
        .count = (uintptr_t)(FIO___QUEUE_TOTAL_COUNT >> i),
        .counter = &i_count,
    };
    const size_t tasks = 1 << i;
    i_count = 0;
    start = fio_time_milli();
    for (size_t j = 0; j < tasks; ++j) {
      fio_queue_push(q,
                     fio___queue_test_sched_sample_task,
                     (void *)&info,
                     (void *)info.count);
    }
    FIO_ASSERT(fio_queue_count(q), "tasks not counted?!");
    {
      const size_t t_count = (i % max_threads) + 1;
      if (0) {
        fio_queue_workers_add(q, t_count);
        while (!(volatile uintptr_t)i_count)
          FIO_THREAD_RESCHEDULE();
        fio_queue_workers_join(q);
      } else {
        union {
          void *(*t)(void *);
          void (*act)(fio_queue_s *);
        } thread_tasks;
        thread_tasks.act = fio_queue_perform_all;
        fio_thread_t *threads = (fio_thread_t *)
            FIO_MEM_REALLOC(NULL, 0, sizeof(*threads) * t_count, 0);
        for (size_t j = 0; j < t_count; ++j) {
          if (fio_thread_create(threads + j, thread_tasks.t, q)) {
            abort();
          }
        }
        for (size_t j = 0; j < t_count; ++j) {
          fio_thread_join(threads + j);
        }
        FIO_MEM_FREE(threads, sizeof(*threads) * t_count);
      }
    }

    end = fio_time_milli();
    if (FIO___QUEUE_TEST_PRINT) {
      fprintf(stderr,
              "- queue performed using %zu threads, %zu scheduling tasks (%zu "
              "each):\n"
              "    %lu ms with i_count = %lu\n",
              ((i % max_threads) + 1),
              tasks,
              info.count,
              (unsigned long)(end - start),
              (unsigned long)i_count);
    } else {
      fprintf(stderr, ".");
    }
    FIO_ASSERT(i_count == i_count_should_be, "ERROR: queue count invalid\n");
  }
  if (!(FIO___QUEUE_TEST_PRINT))
    fprintf(stderr, "\n");
  FIO_ASSERT(q->w == &q->mem,
             "queue library didn't release dynamic queue (should be static)");
  fio_queue_free(q);
  {
    fprintf(stderr, "* Testing urgent insertion\n");
    fio_queue_init(&q2);
    for (size_t i = 0; i < (FIO_QUEUE_TASKS_PER_ALLOC * 3); ++i) {
      FIO_ASSERT(!fio_queue_push_urgent(&q2,
                                        .fn = (void (*)(void *, void *))(i + 1),
                                        .udata1 = (void *)(i + 1)),
                 "fio_queue_push_urgent failed");
    }
    FIO_ASSERT(q2.r->next && q2.r->next->next && !q2.r->next->next->next,
               "should have filled only three task blocks");
    for (size_t i = 0; i < (FIO_QUEUE_TASKS_PER_ALLOC * 3); ++i) {
      fio_queue_task_s t = fio_queue_pop(&q2);
      FIO_ASSERT(
          t.fn && (size_t)t.udata1 == (FIO_QUEUE_TASKS_PER_ALLOC * 3) - i,
          "fio_queue_push_urgent pop ordering error [%zu] %zu != %zu (%p)",
          i,
          (size_t)t.udata1,
          (FIO_QUEUE_TASKS_PER_ALLOC * 3) - i,
          (void *)(uintptr_t)t.fn);
    }
    FIO_ASSERT(fio_queue_pop(&q2).fn == NULL,
               "pop overflow after urgent tasks");
    fio_queue_destroy(&q2);
  }
  /* ************** testing timers ************** */
  {
    fprintf(stderr,
            "* Testing facil.io timer scheduling (fio_timer_queue_s)\n");
    fprintf(stderr, "  Note: Errors SHOULD print out to the log.\n");
    fio_queue_init(&q2);
    volatile uintptr_t tester = 0;
    fio_timer_queue_s tq = FIO_TIMER_QUEUE_INIT;

    /* test failuers */
    fio_timer_schedule(&tq,
                       .udata1 = (void *)&tester,
                       .on_finish = fio___queue_test_sample_task,
                       .every = 100,
                       .repetitions = -1);
    FIO_ASSERT(tester == 1,
               "fio_timer_schedule should have called `on_finish`");
    tester = 0;
    fio_timer_schedule(NULL,
                       .fn = fio___queue_test_timer_task,
                       .udata1 = (void *)&tester,
                       .on_finish = fio___queue_test_sample_task,
                       .every = 100,
                       .repetitions = -1);
    FIO_ASSERT(tester == 1,
               "fio_timer_schedule should have called `on_finish`");
    tester = 0;
    fio_timer_schedule(&tq,
                       .fn = fio___queue_test_timer_task,
                       .udata1 = (void *)&tester,
                       .on_finish = fio___queue_test_sample_task,
                       .every = 0,
                       .repetitions = -1);
    FIO_ASSERT(tester == 1,
               "fio_timer_schedule should have called `on_finish`");
    fprintf(stderr, "  Note: no more errors should print for this test.\n");

    /* test endless task */
    tester = 0;
    fio_timer_schedule(&tq,
                       .fn = fio___queue_test_timer_task,
                       .udata1 = (void *)&tester,
                       .on_finish = fio___queue_test_sample_task,
                       .every = 1,
                       .repetitions = -1,
                       .start_at = fio_time_milli() - 10);
    FIO_ASSERT(tester == 0,
               "fio_timer_schedule should have scheduled the task.");
    for (size_t i = 0; i < 10; ++i) {
      uint64_t now = fio_time_milli();
      fio_timer_push2queue(&q2, &tq, now);
      fio_timer_push2queue(&q2, &tq, now);
      FIO_ASSERT(fio_queue_count(&q2), "task should have been scheduled");
      FIO_ASSERT(fio_queue_count(&q2) == 1,
                 "task should have been scheduled only once");
      fio_queue_perform(&q2);
      FIO_ASSERT(!fio_queue_count(&q2), "queue should be empty");
      FIO_ASSERT(tester == i + 1,
                 "task should have been performed (%zu).",
                 (size_t)tester);
    }

    tester = 0;
    fio_timer_destroy(&tq);
    FIO_ASSERT(tester == 1, "fio_timer_destroy should have called `on_finish`");

    /* test single-use task */
    tester = 0;
    int64_t milli_now = fio_time_milli();
    fio_timer_schedule(&tq,
                       .fn = fio___queue_test_timer_task,
                       .udata1 = (void *)&tester,
                       .on_finish = fio___queue_test_sample_task,
                       .every = 100,
                       .repetitions = 1,
                       .start_at = milli_now - 10);
    FIO_ASSERT(tester == 0,
               "fio_timer_schedule should have scheduled the task.");
    fio_timer_schedule(&tq,
                       .fn = fio___queue_test_timer_task,
                       .udata1 = (void *)&tester,
                       .on_finish = fio___queue_test_sample_task,
                       .every = 1,
                       // .repetitions = 1, // auto-value is 1
                       .start_at = milli_now - 10);
    FIO_ASSERT(tester == 0,
               "fio_timer_schedule should have scheduled the task.");
    FIO_ASSERT(fio_timer_next_at(&tq) == milli_now - 9,
               "fio_timer_next_at value error.");
    fio_timer_push2queue(&q2, &tq, milli_now);
    FIO_ASSERT(fio_queue_count(&q2) == 1,
               "task should have been scheduled (2)");
    FIO_ASSERT(fio_timer_next_at(&tq) == milli_now + 90,
               "fio_timer_next_at value error for unscheduled task.");
    fio_queue_perform(&q2);
    FIO_ASSERT(!fio_queue_count(&q2), "queue should be empty");
    FIO_ASSERT(tester == 2,
               "task should have been performed and on_finish called (%zu).",
               (size_t)tester);
    fio_timer_destroy(&tq);
    FIO_ASSERT(
        tester == 3,
        "fio_timer_destroy should have called on_finish of future task (%zu).",
        (size_t)tester);
    FIO_ASSERT(!tq.next, "timer queue should be empty.");
    fio_queue_destroy(&q2);
  }
  fprintf(stderr, "* passed.\n");
}
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        Random Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_RAND_TEST___H)
#define H___FIO_RAND_TEST___H
#ifndef H___FIO_RAND___H
#define FIO_RAND
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

/* *****************************************************************************
Playhouse hashing (next risky version)
***************************************************************************** */

typedef union {
  uint64_t v[4] FIO_ALIGN(16);
#ifdef __SIZEOF_INT128__
  __uint128_t u128[2];
#endif
} fio___r2hash_s;

FIO_IFUNC fio___r2hash_s fio_risky2_hash___inner(const void *restrict data_,
                                                 size_t len,
                                                 uint64_t seed) {
  fio___r2hash_s v = {.v = {seed, seed, seed, seed}};
  fio___r2hash_s const prime = {.v = {FIO_U64_HASH_PRIME0,
                                      FIO_U64_HASH_PRIME1,
                                      FIO_U64_HASH_PRIME2,
                                      FIO_U64_HASH_PRIME3}};
  fio___r2hash_s w;
  const uint8_t *data = (const uint8_t *)data_;
  /* seed selection is constant time to avoid leaking seed data */
  seed += len;
  seed ^= fio_lrot64(seed, 47);
  seed ^= FIO_U64_HASH_PRIME4;

#define FIO___R2_ROUND(i) /* this version passes all, but fast enough? */      \
  w.v[i] = fio_ltole64(w.v[i]); /* make sure we're using little endien? */     \
  v.v[i] ^= w.v[i];                                                            \
  v.v[i] *= prime.v[i];                                                        \
  w.v[i] = fio_lrot64(w.v[i], 31);                                             \
  v.v[i] += w.v[i];                                                            \
  v.v[i] ^= seed;

  /* consumes 32 bytes (256 bits) blocks (no padding needed) */
  for (size_t pos = 31; pos < len; pos += 32) {
    for (size_t i = 0; i < 4; ++i) {
      fio_memcpy8(w.v + i, data + (i << 3));
      FIO___R2_ROUND(i);
    }
    seed += w.v[0] + w.v[1] + w.v[2] + w.v[3];
    data += 32;
  }
#if (FIO___R2_PERFORM_FULL_BLOCK + 1) && 1
  if (len & 31) { // pad with zeros
    uint64_t tmp_buf[4] = {0};
    fio_memcpy31x(tmp_buf, data, len);
    for (size_t i = 0; i < 4; ++i) {
      w.v[0] = tmp_buf[1];
      FIO___R2_ROUND(i);
    }
  }
#else
  switch (len & 24) { /* only performed if data exits in these positions */
  case 24: fio_memcpy8(w.v + 2, data + 16); FIO___R2_ROUND(2); /*fall through*/
  case 16: fio_memcpy8(w.v + 1, data + 8); FIO___R2_ROUND(1);  /*fall through*/
  case 8:
    fio_memcpy8(w.v + 0, data);
    FIO___R2_ROUND(0);
    data += len & 24;
  }
  if (len & 7) {
    uint64_t i = (len & 24) >> 3;
    w.v[i] = 0;
    fio_memcpy7x(w.v + i, data, len);
    FIO___R2_ROUND(i);
  }
#endif

  /* inner vector mini-avalanche */
  for (size_t i = 0; i < 4; ++i)
    v.v[i] *= prime.v[i];
  v.v[0] ^= fio_lrot64(v.v[0], 7);
  v.v[1] ^= fio_lrot64(v.v[1], 11);
  v.v[2] ^= fio_lrot64(v.v[2], 13);
  v.v[3] ^= fio_lrot64(v.v[3], 17);
  return v;
#undef FIO___R2_ROUND
}

/*  Computes a facil.io Stable Hash. */
FIO_SFUNC uint64_t fio_risky2_hash(const void *data_,
                                   size_t len,
                                   uint64_t seed) {
  uint64_t r;
  fio___r2hash_s v = fio_risky2_hash___inner(data_, len, seed);
  /* summing avalanche */
  r = v.v[0] + v.v[1] + v.v[2] + v.v[3];
  r ^= r >> 31;
  r *= FIO_U64_HASH_PRIME4;
  r ^= r >> 31;
  return r;
}

FIO_SFUNC void fio_risky2_hash128(void *restrict dest,
                                  const void *restrict data_,
                                  size_t len,
                                  uint64_t seed) {
  fio___r2hash_s v = fio_risky2_hash___inner(data_, len, seed);
  uint64_t r[2];
  r[0] = v.v[0] + v.v[1] + v.v[2] + v.v[3];
  r[1] = v.v[0] ^ v.v[1] ^ v.v[2] ^ v.v[3];
  r[0] ^= r[0] >> 31;
  r[1] ^= r[1] >> 31;
  r[0] *= FIO_U64_HASH_PRIME4;
  r[1] *= FIO_U64_HASH_PRIME0;
  r[0] ^= r[0] >> 31;
  r[1] ^= r[1] >> 31;
  fio_memcpy16(dest, r);
}

#undef FIO___R2_HASH_MUL_PRIME
#undef FIO___R2_HASH_ROUND_FULL

/* *****************************************************************************
Hashing speed test
***************************************************************************** */
#include <math.h>

typedef uintptr_t (*fio__hashing_func_fn)(char *, size_t);

FIO_SFUNC void fio_test_hash_function(fio__hashing_func_fn h,
                                      char *name,
                                      uint8_t size_log,
                                      uint8_t mem_alignment_offset,
                                      uint8_t fast) {
  /* test based on code from BearSSL with credit to Thomas Pornin */
  if (size_log >= 21 || ((sizeof(uint64_t) - 1) >> size_log)) {
    FIO_LOG_ERROR("fio_test_hash_function called with a log size too big.");
    return;
  }
  mem_alignment_offset &= 7;
  size_t const buffer_len = (1ULL << size_log) - mem_alignment_offset;
  uint64_t cycles_start_at = (1ULL << (14 + (fast * 3)));
  if (size_log < 13)
    cycles_start_at <<= (13 - size_log);
  else if (size_log > 13)
    cycles_start_at >>= (size_log - 13);

#ifdef DEBUG
  fprintf(stderr,
          "* Testing %s speed with %zu byte blocks"
          "(DEBUG mode detected - speed may be affected).\n",
          name,
          buffer_len);
#else
  fprintf(stderr,
          "* Testing %s speed with %zu byte blocks.\n",
          name,
          buffer_len);
#endif

  uint8_t *buffer_mem = (uint8_t *)
      FIO_MEM_REALLOC(NULL, 0, (buffer_len + mem_alignment_offset) + 64, 0);
  uint8_t *buffer = buffer_mem + mem_alignment_offset;

  FIO_MEMSET(buffer, 'T', buffer_len);
  /* warmup */
  uint64_t hash = 0;
  for (size_t i = 0; i < 4; i++) {
    hash += h((char *)buffer, buffer_len);
    fio_memcpy8(buffer, &hash);
  }
  /* loop until test runs for more than 2 seconds */
  for (uint64_t cycles = cycles_start_at;;) {
    clock_t start, end;
    start = clock();
    for (size_t i = cycles; i > 0; i--) {
      hash += h((char *)buffer, buffer_len);
      FIO_COMPILER_GUARD;
    }
    end = clock();
    fio_memcpy8(buffer, &hash);
    if ((end - start) > CLOCKS_PER_SEC || cycles >= ((uint64_t)1 << 62)) {
      fprintf(stderr,
              "\t%-40s %8.2f MB/s\n",
              name,
              (double)(buffer_len * cycles) /
                  (((end - start) * (1000000.0 / CLOCKS_PER_SEC))));
      break;
    }
    cycles <<= 1;
  }
  FIO_MEM_FREE(buffer_mem, (buffer_len + mem_alignment_offset) + 64);
}

FIO_SFUNC uintptr_t FIO_NAME_TEST(stl, risky_wrapper)(char *buf, size_t len) {
  return fio_risky_hash(buf, len, 1);
}
FIO_SFUNC uintptr_t FIO_NAME_TEST(stl, stable_wrapper)(char *buf, size_t len) {
  return fio_stable_hash(buf, len, 1);
}
FIO_SFUNC uintptr_t FIO_NAME_TEST(stl, risky2_wrapper)(char *buf, size_t len) {
  return fio_risky2_hash(buf, len, 1);
}

FIO_SFUNC uintptr_t FIO_NAME_TEST(stl, risky_ptr_wrapper)(char *buf,
                                                          size_t len) {
  uint64_t h[4] = {0};
  while (len > 31) {
    h[0] += fio_risky_ptr((void *)fio_buf2u64u(buf));
    h[1] += fio_risky_ptr((void *)fio_buf2u64u(buf + 8));
    h[2] += fio_risky_ptr((void *)fio_buf2u64u(buf + 16));
    h[3] += fio_risky_ptr((void *)fio_buf2u64u(buf + 24));
    len -= 32;
    buf += 32;
  }
  if ((len & 31)) {
    uint64_t t[4] = {0};
    fio_memcpy31x(t, buf, len);
    h[0] += fio_risky_ptr((void *)t[0]);
    h[1] += fio_risky_ptr((void *)t[1]);
    h[2] += fio_risky_ptr((void *)t[2]);
    h[3] += fio_risky_ptr((void *)t[3]);
  }
  return h[0] + h[1] + h[2] + h[3];
}
FIO_SFUNC uintptr_t FIO_NAME_TEST(stl, risky_num_wrapper)(char *buf,
                                                          size_t len) {
  uint64_t h[4] = {0};
  while (len > 31) {
    h[0] += fio_risky_num(fio_buf2u64u(buf), 0);
    h[1] += fio_risky_num(fio_buf2u64u(buf + 8), 0);
    h[2] += fio_risky_num(fio_buf2u64u(buf + 16), 0);
    h[3] += fio_risky_num(fio_buf2u64u(buf + 24), 0);
    len -= 32;
    buf += 32;
  }
  if ((len & 31)) {
    uint64_t t[4] = {0};
    fio_memcpy31x(t, buf, len);
    h[0] += fio_risky_num(t[0], 0);
    h[1] += fio_risky_num(t[1], 0);
    h[2] += fio_risky_num(t[2], 0);
    h[3] += fio_risky_num(t[3], 0);
  }
  return h[0] + h[1] + h[2] + h[3];
}

FIO_SFUNC uintptr_t FIO_NAME_TEST(stl, xmask_wrapper)(char *buf, size_t len) {
  fio_xmask(buf, len, fio_rand64());
  return len;
}

/* tests Risky Hash and Stable Hash... takes a while (speed tests as well) */
FIO_SFUNC void FIO_NAME_TEST(stl, risky)(void) {
  fprintf(stderr, "* Testing Risky Hash and Risky Mask (sanity).\n");
  {
    char *str = (char *)"testing that risky hash is always the same hash";
    const size_t len = FIO_STRLEN(str);
    char buf[128];
    FIO_MEMCPY(buf, str, len);
    uint64_t org_hash = fio_risky_hash(buf, len, 0);
    FIO_ASSERT(!memcmp(buf, str, len), "hashing shouldn't touch data");
    for (int i = 0; i < 8; ++i) {
      char *tmp = buf + i;
      FIO_MEMCPY(tmp, str, len);
      uint64_t tmp_hash = fio_risky_hash(tmp, len, 0);
      FIO_ASSERT(tmp_hash == fio_risky_hash(tmp, len, 0),
                 "hash should be consistent!");
      FIO_ASSERT(tmp_hash == org_hash, "memory address shouldn't effect hash!");
    }
  }
#if !DEBUG
  fio_test_hash_function(FIO_NAME_TEST(stl, risky_wrapper),
                         (char *)"fio_risky_hash",
                         7,
                         0,
                         2);
  fio_test_hash_function(FIO_NAME_TEST(stl, risky_wrapper),
                         (char *)"fio_risky_hash",
                         13,
                         0,
                         2);
  fio_test_hash_function(FIO_NAME_TEST(stl, risky_wrapper),
                         (char *)"fio_risky_hash (unaligned)",
                         6,
                         3,
                         2);
  fio_test_hash_function(FIO_NAME_TEST(stl, risky_wrapper),
                         (char *)"fio_risky_hash (unaligned)",
                         5,
                         3,
                         2);
  fprintf(stderr, "\n");
  fio_test_hash_function(FIO_NAME_TEST(stl, stable_wrapper),
                         (char *)"fio_stable_hash (64 bit)",
                         7,
                         0,
                         2);
  fio_test_hash_function(FIO_NAME_TEST(stl, stable_wrapper),
                         (char *)"fio_stable_hash (64 bit)",
                         13,
                         0,
                         2);
  fio_test_hash_function(FIO_NAME_TEST(stl, stable_wrapper),
                         (char *)"fio_stable_hash (64 bit unaligned)",
                         6,
                         3,
                         2);
  fio_test_hash_function(FIO_NAME_TEST(stl, stable_wrapper),
                         (char *)"fio_stable_hash (64 bit unaligned)",
                         5,
                         3,
                         2);
  fprintf(stderr, "\n");
#if 0  /* speed test num and ptr hashing */
  fio_test_hash_function(FIO_NAME_TEST(stl, risky_ptr_wrapper),
                         (char *)"fio_risky_ptr (emulated)",
                         7,
                         0,
                         2);
  fprintf(stderr, "\n");
  fio_test_hash_function(FIO_NAME_TEST(stl, risky_num_wrapper),
                         (char *)"fio_risky_num (emulated)",
                         7,
                         0,
                         2);
  fio_test_hash_function(FIO_NAME_TEST(stl, risky_num_wrapper),
                         (char *)"fio_risky_num (emulated)",
                         13,
                         0,
                         2);
  fio_test_hash_function(FIO_NAME_TEST(stl, risky_num_wrapper),
                         (char *)"fio_risky_num (emulated)",
                         6,
                         3,
                         2);
  fio_test_hash_function(FIO_NAME_TEST(stl, risky_num_wrapper),
                         (char *)"fio_risky_num (emulated)",
                         5,
                         3,
                         2);
#endif /* speed test num and ptr hashing */

  /* xmask speed testing */
  fprintf(stderr, "\n");
  fio_test_hash_function(FIO_NAME_TEST(stl, xmask_wrapper),
                         (char *)"fio_xmask (XOR, NO counter)",
                         13,
                         0,
                         2);
  fio_test_hash_function(FIO_NAME_TEST(stl, xmask_wrapper),
                         (char *)"fio_xmask (unaligned)",
                         13,
                         1,
                         2);

#if 0  /* speed test playground */
  /* playground speed testing */
  fprintf(stderr, "\n");
  fio_test_hash_function(FIO_NAME_TEST(stl, risky2_wrapper),
                         (char *)"rXtest (64 bit)",
                         7,
                         0,
                         2);
  fio_test_hash_function(FIO_NAME_TEST(stl, risky2_wrapper),
                         (char *)"rXtest (64 bit)",
                         13,
                         0,
                         2);
  fio_test_hash_function(FIO_NAME_TEST(stl, risky2_wrapper),
                         (char *)"rXtest (64 bit unaligned)",
                         6,
                         3,
                         2);
  fio_test_hash_function(FIO_NAME_TEST(stl, risky2_wrapper),
                         (char *)"rXtest (64 bit unaligned)",
                         5,
                         3,
                         2);
#endif /* speed test playground */
  fprintf(stderr, "\n");
#endif /* DEBUG */
}

FIO_SFUNC void FIO_NAME_TEST(stl, random_buffer)(uint64_t *stream,
                                                 size_t len,
                                                 const char *name,
                                                 size_t clk) {
  size_t totals[2] = {0};
  size_t freq[256] = {0};
  const size_t total_bits = (len * sizeof(*stream) * 8);
  uint64_t hemming = 0;
  /* collect data */
  for (size_t i = 1; i < len; i += 2) {
    hemming += fio_hemming_dist(stream[i], stream[i - 1]);
    for (size_t byte = 0; byte < (sizeof(*stream) << 1); ++byte) {
      uint8_t val = ((uint8_t *)(stream + (i - 1)))[byte];
      ++freq[val];
      for (int bit = 0; bit < 8; ++bit) {
        ++totals[(val >> bit) & 1];
      }
    }
  }
  hemming /= len;
  fprintf(stderr, "\n");
#if DEBUG
  fprintf(stderr,
          "\t- \x1B[1m%s\x1B[0m (%zu CPU cycles NOT OPTIMIZED):\n",
          name,
          clk);
#else
  fprintf(stderr, "\t- \x1B[1m%s\x1B[0m (%zu CPU cycles):\n", name, clk);
#endif
  fprintf(stderr,
          "\t  zeros / ones (bit frequency)\t%.05f\n",
          ((float)1.0 * totals[0]) / totals[1]);
  if (!(totals[0] < totals[1] + (total_bits / 20) &&
        totals[1] < totals[0] + (total_bits / 20)))
    FIO_LOG_ERROR("randomness isn't random?");
  fprintf(stderr,
          "\t  avarage hemming distance\t%zu (should be: 14-18)\n",
          (size_t)hemming);
  /* expect avarage hemming distance of 25% == 16 bits */
  if (!(hemming >= 14 && hemming <= 18))
    FIO_LOG_ERROR("randomness isn't random (hemming distance failed)?");
  /* test chi-square ... I think */
  if (len * sizeof(*stream) > 2560) {
    double n_r = (double)1.0 * ((len * sizeof(*stream)) / 256);
    double chi_square = 0;
    for (unsigned int i = 0; i < 256; ++i) {
      double f = freq[i] - n_r;
      chi_square += (f * f);
    }
    chi_square /= n_r;
    double chi_square_r_abs =
        (chi_square - 256 >= 0) ? chi_square - 256 : (256 - chi_square);
    fprintf(
        stderr,
        "\t  chi-sq. variation\t\t%.02lf - %s (expect <= %0.2lf)\n",
        chi_square_r_abs,
        ((chi_square_r_abs <= 2 * (sqrt(n_r)))
             ? "good"
             : ((chi_square_r_abs <= 3 * (sqrt(n_r))) ? "not amazing"
                                                      : "\x1B[1mBAD\x1B[0m")),
        2 * (sqrt(n_r)));
  }
}

FIO_SFUNC void FIO_NAME_TEST(stl, random)(void) {
  fprintf(stderr,
          "* Testing randomness "
          "- bit frequency / hemming distance / chi-square.\n");
  const size_t test_len = (1UL << 21);
  uint64_t *rs =
      (uint64_t *)FIO_MEM_REALLOC(NULL, 0, sizeof(*rs) * test_len, 0);
  clock_t start, end;
  FIO_ASSERT_ALLOC(rs);

  rand(); /* warmup */
  if (sizeof(int) < sizeof(uint64_t)) {
    start = clock();
    for (size_t i = 0; i < test_len; ++i) {
      rs[i] = ((uint64_t)rand() << 32) | (uint64_t)rand();
    }
    end = clock();
  } else {
    start = clock();
    for (size_t i = 0; i < test_len; ++i) {
      rs[i] = (uint64_t)rand();
    }
    end = clock();
  }
  FIO_NAME_TEST(stl, random_buffer)
  (rs, test_len, "rand (system - naive, ignoring missing bits)", end - start);

  FIO_MEMSET(rs, 0, sizeof(*rs) * test_len);
  {
    if (RAND_MAX == ~(uint64_t)0ULL) {
      /* RAND_MAX fills all bits */
      start = clock();
      for (size_t i = 0; i < test_len; ++i) {
        rs[i] = (uint64_t)rand();
      }
      end = clock();
    } else if (RAND_MAX >= (~(uint32_t)0UL)) {
      /* RAND_MAX fill at least 32 bits per call */
      uint32_t *rs_adjusted = (uint32_t *)rs;

      start = clock();
      for (size_t i = 0; i < (test_len << 1); ++i) {
        rs_adjusted[i] = (uint32_t)rand();
      }
      end = clock();
    } else if (RAND_MAX >= (~(uint16_t)0U)) {
      /* RAND_MAX fill at least 16 bits per call */
      uint16_t *rs_adjusted = (uint16_t *)rs;

      start = clock();
      for (size_t i = 0; i < (test_len << 2); ++i) {
        rs_adjusted[i] = (uint16_t)rand();
      }
      end = clock();
    } else {
      /* assume RAND_MAX fill at least 8 bits per call */
      uint8_t *rs_adjusted = (uint8_t *)rs;

      start = clock();
      for (size_t i = 0; i < (test_len << 2); ++i) {
        rs_adjusted[i] = (uint8_t)rand();
      }
      end = clock();
    }
    /* test RAND_MAX value */
    uint8_t rand_bits = 63;
    while (rand_bits) {
      if (RAND_MAX <= (~(0ULL)) >> rand_bits)
        break;
      --rand_bits;
    }
    rand_bits = 64 - rand_bits;

    char buffer[128] = {0};
    snprintf(buffer,
             128 - 14,
             "rand (system - fixed, testing %d random bits)",
             (int)rand_bits);
    FIO_NAME_TEST(stl, random_buffer)(rs, test_len, buffer, end - start);
  }

  FIO_MEMSET(rs, 0, sizeof(*rs) * test_len);
  fio_rand64(); /* warmup */
  start = clock();
  for (size_t i = 0; i < test_len; ++i) {
    rs[i] = fio_rand64();
  }
  end = clock();
  FIO_NAME_TEST(stl, random_buffer)(rs, test_len, "fio_rand64", end - start);
  FIO_MEMSET(rs, 0, sizeof(*rs) * test_len);
  start = clock();
  fio_rand_bytes(rs, test_len * sizeof(*rs));
  end = clock();
  FIO_NAME_TEST(stl, random_buffer)
  (rs, test_len, "fio_rand_bytes", end - start);

  fio_rand_feed2seed(rs, sizeof(*rs) * test_len);
  FIO_MEM_FREE(rs, sizeof(*rs) * test_len);
  fprintf(stderr, "\n");
  {
    FIO_STR_INFO_TMP_VAR(data, 1124);
    data.len = 1024;
    for (size_t i = 0; i < data.len; ++i)
      data.buf[i] = (char)(i & 255);
    uint64_t h = fio_stable_hash(data.buf, 1024, 0);
    FIO_LOG_DDEBUG2("Stable Hash Value: %p", (void *)h);
    FIO_ASSERT(h == (uint64_t)0x5DC4DAD435547F67ULL,
               "Stable Hash Value Error!");
  }
#if DEBUG
  fprintf(stderr,
          "\t- to compare CPU cycles, test randomness with optimization.\n\n");
#endif /* DEBUG */
}
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_SOCK Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_SOCK_TEST___H)
#define H___FIO_SOCK_TEST___H
#ifndef H___FIO_SOCK___H
#define FIO_SOCK
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

FIO_SFUNC void FIO_NAME_TEST(stl, sock)(void) {
  fprintf(stderr,
          "* Testing socket helpers (FIO_SOCK) - partial tests only!\n");
  struct {
    const char *address;
    const char *port;
    const char *msg;
    uint16_t flag;
  } server_tests[] = {
    {"127.0.0.1", "9437", "TCP", FIO_SOCK_TCP},
#ifdef AF_UNIX
#if defined(P_tmpdir) && !defined(__MINGW32__)
    {P_tmpdir "/tmp_unix_testing_socket_facil_io.sock",
     NULL,
     "Unix",
     FIO_SOCK_UNIX},
#else
    {"./tmp_unix_testing_socket_facil_io.sock", NULL, "Unix", FIO_SOCK_UNIX},
#endif
#endif
    /* accept doesn't work with UDP, not like this... UDP test is seperate */
    // {"127.0.0.1", "9437", "UDP", FIO_SOCK_UDP},
    {.address = NULL},
  };
  for (size_t i = 0; server_tests[i].address; ++i) {
    short ev = (short)-1;
    errno = 0;
    fprintf(stderr, "* Testing %s socket API\n", server_tests[i].msg);
    int srv = fio_sock_open(server_tests[i].address,
                            server_tests[i].port,
                            server_tests[i].flag | FIO_SOCK_SERVER);
    FIO_ASSERT(srv != -1, "server socket failed to open: %s", strerror(errno));
    ev = fio_sock_wait_io(-1, POLLIN | POLLOUT, 0);
    FIO_ASSERT(!ev, "no error should have been returned for IO -1 (%d)", ev);
    ev = fio_sock_wait_io(srv, POLLIN, 0);
    FIO_ASSERT(!ev, "no events should have been returned (%d)", ev);
    int cl = fio_sock_open(server_tests[i].address,
                           server_tests[i].port,
                           server_tests[i].flag | FIO_SOCK_CLIENT);
    FIO_ASSERT(FIO_SOCK_FD_ISVALID(cl),
               "client socket failed to open (%d)",
               cl);
    ev = fio_sock_wait_io(cl, POLLIN /* | POLLOUT <= OS dependent */, 0);
    FIO_ASSERT(!ev,
               "no events should have been returned for connecting client(%d)",
               ev);
    ev = fio_sock_wait_io(srv, POLLIN, 200);
    FIO_ASSERT((ev & POLLIN),
               "incoming connection should have been detected (%d : %u)",
               srv,
               (unsigned)ev);
    int accepted = fio_sock_accept(srv, NULL, NULL);
    FIO_ASSERT(FIO_SOCK_FD_ISVALID(accepted),
               "accepted socket failed to open (%zd)",
               (ssize_t)accepted);
    ev = fio_sock_wait_io(cl, POLLIN | POLLOUT, 0);
    FIO_ASSERT(ev == POLLOUT,
               "POLLOUT should have been returned for connected client(%d)",
               ev);
    ev = fio_sock_wait_io(accepted, POLLIN | POLLOUT, 0);
    FIO_ASSERT(ev == POLLOUT,
               "POLLOUT should have been returned for connected client 2(%d)",
               ev);
    if (fio_sock_write(accepted, "hello", 5) > 0) {
      // wait for read
      FIO_ASSERT(
          fio_sock_wait_io(cl, POLLIN, 10) != -1 &&
              ((fio_sock_wait_io(cl, POLLIN | POLLOUT, 0) & POLLIN)),
          "fio_sock_wait_io should have returned a POLLIN event for client.");
      {
        char buf[64];
        errno = 0;
        FIO_ASSERT(fio_sock_read(cl, buf, 64) > 0,
                   "Read should have read some data...\n\t"
                   "error: %s",
                   strerror(errno));
      }
      FIO_ASSERT(!fio_sock_wait_io(cl, POLLIN, 0),
                 "No events should have occurred here! (%zu)",
                 ev);
    } else {
      FIO_ASSERT(0,
                 "send(fd:%ld) failed! error: %s",
                 accepted,
                 strerror(errno));
    }
    fio_sock_close(accepted);
    fio_sock_close(cl);
    fio_sock_close(srv);
    FIO_ASSERT((fio_sock_wait_io(cl, POLLIN | POLLOUT, 0) & POLLNVAL),
               "POLLNVAL should have been returned for closed socket (%d & %d) "
               "(POLLERR == %d)",
               fio_sock_wait_io(cl, POLLIN | POLLOUT, 0),
               (int)POLLNVAL,
               (int)POLLERR);
#ifdef AF_UNIX
    if (FIO_SOCK_UNIX == server_tests[i].flag)
      unlink(server_tests[i].address);
#endif
  }
  {
    /* UDP semi test */
    fprintf(stderr, "* Testing UDP socket (abbreviated test)\n");
    int srv =
        fio_sock_open("127.0.0.1", "9437", FIO_SOCK_UDP | FIO_SOCK_SERVER);
    int n = 0;
    socklen_t sn = sizeof(n);
    if (-1 != getsockopt(srv, SOL_SOCKET, SO_RCVBUF, (void *)&n, &sn) &&
        sizeof(n) == sn)
      fprintf(stderr, "\t- UDP default receive buffer is %d bytes\n", n);
    n = 32 * 1024 * 1024; /* try for 32Mb */
    sn = sizeof(n);
    while (setsockopt(srv, SOL_SOCKET, SO_RCVBUF, (void *)&n, sn) == -1) {
      /* failed - repeat attempt at 0.5Mb interval */
      if (n >= (1024 * 1024)) // OS may have returned max value
        n -= 512 * 1024;
      else
        break;
    }
    do {
      n += 16 * 1024; /* at 16Kb at a time */
      if (n >= 32 * 1024 * 1024)
        break;
    } while (setsockopt(srv, SOL_SOCKET, SO_RCVBUF, (void *)&n, sn) != -1);
    if (-1 != getsockopt(srv, SOL_SOCKET, SO_RCVBUF, (void *)&n, &sn) &&
        sizeof(n) == sn)
      fprintf(stderr, "\t- UDP receive buffer could be set to %d bytes\n", n);
    FIO_ASSERT(srv != -1,
               "Couldn't open UDP server socket: %s",
               strerror(errno));
    FIO_LOG_INFO("Opening client UDP socket.");
    int cl = fio_sock_open("127.0.0.1", "9437", FIO_SOCK_UDP | FIO_SOCK_CLIENT);
    FIO_ASSERT(cl != -1,
               "Couldn't open UDP client socket: %s",
               strerror(errno));
    FIO_LOG_INFO("Starting UDP roundtrip.");
    FIO_ASSERT(fio_sock_write(cl, "hello", 5) != -1,
               "couldn't send datagram from client");
    char buf[64];
    FIO_LOG_INFO("Receiving UDP msg.");
    FIO_ASSERT(recvfrom(srv, buf, 64, 0, NULL, NULL) != -1,
               "couldn't read datagram");
    FIO_ASSERT(!memcmp(buf, "hello", 5), "transmission error");
    FIO_LOG_INFO("cleaning up UDP sockets.");
    fio_sock_close(srv);
    fio_sock_close(cl);
  }
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                                Core Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_SORT_TEST___H)
#define H___FIO_SORT_TEST___H
#define FIO_SORT_TYPE size_t
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE

FIO_SFUNC int FIO_NAME_TEST(stl, qsort_cmp)(size_t *a, size_t *b) {
  return (int)(a[0] - b[0]);
}

FIO_SFUNC void FIO_NAME_TEST(stl, sort)(void) {
  fprintf(stderr, "* Testing facil.io array sort helper:\n");
  { /* test insert sort of short array */
    size_t mixed[] = {19, 23, 28, 21, 3,  10, 7, 2,  13, 4,  15,
                      29, 26, 16, 24, 22, 11, 5, 14, 31, 25, 8,
                      12, 18, 20, 17, 1,  27, 9, 0,  6,  30};
    size_t ordered[] = {19, 23, 28, 21, 3,  10, 7, 2,  13, 4,  15,
                        29, 26, 16, 24, 22, 11, 5, 14, 31, 25, 8,
                        12, 18, 20, 17, 1,  27, 9, 0,  6,  30};
    const size_t len =
        (sizeof(ordered) / sizeof(ordered[0])) > FIO_SORT_THRESHOLD
            ? FIO_SORT_THRESHOLD
            : (sizeof(ordered) / sizeof(ordered[0]));
    qsort(ordered,
          len,
          sizeof(ordered[0]),
          (int (*)(const void *, const void *))FIO_NAME_TEST(stl, qsort_cmp));
    size_t_vec_isort(mixed, len);
    FIO_ASSERT(!memcmp(mixed, ordered, sizeof(*ordered) * len),
               "short sort failed!");
    clock_t start, end;
    start = clock();
    for (size_t i = 0; i < (1UL << 16); ++i) {
      FIO_COMPILER_GUARD;
      size_t_vec_sort(mixed, len);
    }
    end = clock();
    fprintf(stderr,
            "\t* facil.io small sorted test cycles:          %zu\n",
            (size_t)(end - start));
    start = clock();
    for (size_t i = 0; i < (1UL << 16); ++i) {
      FIO_COMPILER_GUARD;
      qsort(mixed,
            len,
            sizeof(mixed[0]),
            (int (*)(const void *, const void *))FIO_NAME_TEST(stl, qsort_cmp));
    }
    end = clock();
    fprintf(stderr,
            "\t* clib     small sorted test cycles:          %zu\n",
            (size_t)(end - start));
  }
  { /* test quick sort of an array with (1ULL << 18) elements */
    const size_t len = (1ULL << 18);
    size_t *mem =
        (size_t *)FIO_MEM_REALLOC(NULL, 0, (sizeof(*mem) * (len << 1)), 0);
    for (size_t i = 0; i < len; ++i) {
      mem[i] = mem[len + i] = (size_t)rand();
    }
    size_t_vec_sort(mem, len);
    qsort(mem + len,
          len,
          sizeof(mem[0]),
          (int (*)(const void *, const void *))FIO_NAME_TEST(stl, qsort_cmp));
    if (memcmp(mem, mem + len, (sizeof(mem[0]) * len))) {
      size_t i = 0;
      while (mem[i] == mem[len + i] && i < len)
        ++i;
      FIO_ASSERT(0, "fio_sort != clib qsort first error at index %zu", i);
    }
    clock_t start, end, fio_clk = 0, lib_clk = 0;
    for (int count = 0; count < 8; ++count) {
      for (size_t i = 0; i < len; ++i) {
        mem[i] = mem[len + i] = (size_t)rand();
      }
      start = clock();
      size_t_vec_sort(mem, len);
      end = clock();
      fio_clk += end - start;
      start = clock();
      qsort(mem + len,
            len,
            sizeof(mem[0]),
            (int (*)(const void *, const void *))FIO_NAME_TEST(stl, qsort_cmp));
      end = clock();
      lib_clk += end - start;
      FIO_ASSERT(!memcmp(mem, mem + len, (sizeof(mem[0]) * len)),
                 "fio_sort != clib qsort (iteration %zu)",
                 count);
    }
    FIO_MEM_FREE(mem, (sizeof(*mem) * (len << 1)));

    fprintf(stderr,
            "\t* facil.io random quick sort test cycles:     %zu\n",
            (size_t)fio_clk);
    fprintf(stderr,
            "\t* clib     random quick sort test cycles:     %zu\n",
            (size_t)lib_clk);
  }
}
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_STATE Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_STATE_TEST___H)
#define H___FIO_STATE_TEST___H
#ifndef H___FIO_STATE___H
#define FIO_STATE
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

static size_t FIO_NAME_TEST(stl, state_task_counter) = 0;
FIO_SFUNC void FIO_NAME_TEST(stl, state_task)(void *arg) {
  size_t *i = (size_t *)arg;
  ++i[0];
}
FIO_SFUNC void FIO_NAME_TEST(stl, state_task_global)(void *arg) {
  (void)arg;
  ++FIO_NAME_TEST(stl, state_task_counter);
}
FIO_SFUNC void FIO_NAME_TEST(stl, state)(void) {
  fprintf(stderr, "* Testing state callback API.\n");
  size_t count = 0;
  for (size_t i = 0; i < 1024; ++i) {
    fio_state_callback_add(FIO_CALL_RESERVED1,
                           FIO_NAME_TEST(stl, state_task),
                           &count);
    fio_state_callback_add(FIO_CALL_RESERVED1,
                           FIO_NAME_TEST(stl, state_task_global),
                           (void *)i);
  }
  FIO_ASSERT(!count && !FIO_NAME_TEST(stl, state_task_counter),
             "callbacks should NOT have been called yet");
  fio_state_callback_force(FIO_CALL_RESERVED1);
  FIO_ASSERT(count == 1, "count error for local counter callback (%zu)", count);
  FIO_ASSERT(FIO_NAME_TEST(stl, state_task_counter) == 1024,
             "count error for global counter callback (%zu)",
             FIO_NAME_TEST(stl, state_task_counter));
  for (size_t i = 0; i < 1024; ++i) {
    fio_state_callback_remove(FIO_CALL_RESERVED1,
                              FIO_NAME_TEST(stl, state_task),
                              &count);
    fio_state_callback_remove(FIO_CALL_RESERVED1,
                              FIO_NAME_TEST(stl, state_task_global),
                              (void *)i);
  }
  fio_state_callback_force(FIO_CALL_RESERVED1);
  FIO_ASSERT(count == 1,
             "count error for local counter callback (%zu) - not removed?",
             count);
  FIO_ASSERT(FIO_NAME_TEST(stl, state_task_counter) == 1024,
             "count error for global counter callback (%zu) - not removed?",
             FIO_NAME_TEST(stl, state_task_counter));
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_STREAM Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_STREAM_TEST___H)
#define H___FIO_STREAM_TEST___H
#ifndef H___FIO_STREAM___H
#define FIO_STREAM
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

FIO_SFUNC size_t FIO_NAME_TEST(stl, stream___noop_dealloc_count) = 0;
FIO_SFUNC void FIO_NAME_TEST(stl, stream___noop_dealloc)(void *ignr_) {
  fio_atomic_add(&FIO_NAME_TEST(stl, stream___noop_dealloc_count), 1);
  (void)ignr_;
}

FIO_SFUNC void FIO_NAME_TEST(stl, stream)(void) {
  char *const str =
      (char *)"My Hello World string should be long enough so it can be used "
              "for testing the stream functionality in the facil.io stream "
              "module. The stream moduule takes strings and failes and places "
              "them (by reference / copy) into a linked list of objects. When "
              "data is requested from the stream, the stream will either copy "
              "the data to a pre-allocated buffer or it may update the link to "
              "it points to its own internal buffer (avoiding a copy when "
              "possible).";
  fio_stream_s s = FIO_STREAM_INIT(s);
  char mem[4000];
  char *buf = mem;
  size_t len = 4000;
  size_t expect_dealloc = FIO_NAME_TEST(stl, stream___noop_dealloc_count);

  fprintf(stderr, "* Testing fio_stream for streaming buffer storage.\n");
  fio_stream_add(
      &s,
      fio_stream_pack_data(str,
                           11,
                           3,
                           1,
                           FIO_NAME_TEST(stl, stream___noop_dealloc)));
  ++expect_dealloc;
  FIO_ASSERT(fio_stream_any(&s),
             "stream is empty after `fio_stream_add` (data, copy)");
  FIO_ASSERT(FIO_NAME_TEST(stl, stream___noop_dealloc_count) == expect_dealloc,
             "copying a packet should deallocate the original");
  for (int i = 0; i < 3; ++i) {
    /* test that read operrations are immutable */
    buf = mem;
    len = 4000;

    fio_stream_read(&s, &buf, &len);
    FIO_ASSERT(FIO_NAME_TEST(stl, stream___noop_dealloc_count) ==
                   expect_dealloc,
               "reading a packet shouldn't deallocate anything");
    FIO_ASSERT(len == 11,
               "fio_stream_read didn't read all data from stream? (%zu)",
               len);
    FIO_ASSERT(!memcmp(str + 3, buf, len),
               "fio_stream_read data error? (%.*s)",
               (int)len,
               buf);
    FIO_ASSERT_DEBUG(
        buf != mem,
        "fio_stream_read should have been performed with zero-copy");
  }
  fio_stream_advance(&s, len);
  FIO_ASSERT(FIO_NAME_TEST(stl, stream___noop_dealloc_count) == expect_dealloc,
             "advancing an embedded packet shouldn't deallocate anything");
  FIO_ASSERT(
      !fio_stream_any(&s),
      "after advance, at this point, the stream should have been consumed.");
  buf = mem;
  len = 4000;
  fio_stream_read(&s, &buf, &len);
  FIO_ASSERT(
      !buf && !len,
      "reading from an empty stream should set buf and len to NULL and zero.");
  fio_stream_destroy(&s);
  FIO_ASSERT(FIO_NAME_TEST(stl, stream___noop_dealloc_count) == expect_dealloc,
             "destroying an empty stream shouldn't deallocate anything");
  FIO_ASSERT(!fio_stream_any(&s), "destroyed stream should be empty.");

  fio_stream_add(&s, fio_stream_pack_data(str, 11, 0, 1, NULL));
  fio_stream_add(
      &s,
      fio_stream_pack_data(str,
                           49,
                           11,
                           0,
                           FIO_NAME_TEST(stl, stream___noop_dealloc)));
  fio_stream_add(&s, fio_stream_pack_data(str, 20, 60, 0, NULL));
  expect_dealloc += (49 < FIO_STREAM_ALWAYS_COPY_IF_LESS_THAN);
  FIO_ASSERT(fio_stream_any(&s), "stream with data shouldn't be empty.");
  FIO_ASSERT(fio_stream_length(&s) == 80, "stream length error.");
  FIO_ASSERT(FIO_NAME_TEST(stl, stream___noop_dealloc_count) == expect_dealloc,
             "adding a stream shouldn't deallocate it.");

  buf = mem;
  len = 4000;
  fio_stream_read(&s, &buf, &len);

  FIO_ASSERT(len == 80,
             "fio_stream_read didn't read all data from stream(2)? (%zu)",
             len);
  FIO_ASSERT(!memcmp(str, buf, len),
             "fio_stream_read data error? (%.*s)",
             (int)len,
             buf);
  FIO_ASSERT(FIO_NAME_TEST(stl, stream___noop_dealloc_count) == expect_dealloc,
             "reading a stream shouldn't deallocate any packets.");

  buf = mem;
  len = 8;
  fio_stream_read(&s, &buf, &len);

  FIO_ASSERT(len < 80,
             "fio_stream_read didn't perform a partial read? (%zu)",
             len);
  FIO_ASSERT(!memcmp(str, buf, len),
             "fio_stream_read partial read data error? (%.*s)",
             (int)len,
             buf);
  FIO_ASSERT(FIO_NAME_TEST(stl, stream___noop_dealloc_count) == expect_dealloc,
             "failing to read a stream shouldn't deallocate any packets.");

  fio_stream_advance(&s, 20);
  FIO_ASSERT(FIO_NAME_TEST(stl, stream___noop_dealloc_count) == expect_dealloc,
             "partial advancing shouldn't deallocate any packets.");
  FIO_ASSERT(fio_stream_length(&s) == 60, "stream length error (2).");
  buf = mem;
  len = 4000;
  fio_stream_read(&s, &buf, &len);
  FIO_ASSERT(len == 60,
             "fio_stream_read didn't read all data from stream(3)? (%zu)",
             len);
  FIO_ASSERT(!memcmp(str + 20, buf, len),
             "fio_stream_read data error? (%.*s)",
             (int)len,
             buf);
  FIO_ASSERT(FIO_NAME_TEST(stl, stream___noop_dealloc_count) == expect_dealloc,
             "reading shouldn't deallocate packets the head packet.");

  fio_stream_add(&s, fio_stream_pack_fd(open(__FILE__, O_RDONLY), 20, 0, 0));
  FIO_ASSERT(fio_stream_length(&s) == 80, "stream length error (3).");
  buf = mem;
  len = 4000;
  fio_stream_read(&s, &buf, &len);
  FIO_ASSERT(len == 80,
             "fio_stream_read didn't read all data from stream(4)? (%zu)",
             len);
  FIO_ASSERT(!memcmp("/* *****************", buf + 60, 20),
             "fio_stream_read file read data error?\n%.*s",
             (int)len,
             buf);
  FIO_ASSERT(FIO_NAME_TEST(stl, stream___noop_dealloc_count) == expect_dealloc,
             "reading more than one packet shouldn't deallocate anything.");
  buf = mem;
  len = 4000;
  fio_stream_read(&s, &buf, &len);
  FIO_ASSERT(len == 80,
             "fio_stream_read didn't (re)read all data from stream(5)? (%zu)",
             len);
  FIO_ASSERT(!memcmp("/* *****************", buf + 60, 20),
             "fio_stream_read file (re)read data error? (%.*s)",
             (int)len,
             buf);

  fio_stream_destroy(&s);
  expect_dealloc += (49 >= FIO_STREAM_ALWAYS_COPY_IF_LESS_THAN);

  FIO_ASSERT(!fio_stream_any(&s), "destroyed stream should be empty.");
  FIO_ASSERT(FIO_NAME_TEST(stl, stream___noop_dealloc_count) == expect_dealloc,
             "destroying a stream should deallocate it's packets.");
  fio_stream_add(
      &s,
      fio_stream_pack_data(str,
                           49,
                           11,
                           0,
                           FIO_NAME_TEST(stl, stream___noop_dealloc)));
  buf = mem;
  len = 4000;
  fio_stream_read(&s, &buf, &len);
  FIO_ASSERT(len == 49,
             "fio_stream_read didn't read all data from stream? (%zu)",
             len);
  FIO_ASSERT(!memcmp(str + 11, buf, len),
             "fio_stream_read data error? (%.*s)",
             (int)len,
             buf);
  fio_stream_advance(&s, 80);
  ++expect_dealloc;
  FIO_ASSERT(FIO_NAME_TEST(stl, stream___noop_dealloc_count) == expect_dealloc,
             "partial advancing shouldn't deallocate any packets.");
  FIO_ASSERT(!fio_stream_any(&s), "stream should be empty at this point.");
  FIO_ASSERT(!fio_stream_length(&s),
             "stream length should be zero at this point.");
  fio_stream_destroy(&s);
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_STR Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_STR_TEST___H)
#define H___FIO_STR_TEST___H
#ifndef H___FIO_STR___H
#define FIO_STR
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

FIO_SFUNC size_t FIO_NAME_TEST(stl, string_core_ltoa)(char *buf,
                                                      int64_t i,
                                                      uint8_t base) {
  fio_str_info_s s = FIO_STR_INFO3(buf, 0, 1024);
  if (base == 16) {
    fio_string_write_hex(&s, NULL, i);
    return s.len;
  }
  if (base == 2) {
    fio_string_write_bin(&s, NULL, i);
    return s.len;
  }
  fio_string_write_i(&s, NULL, i);
  return s.len;
}

FIO_SFUNC void FIO_NAME_TEST(stl, string_core_helpers)(void) {
  fprintf(stderr, "* Testing Core String API.\n");
  { /* test basic fio_string_write functions. */
    fprintf(stderr, "* Testing Core String writing functions.\n");
    char mem[16];
    fio_str_info_s buf = FIO_STR_INFO3(mem, 0, 16);
    FIO_ASSERT(!fio_string_write(&buf, NULL, "World", 5),
               "non-truncated return should be zero for fio_string_write");
    FIO_ASSERT(mem == buf.buf && buf.len == 5 && !memcmp(buf.buf, "World", 6),
               "fio_string_write failed!");
    FIO_ASSERT(!fio_string_replace(&buf, NULL, 0, 0, "Hello ", 6),
               "non-truncated return should be zero for fio_string_replace");
    FIO_ASSERT(mem == buf.buf && buf.len == 11 &&
                   !memcmp(buf.buf, "Hello World", 12),
               "fio_string_replace failed to perform insert (index[0])!");
    fio_string_write(&buf, NULL, "Hello World", 11);
    FIO_ASSERT(mem == buf.buf && buf.len == 15 &&
                   !memcmp(buf.buf, "Hello WorldHell", 16),
               "fio_string_write failed to truncate!");
    fio_string_replace(&buf, NULL, 0, 5, "Hola", 4);
    FIO_ASSERT(mem == buf.buf && buf.len == 14 &&
                   !memcmp(buf.buf, "Hola WorldHell", 15),
               "fio_string_replace at index 0 failed!");
    FIO_ASSERT(!fio_string_replace(&buf, NULL, 5, 9, "World", 5),
               "non-truncated return should be zero for fio_string_replace");
    FIO_ASSERT(mem == buf.buf && buf.len == 10 &&
                   !memcmp(buf.buf, "Hola World", 11),
               "fio_string_replace end overwrite failed!");
    fio_string_replace(&buf, NULL, 5, 0, "my beautiful", 12);
    FIO_ASSERT(mem == buf.buf && buf.len == 15 &&
                   !memcmp(buf.buf, "Hola my beautif", 16),
               "fio_string_replace failed to truncate!");
    FIO_ASSERT(fio_string_replace(&buf, NULL, -11, 2, "big", 3),
               "truncation should return non-zero on fio_string_replace.");
    FIO_ASSERT(mem == buf.buf && buf.len == 15 &&
                   !memcmp(buf.buf, "Hola big beauti", 16),
               "fio_string_replace failed to truncate (negative index)!");
    buf = FIO_STR_INFO3(mem, 0, 16);
    fio_string_printf(&buf, NULL, "I think %d is the best answer", 42);
    FIO_ASSERT(mem == buf.buf && buf.len == 15 &&
                   !memcmp(buf.buf, "I think 42 is t", 16),
               "fio_string_printf failed to truncate!");

    FIO_MEMSET(mem, 0, 16);
    buf = FIO_STR_INFO3(mem, 0, 16);
    FIO_ASSERT(
        fio_string_write2(&buf,
                          NULL,
                          FIO_STRING_WRITE_STR2((char *)"I think ", 8),
                          FIO_STRING_WRITE_NUM(42),
                          FIO_STRING_WRITE_STR1((char *)" is the best answer")),
        "truncation return value should be non-zero for fio_string_write2.");
    FIO_ASSERT(mem == buf.buf && buf.len == 15 &&
                   !memcmp(buf.buf, "I think 42 is t", 16),
               "fio_string_write2 failed to truncate!");
    FIO_MEMSET(mem, 0, 16);
    buf = FIO_STR_INFO3(mem, 0, 16);
    FIO_ASSERT(
        fio_string_write2(&buf,
                          NULL,
                          FIO_STRING_WRITE_STR2((char *)"I think ", 8),
                          FIO_STRING_WRITE_HEX(42),
                          FIO_STRING_WRITE_STR1((char *)" is the best answer")),
        "truncation return value should be non-zero for fio_string_write2.");
    FIO_ASSERT(mem == buf.buf && buf.len == 15 &&
                   !memcmp(buf.buf, "I think 2A is t", 16),
               "fio_string_write2 failed to truncate (hex)!");
    FIO_MEMSET(mem, 0, 16);
    buf = FIO_STR_INFO3(mem, 0, 16);
    FIO_ASSERT(
        fio_string_write2(&buf,
                          NULL,
                          FIO_STRING_WRITE_STR2((char *)"I Think ", 8),
                          FIO_STRING_WRITE_FLOAT(42.42),
                          FIO_STRING_WRITE_STR1((char *)" is the best answer")),
        "truncation return value should be non-zero for fio_string_write2.");
    FIO_ASSERT(mem == buf.buf && buf.len == 15 &&
                   !memcmp(buf.buf, "I Think 42.42 i", 16),
               "fio_string_write2 failed to truncate (float)!");
    buf = FIO_STR_INFO3(mem, 0, 16);
    fio_string_write2(&buf,
                      NULL,
                      FIO_STRING_WRITE_STR2((char *)"I think ", 8),
                      FIO_STRING_WRITE_BIN(-1LL),
                      FIO_STRING_WRITE_STR1((char *)" is the best answer"));
    FIO_ASSERT(mem == buf.buf && buf.len == 8 &&
                   !memcmp(buf.buf, "I think ", 8),
               "fio_string_write2 failed to truncate (bin)!");
  }
  { /* test numeral fio_string_write functions. */
    char mem[32];
    fio_str_info_s buf = FIO_STR_INFO3(mem, 0, 32);
    FIO_ASSERT(!fio_string_write_i(&buf, NULL, 0),
               "fio_string_write_i returned error!");
    FIO_ASSERT(mem == buf.buf && buf.len == 1 && !memcmp(buf.buf, "0", 2),
               "fio_string_write_i didn't print 0!");
    FIO_ASSERT(!fio_string_write_i(&buf, NULL, -42),
               "fio_string_write_i returned error!");
    FIO_ASSERT(mem == buf.buf && buf.len == 4 && !memcmp(buf.buf, "0-42", 5),
               "fio_string_write_i didn't print -24!");
    buf = FIO_STR_INFO3(mem, 0, 32);
    FIO_ASSERT(!fio_string_write_u(&buf, NULL, 0),
               "fio_string_write_u returned error!");
    FIO_ASSERT(mem == buf.buf && buf.len == 1 && !memcmp(buf.buf, "0", 2),
               "fio_string_write_u didn't print 0!");
    FIO_ASSERT(!fio_string_write_u(&buf, NULL, -42LL),
               "fio_string_write_u returned error!");
    FIO_ASSERT(mem == buf.buf && buf.len == 21 &&
                   !memcmp(buf.buf, "018446744073709551574", 21),
               "fio_string_write_u didn't print -24!");
    buf = FIO_STR_INFO3(mem, 0, 32);
    FIO_ASSERT(!fio_string_write_hex(&buf, NULL, 0),
               "fio_string_write_hex returned error!");
    FIO_ASSERT(mem == buf.buf && buf.len == 2 && !memcmp(buf.buf, "00", 3),
               "fio_string_write_hex didn't print 0!");
    FIO_ASSERT(!fio_string_write_hex(&buf, NULL, 42),
               "fio_string_write_hex returned error!");
    FIO_ASSERT(mem == buf.buf && buf.len == 4 && !memcmp(buf.buf, "002A", 5),
               "fio_string_write_hex didn't print 2A!");
    buf = FIO_STR_INFO3(mem, 0, 32);
    FIO_ASSERT(!fio_string_write_bin(&buf, NULL, 0),
               "fio_string_write_bin returned error!");
    FIO_ASSERT(mem == buf.buf && buf.len == 1 && !memcmp(buf.buf, "0", 2),
               "fio_string_write_bin didn't print 0!");
    FIO_ASSERT(!fio_string_write_bin(&buf, NULL, 16),
               "fio_string_write_bin returned error!");
    FIO_ASSERT(mem == buf.buf && buf.len == 7 && !memcmp(buf.buf, "0010000", 8),
               "fio_string_write_bin didn't print 16!");
  }
  { /* Testing UTF-8 */
    fprintf(stderr, "* Testing UTF-8 support.\n");
    /* 4B heart, 3B heart, 3B heart resizer, 4B heart, 2B f, 1B Z */
    const char *utf8_sample =
        "\xf0\x9f\x92\x95\xe2\x9d\xa4\xef\xb8\x8f\xf0\x9f\x92\x95\xc6\x92Z\0";
    fio_str_info_s utf8 = FIO_STR_INFO1((char *)utf8_sample);

    FIO_ASSERT(fio_string_utf8_valid(utf8),
               "fio_string_utf8_valid failed on valid code");
    FIO_ASSERT(fio_string_utf8_len(utf8) == 6, /* manual knowledge */
               "fio_string_utf8_len failed with valid UTF-8 %zu != 6",
               fio_string_utf8_len(utf8));
    intptr_t pos = -4;
    size_t len = 2;
    FIO_ASSERT(fio_string_utf8_select(utf8, &pos, &len) == 0,
               "`fio_string_utf8_select` returned error for negative pos on "
               "UTF-8 data! (%zd, %zu)",
               (ssize_t)pos,
               len);
    FIO_ASSERT(pos == (intptr_t)utf8.len - 10,
               "`fio_string_utf8_select` error, negative position invalid on "
               "UTF-8 data! (%zd)",
               (ssize_t)pos);
    FIO_ASSERT(len == 7, /* heart + math 'f' */
               "`fio_string_utf8_select` error, truncated length invalid on "
               "UTF-8 data! (%zd)",
               (ssize_t)len);
    pos = 1;
    len = 20;
    FIO_ASSERT(fio_string_utf8_select(utf8, &pos, &len) == 0,
               "`fio_string_utf8_select` returned error on UTF-8 data! "
               "(%zd, %zu)",
               (ssize_t)pos,
               len);
    FIO_ASSERT(pos == 4,
               "`fio_string_utf8_select` error, position invalid on "
               "UTF-8 data! (%zd)",
               (ssize_t)pos);
    FIO_ASSERT(len == utf8.len - 4,
               "`fio_string_utf8_select` error, length invalid on "
               "UTF-8 data! (%zd != %zu)",
               (ssize_t)len,
               utf8.len - 4);
    pos = 1;
    len = 3;
    FIO_ASSERT(fio_string_utf8_select(utf8, &pos, &len) == 0,
               "`fio_string_utf8_select` returned error on UTF-8 data "
               "(2)! (%zd, %zu)",
               (ssize_t)pos,
               len);
    FIO_ASSERT(len == 10, /* 3 UTF-8 chars: 4 byte + 4 byte + 2 byte == 10 */
               "`fio_string_utf8_select` error, length invalid on UTF-8 data! "
               "(%zd)",
               (ssize_t)len);
    /* TODO! test fio_string_utf8_valid speed. */
  }
  { /* testing C / JSON style escaping */
    fprintf(stderr, "* Testing C / JSON style character (un)escaping.\n");
    char mem[2048];
    fio_str_info_s unescaped = FIO_STR_INFO3(mem, 0, 512);
    fio_str_info_s decoded = FIO_STR_INFO3(mem + 512, 0, 512);
    fio_str_info_s encoded = FIO_STR_INFO3(mem + 1024, 0, 1024);
    const char *utf8_sample = /* three hearts, small-big-small*/
        "\xf0\x9f\x92\x95\xe2\x9d\xa4\xef\xb8\x8f\xf0\x9f\x92\x95\xc6\x92Z";
    // "\xf0\x9f\x92\x95\xe2\x9d\xa4\xef\xb8\x8f\xf0\x9f\x92\x95";
    FIO_ASSERT(!fio_string_write(&unescaped,
                                 NULL,
                                 utf8_sample,
                                 FIO_STRLEN(utf8_sample)),
               "Couldn't write UTF-8 example.");
    for (int i = 1; i < 256; ++i) {
      uint8_t c = i;
      FIO_ASSERT(!fio_string_write(&unescaped, NULL, &c, 1),
                 "write returned an error");
    }
    FIO_ASSERT(
        !fio_string_write_escape(&encoded, NULL, unescaped.buf, unescaped.len),
        "write escape returned an error");
    FIO_ASSERT(
        !fio_string_write_unescape(&decoded, NULL, encoded.buf, encoded.len),
        "write unescape returned an error");
    FIO_ASSERT(encoded.len, "JSON encoding failed");
    FIO_ASSERT(decoded.buf == mem + 512 && encoded.buf == mem + 1024,
               "C escaping unexpected side-effects!");
    FIO_ASSERT(!memcmp(encoded.buf, utf8_sample, FIO_STRLEN(utf8_sample)),
               "valid UTF-8 data shouldn't be escaped:\n%.*s\n%s",
               (int)encoded.len,
               encoded.buf,
               decoded.buf);
    FIO_ASSERT(unescaped.len == decoded.len,
               "C escaping roundtrip length error, %zu != %zu (%zu - "
               "%zu):\n%.127s\n\n!=>\n\n%.127s",
               unescaped.len,
               decoded.len,
               decoded.len,
               encoded.len,
               encoded.buf,
               decoded.buf);
    FIO_ASSERT(!memcmp(unescaped.buf, decoded.buf, unescaped.len),
               "C escaping round-trip failed:\n %s",
               decoded.buf);
  }
  { /* testing Base64 Support */
    fprintf(stderr, "* Testing Base64 encoding / decoding.\n");
    char mem[2048];
    fio_str_info_s original = FIO_STR_INFO3(mem, 0, 512);
    fio_str_info_s decoded = FIO_STR_INFO3(mem + 512, 0, 512);
    fio_str_info_s encoded = FIO_STR_INFO3(mem + 1024, 0, 512);
    fio_string_write(&original,
                     NULL,
                     "Hello World, this is the voice of peace:)",
                     41);
    for (int i = 0; i < 256; ++i) {
      uint8_t c = i;
      FIO_ASSERT(!fio_string_write(&original, NULL, &c, 1),
                 "write returned an error");
    }
    FIO_ASSERT(!fio_string_write_base64enc(&encoded,
                                           NULL,
                                           original.buf,
                                           original.len,
                                           1),
               "base64 write escape returned an error");
    FIO_ASSERT(
        !fio_string_write_base64dec(&decoded, NULL, encoded.buf, encoded.len),
        "base64 write unescape returned an error");

    FIO_ASSERT(encoded.len, "Base64 encoding failed");
    FIO_ASSERT(decoded.len < encoded.len,
               "Base64 decoding failed:\n%s",
               encoded.buf);
    FIO_ASSERT(original.len == decoded.len,
               "Base64 roundtrip length error, %zu != %zu (%zu - %zu):\n %s",
               original.len,
               decoded.len,
               decoded.len,
               encoded.len,
               decoded.buf);
    FIO_ASSERT(!memcmp(original.buf, decoded.buf, original.len),
               "Base64 round-trip failed:\n %s",
               decoded.buf);
  }
  { /* testing Base32 Support */
    fprintf(stderr, "* Testing Base32 encoding / decoding.\n");
    char mem[2048];
    fio_str_info_s original = FIO_STR_INFO3(mem, 0, 512);
    fio_str_info_s decoded = FIO_STR_INFO3(mem + 512, 0, 512);
    fio_str_info_s encoded = FIO_STR_INFO3(mem + 1024, 0, 512);
    fio_string_write(&original,
                     NULL,
                     "Hello World, this is the voice of peace:)",
                     41);
    for (int i = 0; i < 256; ++i) {
      uint8_t c = i;
      FIO_ASSERT(!fio_string_write(&original, NULL, &c, 1),
                 "write returned an error");
    }
    FIO_ASSERT(
        !fio_string_write_base32enc(&encoded, NULL, original.buf, original.len),
        "base32 write escape returned an error");
    FIO_ASSERT(
        !fio_string_write_base32dec(&decoded, NULL, encoded.buf, encoded.len),
        "base32 write unescape returned an error");

    FIO_ASSERT(encoded.len, "Base32 encoding failed");
    FIO_ASSERT(decoded.len < encoded.len,
               "Base32 decoding failed:\n%s",
               encoded.buf);
    FIO_ASSERT(original.len == decoded.len,
               "Base32 roundtrip length error, %zu != %zu (%zu - %zu):\n %s",
               original.len,
               decoded.len,
               decoded.len,
               encoded.len,
               decoded.buf);
    FIO_ASSERT(!memcmp(original.buf, decoded.buf, original.len),
               "Base32 round-trip failed: (%zu vs. %zu bytes, encoded using "
               "%zu bytes)\n %s",
               original.len,
               decoded.len,
               encoded.len,
               decoded.buf);
  }
  { /* testing URL encoding Support */
    fprintf(stderr, "* Testing URL (percent) encoding / decoding.\n");
    char mem[2048];
    for (size_t i = 0; i < 256; ++i) {
      mem[i] = i;
    }
    fio_str_info_s original = FIO_STR_INFO3(mem, 256, 256);
    fio_str_info_s encoded = FIO_STR_INFO3(mem + 256, 0, 1024);
    fio_str_info_s decoded = FIO_STR_INFO3(mem + 1024 + 256, 0, 257);
    FIO_ASSERT(
        !fio_string_write_url_enc(&encoded, NULL, mem, 256),
        "fio_string_write_url_enc reported an error where none was expected!");
    FIO_ASSERT(encoded.len > 256, "fio_string_write_url_enc did nothing?");
    FIO_ASSERT(
        !fio_string_write_url_dec(&decoded, NULL, encoded.buf, encoded.len),
        "fio_string_write_url_dec reported an error where none was expected!");
    FIO_ASSERT(FIO_STR_INFO_IS_EQ(original, decoded),
               "fio_string_write_url_enc/dec roundtrip failed!");
  }
  { /* testing HTML escaping / un-escaping Support */
    fprintf(stderr, "* Testing HTML escaping / un-escaping (basic support)\n");
    char mem[3072];
    fio_str_info_s original = FIO_STR_INFO3(mem, 127, 256);
    fio_str_info_s escaped = FIO_STR_INFO3(mem + 256, 0, 2048);
    fio_str_info_s unescaped = FIO_STR_INFO3(mem + 2560, 0, 512);
    for (size_t i = 0; i < 127; ++i)
      mem[i] = (char)i;
    FIO_ASSERT(!fio_string_write_html_escape(&escaped,
                                             NULL,
                                             original.buf,
                                             original.len),
               "fio_string_write_html_escape returned an error");
    for (size_t i = 0; i < 2; ++i) {
      FIO_ASSERT(!fio_string_write_html_unescape(&unescaped,
                                                 NULL,
                                                 escaped.buf,
                                                 escaped.len),
                 "fio_string_write_html_unescape returned an error");
      FIO_ASSERT(!FIO_STR_INFO_IS_EQ(original, escaped),
                 "fio_string_write_html_escape did nothing!");
      FIO_ASSERT(FIO_STR_INFO_IS_EQ(original, unescaped),
                 "fio_string_write_html_(un)escape roundtrip failed!");
      original.len = 0;
      fio_string_write(&original, NULL, "ÿ", FIO_STRLEN("ÿ"));
      original.buf[original.len++] = (char)0xE2; /* euro sign (UTF-8) */
      original.buf[original.len++] = (char)0x82;
      original.buf[original.len++] = (char)0xAC;
      original.buf[original.len++] = (char)0xC2; /* pounds (UTF-8) */
      original.buf[original.len++] = (char)0xA3;
      original.buf[original.len++] = (char)0xC2; /* cents (UTF-8) */
      original.buf[original.len++] = (char)0xA2;
      original.buf[original.len++] = (char)0xC2; /* copyright (UTF-8) */
      original.buf[original.len++] = (char)0xA9;
      original.buf[original.len++] = (char)0xC2; /* trademark (UTF-8) */
      original.buf[original.len++] = (char)0xAE;
      original.buf[original.len++] = (char)0xC2; /* nbsp; (UTF-8) */
      original.buf[original.len++] = (char)0xA0;
      original.buf[original.len++] = (char)0x26; /* & */
      original.buf[original.len++] = (char)0x27; /* ' */
      original.buf[original.len++] = (char)0x22; /* " */
      original.buf[original.len] = 0;
      unescaped.len = escaped.len = 0;
      fio_string_write(
          &escaped,
          NULL,
          "&#255;&eUro;&pound;&cenT&Copy;&reg&nbsp;&amp;&apos;&quot",
          56);
    }
    original.buf[original.len] = 0;
    unescaped.len = escaped.len = 0;
    escaped.capa = 8;
    FIO_ASSERT(fio_string_write_html_escape(&escaped,
                                            NULL,
                                            original.buf,
                                            original.len),
               "fio_string_write_html_escape should error on capacity");
  }
  { /* Comparison testing */
    fprintf(stderr, "* Testing comparison\n");
    FIO_ASSERT(fio_string_is_greater(FIO_STR_INFO1((char *)"A"),
                                     FIO_STR_INFO1((char *)"")),
               "fio_string_is_greater failed for A vs __");
    FIO_ASSERT(fio_string_is_greater(FIO_STR_INFO1((char *)"hello world"),
                                     FIO_STR_INFO1((char *)"hello worl")),
               "fio_string_is_greater failed for hello worl(d)");
    FIO_ASSERT(fio_string_is_greater(FIO_STR_INFO1((char *)"01234567"),
                                     FIO_STR_INFO1((char *)"012345664")),
               "fio_string_is_greater failed for 01234567");
    FIO_ASSERT(!fio_string_is_greater(FIO_STR_INFO1((char *)""),
                                      FIO_STR_INFO1((char *)"A")),
               "fio_string_is_greater failed for A inv");
    FIO_ASSERT(!fio_string_is_greater(FIO_STR_INFO1((char *)"hello worl"),
                                      FIO_STR_INFO1((char *)"hello world")),
               "fio_string_is_greater failed for hello worl(d) inv");
    FIO_ASSERT(!fio_string_is_greater(FIO_STR_INFO1((char *)"012345664"),
                                      FIO_STR_INFO1((char *)"01234567")),
               "fio_string_is_greater failed for 01234567 inv");
    FIO_ASSERT(!fio_string_is_greater(FIO_STR_INFO1((char *)"Hzzzzzzzzzz"),
                                      FIO_STR_INFO1((char *)"hello world")),
               "fio_string_is_greater failed for Hello world");
  }
  { /* testing fio_bstr helpers */
    fprintf(stderr, "* Testing fio_bstr helpers (micro test).\n");
    char *str = fio_bstr_write(NULL, "Hello", 5);
    FIO_ASSERT(fio_bstr_info(str).len == 5 &&
                   !memcmp(str, "Hello", fio_bstr_info(str).len + 1),
               "fio_bstr_write failed!");
    FIO_ASSERT(fio_bstr_is_greater(str, NULL),
               "fio_bstr_is_greater failed vs a NULL String");
    str = fio_bstr_write2(str,
                          FIO_STRING_WRITE_STR1((char *)" "),
                          FIO_STRING_WRITE_STR1((char *)"World!"));
    FIO_ASSERT(fio_bstr_info(str).len == 12 &&
                   !memcmp(str, "Hello World!", fio_bstr_info(str).len + 1),
               "fio_bstr_write2 failed!");
    /* test copy-on-write for fio_bstr_copy */
    char *s_copy = fio_bstr_copy(str);
    FIO_ASSERT(s_copy == str, "fio_bstr_copy should only copy on write");
    str = fio_bstr_write(str, "!", 1);
    FIO_ASSERT(s_copy != str, "fio_bstr_s write after copy error!");
    FIO_ASSERT(fio_bstr_len(str) > fio_bstr_len(s_copy),
               "fio_bstr copy after write length error!");
    FIO_ASSERT(!memcmp(str, s_copy, fio_bstr_len(s_copy)),
               "fio_bstr copy after write copied data error!");
    FIO_ASSERT(FIO_BUF_INFO_IS_EQ(fio_bstr_buf(s_copy),
                                  FIO_BUF_INFO2((char *)"Hello World!", 12)),
               "fio_bstr old copy corrupted?");
    fio_bstr_free(s_copy);
    fio_bstr_free(str);
  }
  { /* testing readfile */
    char *s = fio_bstr_readfile(NULL, __FILE__, 0, 0);
    FIO_ASSERT(s && fio_bstr_len(s), "fio_bstr_readfile failed");
    FIO_LOG_DEBUG("readfile returned %zu bytes, starting with:\n%s",
                  fio_bstr_len(s),
                  s);
    char *find_z = (char *)FIO_MEMCHR(s, 'Z', fio_bstr_len(s));
    if (find_z) {
      int fd = open(__FILE__, 0, "r"); // fio_filename_open(__FILE__, 0);
      FIO_ASSERT(fd != -1, "couldn't open file for testing: " __FILE__);
      size_t z_index = fio_fd_find_next(fd, 'Z', 0);
      FIO_ASSERT(z_index != FIO_FD_FIND_EOF, "fio_fd_find_next returned EOF");
      FIO_ASSERT(z_index == (size_t)(find_z - s),
                 "fio_fd_find_next index error (%zu != %zu)",
                 z_index,
                 (size_t)(find_z - s));
      close(fd);
      char *s2 = fio_bstr_getdelim_file(NULL, __FILE__, 0, 'Z', 0);
      FIO_ASSERT(fio_bstr_len(s2) == z_index + 1,
                 "fio_bstr_getdelim_file length error (%zu != %zu)?",
                 fio_bstr_len(s2),
                 z_index + 1);
      FIO_ASSERT(s2[z_index] == 'Z',
                 "fio_bstr_getdelim_file copy error?\n%s",
                 s2);
      fio_bstr_free(s2);
    } else {
      FIO_LOG_WARNING("couldn't find 'Z' after reading file (bstr)");
    }
    fio_bstr_free(s);
  }

#if !defined(DEBUG) || defined(NODEBUG)
  { /* speed testing comparison */
    char mem[4096];
    fio_str_info_s sa = FIO_STR_INFO3(mem, 0, 2047);
    fio_str_info_s sb = FIO_STR_INFO3(mem + 2048, 0, 2047);
    fio_string_readfile(&sa, NULL, __FILE__, 0, 0);
    fio_string_write(&sb, NULL, sa.buf, sa.len);
    sa.buf[sa.len - 1] += 1;
    fio_buf_info_s sa_buf = FIO_STR2BUF_INFO(sa);
    fio_buf_info_s sb_buf = FIO_STR2BUF_INFO(sb);

    const size_t test_repetitions = (1ULL << 19);
    const size_t positions[] = {(sa.len - 1), ((sa.len >> 1) - 1), 30, 0};
    for (const size_t *ppos = positions; *ppos; ++ppos) {
      sa.buf[*ppos] += 1;
      sa.len = *ppos + 1;
      sb.len = *ppos + 1;
      fprintf(stderr,
              "* Testing comparison speeds (%zu tests of %zu bytes):\n",
              test_repetitions,
              *ppos);
      clock_t start = clock();
      for (size_t i = 0; i < test_repetitions; ++i) {
        FIO_COMPILER_GUARD;
        int r = fio_string_is_greater_buf(sa_buf, sb_buf);
        FIO_ASSERT(r > 0, "fio_string_is_greater error?!");
      }
      clock_t end = clock();
      fprintf(stderr,
              "\t* fio_string_is_greater test cycles:   %zu\n",
              (size_t)(end - start));
      start = clock();
      for (size_t i = 0; i < test_repetitions; ++i) {
        FIO_COMPILER_GUARD;
        int r = memcmp(sa.buf, sb.buf, sa.len > sb.len ? sb.len : sa.len);
        if (!r)
          r = sa.len > sb.len;
        FIO_ASSERT(r > 0, "memcmp error?!");
      }
      end = clock();
      fprintf(stderr,
              "\t* memcmp libc test cycles:             %zu\n",
              (size_t)(end - start));
      start = clock();
      for (size_t i = 0; i < test_repetitions; ++i) {
        FIO_COMPILER_GUARD;
        int r = strcmp(sa.buf, sb.buf);
        FIO_ASSERT(r > 0, "strcmp error?!");
      }
      end = clock();
      fprintf(stderr,
              "\t* strcmp libc test cycles:             %zu\n",
              (size_t)(end - start));
      start = clock();
      for (size_t i = 0; i < test_repetitions; ++i) {
        FIO_COMPILER_GUARD;
        int r =
            !fio_ct_is_eq(sa.buf, sb.buf, sa.len > sb.len ? sb.len : sa.len);
        if (!r)
          r = sa.len > sb.len;
        FIO_ASSERT(r, "fio_ct_is_eq error?!");
      }
      end = clock();
      fprintf(stderr,
              "\t* fio_ct_is_eq test cycles:            %zu (only equality)\n",
              (size_t)(end - start));
    }

    fprintf(stderr, "* Testing fio_string_write_(i|u|hex|bin) speeds:\n");
    FIO_NAME_TEST(stl, atol_speed)
    ("fio_string_write/fio_atol",
     fio_atol,
     FIO_NAME_TEST(stl, string_core_ltoa));
  }
#endif /* DEBUG */
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_TIME Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_TIME_TEST___H)
#define H___FIO_TIME_TEST___H
#ifndef H___FIO_TIME___H
#define FIO_TIME
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

#define FIO___GMTIME_TEST_INTERVAL ((60LL * 60 * 23) + 1027) /* 23:17:07 */
#if 1 || FIO_OS_WIN
#define FIO___GMTIME_TEST_RANGE (1001LL * 376) /* test 0.5 millenia */
#else
#define FIO___GMTIME_TEST_RANGE (3003LL * 376) /* test ~3  millenia */
#endif

#if FIO_OS_WIN && !defined(gmtime_r)
FIO_IFUNC struct tm *gmtime_r(const time_t *timep, struct tm *result) {
  struct tm *t = gmtime(timep);
  if (t && result)
    *result = *t;
  return result;
}
#endif

FIO_SFUNC void FIO_NAME_TEST(stl, time)(void) {
  fprintf(stderr, "* Testing facil.io fio_time2gm vs gmtime_r\n");
  struct tm tm1 = {0}, tm2 = {0};
  const time_t now = fio_time_real().tv_sec;
#if FIO_OS_WIN
  const time_t end = (FIO___GMTIME_TEST_RANGE * FIO___GMTIME_TEST_INTERVAL);
  time_t t = 1; /* Windows fails on some date ranges. */
#else
  const time_t end =
      now + (FIO___GMTIME_TEST_RANGE * FIO___GMTIME_TEST_INTERVAL);
  time_t t = now - (FIO___GMTIME_TEST_RANGE * FIO___GMTIME_TEST_INTERVAL);
#endif
  FIO_ASSERT(t < end, "time testing range overflowed.");
  do {
    time_t tmp = t;
    t += FIO___GMTIME_TEST_INTERVAL;
    tm2 = fio_time2gm(tmp);
    FIO_ASSERT(fio_gm2time(tm2) == tmp,
               "fio_gm2time roundtrip error (%zu != %zu)",
               (size_t)fio_gm2time(tm2),
               (size_t)tmp);
    gmtime_r(&tmp, &tm1);
    if (tm1.tm_year != tm2.tm_year || tm1.tm_mon != tm2.tm_mon ||
        tm1.tm_mday != tm2.tm_mday || tm1.tm_yday != tm2.tm_yday ||
        tm1.tm_hour != tm2.tm_hour || tm1.tm_min != tm2.tm_min ||
        tm1.tm_sec != tm2.tm_sec || tm1.tm_wday != tm2.tm_wday) {
      char buf[256];
      FIO_LOG_ERROR("system gmtime_r != fio_time2gm for %ld!\n", (long)t);
      fio_time2rfc7231(buf, tmp);
      FIO_ASSERT(0,
                 "\n"
                 "-- System:\n"
                 "\ttm_year: %d\n"
                 "\ttm_mon: %d\n"
                 "\ttm_mday: %d\n"
                 "\ttm_yday: %d\n"
                 "\ttm_hour: %d\n"
                 "\ttm_min: %d\n"
                 "\ttm_sec: %d\n"
                 "\ttm_wday: %d\n"
                 "-- facil.io:\n"
                 "\ttm_year: %d\n"
                 "\ttm_mon: %d\n"
                 "\ttm_mday: %d\n"
                 "\ttm_yday: %d\n"
                 "\ttm_hour: %d\n"
                 "\ttm_min: %d\n"
                 "\ttm_sec: %d\n"
                 "\ttm_wday: %d\n"
                 "-- As String:\n"
                 "\t%s",
                 tm1.tm_year,
                 tm1.tm_mon,
                 tm1.tm_mday,
                 tm1.tm_yday,
                 tm1.tm_hour,
                 tm1.tm_min,
                 tm1.tm_sec,
                 tm1.tm_wday,
                 tm2.tm_year,
                 tm2.tm_mon,
                 tm2.tm_mday,
                 tm2.tm_yday,
                 tm2.tm_hour,
                 tm2.tm_min,
                 tm2.tm_sec,
                 tm2.tm_wday,
                 buf);
    }
  } while (t < end);
  {
    char buf[48];
    buf[47] = 0;
    FIO_MEMSET(buf, 'X', 47);
    fio_time2rfc7231(buf, now);
    FIO_LOG_DEBUG2("fio_time2rfc7231:   %s", buf);
    FIO_MEMSET(buf, 'X', 47);
    fio_time2rfc2109(buf, now);
    FIO_LOG_DEBUG2("fio_time2rfc2109:   %s", buf);
    FIO_MEMSET(buf, 'X', 47);
    fio_time2rfc2822(buf, now);
    FIO_LOG_DEBUG2("fio_time2rfc2822:   %s", buf);
    FIO_MEMSET(buf, 'X', 47);
    fio_time2log(buf, now);
    FIO_LOG_DEBUG2("fio_time2log:       %s", buf);
  }
  {
    uint64_t start, stop;
#if DEBUG
    fprintf(stderr, "PERFOMEANCE TESTS IN DEBUG MODE ARE BIASED\n");
#endif
    fprintf(stderr, "  Performance testing fio_time2gm vs gmtime_r\n");
    start = fio_time_micro();
    for (size_t i = 0; i < (1 << 17); ++i) {
      volatile struct tm tm = fio_time2gm(now);
      FIO_COMPILER_GUARD;
      (void)tm;
    }
    stop = fio_time_micro();
    fprintf(stderr,
            "\t- fio_time2gm speed test took:\t%zuus\n",
            (size_t)(stop - start));
    start = fio_time_micro();
    for (size_t i = 0; i < (1 << 17); ++i) {
      volatile struct tm tm;
      time_t tmp = now;
      gmtime_r(&tmp, (struct tm *)&tm);
      FIO_COMPILER_GUARD;
    }
    stop = fio_time_micro();
    fprintf(stderr,
            "\t- gmtime_r speed test took:  \t%zuus\n",
            (size_t)(stop - start));
    fprintf(stderr, "\n");
    struct tm tm_now = fio_time2gm(now);
    start = fio_time_micro();
    for (size_t i = 0; i < (1 << 17); ++i) {
      tm_now = fio_time2gm(now + i);
      time_t t_tmp = fio_gm2time(tm_now);
      FIO_COMPILER_GUARD;
      (void)t_tmp;
    }
    stop = fio_time_micro();
    fprintf(stderr,
            "\t- fio_gm2time speed test took:\t%zuus\n",
            (size_t)(stop - start));
    start = fio_time_micro();
    for (size_t i = 0; i < (1 << 17); ++i) {
      tm_now = fio_time2gm(now + i);
      volatile time_t t_tmp = mktime((struct tm *)&tm_now);
      FIO_COMPILER_GUARD;
      (void)t_tmp;
    }
    stop = fio_time_micro();
    fprintf(stderr,
            "\t- mktime speed test took:    \t%zuus\n",
            (size_t)(stop - start));
    fprintf(stderr, "\n");
  }
  /* TODO: test fio_time_add, fio_time_add_milli, and fio_time_cmp */
}
#undef FIO___GMTIME_TEST_INTERVAL
#undef FIO___GMTIME_TEST_RANGE

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_URL Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_URL_TEST___H)
#define H___FIO_URL_TEST___H
#ifndef H___FIO_URL___H
#define FIO_URL
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

/* Test for URI variations:
 *
 * * `/complete_path?query#target`
 *
 *   i.e.: /index.html?page=1#list
 *
 * * `host:port/complete_path?query#target`
 *
 *   i.e.:
 *      example.com
 *      example.com:8080
 *      example.com/index.html
 *      example.com:8080/index.html
 *      example.com:8080/index.html?key=val#target
 *
 * * `user:password@host:port/path?query#target`
 *
 *   i.e.: user:1234@example.com:8080/index.html
 *
 * * `username[:password]@host[:port][...]`
 *
 *   i.e.: john:1234@example.com
 *
 * * `schema://user:password@host:port/path?query#target`
 *
 *   i.e.: http://example.com/index.html?page=1#list
 */
FIO_SFUNC void FIO_NAME_TEST(stl, url)(void) {
  fprintf(stderr, "* Testing URL (URI) parser.\n");
  struct {
    char *url;
    size_t len;
    fio_url_s expected;
    fio_url_tls_info_s tls;
  } tests[] = {
      {
          .url = (char *)"file://go/home/",
          5,
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"file"),
                  .path = FIO_BUF_INFO1((char *)"go/home/"),
              },
      },
      {
          .url = (char *)"unix:///go/home/",
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"unix"),
                  .path = FIO_BUF_INFO1((char *)"/go/home/"),
              },
      },
      {
          .url = (char *)"unix:///go/home/?query#target",
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"unix"),
                  .path = FIO_BUF_INFO1((char *)"/go/home/"),
                  .query = FIO_BUF_INFO1((char *)"query"),
                  .target = FIO_BUF_INFO1((char *)"target"),
              },
      },
      {
          .url = (char *)"schema://user:password@host:port/path?query#target",
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"schema"),
                  .user = FIO_BUF_INFO1((char *)"user"),
                  .password = FIO_BUF_INFO1((char *)"password"),
                  .host = FIO_BUF_INFO1((char *)"host"),
                  .port = FIO_BUF_INFO1((char *)"port"),
                  .path = FIO_BUF_INFO1((char *)"/path"),
                  .query = FIO_BUF_INFO1((char *)"query"),
                  .target = FIO_BUF_INFO1((char *)"target"),
              },
      },
      {
          .url = (char *)"schema://user@host:port/path?query#target",
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"schema"),
                  .user = FIO_BUF_INFO1((char *)"user"),
                  .host = FIO_BUF_INFO1((char *)"host"),
                  .port = FIO_BUF_INFO1((char *)"port"),
                  .path = FIO_BUF_INFO1((char *)"/path"),
                  .query = FIO_BUF_INFO1((char *)"query"),
                  .target = FIO_BUF_INFO1((char *)"target"),
              },
      },
      {
          .url = (char *)"http://localhost.com:3000/home?is=1",
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"http"),
                  .host = FIO_BUF_INFO1((char *)"localhost.com"),
                  .port = FIO_BUF_INFO1((char *)"3000"),
                  .path = FIO_BUF_INFO1((char *)"/home"),
                  .query = FIO_BUF_INFO1((char *)"is=1"),
              },
      },
      {
          .url = (char *)"/complete_path?query#target",
          .expected =
              {
                  .path = FIO_BUF_INFO1((char *)"/complete_path"),
                  .query = FIO_BUF_INFO1((char *)"query"),
                  .target = FIO_BUF_INFO1((char *)"target"),
              },
      },
      {
          .url = (char *)"/index.html?page=1#list",
          .expected =
              {
                  .path = FIO_BUF_INFO1((char *)"/index.html"),
                  .query = FIO_BUF_INFO1((char *)"page=1"),
                  .target = FIO_BUF_INFO1((char *)"list"),
              },
      },
      {
          .url = (char *)"example.com",
          .expected =
              {
                  .host = FIO_BUF_INFO1((char *)"example.com"),
              },
      },

      {
          .url = (char *)"example.com:8080",
          .expected =
              {
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .port = FIO_BUF_INFO1((char *)"8080"),
              },
      },
      {
          .url = (char *)"example.com:8080?q=true",
          .expected =
              {
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .port = FIO_BUF_INFO1((char *)"8080"),
                  .query = FIO_BUF_INFO1((char *)"q=true"),
              },
      },
      {
          .url = (char *)"example.com/index.html",
          .expected =
              {
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .path = FIO_BUF_INFO1((char *)"/index.html"),
              },
      },
      {
          .url = (char *)"example.com:8080/index.html",
          .expected =
              {
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .port = FIO_BUF_INFO1((char *)"8080"),
                  .path = FIO_BUF_INFO1((char *)"/index.html"),
              },
      },
      {
          .url = (char *)"example.com:8080/index.html?key=val#target",
          .expected =
              {
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .port = FIO_BUF_INFO1((char *)"8080"),
                  .path = FIO_BUF_INFO1((char *)"/index.html"),
                  .query = FIO_BUF_INFO1((char *)"key=val"),
                  .target = FIO_BUF_INFO1((char *)"target"),
              },
      },
      {
          .url = (char *)"user:1234@example.com:8080/index.html",
          .expected =
              {
                  .user = FIO_BUF_INFO1((char *)"user"),
                  .password = FIO_BUF_INFO1((char *)"1234"),
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .port = FIO_BUF_INFO1((char *)"8080"),
                  .path = FIO_BUF_INFO1((char *)"/index.html"),
              },
      },
      {
          .url = (char *)"user@example.com:8080/index.html",
          .expected =
              {
                  .user = FIO_BUF_INFO1((char *)"user"),
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .port = FIO_BUF_INFO1((char *)"8080"),
                  .path = FIO_BUF_INFO1((char *)"/index.html"),
              },
      },
      {
          .url = (char *)"https://example.com/path",
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"https"),
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .path = FIO_BUF_INFO1((char *)"/path"),
              },
          .tls = {.tls = 1},
      },
      {
          .url = (char *)"wss://example.com/path",
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"wss"),
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .path = FIO_BUF_INFO1((char *)"/path"),
              },
          .tls = {.tls = 1},
      },
      {
          .url = (char *)"sses://example.com/path",
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"sses"),
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .path = FIO_BUF_INFO1((char *)"/path"),
              },
          .tls = {.tls = 1},
      },
      {
          .url = (char *)"sses://example.com/path",
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"sses"),
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .path = FIO_BUF_INFO1((char *)"/path"),
              },
          .tls = {.tls = 1},
      },
      {
          .url = (char *)"http://example.com/path?tls=true",
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"http"),
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .path = FIO_BUF_INFO1((char *)"/path"),
                  .query = FIO_BUF_INFO1((char *)"tls=true"),
              },
          .tls = {.tls = 1},
      },
      {
          .url = (char *)"http://example.com/path?tls",
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"http"),
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .path = FIO_BUF_INFO1((char *)"/path"),
                  .query = FIO_BUF_INFO1((char *)"tls"),
              },
          .tls = {.tls = 1},
      },
      {
          .url = (char *)"http://example.com/path?tls=something",
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"http"),
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .path = FIO_BUF_INFO1((char *)"/path"),
                  .query = FIO_BUF_INFO1((char *)"tls=something"),
              },
          .tls =
              {
                  .key = FIO_BUF_INFO1((char *)"something"),
                  .cert = FIO_BUF_INFO1((char *)"something"),
                  .tls = 1,
              },
      },
      {
          .url = (char *)"http://example.com/path?key=something&cert=pubthing",
          .expected =
              {
                  .scheme = FIO_BUF_INFO1((char *)"http"),
                  .host = FIO_BUF_INFO1((char *)"example.com"),
                  .path = FIO_BUF_INFO1((char *)"/path"),
                  .query = FIO_BUF_INFO1((char *)"key=something&cert=pubthing"),
              },
          .tls =
              {
                  .key = FIO_BUF_INFO1((char *)"something"),
                  .cert = FIO_BUF_INFO1((char *)"pubthing"),
                  .tls = 1,
              },
      },
      {.url = NULL},
  };
  for (size_t i = 0; tests[i].url; ++i) {
    tests[i].len = strlen(tests[i].url);
    fio_url_s result = fio_url_parse(tests[i].url, tests[i].len);
    fio_url_tls_info_s tls = fio_url_is_tls(result);
    FIO_LOG_DEBUG2("Result for: %s"
                   "\n\t     scheme   (%zu bytes):  %.*s"
                   "\n\t     user     (%zu bytes):  %.*s"
                   "\n\t     password (%zu bytes):  %.*s"
                   "\n\t     host     (%zu bytes):  %.*s"
                   "\n\t     port     (%zu bytes):  %.*s"
                   "\n\t     path     (%zu bytes):  %.*s"
                   "\n\t     query    (%zu bytes):  %.*s"
                   "\n\t     target   (%zu bytes):  %.*s\n",
                   tests[i].url,
                   result.scheme.len,
                   (int)result.scheme.len,
                   result.scheme.buf,
                   result.user.len,
                   (int)result.user.len,
                   result.user.buf,
                   result.password.len,
                   (int)result.password.len,
                   result.password.buf,
                   result.host.len,
                   (int)result.host.len,
                   result.host.buf,
                   result.port.len,
                   (int)result.port.len,
                   result.port.buf,
                   result.path.len,
                   (int)result.path.len,
                   result.path.buf,
                   result.query.len,
                   (int)result.query.len,
                   result.query.buf,
                   result.target.len,
                   (int)result.target.len,
                   result.target.buf);
    FIO_ASSERT(
        result.scheme.len == tests[i].expected.scheme.len &&
            (!result.scheme.len || !memcmp(result.scheme.buf,
                                           tests[i].expected.scheme.buf,
                                           tests[i].expected.scheme.len)),
        "scheme result failed for:\n\ttest[%zu]: %s\n\texpected: "
        "%s\n\tgot: %.*s",
        i,
        tests[i].url,
        tests[i].expected.scheme.buf,
        (int)result.scheme.len,
        result.scheme.buf);
    FIO_ASSERT(
        result.user.len == tests[i].expected.user.len &&
            (!result.user.len || !memcmp(result.user.buf,
                                         tests[i].expected.user.buf,
                                         tests[i].expected.user.len)),
        "user result failed for:\n\ttest[%zu]: %s\n\texpected: %s\n\tgot: %.*s",
        i,
        tests[i].url,
        tests[i].expected.user.buf,
        (int)result.user.len,
        result.user.buf);
    FIO_ASSERT(
        result.password.len == tests[i].expected.password.len &&
            (!result.password.len || !memcmp(result.password.buf,
                                             tests[i].expected.password.buf,
                                             tests[i].expected.password.len)),
        "password result failed for:\n\ttest[%zu]: %s\n\texpected: %s\n\tgot: "
        "%.*s",
        i,
        tests[i].url,
        tests[i].expected.password.buf,
        (int)result.password.len,
        result.password.buf);
    FIO_ASSERT(
        result.host.len == tests[i].expected.host.len &&
            (!result.host.len || !memcmp(result.host.buf,
                                         tests[i].expected.host.buf,
                                         tests[i].expected.host.len)),
        "host result failed for:\n\ttest[%zu]: %s\n\texpected: %s\n\tgot: %.*s",
        i,
        tests[i].url,
        tests[i].expected.host.buf,
        (int)result.host.len,
        result.host.buf);
    FIO_ASSERT(
        result.port.len == tests[i].expected.port.len &&
            (!result.port.len || !memcmp(result.port.buf,
                                         tests[i].expected.port.buf,
                                         tests[i].expected.port.len)),
        "port result failed for:\n\ttest[%zu]: %s\n\texpected: %s\n\tgot: %.*s",
        i,
        tests[i].url,
        tests[i].expected.port.buf,
        (int)result.port.len,
        result.port.buf);
    FIO_ASSERT(
        result.path.len == tests[i].expected.path.len &&
            (!result.path.len || !memcmp(result.path.buf,
                                         tests[i].expected.path.buf,
                                         tests[i].expected.path.len)),
        "path result failed for:\n\ttest[%zu]: %s\n\texpected: %s\n\tgot: %.*s",
        i,
        tests[i].url,
        tests[i].expected.path.buf,
        (int)result.path.len,
        result.path.buf);
    FIO_ASSERT(result.query.len == tests[i].expected.query.len &&
                   (!result.query.len || !memcmp(result.query.buf,
                                                 tests[i].expected.query.buf,
                                                 tests[i].expected.query.len)),
               "query result failed for:\n\ttest[%zu]: %s\n\texpected: "
               "%s\n\tgot: %.*s",
               i,
               tests[i].url,
               tests[i].expected.query.buf,
               (int)result.query.len,
               result.query.buf);
    FIO_ASSERT(
        result.target.len == tests[i].expected.target.len &&
            (!result.target.len || !memcmp(result.target.buf,
                                           tests[i].expected.target.buf,
                                           tests[i].expected.target.len)),
        "target result failed for:\n\ttest[%zu]: %s\n\texpected: "
        "%s\n\tgot: %.*s",
        i,
        tests[i].url,
        tests[i].expected.target.buf,
        (int)result.target.len,
        result.target.buf);

    FIO_ASSERT(
        1,
        "TSL detection result failed for:\n\ttest[%zu]: %s\n\texpected: "
        "%s key:%s, cert:%s, pass%s\n\tgot: %s key:%.*s, cert:%.*s, pass%.*s",
        i,
        tests[i].url,
        tests[i].tls.tls ? "TLS" : "none",
        tests[i].tls.key.buf,
        tests[i].tls.cert.buf,
        tests[i].tls.pass.buf,
        tls.tls ? "TLS" : "none",
        (int)tls.key.len,
        tls.key.buf,
        (int)tls.cert.len,
        tls.cert.buf,
        (int)tls.pass.len,
        tls.pass.buf);
  }
}
/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_CHACHA Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_CHACHA_TEST___H)
#define H___FIO_CHACHA_TEST___H
#ifndef H___FIO_CHACHA___H
#define FIO_CHACHA
#define FIO___TEST_REINCLUDE
#include FIO_INCLUDE_FILE
#undef FIO___TEST_REINCLUDE
#endif

#if HAVE_OPENSSL
// #include <openssl/bio.h>
// #include <openssl/err.h>
// #include <openssl/ssl.h>
// FIO_SFUNC uintptr_t FIO_NAME_TEST(stl, __poly1305_open_ssl_wrapper)(char
// *data,
//                                                                   size_t len)
//                                                                   {
// }
#endif /* HAVE_OPENSSL */

FIO_SFUNC uintptr_t fio__poly1305_speed_wrapper(char *msg, size_t len) {
  uint64_t result[2] = {0};
  char *key = (char *)"\x85\xd6\xbe\x78\x57\x55\x6d\x33\x7f\x44\x52\xfe\x42"
                      "\xd5\x06\xa8"
                      "\x01\x03\x80\x8a\xfb\x0d\xb2\xfd\x4a\xbf\xf6\xaf\x41"
                      "\x49\xf5\x1b";
  fio_poly1305_auth(result, key, msg, len, NULL, 0);
  return (uintptr_t)result[0];
}

FIO_SFUNC uintptr_t fio__chacha20_speed_wrapper(char *msg, size_t len) {
  uint64_t result[2] = {0};
  char *key = (char *)"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c"
                      "\x0d\x0e\x0f"
                      "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c"
                      "\x1d\x1e\x1f";
  char *nounce = (char *)"\x00\x00\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x00";
  fio_chacha20(msg, len, key, nounce, 1);
  result[0] = fio_buf2u64u(msg);
  return (uintptr_t)result[0];
}

FIO_SFUNC uintptr_t fio__chacha20poly1305_speed_wrapper(char *msg, size_t len) {
  uint64_t result[2] = {0};
  char *key = (char *)"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c"
                      "\x0d\x0e\x0f"
                      "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c"
                      "\x1d\x1e\x1f";
  char *nounce = (char *)"\x00\x00\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x00";
  fio_chacha20_poly1305_enc(result, msg, len, NULL, 0, key, nounce);
  return (uintptr_t)result[0];
}

FIO_SFUNC uintptr_t fio__chacha20poly1305dec_speed_wrapper(char *msg,
                                                           size_t len) {
  uint64_t result[2] = {0};
  char *key = (char *)"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c"
                      "\x0d\x0e\x0f"
                      "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c"
                      "\x1d\x1e\x1f";
  char *nounce = (char *)"\x00\x00\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x00";
  fio_poly1305_auth(result, key, msg, len, NULL, 0);
  fio_chacha20(msg, len, key, nounce, 1);
  return (uintptr_t)result[0];
}

FIO_SFUNC void FIO_NAME_TEST(stl, chacha)(void) {
  fprintf(stderr, "* Testing ChaCha20 Poly1305\n");
  { /* test ChaCha20 independently */
    fprintf(stderr, "\t * Testing ChaCha20 separately\n");
    struct {
      char key[33];
      char nounce[13];
      char *src;
      char *expected;
    } tests[] = {
        {
            .key = "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d"
                   "\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b"
                   "\x1c\x1d\x1e\x1f",
            .nounce = "\x00\x00\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x00",
            .src =
                (char *)"\x4c\x61\x64\x69\x65\x73\x20\x61\x6e\x64\x20\x47\x65"
                        "\x6e\x74\x6c\x65\x6d\x65\x6e\x20\x6f\x66\x20\x74\x68"
                        "\x65\x20\x63\x6c\x61\x73\x73\x20\x6f\x66\x20\x27\x39"
                        "\x39\x3a\x20\x49\x66\x20\x49\x20\x63\x6f\x75\x6c\x64"
                        "\x20\x6f\x66\x66\x65\x72\x20\x79\x6f\x75\x20\x6f\x6e"
                        "\x6c\x79\x20\x6f\x6e\x65\x20\x74\x69\x70\x20\x66\x6f"
                        "\x72\x20\x74\x68\x65\x20\x66\x75\x74\x75\x72\x65\x2c"
                        "\x20\x73\x75\x6e\x73\x63\x72\x65\x65\x6e\x20\x77\x6f"
                        "\x75\x6c\x64\x20\x62\x65\x20\x69\x74\x2e",
            .expected =
                (char *)"\x6e\x2e\x35\x9a\x25\x68\xf9\x80\x41\xba\x07\x28\xdd"
                        "\x0d\x69\x81\xe9\x7e\x7a\xec\x1d\x43\x60\xc2\x0a\x27"
                        "\xaf\xcc\xfd\x9f\xae\x0b\xf9\x1b\x65\xc5\x52\x47\x33"
                        "\xab\x8f\x59\x3d\xab\xcd\x62\xb3\x57\x16\x39\xd6\x24"
                        "\xe6\x51\x52\xab\x8f\x53\x0c\x35\x9f\x08\x61\xd8\x07"
                        "\xca\x0d\xbf\x50\x0d\x6a\x61\x56\xa3\x8e\x08\x8a\x22"
                        "\xb6\x5e\x52\xbc\x51\x4d\x16\xcc\xf8\x06\x81\x8c\xe9"
                        "\x1a\xb7\x79\x37\x36\x5a\xf9\x0b\xbf\x74\xa3\x5b\xe6"
                        "\xb4\x0b\x8e\xed\xf2\x78\x5e\x42\x87\x4d",
        },
        {
            .key = {0},
            .nounce = {0},
            .src =
                (char *)"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
            .expected =
                (char *)"\x3a\xeb\x52\x24\xec\xf8\x49\x92\x9b\x9d\x82\x8d\xb1"
                        "\xce\xd4\xdd\x83\x20\x25\xe8\x01\x8b\x81\x60\xb8\x22"
                        "\x84\xf3\xc9\x49\xaa\x5a\x8e\xca\x00\xbb\xb4\xa7\x3b"
                        "\xda\xd1\x92\xb5\xc4\x2f\x73\xf2\xfd\x4e\x27\x36\x44"
                        "\xc8\xb3\x61\x25\xa6\x4a\xdd\xeb\x00\x6c\x13\xa0",
        },
        {.expected = NULL}};
    for (size_t i = 0; tests[i].expected; ++i) {
      size_t len = FIO_STRLEN(tests[i].src);
      char buffer[4096];
      FIO_MEMCPY(buffer, tests[i].src, len);
      fio_chacha20(buffer, len, tests[i].key, tests[i].nounce, 1);
      FIO_ASSERT(!memcmp(buffer, tests[i].expected, len),
                 "ChaCha20 encoding failed");
      fio_chacha20(buffer, len, tests[i].key, tests[i].nounce, 1);
      FIO_ASSERT(!memcmp(buffer, tests[i].src, len),
                 "ChaCha20 decoding failed");
    }
  }
  { /* test Poly1305 independently */
    fprintf(stderr, "\t * Testing Poly1305 separately\n");
    struct {
      char key[33];
      char *msg;
      char *expected;
    } tests[] = {{
                     .key = "\x85\xd6\xbe\x78\x57\x55\x6d\x33\x7f\x44\x52\xfe"
                            "\x42\xd5\x06\xa8\x01\x03\x80\x8a\xfb\x0d\xb2\xfd"
                            "\x4a\xbf\xf6\xaf\x41\x49\xf5\x1b",
                     .msg = (char *)"Cryptographic Forum Research Group",
                     .expected =
                         (char *)"\xa8\x06\x1d\xc1\x30\x51\x36\xc6\xc2\x2b\x8b"
                                 "\xaf\x0c\x01\x27\xa9",
                 },
                 {.expected = NULL}};
    char auth[24] = {0};
    char buf1[33] = {0};
    char buf2[33] = {0};
    for (size_t t = 0; tests[t].expected; ++t) {
      fio_poly1305_auth(auth,
                        tests[t].key,
                        tests[t].msg,
                        FIO_STRLEN(tests[t].msg),
                        NULL,
                        0);
      for (int i = 0; i < 16; ++i) {
        buf1[(i << 1)] = fio_i2c(((auth[i] >> 4) & 0xF));
        buf1[(i << 1) + 1] = fio_i2c(((auth[i]) & 0xF));
        buf2[(i << 1)] = fio_i2c(((tests[t].expected[i] >> 4) & 0xF));
        buf2[(i << 1) + 1] = fio_i2c(((tests[t].expected[i]) & 0xF));
      }
      FIO_ASSERT(!memcmp(auth, tests[t].expected, 16),
                 "Poly1305 example authentication failed:\n\t%s != %s",
                 buf1,
                 buf2);
      FIO_ASSERT(!fio_buf2u64u(auth + 16),
                 "Poly1305 authentication code overflow!");
    }
  }
  { /* test ChaCha20Poly1305 */
    fprintf(stderr, "\t * Testing ChaCha20Poly1305 together\n");
    struct {
      char key[33];
      char nounce[13];
      char *ad;
      size_t ad_len;
      char *msg;
      char *expected;
      char mac[17];
    } tests[] = {
        {
            .key = "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d"
                   "\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b"
                   "\x9c\x9d\x9e\x9f",
            .nounce = "\x07\x00\x00\x00\x40\x41\x42\x43\x44\x45\x46\x47",
            .ad = (char *)"\x50\x51\x52\x53\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7",
            .ad_len = 12,
            .msg =
                (char *)"\x4c\x61\x64\x69\x65\x73\x20\x61\x6e\x64\x20\x47\x65"
                        "\x6e\x74\x6c\x65\x6d\x65\x6e\x20\x6f\x66\x20\x74\x68"
                        "\x65\x20\x63\x6c\x61\x73\x73\x20\x6f\x66\x20\x27\x39"
                        "\x39\x3a\x20\x49\x66\x20\x49\x20\x63\x6f\x75\x6c\x64"
                        "\x20\x6f\x66\x66\x65\x72\x20\x79\x6f\x75\x20\x6f\x6e"
                        "\x6c\x79\x20\x6f\x6e\x65\x20\x74\x69\x70\x20\x66\x6f"
                        "\x72\x20\x74\x68\x65\x20\x66\x75\x74\x75\x72\x65\x2c"
                        "\x20\x73\x75\x6e\x73\x63\x72\x65\x65\x6e\x20\x77\x6f"
                        "\x75\x6c\x64\x20\x62\x65\x20\x69\x74\x2e",
            .expected =
                (char *)"\xd3\x1a\x8d\x34\x64\x8e\x60\xdb\x7b\x86\xaf\xbc\x53"
                        "\xef\x7e\xc2\xa4\xad\xed\x51\x29\x6e\x08\xfe\xa9\xe2"
                        "\xb5\xa7\x36\xee\x62\xd6\x3d\xbe\xa4\x5e\x8c\xa9\x67"
                        "\x12\x82\xfa\xfb\x69\xda\x92\x72\x8b\x1a\x71\xde\x0a"
                        "\x9e\x06\x0b\x29\x05\xd6\xa5\xb6\x7e\xcd\x3b\x36\x92"
                        "\xdd\xbd\x7f\x2d\x77\x8b\x8c\x98\x03\xae\xe3\x28\x09"
                        "\x1b\x58\xfa\xb3\x24\xe4\xfa\xd6\x75\x94\x55\x85\x80"
                        "\x8b\x48\x31\xd7\xbc\x3f\xf4\xde\xf0\x8e\x4b\x7a\x9d"
                        "\xe5\x76\xd2\x65\x86\xce\xc6\x4b\x61\x16",
            .mac = "\x1a\xe1\x0b\x59\x4f\x09\xe2\x6a\x7e\x90\x2e\xcb\xd0\x60"
                   "\x06\x91",
        },
        {
            .key = "\x1c\x92\x40\xa5\xeb\x55\xd3\x8a\xf3\x33\x88\x86\x04\xf6"
                   "\xb5\xf0\x47\x39\x17\xc1\x40\x2b\x80\x09\x9d\xca\x5c\xbc"
                   "\x20\x70\x75\xc0",
            .nounce = "\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08",
            .ad = (char *)"\xf3\x33\x88\x86\x00\x00\x00\x00\x00\x00\x4e\x91",
            .ad_len = 12,
            .msg =
                (char *)"\x49\x6e\x74\x65\x72\x6e\x65\x74\x2d\x44\x72\x61\x66"
                        "\x74\x73\x20\x61\x72\x65\x20\x64\x72\x61\x66\x74\x20"
                        "\x64\x6f\x63\x75\x6d\x65\x6e\x74\x73\x20\x76\x61\x6c"
                        "\x69\x64\x20\x66\x6f\x72\x20\x61\x20\x6d\x61\x78\x69"
                        "\x6d\x75\x6d\x20\x6f\x66\x20\x73\x69\x78\x20\x6d\x6f"
                        "\x6e\x74\x68\x73\x20\x61\x6e\x64\x20\x6d\x61\x79\x20"
                        "\x62\x65\x20\x75\x70\x64\x61\x74\x65\x64\x2c\x20\x72"
                        "\x65\x70\x6c\x61\x63\x65\x64\x2c\x20\x6f\x72\x20\x6f"
                        "\x62\x73\x6f\x6c\x65\x74\x65\x64\x20\x62\x79\x20\x6f"
                        "\x74\x68\x65\x72\x20\x64\x6f\x63\x75\x6d\x65\x6e\x74"
                        "\x73\x20\x61\x74\x20\x61\x6e\x79\x20\x74\x69\x6d\x65"
                        "\x2e\x20\x49\x74\x20\x69\x73\x20\x69\x6e\x61\x70\x70"
                        "\x72\x6f\x70\x72\x69\x61\x74\x65\x20\x74\x6f\x20\x75"
                        "\x73\x65\x20\x49\x6e\x74\x65\x72\x6e\x65\x74\x2d\x44"
                        "\x72\x61\x66\x74\x73\x20\x61\x73\x20\x72\x65\x66\x65"
                        "\x72\x65\x6e\x63\x65\x20\x6d\x61\x74\x65\x72\x69\x61"
                        "\x6c\x20\x6f\x72\x20\x74\x6f\x20\x63\x69\x74\x65\x20"
                        "\x74\x68\x65\x6d\x20\x6f\x74\x68\x65\x72\x20\x74\x68"
                        "\x61\x6e\x20\x61\x73\x20\x2f\xe2\x80\x9c\x77\x6f\x72"
                        "\x6b\x20\x69\x6e\x20\x70\x72\x6f\x67\x72\x65\x73\x73"
                        "\x2e\x2f\xe2\x80\x9d",
            .expected =
                (char *)"\x64\xa0\x86\x15\x75\x86\x1a\xf4\x60\xf0\x62\xc7\x9b"
                        "\xe6\x43\xbd\x5e\x80\x5c\xfd\x34\x5c\xf3\x89\xf1\x08"
                        "\x67\x0a\xc7\x6c\x8c\xb2\x4c\x6c\xfc\x18\x75\x5d\x43"
                        "\xee\xa0\x9e\xe9\x4e\x38\x2d\x26\xb0\xbd\xb7\xb7\x3c"
                        "\x32\x1b\x01\x00\xd4\xf0\x3b\x7f\x35\x58\x94\xcf\x33"
                        "\x2f\x83\x0e\x71\x0b\x97\xce\x98\xc8\xa8\x4a\xbd\x0b"
                        "\x94\x81\x14\xad\x17\x6e\x00\x8d\x33\xbd\x60\xf9\x82"
                        "\xb1\xff\x37\xc8\x55\x97\x97\xa0\x6e\xf4\xf0\xef\x61"
                        "\xc1\x86\x32\x4e\x2b\x35\x06\x38\x36\x06\x90\x7b\x6a"
                        "\x7c\x02\xb0\xf9\xf6\x15\x7b\x53\xc8\x67\xe4\xb9\x16"
                        "\x6c\x76\x7b\x80\x4d\x46\xa5\x9b\x52\x16\xcd\xe7\xa4"
                        "\xe9\x90\x40\xc5\xa4\x04\x33\x22\x5e\xe2\x82\xa1\xb0"
                        "\xa0\x6c\x52\x3e\xaf\x45\x34\xd7\xf8\x3f\xa1\x15\x5b"
                        "\x00\x47\x71\x8c\xbc\x54\x6a\x0d\x07\x2b\x04\xb3\x56"
                        "\x4e\xea\x1b\x42\x22\x73\xf5\x48\x27\x1a\x0b\xb2\x31"
                        "\x60\x53\xfa\x76\x99\x19\x55\xeb\xd6\x31\x59\x43\x4e"
                        "\xce\xbb\x4e\x46\x6d\xae\x5a\x10\x73\xa6\x72\x76\x27"
                        "\x09\x7a\x10\x49\xe6\x17\xd9\x1d\x36\x10\x94\xfa\x68"
                        "\xf0\xff\x77\x98\x71\x30\x30\x5b\xea\xba\x2e\xda\x04"
                        "\xdf\x99\x7b\x71\x4d\x6c\x6f\x2c\x29\xa6\xad\x5c\xb4"
                        "\x02\x2b\x02\x70\x9b",
            .mac = "\xee\xad\x9d\x67\x89\x0c\xbb\x22\x39\x23\x36\xfe\xa1\x85"
                   "\x1f\x38",
        },
        {.expected = NULL}};
    for (size_t i = 0; tests[i].expected; ++i) {
      size_t len = strlen(tests[i].msg);
      char buffer[1024];
      char mac[24] = {0}, mac2[24] = {0};
      FIO_MEMCPY(buffer, tests[i].msg, len);
      fio_chacha20_poly1305_enc(mac,
                                buffer,
                                len,
                                tests[i].ad,
                                tests[i].ad_len,
                                tests[i].key,
                                tests[i].nounce);
      FIO_ASSERT(!memcmp(buffer, tests[i].expected, len),
                 "ChaCha20Poly1305 encoding failed");
      fio_chacha20_poly1305_auth(mac2,
                                 buffer,
                                 len,
                                 tests[i].ad,
                                 tests[i].ad_len,
                                 tests[i].key,
                                 tests[i].nounce);
      FIO_ASSERT(!memcmp(mac, mac2, 16),
                 "ChaCha20Poly1305 authentication != Poly1305 code");
      FIO_ASSERT(!memcmp(mac, tests[i].mac, 16),
                 "ChaCha20Poly1305 authentication code failed");
      FIO_ASSERT(!fio_chacha20_poly1305_dec(mac,
                                            buffer,
                                            len,
                                            tests[i].ad,
                                            tests[i].ad_len,
                                            tests[i].key,
                                            tests[i].nounce),
                 "fio_chacha20_poly1305_dec returned error for %s",
                 tests[i].msg);
      FIO_ASSERT(!fio_buf2u64u(mac + 16),
                 "ChaCha20Poly1305 authentication code overflow!");
      FIO_ASSERT(!fio_buf2u64u(mac2 + 16),
                 "ChaCha20Poly1305 authentication code (2) overflow!");
      FIO_ASSERT(
          !memcmp(buffer, tests[i].msg, len),
          "ChaCha20Poly1305 decoding failed for %s\nshould have been %.*s",
          tests[i].msg,
          (int)len,
          buffer);
    }
  }
  { /* test roundtrip */
    fprintf(stderr, "\t * Testing ChaCha20Poly1305 round-trip.\n");
    fio_u256 key =
        fio_u256_init64(fio_rand64(), fio_rand64(), fio_rand64(), fio_rand64());
    FIO_STR_INFO_TMP_VAR(ad, 128);
    FIO_STR_INFO_TMP_VAR(plaintext, 1024);
    FIO_STR_INFO_TMP_VAR(cyphertext, 1024);
    FIO_STR_INFO_TMP_VAR(decrypted, 1024);
    fio_string_write2(&ad,
                      NULL,
                      FIO_STRING_WRITE_STR1(
                          "This is unencrypted additional data with a nonce:"),
                      FIO_STRING_WRITE_HEX(fio_rand64()));
    fio_string_write2(
        &plaintext,
        NULL,
        FIO_STRING_WRITE_STR1(
            "This is unencrypted text that will eventually be encrypted, the "
            "following are the whole 0-255 byte values:"));
    for (size_t i = 0; i < 256; ++i) {
      plaintext.buf[plaintext.len++] = (char)i;
    }
    plaintext.buf[plaintext.len] = 0;
    FIO_MEMCPY(cyphertext.buf, plaintext.buf, plaintext.len);
    cyphertext.len = plaintext.len;
    fio_chacha20_poly1305_enc(ad.buf + ad.len,
                              cyphertext.buf,
                              cyphertext.len,
                              ad.buf, /* additional data */
                              ad.len,
                              key.u8,
                              ad.buf + ad.len - 12);
    FIO_MEMCPY(decrypted.buf, cyphertext.buf, cyphertext.len);
    decrypted.len = cyphertext.len;
    FIO_ASSERT(!fio_chacha20_poly1305_dec(ad.buf + ad.len,
                                          decrypted.buf,
                                          decrypted.len,
                                          ad.buf, /* additional data */
                                          ad.len,
                                          key.u8,
                                          ad.buf + ad.len - 12),
               "fio_chacha20_poly1305_dec failed!");
    FIO_ASSERT(FIO_MEMCMP(cyphertext.buf, plaintext.buf, plaintext.len),
               "chacha20 cypher-text should be different than plain-text.");
    FIO_ASSERT(!FIO_MEMCMP(decrypted.buf, plaintext.buf, plaintext.len),
               "chacha20_poly1305 roundtrip error!");
  }

#if !DEBUG
  fio_test_hash_function(fio__poly1305_speed_wrapper,
                         (char *)"Poly1305",
                         7,
                         0,
                         0);
  fio_test_hash_function(fio__poly1305_speed_wrapper,
                         (char *)"Poly1305",
                         13,
                         0,
                         0);
  fio_test_hash_function(fio__poly1305_speed_wrapper,
                         (char *)"Poly1305 (unaligned)",
                         13,
                         3,
                         0);
#if HAVE_OPENSSL && 0
  fio_test_hash_function(__poly1305_open_ssl_wrapper,
                         (char *)"Poly1305",
                         7,
                         0,
                         0);
  fio_test_hash_function(__poly1305_open_ssl_wrapper,
                         (char *)"Poly1305",
                         13,
                         0,
                         0);
  fio_test_hash_function(__poly1305_open_ssl_wrapper,
                         (char *)"Poly1305 (unaligned)",
                         13,
                         3,
                         0);
#endif /* HAVE_OPENSSL */
  fprintf(stderr, "\n");
  fio_test_hash_function(fio__chacha20_speed_wrapper,
                         (char *)"ChaCha20",
                         6,
                         0,
                         0);
  fio_test_hash_function(fio__chacha20_speed_wrapper,
                         (char *)"ChaCha20",
                         7,
                         0,
                         0);
  fio_test_hash_function(fio__chacha20_speed_wrapper,
                         (char *)"ChaCha20",
                         13,
                         0,
                         0);
  fio_test_hash_function(fio__chacha20_speed_wrapper,
                         (char *)"ChaCha20 (unaligned)",
                         13,
                         3,
                         0);
  fprintf(stderr, "\n");
  fio_test_hash_function(fio__chacha20poly1305dec_speed_wrapper,
                         (char *)"ChaCha20Poly1305 (auth+decrypt)",
                         7,
                         0,
                         0);
  fio_test_hash_function(fio__chacha20poly1305dec_speed_wrapper,
                         (char *)"ChaCha20Poly1305 (auth+decrypt)",
                         13,
                         0,
                         0);
  fprintf(stderr, "\n");
  fio_test_hash_function(fio__chacha20poly1305_speed_wrapper,
                         (char *)"ChaCha20Poly1305 (encrypt+MAC)",
                         7,
                         0,
                         0);
  fio_test_hash_function(fio__chacha20poly1305_speed_wrapper,
                         (char *)"ChaCha20Poly1305 (encrypt+MAC)",
                         13,
                         0,
                         0);
#endif
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************




                        FIO_SHA Test Helper




Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_SHA_TEST___H)
#define FIO___TEST_REINCLUDE
#define H___FIO_SHA_TEST___H
#ifndef H___FIO_SHA1___H
#define FIO_SHA1
#include FIO_INCLUDE_FILE
#endif
#ifndef H___FIO_SHA2___H
#define FIO_SHA2
#include FIO_INCLUDE_FILE
#endif
#undef FIO___TEST_REINCLUDE

/* *****************************************************************************
SHA1
***************************************************************************** */

FIO_SFUNC uintptr_t FIO_NAME_TEST(stl, __sha1_wrapper)(char *data, size_t len) {
  fio_sha1_s h = fio_sha1((const void *)data, (uint64_t)len);
  return *(uintptr_t *)h.digest;
}

#if HAVE_OPENSSL
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/ssl.h>

FIO_SFUNC uintptr_t FIO_NAME_TEST(stl, __sha1_open_ssl_wrapper)(char *data,
                                                                size_t len) {
  fio_u256 result;
  SHA1((const unsigned char *)data, len, result.u8);
  return result.u64[0];
}

#endif

FIO_SFUNC void FIO_NAME_TEST(stl, sha1)(void) {
  fprintf(stderr, "* Testing SHA-1\n");
  struct {
    const char *str;
    const char *sha1;
  } data[] = {
      {
          .str = "",
          .sha1 = "\xda\x39\xa3\xee\x5e\x6b\x4b\x0d\x32\x55\xbf\xef\x95\x60\x18"
                  "\x90\xaf\xd8\x07\x09",
      },
      {
          .str = "The quick brown fox jumps over the lazy dog",
          .sha1 = "\x2f\xd4\xe1\xc6\x7a\x2d\x28\xfc\xed\x84\x9e\xe1\xbb\x76\xe7"
                  "\x39\x1b\x93\xeb\x12",
      },
      {
          .str = "The quick brown fox jumps over the lazy cog",
          .sha1 = "\xde\x9f\x2c\x7f\xd2\x5e\x1b\x3a\xfa\xd3\xe8\x5a\x0b\xd1\x7d"
                  "\x9b\x10\x0d\xb4\xb3",
      },
  };
  for (size_t i = 0; i < sizeof(data) / sizeof(data[0]); ++i) {
    fio_sha1_s sha1 = fio_sha1(data[i].str, FIO_STRLEN(data[i].str));

    FIO_ASSERT(!memcmp(sha1.digest, data[i].sha1, fio_sha1_len()),
               "SHA1 mismatch for \"%s\"",
               data[i].str);
  }
#if !DEBUG
  fio_test_hash_function(FIO_NAME_TEST(stl, __sha1_wrapper),
                         (char *)"fio_sha1",
                         5,
                         0,
                         0);
  fio_test_hash_function(FIO_NAME_TEST(stl, __sha1_wrapper),
                         (char *)"fio_sha1",
                         13,
                         0,
                         1);
#if HAVE_OPENSSL
  fprintf(stderr, "* Comparing to " OPENSSL_VERSION_TEXT "\n");
  fio_test_hash_function(FIO_NAME_TEST(stl, __sha1_open_ssl_wrapper),
                         (char *)"OpenSSL SHA-1",
                         5,
                         0,
                         0);
  fio_test_hash_function(FIO_NAME_TEST(stl, __sha1_open_ssl_wrapper),
                         (char *)"OpenSSL SHA-1",
                         13,
                         0,
                         1);
#endif /* HAVE_OPENSSL */
#endif /* !DEBUG */
}

/* *****************************************************************************
SHA2
***************************************************************************** */

FIO_SFUNC uintptr_t FIO_NAME_TEST(stl, __sha256_wrapper)(char *data,
                                                         size_t len) {
  fio_u256 h = fio_sha256((const void *)data, (uint64_t)len);
  return (uintptr_t)(h.u64[0]);
}
FIO_SFUNC uintptr_t FIO_NAME_TEST(stl, __sha512_wrapper)(char *data,
                                                         size_t len) {
  fio_u512 h = fio_sha512((const void *)data, (uint64_t)len);
  return (uintptr_t)(h.u64[0]);
}

#if HAVE_OPENSSL
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/ssl.h>
FIO_SFUNC uintptr_t FIO_NAME_TEST(stl, __sha256_open_ssl_wrapper)(char *data,
                                                                  size_t len) {
  fio_u256 result;
  SHA256((const unsigned char *)data, len, result.u8);
  return result.u64[0];
}
FIO_SFUNC uintptr_t FIO_NAME_TEST(stl, __sha512_open_ssl_wrapper)(char *data,
                                                                  size_t len) {
  fio_u512 result;
  SHA512((const unsigned char *)data, len, result.u8);
  return result.u64[0];
}
#endif /* HAVE_OPENSSL */

FIO_SFUNC void FIO_NAME_TEST(stl, sha2)(void) {
  fprintf(stderr, "* Testing SHA-2\n");
  struct {
    const char *str;
    const char *sha256;
    const char *sha512;
  } data[] = {
      {
          .str = (char *)"abc",
          .sha256 = (char *)"\xBA\x78\x16\xBF\x8F\x01\xCF\xEA\x41\x41\x40\xDE"
                            "\x5D\xAE\x22\x23\xB0\x03\x61\xA3\x96\x17\x7A\x9C"
                            "\xB4\x10\xFF\x61\xF2\x00\x15\xAD",
          .sha512 =
              (char *)"\xDD\xAF\x35\xA1\x93\x61\x7A\xBA\xCC\x41\x73\x49\xAE"
                      "\x20\x41\x31\x12\xE6\xFA\x4E\x89\xA9\x7E\xA2\x0A\x9E"
                      "\xEE\xE6\x4B\x55\xD3\x9A\x21\x92\x99\x2A\x27\x4F\xC1"
                      "\xA8\x36\xBA\x3C\x23\xA3\xFE\xEB\xBD\x45\x4D\x44\x23"
                      "\x64\x3C\xE8\x0E\x2A\x9A\xC9\x4F\xA5\x4C\xA4\x9F",
      },
      {
          .str = (char *)"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnl"
                         "mnomnopnopq",
          .sha256 = (char *)"\x24\x8D\x6A\x61\xD2\x06\x38\xB8\xE5\xC0\x26"
                            "\x93\x0C\x3E\x60\x39\xA3\x3C\xE4\x59\x64\xFF"
                            "\x21\x67\xF6\xEC\xED\xD4\x19\xDB\x06\xC1",
          .sha512 =
              (char *)"\x20\x4A\x8F\xC6\xDD\xA8\x2F\x0A\x0C\xED\x7B\xEB\x8E\x08"
                      "\xA4\x16\x57\xC1\x6E\xF4\x68\xB2\x28\xA8\x27\x9B\xE3\x31"
                      "\xA7\x03\xC3\x35\x96\xFD\x15\xC1\x3B\x1B\x07\xF9\xAA\x1D"
                      "\x3B\xEA\x57\x78\x9C\xA0\x31\xAD\x85\xC7\xA7\x1D\xD7\x03"
                      "\x54\xEC\x63\x12\x38\xCA\x34\x45",
      },
      {
          .str = (char *)"The quick brown fox jumps over the lazy dog",
          .sha256 = (char *)"\xD7\xA8\xFB\xB3\x07\xD7\x80\x94\x69\xCA\x9A\xBC"
                            "\xB0\x08\x2E\x4F\x8D\x56\x51\xE4\x6D\x3C\xDB\x76"
                            "\x2D\x02\xD0\xBF\x37\xC9\xE5\x92",
          .sha512 =
              (char *)"\x07\xE5\x47\xD9\x58\x6F\x6A\x73\xF7\x3F\xBA\xC0\x43\x5E"
                      "\xD7\x69\x51\x21\x8F\xB7\xD0\xC8\xD7\x88\xA3\x09\xD7\x85"
                      "\x43\x6B\xBB\x64\x2E\x93\xA2\x52\xA9\x54\xF2\x39\x12\x54"
                      "\x7D\x1E\x8A\x3B\x5E\xD6\xE1\xBF\xD7\x09\x78\x21\x23\x3F"
                      "\xA0\x53\x8F\x3D\xB8\x54\xFE\xE6",
      },
      {
          .str = (char *)"The quick brown fox jumps over the lazy cog",
          .sha256 = (char *)"\xE4\xC4\xD8\xF3\xBF\x76\xB6\x92\xDE\x79\x1A\x17"
                            "\x3E\x05\x32\x11\x50\xF7\xA3\x45\xB4\x64\x84\xFE"
                            "\x42\x7F\x6A\xCC\x7E\xCC\x81\xBE",
          .sha512 =
              (char *)"\x3E\xEE\xE1\xD0\xE1\x17\x33\xEF\x15\x2A\x6C\x29\x50\x3B"
                      "\x3A\xE2\x0C\x4F\x1F\x3C\xDA\x4C\xB2\x6F\x1B\xC1\xA4\x1F"
                      "\x91\xC7\xFE\x4A\xB3\xBD\x86\x49\x40\x49\xE2\x01\xC4\xBD"
                      "\x51\x55\xF3\x1E\xCB\x7A\x3C\x86\x06\x84\x3C\x4C\xC8\xDF"
                      "\xCA\xB7\xDA\x11\xC8\xAE\x50\x45",
      },
      {
          .str = (char *)"",
          .sha256 = (char *)"\xE3\xB0\xC4\x42\x98\xFC\x1C\x14\x9A\xFB\xF4\xC8"
                            "\x99\x6F\xB9\x24\x27\xAE\x41\xE4\x64\x9B\x93\x4C"
                            "\xA4\x95\x99\x1B\x78\x52\xB8\x55",
          .sha512 =
              (char *)"\xCF\x83\xE1\x35\x7E\xEF\xB8\xBD\xF1\x54\x28\x50\xD6\x6D"
                      "\x80\x07\xD6\x20\xE4\x05\x0B\x57\x15\xDC\x83\xF4\xA9\x21"
                      "\xD3\x6C\xE9\xCE\x47\xD0\xD1\x3C\x5D\x85\xF2\xB0\xFF\x83"
                      "\x18\xD2\x87\x7E\xEC\x2F\x63\xB9\x31\xBD\x47\x41\x7A\x81"
                      "\xA5\x38\x32\x7A\xF9\x27\xDA\x3E",
      },
  };
  for (size_t i = 0; i < sizeof(data) / sizeof(data[0]); ++i) {
    if (!data[i].str)
      continue;
    if (data[i].sha256) {
      fio_u256 sha256 = fio_sha256(data[i].str, FIO_STRLEN(data[i].str));
      FIO_ASSERT(!memcmp(sha256.u8, data[i].sha256, 32),
                 "SHA256 mismatch for \"%s\":\n\t %X%X%X%X...%X%X%X%X",
                 data[i].str,
                 sha256.u8[0],
                 sha256.u8[1],
                 sha256.u8[2],
                 sha256.u8[3],
                 sha256.u8[28],
                 sha256.u8[29],
                 sha256.u8[30],
                 sha256.u8[31]);
    }
    if (data[i].sha512) {
      fio_u512 sha512 = fio_sha512(data[i].str, FIO_STRLEN(data[i].str));
      FIO_ASSERT(
          !memcmp(sha512.u8, data[i].sha512, 64),
          "SHA512 mismatch for \"%s\":\n\t %X%X%X%X%X%X%X%X...%X%X%X%X%X%X%X%X",
          data[i].str,
          sha512.u8[0],
          sha512.u8[1],
          sha512.u8[2],
          sha512.u8[3],
          sha512.u8[4],
          sha512.u8[5],
          sha512.u8[6],
          sha512.u8[7],
          sha512.u8[24],
          sha512.u8[25],
          sha512.u8[26],
          sha512.u8[27],
          sha512.u8[28],
          sha512.u8[29],
          sha512.u8[30],
          sha512.u8[31]);
    }
  }
#if !DEBUG
  fio_test_hash_function(FIO_NAME_TEST(stl, __sha256_wrapper),
                         (char *)"fio_sha256",
                         5,
                         0,
                         0);
  fio_test_hash_function(FIO_NAME_TEST(stl, __sha256_wrapper),
                         (char *)"fio_sha256",
                         13,
                         0,
                         1);
  fio_test_hash_function(FIO_NAME_TEST(stl, __sha512_wrapper),
                         (char *)"fio_sha512",
                         5,
                         0,
                         0);
  fio_test_hash_function(FIO_NAME_TEST(stl, __sha512_wrapper),
                         (char *)"fio_sha512",
                         13,
                         0,
                         1);
#if HAVE_OPENSSL
  fprintf(stderr, "* Comparing to " OPENSSL_VERSION_TEXT "\n");
  fio_test_hash_function(FIO_NAME_TEST(stl, __sha256_open_ssl_wrapper),
                         (char *)"OpenSSL SHA-256",
                         5,
                         0,
                         0);
  fio_test_hash_function(FIO_NAME_TEST(stl, __sha256_open_ssl_wrapper),
                         (char *)"OpenSSL SHA-256",
                         13,
                         0,
                         1);
  fio_test_hash_function(FIO_NAME_TEST(stl, __sha512_open_ssl_wrapper),
                         (char *)"OpenSSL SHA-512",
                         5,
                         0,
                         0);
  fio_test_hash_function(FIO_NAME_TEST(stl, __sha512_open_ssl_wrapper),
                         (char *)"OpenSSL SHA-512",
                         13,
                         0,
                         1);
#endif /* HAVE_OPENSSL */
#endif /* !DEBUG */
}

/* *****************************************************************************
Cleanup
***************************************************************************** */
#endif /* FIO_TEST_ALL */
/* ************************************************************************* */
#if !defined(FIO_INCLUDE_FILE) /* Dev test - ignore line */
#define FIO___DEV___           /* Development inclusion - ignore line */
#define FIO_TEST_ALL           /* Development inclusion - ignore line */
#include "./include.h"         /* Development inclusion - ignore line */
#endif                         /* Development inclusion - ignore line */
/* *****************************************************************************



                                Testing


Copyright and License: see header file (000 copyright.h) or top of file
***************************************************************************** */
#if defined(FIO_TEST_ALL) && !defined(FIO___TEST_REINCLUDE) &&                 \
    !defined(H___FIO_TEST_ALL___H)
#define H___FIO_TEST_ALL___H

/* *****************************************************************************
Locking - Speed Test
***************************************************************************** */

FIO_SFUNC void FIO_NAME_TEST(stl, math_speed)(void) {
  uint64_t n = 0, d = 1;
  uint64_t start[2], end[2];
  start[0] = fio_time_nano();
  for (size_t i = 0; i < 64; ++i) {
    n = (n << 7) ^ 0xAA;
    uint64_t q = 0, r = 0;
    FIO_COMPILER_GUARD;
    for (size_t j = 0; j < 64; ++j) {
      d = (d << 3) ^ 0xAA;
      FIO_COMPILER_GUARD;
      fio_math_div(&q, &r, &n, &d, 1);
      FIO_COMPILER_GUARD;
    }
    (void)q;
  }
  end[0] = fio_time_nano();
  n = 0, d = 1;
  start[1] = fio_time_nano();
  for (size_t i = 0; i < 64; ++i) {
    n = (n << 7) ^ 0xAA;
    uint64_t q = 0;
    FIO_COMPILER_GUARD;
    for (size_t j = 0; j < 64; ++j) {
      d = (d << 3) ^ 0xAA;
      FIO_COMPILER_GUARD;
      q = n / d;
      FIO_COMPILER_GUARD;
    }
    (void)q;
  }
  end[1] = fio_time_nano();
  FIO_LOG_INFO("\t fio_math_div test took %zu us (vs. %zu us) for a single "
               "64 bit word.",
               (size_t)(end[0] - start[0]),
               (size_t)(end[1] - start[1]));
}

/* *****************************************************************************
Locking - Speed Test
***************************************************************************** */
#define FIO___LOCK_TEST_TASK    (1LU << 25)
#define FIO___LOCK_TEST_THREADS 32U
#define FIO___LOCK_TEST_REPEAT  1

FIO_SFUNC void fio___lock_speedtest_task_inner(void *s) {
  size_t *r = (size_t *)s;
  static size_t i;
  for (i = 0; i < FIO___LOCK_TEST_TASK; ++i) {
    FIO_COMPILER_GUARD;
    ++r[0];
  }
}

static void *fio___lock_mytask_lock(void *s) {
  static fio_lock_i lock = FIO_LOCK_INIT;
  fio_lock(&lock);
  if (s)
    fio___lock_speedtest_task_inner(s);
  fio_unlock(&lock);
  return NULL;
}

#ifdef H___FIO_LOCK2___H
static void *fio___lock_mytask_lock2(void *s) {
  static fio_lock2_s lock = {FIO_LOCK_INIT};
  fio_lock2(&lock, 1);
  if (s)
    fio___lock_speedtest_task_inner(s);
  fio_unlock2(&lock, 1);
  return NULL;
}
#endif

static void *fio___lock_mytask_mutex(void *s) {
#if FIO_OS_WIN
  static fio_thread_mutex_t mutex;
#else
  static fio_thread_mutex_t mutex = FIO_THREAD_MUTEX_INIT;
#endif
  fio_thread_mutex_lock(&mutex);
  if (s)
    fio___lock_speedtest_task_inner(s);
  fio_thread_mutex_unlock(&mutex);
  return NULL;
}

FIO_SFUNC void FIO_NAME_TEST(stl, lock_speed)(void) {
  uint64_t start, end;
  fio_thread_t threads[FIO___LOCK_TEST_THREADS];

  struct {
    size_t type_size;
    const char *type_name;
    const char *name;
    void *(*task)(void *);
  } test_funcs[] = {
      {
          .type_size = sizeof(fio_lock_i),
          .type_name = "fio_lock_i",
          .name = "fio_lock      (spinlock)",
          .task = fio___lock_mytask_lock,
      },
      {
          .type_size = sizeof(fio_thread_mutex_t),
          .type_name = "fio_thread_mutex_t",
          .name = "OS threads (pthread_mutex / Windows handle)",
          .task = fio___lock_mytask_mutex,
      },
      {
          .name = NULL,
          .task = NULL,
      },
  };
  fprintf(stderr, "* Speed testing The following types:\n");
  for (size_t fn = 0; test_funcs[fn].name; ++fn) {
    fprintf(stderr,
            "\t%s\t(%zu bytes)\n",
            test_funcs[fn].type_name,
            test_funcs[fn].type_size);
  }

  start = fio_time_micro();
  for (size_t i = 0; i < FIO___LOCK_TEST_TASK; ++i) {
    FIO_COMPILER_GUARD;
  }
  end = fio_time_micro();
  fprintf(stderr,
          "\n* Speed testing locking schemes - no contention, short work (%zu "
          "mms):\n"
          "\t\t(%zu itterations)\n",
          (size_t)(end - start),
          (size_t)FIO___LOCK_TEST_TASK);

  for (size_t test_repeat = 0; test_repeat < FIO___LOCK_TEST_REPEAT;
       ++test_repeat) {
    if (FIO___LOCK_TEST_REPEAT > 1)
      fprintf(stderr,
              "%s (%zu)\n",
              (test_repeat ? "Round" : "Warmup"),
              test_repeat);
    for (size_t fn = 0; test_funcs[fn].name; ++fn) {
      test_funcs[fn].task(NULL); /* warmup */
      start = fio_time_micro();
      for (size_t i = 0; i < FIO___LOCK_TEST_TASK; ++i) {
        FIO_COMPILER_GUARD;
        test_funcs[fn].task(NULL);
      }
      end = fio_time_micro();
      fprintf(stderr,
              "\t%s: %zu mms\n",
              test_funcs[fn].name,
              (size_t)(end - start));
    }
  }

  fprintf(stderr,
          "\n* Speed testing locking schemes - no contention, long work ");
  start = fio_time_micro();
  for (size_t i = 0; i < FIO___LOCK_TEST_THREADS; ++i) {
    size_t result = 0;
    FIO_COMPILER_GUARD;
    fio___lock_speedtest_task_inner(&result);
  }
  end = fio_time_micro();
  fprintf(stderr, " %zu mms\n", (size_t)(end - start));
  clock_t long_work = end - start;
  fprintf(stderr, "(%zu mms):\n", (size_t)long_work);
  for (size_t test_repeat = 0; test_repeat < FIO___LOCK_TEST_REPEAT;
       ++test_repeat) {
    if (FIO___LOCK_TEST_REPEAT > 1)
      fprintf(stderr,
              "%s (%zu)\n",
              (test_repeat ? "Round" : "Warmup"),
              test_repeat);
    for (size_t fn = 0; test_funcs[fn].name; ++fn) {
      size_t result = 0;
      test_funcs[fn].task((void *)&result); /* warmup */
      result = 0;
      start = fio_time_micro();
      for (size_t i = 0; i < FIO___LOCK_TEST_THREADS; ++i) {
        FIO_COMPILER_GUARD;
        test_funcs[fn].task(&result);
      }
      end = fio_time_micro();
      fprintf(stderr,
              "\t%s: %zu mms (%zu mms)\n",
              test_funcs[fn].name,
              (size_t)(end - start),
              (size_t)(end - (start + long_work)));
      FIO_ASSERT(result == (FIO___LOCK_TEST_TASK * FIO___LOCK_TEST_THREADS),
                 "%s final result error.",
                 test_funcs[fn].name);
    }
  }

  fprintf(stderr,
          "\n* Speed testing locking schemes - %zu threads, long work (%zu "
          "mms):\n",
          (size_t)FIO___LOCK_TEST_THREADS,
          (size_t)long_work);
  for (size_t test_repeat = 0; test_repeat < FIO___LOCK_TEST_REPEAT;
       ++test_repeat) {
    if (FIO___LOCK_TEST_REPEAT > 1)
      fprintf(stderr,
              "%s (%zu)\n",
              (test_repeat ? "Round" : "Warmup"),
              test_repeat);
    for (size_t fn = 0; test_funcs[fn].name; ++fn) {
      size_t result = 0;
      test_funcs[fn].task((void *)&result); /* warmup */
      result = 0;
      start = fio_time_micro();
      for (size_t i = 0; i < FIO___LOCK_TEST_THREADS; ++i) {
        fio_thread_create(threads + i, test_funcs[fn].task, &result);
      }
      for (size_t i = 0; i < FIO___LOCK_TEST_THREADS; ++i) {
        fio_thread_join(threads + i);
      }
      end = fio_time_micro();
      fprintf(stderr,
              "\t%s: %zu mms (%zu mms)\n",
              test_funcs[fn].name,
              (size_t)(end - start),
              (size_t)(end - (start + long_work)));
      FIO_ASSERT(result == (FIO___LOCK_TEST_TASK * FIO___LOCK_TEST_THREADS),
                 "%s final result error.",
                 test_funcs[fn].name);
    }
  }
}

/* *****************************************************************************
Testing function
***************************************************************************** */

FIO_SFUNC void fio____test_dynamic_types__stack_poisoner(void) {
#define FIO___STACK_POISON_LENGTH (1ULL << 18)
  uint8_t buf[FIO___STACK_POISON_LENGTH];
  FIO_COMPILER_GUARD;
  FIO_MEMSET(buf, (int)(0xA0U), FIO___STACK_POISON_LENGTH);
  FIO_COMPILER_GUARD;
  fio_rand_bytes(buf, FIO___STACK_POISON_LENGTH);
  FIO_COMPILER_GUARD;
  fio_trylock(buf);
#undef FIO___STACK_POISON_LENGTH
}

FIO_SFUNC void fio_test_dynamic_types(void) {
  char *filename = (char *)FIO_INCLUDE_FILE;
  while (filename[0] == '.' && filename[1] == '/')
    filename += 2;
  fio____test_dynamic_types__stack_poisoner();
  fprintf(stderr, "===============\n");
  fprintf(stderr, "Testing facil.io CSTL (%s)\n", filename);
  fprintf(
      stderr,
      "Version: \x1B[1m" FIO_VERSION_STRING "\x1B[0m\n"
      "The facil.io library was originally coded by \x1B[1mBoaz Segev\x1B[0m.\n"
      "Please give credit where credit is due.\n"
      "\x1B[1mYour support is only fair\x1B[0m - give value for value.\n"
      "(code contributions / donations)\n\n");
  fprintf(stderr, "===============\n");
  FIO_LOG_DEBUG("example FIO_LOG_DEBUG message.");
  FIO_LOG_DEBUG2("example FIO_LOG_DEBUG2 message.");
  FIO_LOG_INFO("example FIO_LOG_INFO message.");
  FIO_LOG_WARNING("example FIO_LOG_WARNING message.");
  FIO_LOG_SECURITY("example FIO_LOG_SECURITY message.");
  FIO_LOG_ERROR("example FIO_LOG_ERROR message.");
  FIO_LOG_FATAL("example FIO_LOG_FATAL message.");
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, type_sizes)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, random)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, atomics)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, core)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, atol)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, math)();
  FIO_NAME_TEST(stl, math_speed)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, sort)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, url)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, glob_matching)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, imap_core)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, state)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, string_core_helpers)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, ary____test)();
  FIO_NAME_TEST(stl, ary2____test)();
  FIO_NAME_TEST(stl, ary3____test)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, uset___test_size_t)();
  FIO_NAME_TEST(stl, umap___test_size)();
  FIO_NAME_TEST(stl, omap___test_size_t)();
  FIO_NAME_TEST(stl, omap___test_size_lru)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, fio_big_str)();
  FIO_NAME_TEST(stl, fio_small_str)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, mustache)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, time)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, queue)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, cli)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, stream)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, poll)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, files)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, memalt)();
  fprintf(stderr, "===============\n");
  /* test memory allocator that initializes memory to zero */
  FIO_NAME_TEST(FIO_NAME(stl, fio_mem_test_safe), mem)();
  fprintf(stderr, "===============\n");
  /* test memory allocator that allows junk data in allocations */
  FIO_NAME_TEST(FIO_NAME(stl, fio_mem_test_unsafe), mem)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, sock)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, fiobj)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, io)();
  FIO_NAME_TEST(stl, pubsub)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, http_s)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, risky)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, sha1)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, sha2)();
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, chacha)();
#if !DEBUG
  fprintf(stderr, "===============\n");
  FIO_NAME_TEST(stl, lock_speed)();
#endif
  fprintf(stderr, "===============\n");
  {
    char timebuf[64];
    fio_time2rfc7231(timebuf, fio_time_real().tv_sec);
    fprintf(stderr,
            "On %s\n"
            "Testing \x1B[1mPASSED\x1B[0m "
            "for facil.io core version: "
            "\x1B[1m" FIO_VERSION_STRING "\x1B[0m"
            "\n",
            timebuf);
  }
  fprintf(stderr,
          "\nThe facil.io library was originally coded by \x1B[1mBoaz "
          "Segev\x1B[0m.\n"
          "\x1B[1mValue deserves to be valued.\x1B[0m\n"
          "(please consider code contributions / donations)\n\n");
}

/* *****************************************************************************
Testing cleanup
***************************************************************************** */
#undef FIO_TEST_ALL
#undef FIO_TEST_REPEAT
/* *****************************************************************************
C++ extern end
***************************************************************************** */
/* support C++ */
#ifdef __cplusplus
}
#endif
/* *****************************************************************************
Finish testing segment
***************************************************************************** */
#endif /* FIO_TEST_ALL / H___TESTS_FINISH___H */

#if defined(FIO___TEST_ALL_RECURSION)
#undef FIO___TEST_ALL_RECURSION
#define FIO_TEST_ALL
#endif
/* *****************************************************************************

***************************************************************************** */
/* ************************************************************************* */
#if !defined(H___FIO_CSTL_COMBINED___H)
/* *****************************************************************************
            Including facil.io modules for multi-file header option
***************************************************************************** */
#ifndef FIO_INCLUDE_FILE
#define FIO_INCLUDE_FILE "fio-stl/include.h"
#include "000 core.h"
#include "001 patches.h"
#endif

#include "000 dependencies.h"

#include "001 header.h"
#ifdef FIO_LOG
#include "001 logging.h"
#endif
#ifdef FIO_MEMALT
#include "001 memalt.h"
#endif

#ifdef FIO_ATOL
#include "002 atol.h"
#endif
#ifdef FIO_GLOB_MATCH
#include "002 glob matching.h"
#endif
#ifdef FIO_IMAP_CORE
#include "002 imap.h"
#endif
#ifdef FIO_MATH
#include "002 math.h"
#endif
#ifdef FIO_RAND
#include "002 random.h"
#endif
#ifdef FIO_SIGNAL
#include "002 signals.h"
#endif
#ifdef FIO_SORT_NAME
#include "002 sort.h"
#endif
#ifdef FIO_THREADS
#include "002 threads.h"
#endif
#if defined(FIO_URL) || defined(FIO_URI)
#include "002 url.h"
#endif

#ifdef FIO_FILES
#include "004 files.h"
#endif
#ifdef FIO_JSON
#include "004 json.h"
#endif
#ifdef FIO_SOCK
#include "004 sock.h"
#endif
#if defined(FIO_STATE) && !defined(FIO___RECURSIVE_INCLUDE)
#include "004 state callbacks.h"
#endif
#ifdef FIO_TIME
#include "004 time.h"
#endif

#if defined(FIO_CLI) && !defined(FIO___RECURSIVE_INCLUDE)
#include "005 cli.h"
#endif

#if defined(FIO_MEMORY_NAME) || defined(FIO_MALLOC) || defined(FIOBJ_MALLOC)
#include "010 mem.h"
#endif

#if defined(FIO_POLL) && !defined(FIO___RECURSIVE_INCLUDE)
#include "102 poll api.h"
#include "102 poll epoll.h"
#include "102 poll kqueue.h"
#include "102 poll poll.h"
#endif
#ifdef FIO_STR
#include "102 string core.h"
#endif
#ifdef FIO_STREAM
#include "102 stream.h"
#endif
#ifdef FIO_QUEUE
#include "102 queue.h"
#endif

#ifdef FIO_MUSTACHE
#include "104 mustache.h"
#endif

#if defined(FIO_STR_SMALL) || defined(FIO_STR_NAME)
#include "200 string.h"
#endif
#ifdef FIO_ARRAY_NAME
#include "201 array.h"
#endif
#if defined(FIO_UMAP_NAME) || defined(FIO_OMAP_NAME) || defined(FIO_MAP_NAME)
#include "210 map.h"
#endif

#if defined(FIO_MAP2_NAME)
#include "210 map2.h"
#endif

#include "249 reference counter.h" /* required: pointer tagging cleanup is here */

#if defined(FIO_FIOBJ) && !defined(FIO___RECURSIVE_INCLUDE)
#include "250 fiobj.h"
#endif

#ifdef FIO_CRYPTO_CORE
#include "150 crypto core.h"
#endif

#ifdef FIO_SHA1
#include "152 sha1.h"
#endif
#ifdef FIO_SHA2
#include "152 sha2.h"
#endif
#ifdef FIO_CHACHA
#include "152 chacha20poly1305.h"
#endif

#ifdef FIO_ED25519
#include "154 ed25519.h"
#endif

#if defined(FIO_IO) && !defined(FIO___RECURSIVE_INCLUDE)
#include "400 io api.h"
#include "401 io types.h"
#include "402 io reactor.h"
#if defined(HAVE_OPENSSL)
#include "411 openssl.h"
#endif
#endif /* FIO_IO */

#if defined(FIO_PUBSUB) && !defined(FIO___RECURSIVE_INCLUDE)
#include "420 pubsub.h"
#endif

#ifdef FIO_HTTP1_PARSER
#include "431 http1 parser.h"
#endif
#ifdef FIO_WEBSOCKET_PARSER
#include "431 websocket parser.h"
#endif

#if defined(FIO_HTTP_HANDLE) && !defined(FIO___RECURSIVE_INCLUDE)
#include "431 http handle.h"
#endif

#if defined(FIO_HTTP) && !defined(FIO___RECURSIVE_INCLUDE)
#include "439 http.h"
#endif

#ifndef FIO___DEV___
#include "700 cleanup.h"
#endif

#if defined(FIO_TEST_ALL) && !defined(H___FIO_TESTS_START___H)
#include "900 tests start.h"
#include "902 atol.h"
#include "902 atomics.h"
#include "902 cli.h"
#include "902 core.h"
#include "902 files.h"
#include "902 fiobj.h"
#include "902 glob matching.h"
#include "902 http handle.h"
#include "902 imap.h"
#include "902 io.h"
#include "902 math.h"
#include "902 memalt.h"
#include "902 mustache.h"
#include "902 poll.h"
#include "902 pubsub.h"
#include "902 queue.h"
#include "902 random.h"
#include "902 sock.h"
#include "902 sort.h"
#include "902 state callbacks.h"
#include "902 stream.h"
#include "902 string core.h"
#include "902 time.h"
#include "902 url.h"
#include "903 chacha.h"
#include "903 sha.h"
#include "998 tests finish.h"
#endif

#endif /* !H___FIO_CSTL_COMBINED___H */
/* ************************************************************************* */
