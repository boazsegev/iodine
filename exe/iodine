#!/usr/bin/env ruby
# frozen_string_literal: true
IODINE_PARSE_CLI = true
require 'iodine'

# Load Rack if available (assume it will be used)

require 'rack'

module Iodine
  # The Iodine::Base namespace is reserved for internal use and is NOT part of the public API.
  module Base
    # Command line interface. The Ruby CLI might be changed in future versions.
    module CLI

      def self.try_file filename
        return nil unless File.exist? filename
        ::Rack::Builder.parse_file filename
      end

      def self.get_app
        app = nil
        filename = Iodine::DEFAULT_SETTINGS[:filename_]
        if filename
          app = try_file filename
          app = try_file "#{filename}.ru" unless app
          unless app
            puts "* Couldn't find #{filename}\n  testing for config.ru\n"
            app = try_file "config.ru"
          end
        else
          app = try_file "config.ru";
        end
        app
      end

      def self.perform_warmup(app)
        # load anything marked with `autoload`, since autoload is niether thread safe nor fork friendly.
        Iodine.on_state(:on_start) do
          Module.constants.each do |n|
            begin
              Object.const_get(n)
            rescue StandardError => _e
            end
          end
          ::Rack::Builder.new(app) do |r|
            r.warmup do |a|
              client = ::Rack::MockRequest.new(a)
              client.get('/')
            end
          end
        end
      end

      def self.call
        app = get_app
        perform_warmup(app) if Iodine::DEFAULT_SETTINGS[:warmup_]
        Iodine::Rack.run(app)
      end
    end
  end
end

Iodine::Base::CLI.call
